/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToMessage;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Alt Sys Step BF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getAltSysStepBFToComboRule()
 * @model
 * @generated
 */
public interface AltSysStepBFToComboRule extends AbstractRule,
		AltStepBFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __step_stepAlternative_alt = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __alt_ref_altFlow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __useCase_flows_flow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object altFlow is really bound\n         JavaSDM.ensure ( altFlow != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object altFlow is really bound\n            JavaSDM.ensure ( altFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __step_stepAlternative_alt\n            __step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __step_actor_actor\n            __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __alt_ref_altFlow\n            __alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_step\n            __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __flow_steps_step\n            __flow_steps_step.setName (\"steps\");\n            // assign attribute __step_stepAlternative_alt\n            __step_stepAlternative_alt.setName (\"stepAlternative\");\n            // assign attribute __step_actor_actor\n            __step_actor_actor.setName (\"actor\");\n            // assign attribute __alt_ref_altFlow\n            __alt_ref_altFlow.setName (\"ref\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_stepAlternative_alt,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,alt,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,altFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__alt_ref_altFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_step,\"toBeTranslatedEdges\");\n\n            // create link\n            __step_actor_actor.setTrg( actor);\n\n\n            // create link\n            __flow_steps_step.setSrc( flow);\n\n\n            // create link\n            __flow_steps_step.setTrg( step);\n\n\n            // create link\n            __step_stepAlternative_alt.setSrc( step);\n\n\n            // create link\n            __step_actor_actor.setSrc( step);\n\n\n            // create link\n            __alt_ref_altFlow.setSrc( alt);\n\n\n            // create link\n            __step_stepAlternative_alt.setTrg( alt);\n\n\n            // create link\n            __alt_ref_altFlow.setTrg( altFlow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object altFlow is really bound\n            JavaSDM.ensure ( altFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, Actor actor, BasicFlow flow,
			UseCase useCase, PackageDeclaration packageDeclaration,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow altFlow = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      MessageOccurrenceSpecification messageSend = null;\n      InteractionOperand operand = null;\n      CombinedFragment combo = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      NormalStepToCombinedFragment stepToCombo = null;\n      StepAlternativeToInteractionOperand alternative1ToOperand = null;\n      InteractionConstraint guard = null;\n      FlowToInteractionFragment altFlowToOperand = null;\n      LiteralString spec = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge altFlowToOperand__target__operand = null;\n      EMoflonEdge line__coveredBy__combo = null;\n      EMoflonEdge operand__covered__line = null;\n      EMoflonEdge altFlowToOperand__source__altFlow = null;\n      EMoflonEdge stepToCombo__target__combo = null;\n      EMoflonEdge messageReceive__enclosingInteraction__interaction = null;\n      EMoflonEdge interaction__fragment__combo = null;\n      EMoflonEdge guard__specification__spec = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge line__coveredBy__messageSend = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge alternative1ToOperand__source__alt = null;\n      EMoflonEdge interaction__fragment__messageSend = null;\n      EMoflonEdge alternative1ToOperand__target__operand = null;\n      EMoflonEdge __step_stepAlternative_alt = null;\n      EMoflonEdge combo__covered__line = null;\n      EMoflonEdge stepToCombo__source__step = null;\n      EMoflonEdge combo__enclosingInteraction__interaction = null;\n      EMoflonEdge messageSend__enclosingInteraction__interaction = null;\n      EMoflonEdge messageSend__covered__line = null;\n      EMoflonEdge interaction__fragment__messageReceive = null;\n      EMoflonEdge __alt_ref_altFlow = null;\n      EMoflonEdge line__coveredBy__operand = null;\n      EMoflonEdge operand__guard__guard = null;\n      EMoflonEdge combo__operand__operand = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"altFlow\"));\n\n         // ensure correct type and really bound of object altFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         altFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object messageSend\n         messageSend = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object operand\n         operand = ModalSequenceDiagramFactory.eINSTANCE.createInteractionOperand();\n\n         // create object combo\n         combo = ModalSequenceDiagramFactory.eINSTANCE.createCombinedFragment();\n\n         // create object messageReceive\n         messageReceive = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object stepToCombo\n         stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToCombinedFragment();\n\n         // create object alternative1ToOperand\n         alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createStepAlternativeToInteractionOperand();\n\n         // create object guard\n         guard = ModalSequenceDiagramFactory.eINSTANCE.createInteractionConstraint();\n\n         // create object altFlowToOperand\n         altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // create object spec\n         spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();\n\n         // assign attribute combo\n         combo.setInteractionOperator ((ModalSequenceDiagram.InteractionOperatorKind)csp.getValue(\"combo\",\"interactionOperator\"));\n         // assign attribute guard\n         guard.setName ((java.lang.String)csp.getValue(\"guard\",\"name\"));\n         // assign attribute spec\n         spec.setValue ((java.lang.String)csp.getValue(\"spec\",\"value\"));\n\n         // create link\n         altFlowToOperand.setSource( altFlow);\n\n\n         // create link\n         messageSend.getCovered().add(line);\n\n\n         // create link\n         operand.getCovered().add(line);\n\n\n         // create link\n         combo.getCovered().add(line);\n\n\n         // create link\n         interaction.getFragment().add(messageSend);\n\n\n         // create link\n         combo.setEnclosingInteraction( interaction);\n\n\n         // create link\n         messageReceive.setEnclosingInteraction( interaction);\n\n\n         // create link\n         \tcombo.getOperand().add(operand); // add link\n\n\n         // create link\n         stepToCombo.setTarget( combo);\n\n\n         // create link\n         stepToCombo.setSource( step);\n\n\n         // create link\n         alternative1ToOperand.setSource( alt);\n\n\n         // create link\n         \toperand.setGuard(guard); // add link to one\n\n\n         // create link\n         altFlowToOperand.setTarget( operand);\n\n\n         // create link\n         alternative1ToOperand.setTarget( operand);\n\n\n         // create link\n         \tguard.setSpecification(spec); // add link to one\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object altFlow is really bound\n         JavaSDM.ensure ( altFlow != null );\n         // check object altFlowToOperand is really bound\n         JavaSDM.ensure ( altFlowToOperand != null );\n         // check object alternative1ToOperand is really bound\n         JavaSDM.ensure ( alternative1ToOperand != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,spec,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object altFlow is really bound\n         JavaSDM.ensure ( altFlow != null );\n         // check object altFlowToOperand is really bound\n         JavaSDM.ensure ( altFlowToOperand != null );\n         // check object alternative1ToOperand is really bound\n         JavaSDM.ensure ( alternative1ToOperand != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects alt and actor \n         JavaSDM.ensure ( !alt.equals (actor) );\n\n         // check isomorphic binding between objects altFlow and actor \n         JavaSDM.ensure ( !altFlow.equals (actor) );\n\n         // check isomorphic binding between objects altFlowToOperand and actor \n         JavaSDM.ensure ( !altFlowToOperand.equals (actor) );\n\n         // check isomorphic binding between objects alternative1ToOperand and actor \n         JavaSDM.ensure ( !alternative1ToOperand.equals (actor) );\n\n         // check isomorphic binding between objects combo and actor \n         JavaSDM.ensure ( !combo.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects guard and actor \n         JavaSDM.ensure ( !guard.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects operand and actor \n         JavaSDM.ensure ( !operand.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects spec and actor \n         JavaSDM.ensure ( !spec.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToCombo and actor \n         JavaSDM.ensure ( !stepToCombo.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects altFlow and alt \n         JavaSDM.ensure ( !altFlow.equals (alt) );\n\n         // check isomorphic binding between objects altFlowToOperand and alt \n         JavaSDM.ensure ( !altFlowToOperand.equals (alt) );\n\n         // check isomorphic binding between objects alternative1ToOperand and alt \n         JavaSDM.ensure ( !alternative1ToOperand.equals (alt) );\n\n         // check isomorphic binding between objects combo and alt \n         JavaSDM.ensure ( !combo.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects flowToInteraction and alt \n         JavaSDM.ensure ( !flowToInteraction.equals (alt) );\n\n         // check isomorphic binding between objects guard and alt \n         JavaSDM.ensure ( !guard.equals (alt) );\n\n         // check isomorphic binding between objects interaction and alt \n         JavaSDM.ensure ( !interaction.equals (alt) );\n\n         // check isomorphic binding between objects line and alt \n         JavaSDM.ensure ( !line.equals (alt) );\n\n         // check isomorphic binding between objects messageReceive and alt \n         JavaSDM.ensure ( !messageReceive.equals (alt) );\n\n         // check isomorphic binding between objects messageSend and alt \n         JavaSDM.ensure ( !messageSend.equals (alt) );\n\n         // check isomorphic binding between objects operand and alt \n         JavaSDM.ensure ( !operand.equals (alt) );\n\n         // check isomorphic binding between objects packageDeclaration and alt \n         JavaSDM.ensure ( !packageDeclaration.equals (alt) );\n\n         // check isomorphic binding between objects spec and alt \n         JavaSDM.ensure ( !spec.equals (alt) );\n\n         // check isomorphic binding between objects step and alt \n         JavaSDM.ensure ( !step.equals (alt) );\n\n         // check isomorphic binding between objects stepToCombo and alt \n         JavaSDM.ensure ( !stepToCombo.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects useCaseToInteraction and alt \n         JavaSDM.ensure ( !useCaseToInteraction.equals (alt) );\n\n         // check isomorphic binding between objects altFlowToOperand and altFlow \n         JavaSDM.ensure ( !altFlowToOperand.equals (altFlow) );\n\n         // check isomorphic binding between objects alternative1ToOperand and altFlow \n         JavaSDM.ensure ( !alternative1ToOperand.equals (altFlow) );\n\n         // check isomorphic binding between objects combo and altFlow \n         JavaSDM.ensure ( !combo.equals (altFlow) );\n\n         // check isomorphic binding between objects flow and altFlow \n         JavaSDM.ensure ( !flow.equals (altFlow) );\n\n         // check isomorphic binding between objects flowToInteraction and altFlow \n         JavaSDM.ensure ( !flowToInteraction.equals (altFlow) );\n\n         // check isomorphic binding between objects guard and altFlow \n         JavaSDM.ensure ( !guard.equals (altFlow) );\n\n         // check isomorphic binding between objects interaction and altFlow \n         JavaSDM.ensure ( !interaction.equals (altFlow) );\n\n         // check isomorphic binding between objects line and altFlow \n         JavaSDM.ensure ( !line.equals (altFlow) );\n\n         // check isomorphic binding between objects messageReceive and altFlow \n         JavaSDM.ensure ( !messageReceive.equals (altFlow) );\n\n         // check isomorphic binding between objects messageSend and altFlow \n         JavaSDM.ensure ( !messageSend.equals (altFlow) );\n\n         // check isomorphic binding between objects operand and altFlow \n         JavaSDM.ensure ( !operand.equals (altFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and altFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (altFlow) );\n\n         // check isomorphic binding between objects spec and altFlow \n         JavaSDM.ensure ( !spec.equals (altFlow) );\n\n         // check isomorphic binding between objects step and altFlow \n         JavaSDM.ensure ( !step.equals (altFlow) );\n\n         // check isomorphic binding between objects stepToCombo and altFlow \n         JavaSDM.ensure ( !stepToCombo.equals (altFlow) );\n\n         // check isomorphic binding between objects useCase and altFlow \n         JavaSDM.ensure ( !useCase.equals (altFlow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and altFlow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (altFlow) );\n\n         // check isomorphic binding between objects alternative1ToOperand and altFlowToOperand \n         JavaSDM.ensure ( !alternative1ToOperand.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects combo and altFlowToOperand \n         JavaSDM.ensure ( !combo.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects flow and altFlowToOperand \n         JavaSDM.ensure ( !flow.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects flowToInteraction and altFlowToOperand \n         JavaSDM.ensure ( !flowToInteraction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects guard and altFlowToOperand \n         JavaSDM.ensure ( !guard.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects interaction and altFlowToOperand \n         JavaSDM.ensure ( !interaction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects line and altFlowToOperand \n         JavaSDM.ensure ( !line.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects messageReceive and altFlowToOperand \n         JavaSDM.ensure ( !messageReceive.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects messageSend and altFlowToOperand \n         JavaSDM.ensure ( !messageSend.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects operand and altFlowToOperand \n         JavaSDM.ensure ( !operand.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and altFlowToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects spec and altFlowToOperand \n         JavaSDM.ensure ( !spec.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects step and altFlowToOperand \n         JavaSDM.ensure ( !step.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and altFlowToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects useCase and altFlowToOperand \n         JavaSDM.ensure ( !useCase.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and altFlowToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects combo and alternative1ToOperand \n         JavaSDM.ensure ( !combo.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flow and alternative1ToOperand \n         JavaSDM.ensure ( !flow.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flowToInteraction and alternative1ToOperand \n         JavaSDM.ensure ( !flowToInteraction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects guard and alternative1ToOperand \n         JavaSDM.ensure ( !guard.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects interaction and alternative1ToOperand \n         JavaSDM.ensure ( !interaction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects line and alternative1ToOperand \n         JavaSDM.ensure ( !line.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects messageReceive and alternative1ToOperand \n         JavaSDM.ensure ( !messageReceive.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects messageSend and alternative1ToOperand \n         JavaSDM.ensure ( !messageSend.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects operand and alternative1ToOperand \n         JavaSDM.ensure ( !operand.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and alternative1ToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects spec and alternative1ToOperand \n         JavaSDM.ensure ( !spec.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects step and alternative1ToOperand \n         JavaSDM.ensure ( !step.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and alternative1ToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects useCase and alternative1ToOperand \n         JavaSDM.ensure ( !useCase.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects flowToInteraction and combo \n         JavaSDM.ensure ( !flowToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects guard and combo \n         JavaSDM.ensure ( !guard.equals (combo) );\n\n         // check isomorphic binding between objects interaction and combo \n         JavaSDM.ensure ( !interaction.equals (combo) );\n\n         // check isomorphic binding between objects line and combo \n         JavaSDM.ensure ( !line.equals (combo) );\n\n         // check isomorphic binding between objects messageReceive and combo \n         JavaSDM.ensure ( !messageReceive.equals (combo) );\n\n         // check isomorphic binding between objects messageSend and combo \n         JavaSDM.ensure ( !messageSend.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects packageDeclaration and combo \n         JavaSDM.ensure ( !packageDeclaration.equals (combo) );\n\n         // check isomorphic binding between objects spec and combo \n         JavaSDM.ensure ( !spec.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToCombo and combo \n         JavaSDM.ensure ( !stepToCombo.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and combo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects guard and flow \n         JavaSDM.ensure ( !guard.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects spec and flow \n         JavaSDM.ensure ( !spec.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToCombo and flow \n         JavaSDM.ensure ( !stepToCombo.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects guard and flowToInteraction \n         JavaSDM.ensure ( !guard.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects operand and flowToInteraction \n         JavaSDM.ensure ( !operand.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects spec and flowToInteraction \n         JavaSDM.ensure ( !spec.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToCombo and flowToInteraction \n         JavaSDM.ensure ( !stepToCombo.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects interaction and guard \n         JavaSDM.ensure ( !interaction.equals (guard) );\n\n         // check isomorphic binding between objects line and guard \n         JavaSDM.ensure ( !line.equals (guard) );\n\n         // check isomorphic binding between objects messageReceive and guard \n         JavaSDM.ensure ( !messageReceive.equals (guard) );\n\n         // check isomorphic binding between objects messageSend and guard \n         JavaSDM.ensure ( !messageSend.equals (guard) );\n\n         // check isomorphic binding between objects operand and guard \n         JavaSDM.ensure ( !operand.equals (guard) );\n\n         // check isomorphic binding between objects packageDeclaration and guard \n         JavaSDM.ensure ( !packageDeclaration.equals (guard) );\n\n         // check isomorphic binding between objects spec and guard \n         JavaSDM.ensure ( !spec.equals (guard) );\n\n         // check isomorphic binding between objects step and guard \n         JavaSDM.ensure ( !step.equals (guard) );\n\n         // check isomorphic binding between objects stepToCombo and guard \n         JavaSDM.ensure ( !stepToCombo.equals (guard) );\n\n         // check isomorphic binding between objects useCase and guard \n         JavaSDM.ensure ( !useCase.equals (guard) );\n\n         // check isomorphic binding between objects useCaseToInteraction and guard \n         JavaSDM.ensure ( !useCaseToInteraction.equals (guard) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects operand and interaction \n         JavaSDM.ensure ( !operand.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects spec and interaction \n         JavaSDM.ensure ( !spec.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToCombo and interaction \n         JavaSDM.ensure ( !stepToCombo.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects operand and line \n         JavaSDM.ensure ( !operand.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects spec and line \n         JavaSDM.ensure ( !spec.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToCombo and line \n         JavaSDM.ensure ( !stepToCombo.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageReceive \n         JavaSDM.ensure ( !operand.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects spec and messageReceive \n         JavaSDM.ensure ( !spec.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToCombo and messageReceive \n         JavaSDM.ensure ( !stepToCombo.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageSend \n         JavaSDM.ensure ( !operand.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects spec and messageSend \n         JavaSDM.ensure ( !spec.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToCombo and messageSend \n         JavaSDM.ensure ( !stepToCombo.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and operand \n         JavaSDM.ensure ( !packageDeclaration.equals (operand) );\n\n         // check isomorphic binding between objects spec and operand \n         JavaSDM.ensure ( !spec.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToCombo and operand \n         JavaSDM.ensure ( !stepToCombo.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and operand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (operand) );\n\n         // check isomorphic binding between objects spec and packageDeclaration \n         JavaSDM.ensure ( !spec.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToCombo and packageDeclaration \n         JavaSDM.ensure ( !stepToCombo.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects step and spec \n         JavaSDM.ensure ( !step.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and spec \n         JavaSDM.ensure ( !stepToCombo.equals (spec) );\n\n         // check isomorphic binding between objects useCase and spec \n         JavaSDM.ensure ( !useCase.equals (spec) );\n\n         // check isomorphic binding between objects useCaseToInteraction and spec \n         JavaSDM.ensure ( !useCaseToInteraction.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and step \n         JavaSDM.ensure ( !stepToCombo.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToCombo \n         JavaSDM.ensure ( !useCase.equals (stepToCombo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToCombo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToCombo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object altFlowToOperand__target__operand\n         altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__combo\n         line__coveredBy__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object operand__covered__line\n         operand__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object altFlowToOperand__source__altFlow\n         altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToCombo__target__combo\n         stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__combo\n         interaction__fragment__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object guard__specification__spec\n         guard__specification__spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_actor_actor\n         __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__messageSend\n         line__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_step\n         __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alternative1ToOperand__source__alt\n         alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageSend\n         interaction__fragment__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alternative1ToOperand__target__operand\n         alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_stepAlternative_alt\n         __step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object combo__covered__line\n         combo__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToCombo__source__step\n         stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object combo__enclosingInteraction__interaction\n         combo__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__covered__line\n         messageSend__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageReceive\n         interaction__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __alt_ref_altFlow\n         __alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__operand\n         line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object operand__guard__guard\n         operand__guard__guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object combo__operand__operand\n         combo__operand__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"AltSysStepBFToComboRule\");\n         // assign attribute line__coveredBy__messageSend\n         line__coveredBy__messageSend.setName (\"coveredBy\");\n         // assign attribute messageSend__covered__line\n         messageSend__covered__line.setName (\"covered\");\n         // assign attribute combo__enclosingInteraction__interaction\n         combo__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__combo\n         interaction__fragment__combo.setName (\"fragment\");\n         // assign attribute messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageSend\n         interaction__fragment__messageSend.setName (\"fragment\");\n         // assign attribute messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageReceive\n         interaction__fragment__messageReceive.setName (\"fragment\");\n         // assign attribute __flow_steps_step\n         __flow_steps_step.setName (\"steps\");\n         // assign attribute __step_stepAlternative_alt\n         __step_stepAlternative_alt.setName (\"stepAlternative\");\n         // assign attribute __step_actor_actor\n         __step_actor_actor.setName (\"actor\");\n         // assign attribute __alt_ref_altFlow\n         __alt_ref_altFlow.setName (\"ref\");\n         // assign attribute combo__operand__operand\n         combo__operand__operand.setName (\"operand\");\n         // assign attribute line__coveredBy__combo\n         line__coveredBy__combo.setName (\"coveredBy\");\n         // assign attribute combo__covered__line\n         combo__covered__line.setName (\"covered\");\n         // assign attribute line__coveredBy__operand\n         line__coveredBy__operand.setName (\"coveredBy\");\n         // assign attribute operand__covered__line\n         operand__covered__line.setName (\"covered\");\n         // assign attribute stepToCombo__source__step\n         stepToCombo__source__step.setName (\"source\");\n         // assign attribute stepToCombo__target__combo\n         stepToCombo__target__combo.setName (\"target\");\n         // assign attribute operand__guard__guard\n         operand__guard__guard.setName (\"guard\");\n         // assign attribute alternative1ToOperand__source__alt\n         alternative1ToOperand__source__alt.setName (\"source\");\n         // assign attribute alternative1ToOperand__target__operand\n         alternative1ToOperand__target__operand.setName (\"target\");\n         // assign attribute guard__specification__spec\n         guard__specification__spec.setName (\"specification\");\n         // assign attribute altFlowToOperand__source__altFlow\n         altFlowToOperand__source__altFlow.setName (\"source\");\n         // assign attribute altFlowToOperand__target__operand\n         altFlowToOperand__target__operand.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand__source__altFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo__target__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard__specification__spec,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_step,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand__source__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_stepAlternative_alt,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__alt_ref_altFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__guard__guard,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__operand__operand,\"createdEdges\");\n\n         // create link\n         __step_actor_actor.setTrg( actor);\n\n\n         // create link\n         line__coveredBy__operand.setSrc( line);\n\n\n         // create link\n         line__coveredBy__combo.setSrc( line);\n\n\n         // create link\n         messageSend__covered__line.setTrg( line);\n\n\n         // create link\n         line__coveredBy__messageSend.setSrc( line);\n\n\n         // create link\n         combo__covered__line.setTrg( line);\n\n\n         // create link\n         operand__covered__line.setTrg( line);\n\n\n         // create link\n         interaction__fragment__messageSend.setTrg( messageSend);\n\n\n         // create link\n         line__coveredBy__messageSend.setTrg( messageSend);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setSrc( messageSend);\n\n\n         // create link\n         messageSend__covered__line.setSrc( messageSend);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         combo__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__fragment__combo.setSrc( interaction);\n\n\n         // create link\n         interaction__fragment__messageSend.setSrc( interaction);\n\n\n         // create link\n         interaction__fragment__messageReceive.setSrc( interaction);\n\n\n         // create link\n         combo__covered__line.setSrc( combo);\n\n\n         // create link\n         stepToCombo__target__combo.setTrg( combo);\n\n\n         // create link\n         interaction__fragment__combo.setTrg( combo);\n\n\n         // create link\n         line__coveredBy__combo.setTrg( combo);\n\n\n         // create link\n         combo__operand__operand.setSrc( combo);\n\n\n         // create link\n         combo__enclosingInteraction__interaction.setSrc( combo);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setSrc( messageReceive);\n\n\n         // create link\n         interaction__fragment__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __flow_steps_step.setSrc( flow);\n\n\n         // create link\n         __flow_steps_step.setTrg( step);\n\n\n         // create link\n         stepToCombo__source__step.setTrg( step);\n\n\n         // create link\n         __step_stepAlternative_alt.setSrc( step);\n\n\n         // create link\n         __step_actor_actor.setSrc( step);\n\n\n         // create link\n         __alt_ref_altFlow.setSrc( alt);\n\n\n         // create link\n         __step_stepAlternative_alt.setTrg( alt);\n\n\n         // create link\n         alternative1ToOperand__source__alt.setTrg( alt);\n\n\n         // create link\n         stepToCombo__source__step.setSrc( stepToCombo);\n\n\n         // create link\n         stepToCombo__target__combo.setSrc( stepToCombo);\n\n\n         // create link\n         operand__guard__guard.setSrc( operand);\n\n\n         // create link\n         line__coveredBy__operand.setTrg( operand);\n\n\n         // create link\n         operand__covered__line.setSrc( operand);\n\n\n         // create link\n         altFlowToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         combo__operand__operand.setTrg( operand);\n\n\n         // create link\n         alternative1ToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         alternative1ToOperand__source__alt.setSrc( alternative1ToOperand);\n\n\n         // create link\n         alternative1ToOperand__target__operand.setSrc( alternative1ToOperand);\n\n\n         // create link\n         operand__guard__guard.setTrg( guard);\n\n\n         // create link\n         guard__specification__spec.setSrc( guard);\n\n\n         // create link\n         guard__specification__spec.setTrg( spec);\n\n\n         // create link\n         __alt_ref_altFlow.setTrg( altFlow);\n\n\n         // create link\n         altFlowToOperand__source__altFlow.setTrg( altFlow);\n\n\n         // create link\n         altFlowToOperand__target__operand.setSrc( altFlowToOperand);\n\n\n         // create link\n         altFlowToOperand__source__altFlow.setSrc( altFlowToOperand);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,actor,line,messageSend,interaction,combo,flowToInteraction,messageReceive,flow,useCase,useCaseToInteraction,packageDeclaration,step,alt,stepToCombo,operand,alternative1ToOperand,guard,spec,altFlow,altFlowToOperand);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow altFlow = null;\n      BasicFlow flow = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __step_stepAlternative_alt = null;\n      EMoflonEdge __alt_ref_altFlow = null;\n      CSP csp = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterFlowToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"AltSysStepBFToComboRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"alt\"));\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n         _TmpObject = (match.getObject(\"altFlow\"));\n\n         // ensure correct type and really bound of object altFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         altFlow = (AlternativeFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from flow to flowToInteraction\n         fujaba__Success = false;\n\n         fujaba__IterFlowToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,FlowToInteractionFragment.class,\"source\")).iterator ();\n\n         while ( fujaba__IterFlowToFlowToInteraction.hasNext () )\n         {\n            try\n            {\n               flowToInteraction = (FlowToInteractionFragment) fujaba__IterFlowToFlowToInteraction.next ();\n\n               // check object flowToInteraction is really bound\n               JavaSDM.ensure ( flowToInteraction != null );\n               // bind object\n               _TmpObject = flowToInteraction.getTarget ();\n\n               // ensure correct type and really bound of object interaction\n               JavaSDM.ensure ( _TmpObject instanceof Interaction );\n               interaction = (Interaction) _TmpObject;\n\n               // iterate to-many link source from useCase to useCaseToInteraction\n               fujaba__Success = false;\n\n               fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,UseCaseToInteraction.class,\"source\")).iterator ();\n\n               while ( fujaba__IterUseCaseToUseCaseToInteraction.hasNext () )\n               {\n                  try\n                  {\n                     useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction.next ();\n\n                     // check object useCaseToInteraction is really bound\n                     JavaSDM.ensure ( useCaseToInteraction != null );\n                     // check link target from useCaseToInteraction to interaction\n                     JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                     ));\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object actor is really bound\n                        JavaSDM.ensure ( actor != null );\n                        // check object alt is really bound\n                        JavaSDM.ensure ( alt != null );\n                        // check object altFlow is really bound\n                        JavaSDM.ensure ( altFlow != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object flowToInteraction is really bound\n                        JavaSDM.ensure ( flowToInteraction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n                        // check object step is really bound\n                        JavaSDM.ensure ( step != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check object useCaseToInteraction is really bound\n                        JavaSDM.ensure ( useCaseToInteraction != null );\n                        // check link actor from step to actor\n                        JavaSDM.ensure (actor.equals (step.getActor ()\n                        ));\n\n                        // check link ref from alt to altFlow\n                        JavaSDM.ensure (altFlow.equals (alt.getRef ()\n                        ));\n\n                        // check link actors from actor to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link source from flowToInteraction to flow\n                        JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                        ));\n\n                        // check link source from useCaseToInteraction to useCase\n                        JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                        ));\n\n                        // check link stepAlternative from alt to step\n                        JavaSDM.ensure (step.equals (alt.eContainer()\n                        ));\n\n                        // check link steps from step to flow\n                        JavaSDM.ensure (flow.equals (step.eContainer()\n                        ));\n\n                        // check link target from flowToInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                        ));\n\n                        // check link target from useCaseToInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                        ));\n\n                        // check link useCases from useCase to packageDeclaration\n                        JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                        ));\n\n                        // iterate to-many link lifeline from interaction to line\n                        fujaba__Success = false;\n\n                        fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                        while ( fujaba__IterInteractionToLine.hasNext () )\n                        {\n                           try\n                           {\n                              line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // create object __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __step_actor_actor\n                              __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_lifeline_line\n                              __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_interaction_interaction\n                              __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_step\n                              __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __step_stepAlternative_alt\n                              __step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __alt_ref_altFlow\n                              __alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow.setName (\"source\");\n                              // assign attribute __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __line_interaction_interaction\n                              __line_interaction_interaction.setName (\"interaction\");\n                              // assign attribute __interaction_lifeline_line\n                              __interaction_lifeline_line.setName (\"lifeline\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase.setName (\"source\");\n                              // assign attribute __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __flow_steps_step\n                              __flow_steps_step.setName (\"steps\");\n                              // assign attribute __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                              // assign attribute __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor.setName (\"actors\");\n                              // assign attribute __step_stepAlternative_alt\n                              __step_stepAlternative_alt.setName (\"stepAlternative\");\n                              // assign attribute __step_actor_actor\n                              __step_actor_actor.setName (\"actor\");\n                              // assign attribute __alt_ref_altFlow\n                              __alt_ref_altFlow.setName (\"ref\");\n\n                              // create link\n                              __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __step_actor_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(line);\n\n\n                              // create link\n                              __interaction_lifeline_line.setTrg( line);\n\n\n                              // create link\n                              __line_interaction_interaction.setSrc( line);\n\n\n                              // create link\n                              __line_interaction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_lifeline_line.setSrc( interaction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setTrg( flow);\n\n\n                              // create link\n                              __flow_steps_step.setSrc( flow);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __step_stepAlternative_alt.setSrc( step);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(step);\n\n\n                              // create link\n                              __step_actor_actor.setSrc( step);\n\n\n                              // create link\n                              __flow_steps_step.setTrg( step);\n\n\n                              // create link\n                              __alt_ref_altFlow.setSrc( alt);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(alt);\n\n\n                              // create link\n                              __step_stepAlternative_alt.setTrg( alt);\n\n\n                              // create link\n                              __alt_ref_altFlow.setTrg( altFlow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(altFlow);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_actor_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__alt_ref_altFlow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_stepAlternative_alt,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,actor,line,interaction,flowToInteraction,flow,useCase,useCaseToInteraction,packageDeclaration,step,alt,altFlow));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"AltSysStepBFToComboRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"actor\", actor);\nmatch.registerObject(\"flow\", flow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"step\", step);\nmatch.registerObject(\"alt\", alt);\nmatch.registerObject(\"altFlow\", altFlow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, Actor actor, BasicFlow flow,
			UseCase useCase, PackageDeclaration packageDeclaration,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"system\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, Actor actor, BasicFlow flow,
			UseCase useCase, PackageDeclaration packageDeclaration,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"alt\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"altFlow.name\", true, csp);\r\nvar_altFlow_name.setValue(altFlow.getName());\r\nvar_altFlow_name.setType(\"\");\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", true, csp);\r\nvar_alt_condition.setValue(alt.getCondition());\r\nvar_alt_condition.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(\"guard.name\", csp);\r\nvar_guard_name.setType(\"\");\r\nVariable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(\"spec.value\", csp);\r\nvar_spec_value.setType(\"\");\r\nVariable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(\"combo.interactionOperator\", csp);\r\nvar_combo_interactionOperator.setType(\"EObject\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();Eq eq_0 = new Eq();EqInterOperKind eqInterOperKind = new EqInterOperKind();\r\n\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\ncsp.getConstraints().add(eqInterOperKind);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_altFlow_name,var_guard_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_alt_condition,var_spec_value);\r\neqInterOperKind.setRuleName(\"\");\r\neqInterOperKind.solve(var_combo_interactionOperator,literal0);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"alt\",alt);\r\nisApplicableMatch.registerObject(\"altFlow\",altFlow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Lifeline line, Interaction interaction,
			FlowToInteractionFragment flowToInteraction, BasicFlow flow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			PackageDeclaration packageDeclaration, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"stepToCombo\", stepToCombo);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"alternative1ToOperand\", alternative1ToOperand);\nruleresult.registerObject(\"guard\", guard);\nruleresult.registerObject(\"spec\", spec);\nruleresult.registerObject(\"altFlow\", altFlow);\nruleresult.registerObject(\"altFlowToOperand\", altFlowToOperand);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject actor,
			EObject line, EObject messageSend, EObject interaction,
			EObject combo, EObject flowToInteraction, EObject messageReceive,
			EObject flow, EObject useCase, EObject useCaseToInteraction,
			EObject packageDeclaration, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"step\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep()) && match.getObject(\"alt\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlowAlternative()) && match.getObject(\"altFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getAlternativeFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge __combo_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_combo = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n      EMoflonEdge __guard_specification_spec = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __line_coveredBy_messageSend = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge __messageSend_covered_line = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __interaction_fragment_messageSend\n            __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_operand_operand\n            __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_operand\n            __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_guard_guard\n            __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_enclosingInteraction_interaction\n            __combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_combo\n            __interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_combo\n            __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __guard_specification_spec\n            __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_covered_line\n            __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_messageSend\n            __line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __combo_covered_line\n            __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_covered_line\n            __messageSend_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __line_coveredBy_messageSend\n            __line_coveredBy_messageSend.setName (\"coveredBy\");\n            // assign attribute __messageSend_covered_line\n            __messageSend_covered_line.setName (\"covered\");\n            // assign attribute __combo_enclosingInteraction_interaction\n            __combo_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_combo\n            __interaction_fragment_combo.setName (\"fragment\");\n            // assign attribute __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageSend\n            __interaction_fragment_messageSend.setName (\"fragment\");\n            // assign attribute __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive.setName (\"fragment\");\n            // assign attribute __combo_operand_operand\n            __combo_operand_operand.setName (\"operand\");\n            // assign attribute __line_coveredBy_combo\n            __line_coveredBy_combo.setName (\"coveredBy\");\n            // assign attribute __combo_covered_line\n            __combo_covered_line.setName (\"covered\");\n            // assign attribute __line_coveredBy_operand\n            __line_coveredBy_operand.setName (\"coveredBy\");\n            // assign attribute __operand_covered_line\n            __operand_covered_line.setName (\"covered\");\n            // assign attribute __operand_guard_guard\n            __operand_guard_guard.setName (\"guard\");\n            // assign attribute __guard_specification_spec\n            __guard_specification_spec.setName (\"specification\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,guard,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,combo,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_operand_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,spec,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_guard_guard,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_combo,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_combo,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__guard_specification_spec,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageReceive,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageSend,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,operand,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            __messageSend_covered_line.setTrg( line);\n\n\n            // create link\n            __combo_covered_line.setTrg( line);\n\n\n            // create link\n            __line_coveredBy_messageSend.setSrc( line);\n\n\n            // create link\n            __line_coveredBy_operand.setSrc( line);\n\n\n            // create link\n            __operand_covered_line.setTrg( line);\n\n\n            // create link\n            __line_coveredBy_combo.setSrc( line);\n\n\n            // create link\n            __messageSend_covered_line.setSrc( messageSend);\n\n\n            // create link\n            __line_coveredBy_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n            // create link\n            __combo_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_fragment_messageSend.setSrc( interaction);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_fragment_combo.setSrc( interaction);\n\n\n            // create link\n            __combo_enclosingInteraction_interaction.setSrc( combo);\n\n\n            // create link\n            __interaction_fragment_combo.setTrg( combo);\n\n\n            // create link\n            __combo_covered_line.setSrc( combo);\n\n\n            // create link\n            __line_coveredBy_combo.setTrg( combo);\n\n\n            // create link\n            __combo_operand_operand.setSrc( combo);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n            // create link\n            __line_coveredBy_operand.setTrg( operand);\n\n\n            // create link\n            __operand_covered_line.setSrc( operand);\n\n\n            // create link\n            __operand_guard_guard.setSrc( operand);\n\n\n            // create link\n            __combo_operand_operand.setTrg( operand);\n\n\n            // create link\n            __guard_specification_spec.setSrc( guard);\n\n\n            // create link\n            __operand_guard_guard.setTrg( guard);\n\n\n            // create link\n            __guard_specification_spec.setTrg( spec);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"contextEdges\");\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      CombinedFragment combo = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      InteractionConstraint guard = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      InteractionOperand operand = null;\n      PackageDeclaration packageDeclaration = null;\n      LiteralString spec = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep step = null;\n      NormalStepToCombinedFragment stepToCombo = null;\n      AlternativeFlowAlternative alt = null;\n      AlternativeFlow altFlow = null;\n      StepAlternativeToInteractionOperand alternative1ToOperand = null;\n      FlowToInteractionFragment altFlowToOperand = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge step__stepAlternative__alt = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge stepToCombo__source__step = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge alternative1ToOperand__source__alt = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __interaction_fragment_combo = null;\n      EMoflonEdge __combo_enclosingInteraction_interaction = null;\n      EMoflonEdge altFlowToOperand__target__operand = null;\n      EMoflonEdge flow__steps__step = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge step__actor__actor = null;\n      EMoflonEdge __messageSend_covered_line = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __guard_specification_spec = null;\n      EMoflonEdge stepToCombo__target__combo = null;\n      EMoflonEdge altFlowToOperand__source__altFlow = null;\n      EMoflonEdge alternative1ToOperand__target__operand = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __line_coveredBy_messageSend = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge alt__ref__altFlow = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"guard\"));\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"spec\"));\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object step\n         step = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object stepToCombo\n         stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToCombinedFragment();\n\n         // create object alt\n         alt = UseCaseDSLFactory.eINSTANCE.createAlternativeFlowAlternative();\n\n         // create object altFlow\n         altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();\n\n         // create object alternative1ToOperand\n         alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createStepAlternativeToInteractionOperand();\n\n         // create object altFlowToOperand\n         altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // assign attribute alt\n         alt.setCondition ((java.lang.String)csp.getValue(\"alt\",\"condition\"));\n         // assign attribute altFlow\n         altFlow.setName ((java.lang.String)csp.getValue(\"altFlow\",\"name\"));\n\n         // create link\n         step.setActor( actor);\n\n\n         // create link\n         stepToCombo.setTarget( combo);\n\n\n         // create link\n         \tflow.getSteps().add(step); // add link\n\n\n         // create link\n         \tstep.getStepAlternative().add(alt); // add link\n\n\n         // create link\n         stepToCombo.setSource( step);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt,altFlow,\"ref\");\n\n         // create link\n         alternative1ToOperand.setSource( alt);\n\n\n         // create link\n         alternative1ToOperand.setTarget( operand);\n\n\n         // create link\n         altFlowToOperand.setTarget( operand);\n\n\n         // create link\n         altFlowToOperand.setSource( altFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object altFlow is really bound\n         JavaSDM.ensure ( altFlow != null );\n         // check object altFlowToOperand is really bound\n         JavaSDM.ensure ( altFlowToOperand != null );\n         // check object alternative1ToOperand is really bound\n         JavaSDM.ensure ( alternative1ToOperand != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,spec,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object alt is really bound\n         JavaSDM.ensure ( alt != null );\n         // check object altFlow is really bound\n         JavaSDM.ensure ( altFlow != null );\n         // check object altFlowToOperand is really bound\n         JavaSDM.ensure ( altFlowToOperand != null );\n         // check object alternative1ToOperand is really bound\n         JavaSDM.ensure ( alternative1ToOperand != null );\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects alt and actor \n         JavaSDM.ensure ( !alt.equals (actor) );\n\n         // check isomorphic binding between objects altFlow and actor \n         JavaSDM.ensure ( !altFlow.equals (actor) );\n\n         // check isomorphic binding between objects altFlowToOperand and actor \n         JavaSDM.ensure ( !altFlowToOperand.equals (actor) );\n\n         // check isomorphic binding between objects alternative1ToOperand and actor \n         JavaSDM.ensure ( !alternative1ToOperand.equals (actor) );\n\n         // check isomorphic binding between objects combo and actor \n         JavaSDM.ensure ( !combo.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects guard and actor \n         JavaSDM.ensure ( !guard.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects operand and actor \n         JavaSDM.ensure ( !operand.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects spec and actor \n         JavaSDM.ensure ( !spec.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToCombo and actor \n         JavaSDM.ensure ( !stepToCombo.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects altFlow and alt \n         JavaSDM.ensure ( !altFlow.equals (alt) );\n\n         // check isomorphic binding between objects altFlowToOperand and alt \n         JavaSDM.ensure ( !altFlowToOperand.equals (alt) );\n\n         // check isomorphic binding between objects alternative1ToOperand and alt \n         JavaSDM.ensure ( !alternative1ToOperand.equals (alt) );\n\n         // check isomorphic binding between objects combo and alt \n         JavaSDM.ensure ( !combo.equals (alt) );\n\n         // check isomorphic binding between objects flow and alt \n         JavaSDM.ensure ( !flow.equals (alt) );\n\n         // check isomorphic binding between objects flowToInteraction and alt \n         JavaSDM.ensure ( !flowToInteraction.equals (alt) );\n\n         // check isomorphic binding between objects guard and alt \n         JavaSDM.ensure ( !guard.equals (alt) );\n\n         // check isomorphic binding between objects interaction and alt \n         JavaSDM.ensure ( !interaction.equals (alt) );\n\n         // check isomorphic binding between objects line and alt \n         JavaSDM.ensure ( !line.equals (alt) );\n\n         // check isomorphic binding between objects messageReceive and alt \n         JavaSDM.ensure ( !messageReceive.equals (alt) );\n\n         // check isomorphic binding between objects messageSend and alt \n         JavaSDM.ensure ( !messageSend.equals (alt) );\n\n         // check isomorphic binding between objects operand and alt \n         JavaSDM.ensure ( !operand.equals (alt) );\n\n         // check isomorphic binding between objects packageDeclaration and alt \n         JavaSDM.ensure ( !packageDeclaration.equals (alt) );\n\n         // check isomorphic binding between objects spec and alt \n         JavaSDM.ensure ( !spec.equals (alt) );\n\n         // check isomorphic binding between objects step and alt \n         JavaSDM.ensure ( !step.equals (alt) );\n\n         // check isomorphic binding between objects stepToCombo and alt \n         JavaSDM.ensure ( !stepToCombo.equals (alt) );\n\n         // check isomorphic binding between objects useCase and alt \n         JavaSDM.ensure ( !useCase.equals (alt) );\n\n         // check isomorphic binding between objects useCaseToInteraction and alt \n         JavaSDM.ensure ( !useCaseToInteraction.equals (alt) );\n\n         // check isomorphic binding between objects altFlowToOperand and altFlow \n         JavaSDM.ensure ( !altFlowToOperand.equals (altFlow) );\n\n         // check isomorphic binding between objects alternative1ToOperand and altFlow \n         JavaSDM.ensure ( !alternative1ToOperand.equals (altFlow) );\n\n         // check isomorphic binding between objects combo and altFlow \n         JavaSDM.ensure ( !combo.equals (altFlow) );\n\n         // check isomorphic binding between objects flow and altFlow \n         JavaSDM.ensure ( !flow.equals (altFlow) );\n\n         // check isomorphic binding between objects flowToInteraction and altFlow \n         JavaSDM.ensure ( !flowToInteraction.equals (altFlow) );\n\n         // check isomorphic binding between objects guard and altFlow \n         JavaSDM.ensure ( !guard.equals (altFlow) );\n\n         // check isomorphic binding between objects interaction and altFlow \n         JavaSDM.ensure ( !interaction.equals (altFlow) );\n\n         // check isomorphic binding between objects line and altFlow \n         JavaSDM.ensure ( !line.equals (altFlow) );\n\n         // check isomorphic binding between objects messageReceive and altFlow \n         JavaSDM.ensure ( !messageReceive.equals (altFlow) );\n\n         // check isomorphic binding between objects messageSend and altFlow \n         JavaSDM.ensure ( !messageSend.equals (altFlow) );\n\n         // check isomorphic binding between objects operand and altFlow \n         JavaSDM.ensure ( !operand.equals (altFlow) );\n\n         // check isomorphic binding between objects packageDeclaration and altFlow \n         JavaSDM.ensure ( !packageDeclaration.equals (altFlow) );\n\n         // check isomorphic binding between objects spec and altFlow \n         JavaSDM.ensure ( !spec.equals (altFlow) );\n\n         // check isomorphic binding between objects step and altFlow \n         JavaSDM.ensure ( !step.equals (altFlow) );\n\n         // check isomorphic binding between objects stepToCombo and altFlow \n         JavaSDM.ensure ( !stepToCombo.equals (altFlow) );\n\n         // check isomorphic binding between objects useCase and altFlow \n         JavaSDM.ensure ( !useCase.equals (altFlow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and altFlow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (altFlow) );\n\n         // check isomorphic binding between objects alternative1ToOperand and altFlowToOperand \n         JavaSDM.ensure ( !alternative1ToOperand.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects combo and altFlowToOperand \n         JavaSDM.ensure ( !combo.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects flow and altFlowToOperand \n         JavaSDM.ensure ( !flow.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects flowToInteraction and altFlowToOperand \n         JavaSDM.ensure ( !flowToInteraction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects guard and altFlowToOperand \n         JavaSDM.ensure ( !guard.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects interaction and altFlowToOperand \n         JavaSDM.ensure ( !interaction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects line and altFlowToOperand \n         JavaSDM.ensure ( !line.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects messageReceive and altFlowToOperand \n         JavaSDM.ensure ( !messageReceive.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects messageSend and altFlowToOperand \n         JavaSDM.ensure ( !messageSend.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects operand and altFlowToOperand \n         JavaSDM.ensure ( !operand.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and altFlowToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects spec and altFlowToOperand \n         JavaSDM.ensure ( !spec.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects step and altFlowToOperand \n         JavaSDM.ensure ( !step.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and altFlowToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects useCase and altFlowToOperand \n         JavaSDM.ensure ( !useCase.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and altFlowToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (altFlowToOperand) );\n\n         // check isomorphic binding between objects combo and alternative1ToOperand \n         JavaSDM.ensure ( !combo.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flow and alternative1ToOperand \n         JavaSDM.ensure ( !flow.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flowToInteraction and alternative1ToOperand \n         JavaSDM.ensure ( !flowToInteraction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects guard and alternative1ToOperand \n         JavaSDM.ensure ( !guard.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects interaction and alternative1ToOperand \n         JavaSDM.ensure ( !interaction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects line and alternative1ToOperand \n         JavaSDM.ensure ( !line.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects messageReceive and alternative1ToOperand \n         JavaSDM.ensure ( !messageReceive.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects messageSend and alternative1ToOperand \n         JavaSDM.ensure ( !messageSend.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects operand and alternative1ToOperand \n         JavaSDM.ensure ( !operand.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects packageDeclaration and alternative1ToOperand \n         JavaSDM.ensure ( !packageDeclaration.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects spec and alternative1ToOperand \n         JavaSDM.ensure ( !spec.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects step and alternative1ToOperand \n         JavaSDM.ensure ( !step.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and alternative1ToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects useCase and alternative1ToOperand \n         JavaSDM.ensure ( !useCase.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (alternative1ToOperand) );\n\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects flowToInteraction and combo \n         JavaSDM.ensure ( !flowToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects guard and combo \n         JavaSDM.ensure ( !guard.equals (combo) );\n\n         // check isomorphic binding between objects interaction and combo \n         JavaSDM.ensure ( !interaction.equals (combo) );\n\n         // check isomorphic binding between objects line and combo \n         JavaSDM.ensure ( !line.equals (combo) );\n\n         // check isomorphic binding between objects messageReceive and combo \n         JavaSDM.ensure ( !messageReceive.equals (combo) );\n\n         // check isomorphic binding between objects messageSend and combo \n         JavaSDM.ensure ( !messageSend.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects packageDeclaration and combo \n         JavaSDM.ensure ( !packageDeclaration.equals (combo) );\n\n         // check isomorphic binding between objects spec and combo \n         JavaSDM.ensure ( !spec.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToCombo and combo \n         JavaSDM.ensure ( !stepToCombo.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and combo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (combo) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects guard and flow \n         JavaSDM.ensure ( !guard.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects spec and flow \n         JavaSDM.ensure ( !spec.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToCombo and flow \n         JavaSDM.ensure ( !stepToCombo.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects guard and flowToInteraction \n         JavaSDM.ensure ( !guard.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects operand and flowToInteraction \n         JavaSDM.ensure ( !operand.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects spec and flowToInteraction \n         JavaSDM.ensure ( !spec.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToCombo and flowToInteraction \n         JavaSDM.ensure ( !stepToCombo.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects interaction and guard \n         JavaSDM.ensure ( !interaction.equals (guard) );\n\n         // check isomorphic binding between objects line and guard \n         JavaSDM.ensure ( !line.equals (guard) );\n\n         // check isomorphic binding between objects messageReceive and guard \n         JavaSDM.ensure ( !messageReceive.equals (guard) );\n\n         // check isomorphic binding between objects messageSend and guard \n         JavaSDM.ensure ( !messageSend.equals (guard) );\n\n         // check isomorphic binding between objects operand and guard \n         JavaSDM.ensure ( !operand.equals (guard) );\n\n         // check isomorphic binding between objects packageDeclaration and guard \n         JavaSDM.ensure ( !packageDeclaration.equals (guard) );\n\n         // check isomorphic binding between objects spec and guard \n         JavaSDM.ensure ( !spec.equals (guard) );\n\n         // check isomorphic binding between objects step and guard \n         JavaSDM.ensure ( !step.equals (guard) );\n\n         // check isomorphic binding between objects stepToCombo and guard \n         JavaSDM.ensure ( !stepToCombo.equals (guard) );\n\n         // check isomorphic binding between objects useCase and guard \n         JavaSDM.ensure ( !useCase.equals (guard) );\n\n         // check isomorphic binding between objects useCaseToInteraction and guard \n         JavaSDM.ensure ( !useCaseToInteraction.equals (guard) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects operand and interaction \n         JavaSDM.ensure ( !operand.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects spec and interaction \n         JavaSDM.ensure ( !spec.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToCombo and interaction \n         JavaSDM.ensure ( !stepToCombo.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects operand and line \n         JavaSDM.ensure ( !operand.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects spec and line \n         JavaSDM.ensure ( !spec.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToCombo and line \n         JavaSDM.ensure ( !stepToCombo.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageReceive \n         JavaSDM.ensure ( !operand.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects spec and messageReceive \n         JavaSDM.ensure ( !spec.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToCombo and messageReceive \n         JavaSDM.ensure ( !stepToCombo.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects operand and messageSend \n         JavaSDM.ensure ( !operand.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects spec and messageSend \n         JavaSDM.ensure ( !spec.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToCombo and messageSend \n         JavaSDM.ensure ( !stepToCombo.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects packageDeclaration and operand \n         JavaSDM.ensure ( !packageDeclaration.equals (operand) );\n\n         // check isomorphic binding between objects spec and operand \n         JavaSDM.ensure ( !spec.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToCombo and operand \n         JavaSDM.ensure ( !stepToCombo.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects useCaseToInteraction and operand \n         JavaSDM.ensure ( !useCaseToInteraction.equals (operand) );\n\n         // check isomorphic binding between objects spec and packageDeclaration \n         JavaSDM.ensure ( !spec.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToCombo and packageDeclaration \n         JavaSDM.ensure ( !stepToCombo.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects step and spec \n         JavaSDM.ensure ( !step.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and spec \n         JavaSDM.ensure ( !stepToCombo.equals (spec) );\n\n         // check isomorphic binding between objects useCase and spec \n         JavaSDM.ensure ( !useCase.equals (spec) );\n\n         // check isomorphic binding between objects useCaseToInteraction and spec \n         JavaSDM.ensure ( !useCaseToInteraction.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and step \n         JavaSDM.ensure ( !stepToCombo.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToCombo \n         JavaSDM.ensure ( !useCase.equals (stepToCombo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToCombo \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToCombo) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object step__stepAlternative__alt\n         step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToCombo__source__step\n         stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __combo_covered_line\n         __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alternative1ToOperand__source__alt\n         alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __combo_operand_operand\n         __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_combo\n         __interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __combo_enclosingInteraction_interaction\n         __combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object altFlowToOperand__target__operand\n         altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__step\n         flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_guard_guard\n         __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__actor__actor\n         step__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_covered_line\n         __messageSend_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_operand\n         __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __guard_specification_spec\n         __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToCombo__target__combo\n         stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object altFlowToOperand__source__altFlow\n         altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alternative1ToOperand__target__operand\n         alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageSend\n         __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_messageSend\n         __line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_covered_line\n         __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object alt__ref__altFlow\n         alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_combo\n         __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"AltSysStepBFToComboRule\");\n         // assign attribute __line_coveredBy_messageSend\n         __line_coveredBy_messageSend.setName (\"coveredBy\");\n         // assign attribute __messageSend_covered_line\n         __messageSend_covered_line.setName (\"covered\");\n         // assign attribute __combo_enclosingInteraction_interaction\n         __combo_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_combo\n         __interaction_fragment_combo.setName (\"fragment\");\n         // assign attribute __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageSend\n         __interaction_fragment_messageSend.setName (\"fragment\");\n         // assign attribute __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive.setName (\"fragment\");\n         // assign attribute flow__steps__step\n         flow__steps__step.setName (\"steps\");\n         // assign attribute step__stepAlternative__alt\n         step__stepAlternative__alt.setName (\"stepAlternative\");\n         // assign attribute step__actor__actor\n         step__actor__actor.setName (\"actor\");\n         // assign attribute alt__ref__altFlow\n         alt__ref__altFlow.setName (\"ref\");\n         // assign attribute __combo_operand_operand\n         __combo_operand_operand.setName (\"operand\");\n         // assign attribute __line_coveredBy_combo\n         __line_coveredBy_combo.setName (\"coveredBy\");\n         // assign attribute __combo_covered_line\n         __combo_covered_line.setName (\"covered\");\n         // assign attribute __line_coveredBy_operand\n         __line_coveredBy_operand.setName (\"coveredBy\");\n         // assign attribute __operand_covered_line\n         __operand_covered_line.setName (\"covered\");\n         // assign attribute stepToCombo__source__step\n         stepToCombo__source__step.setName (\"source\");\n         // assign attribute stepToCombo__target__combo\n         stepToCombo__target__combo.setName (\"target\");\n         // assign attribute __operand_guard_guard\n         __operand_guard_guard.setName (\"guard\");\n         // assign attribute alternative1ToOperand__source__alt\n         alternative1ToOperand__source__alt.setName (\"source\");\n         // assign attribute alternative1ToOperand__target__operand\n         alternative1ToOperand__target__operand.setName (\"target\");\n         // assign attribute __guard_specification_spec\n         __guard_specification_spec.setName (\"specification\");\n         // assign attribute altFlowToOperand__source__altFlow\n         altFlowToOperand__source__altFlow.setName (\"source\");\n         // assign attribute altFlowToOperand__target__operand\n         altFlowToOperand__target__operand.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__stepAlternative__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand__source__alt,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_operand_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_combo,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_guard_guard,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__guard_specification_spec,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToCombo__target__combo,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,altFlowToOperand__source__altFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alternative1ToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,alt__ref__altFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_combo,\"translatedEdges\");\n\n         // create link\n         step__actor__actor.setTrg( actor);\n\n\n         // create link\n         __operand_covered_line.setTrg( line);\n\n\n         // create link\n         __messageSend_covered_line.setTrg( line);\n\n\n         // create link\n         __line_coveredBy_operand.setSrc( line);\n\n\n         // create link\n         __line_coveredBy_messageSend.setSrc( line);\n\n\n         // create link\n         __combo_covered_line.setTrg( line);\n\n\n         // create link\n         __line_coveredBy_combo.setSrc( line);\n\n\n         // create link\n         __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n         // create link\n         __messageSend_covered_line.setSrc( messageSend);\n\n\n         // create link\n         __line_coveredBy_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __interaction_fragment_messageSend.setSrc( interaction);\n\n\n         // create link\n         __interaction_fragment_combo.setSrc( interaction);\n\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __combo_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __combo_enclosingInteraction_interaction.setSrc( combo);\n\n\n         // create link\n         __combo_covered_line.setSrc( combo);\n\n\n         // create link\n         __interaction_fragment_combo.setTrg( combo);\n\n\n         // create link\n         stepToCombo__target__combo.setTrg( combo);\n\n\n         // create link\n         __combo_operand_operand.setSrc( combo);\n\n\n         // create link\n         __line_coveredBy_combo.setTrg( combo);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n         // create link\n         flow__steps__step.setSrc( flow);\n\n\n         // create link\n         step__actor__actor.setSrc( step);\n\n\n         // create link\n         stepToCombo__source__step.setTrg( step);\n\n\n         // create link\n         flow__steps__step.setTrg( step);\n\n\n         // create link\n         step__stepAlternative__alt.setSrc( step);\n\n\n         // create link\n         step__stepAlternative__alt.setTrg( alt);\n\n\n         // create link\n         alt__ref__altFlow.setSrc( alt);\n\n\n         // create link\n         alternative1ToOperand__source__alt.setTrg( alt);\n\n\n         // create link\n         stepToCombo__target__combo.setSrc( stepToCombo);\n\n\n         // create link\n         stepToCombo__source__step.setSrc( stepToCombo);\n\n\n         // create link\n         altFlowToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         __operand_covered_line.setSrc( operand);\n\n\n         // create link\n         __combo_operand_operand.setTrg( operand);\n\n\n         // create link\n         alternative1ToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         __operand_guard_guard.setSrc( operand);\n\n\n         // create link\n         __line_coveredBy_operand.setTrg( operand);\n\n\n         // create link\n         alternative1ToOperand__target__operand.setSrc( alternative1ToOperand);\n\n\n         // create link\n         alternative1ToOperand__source__alt.setSrc( alternative1ToOperand);\n\n\n         // create link\n         __operand_guard_guard.setTrg( guard);\n\n\n         // create link\n         __guard_specification_spec.setSrc( guard);\n\n\n         // create link\n         __guard_specification_spec.setTrg( spec);\n\n\n         // create link\n         alt__ref__altFlow.setTrg( altFlow);\n\n\n         // create link\n         altFlowToOperand__source__altFlow.setTrg( altFlow);\n\n\n         // create link\n         altFlowToOperand__target__operand.setSrc( altFlowToOperand);\n\n\n         // create link\n         altFlowToOperand__source__altFlow.setSrc( altFlowToOperand);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,actor,line,messageSend,interaction,combo,flowToInteraction,messageReceive,flow,useCase,useCaseToInteraction,packageDeclaration,step,alt,stepToCombo,operand,alternative1ToOperand,guard,spec,altFlow,altFlowToOperand);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      CombinedFragment combo = null;\n      InteractionConstraint guard = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      InteractionOperand operand = null;\n      LiteralString spec = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __combo_covered_line = null;\n      EMoflonEdge __line_coveredBy_combo = null;\n      EMoflonEdge __line_coveredBy_operand = null;\n      EMoflonEdge __operand_covered_line = null;\n      EMoflonEdge __messageSend_covered_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __line_coveredBy_messageSend = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      EMoflonEdge __interaction_fragment_combo = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __combo_enclosingInteraction_interaction = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge __guard_specification_spec = null;\n      CSP csp = null;\n      Iterator fujaba__IterPackageDeclarationToActor = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterInteractionToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      BasicFlow flow = null;\n      Iterator fujaba__IterInteractionToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"AltSysStepBFToComboRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (match.getObject(\"guard\"));\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (match.getObject(\"spec\"));\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link target from interaction to flowToInteraction\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,FlowToInteractionFragment.class,\"target\")).iterator ();\n\n         while ( fujaba__IterInteractionToFlowToInteraction.hasNext () )\n         {\n            try\n            {\n               flowToInteraction = (FlowToInteractionFragment) fujaba__IterInteractionToFlowToInteraction.next ();\n\n               // check object flowToInteraction is really bound\n               JavaSDM.ensure ( flowToInteraction != null );\n               // bind object\n               _TmpObject = flowToInteraction.getSource ();\n\n               // ensure correct type and really bound of object flow\n               JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n               flow = (BasicFlow) _TmpObject;\n\n               // iterate to-many link target from interaction to useCaseToInteraction\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,UseCaseToInteraction.class,\"target\")).iterator ();\n\n               while ( fujaba__IterInteractionToUseCaseToInteraction.hasNext () )\n               {\n                  try\n                  {\n                     useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction.next ();\n\n                     // check object useCaseToInteraction is really bound\n                     JavaSDM.ensure ( useCaseToInteraction != null );\n                     // bind object\n                     useCase = useCaseToInteraction.getSource ();\n\n                     // check object useCase is really bound\n                     JavaSDM.ensure ( useCase != null );\n\n                     // story node \'find context\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object combo is really bound\n                        JavaSDM.ensure ( combo != null );\n                        // check object flow is really bound\n                        JavaSDM.ensure ( flow != null );\n                        // check object flowToInteraction is really bound\n                        JavaSDM.ensure ( flowToInteraction != null );\n                        // check object guard is really bound\n                        JavaSDM.ensure ( guard != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check object operand is really bound\n                        JavaSDM.ensure ( operand != null );\n                        // check object spec is really bound\n                        JavaSDM.ensure ( spec != null );\n                        // check object useCase is really bound\n                        JavaSDM.ensure ( useCase != null );\n                        // check object useCaseToInteraction is really bound\n                        JavaSDM.ensure ( useCaseToInteraction != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from combo to interaction\n                        JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link guard from operand to guard\n                        JavaSDM.ensure (guard.equals (operand.getGuard ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link flows from flow to useCase\n                        JavaSDM.ensure (useCase.equals (flow.eContainer()\n                        ));\n\n                        // check link operand from operand to combo\n                        JavaSDM.ensure (combo.equals (operand.eContainer()\n                        ));\n\n                        // check link source from flowToInteraction to flow\n                        JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                        ));\n\n                        // check link source from useCaseToInteraction to useCase\n                        JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                        ));\n\n                        // check link specification from spec to guard\n                        JavaSDM.ensure (guard.equals (spec.eContainer()\n                        ));\n\n                        // check link target from flowToInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                        ));\n\n                        // check link target from useCaseToInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                        ));\n\n                        // bind object\n                        packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                        // check object packageDeclaration is really bound\n                        JavaSDM.ensure ( packageDeclaration != null );\n\n                        // check if contained via correct reference\n                        JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n                        // check link coveredBy from combo to line\n                        JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                        // check link coveredBy from messageSend to line\n                        JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                        // check link coveredBy from operand to line\n                        JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                        // iterate to-many link actors from packageDeclaration to actor\n                        fujaba__Success = false;\n\n                        fujaba__IterPackageDeclarationToActor = new ArrayList(packageDeclaration.getActors()).iterator ();\n\n                        while ( fujaba__IterPackageDeclarationToActor.hasNext () )\n                        {\n                           try\n                           {\n                              actor = (Actor) fujaba__IterPackageDeclarationToActor.next ();\n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __combo_covered_line\n                              __combo_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_coveredBy_combo\n                              __line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_coveredBy_operand\n                              __line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __operand_covered_line\n                              __operand_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageSend_covered_line\n                              __messageSend_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_interaction_interaction\n                              __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_lifeline_line\n                              __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_coveredBy_messageSend\n                              __line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageSend_enclosingInteraction_interaction\n                              __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_fragment_messageSend\n                              __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_fragment_combo\n                              __interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageReceive_enclosingInteraction_interaction\n                              __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_fragment_messageReceive\n                              __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __combo_enclosingInteraction_interaction\n                              __combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __combo_operand_operand\n                              __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __operand_guard_guard\n                              __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __guard_specification_spec\n                              __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __line_coveredBy_messageSend\n                              __line_coveredBy_messageSend.setName (\"coveredBy\");\n                              // assign attribute __messageSend_covered_line\n                              __messageSend_covered_line.setName (\"covered\");\n                              // assign attribute __combo_enclosingInteraction_interaction\n                              __combo_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                              // assign attribute __interaction_fragment_combo\n                              __interaction_fragment_combo.setName (\"fragment\");\n                              // assign attribute __messageSend_enclosingInteraction_interaction\n                              __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                              // assign attribute __interaction_fragment_messageSend\n                              __interaction_fragment_messageSend.setName (\"fragment\");\n                              // assign attribute __messageReceive_enclosingInteraction_interaction\n                              __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                              // assign attribute __interaction_fragment_messageReceive\n                              __interaction_fragment_messageReceive.setName (\"fragment\");\n                              // assign attribute __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow.setName (\"source\");\n                              // assign attribute __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __line_interaction_interaction\n                              __line_interaction_interaction.setName (\"interaction\");\n                              // assign attribute __interaction_lifeline_line\n                              __interaction_lifeline_line.setName (\"lifeline\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase.setName (\"source\");\n                              // assign attribute __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                              // assign attribute __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor.setName (\"actors\");\n                              // assign attribute __combo_operand_operand\n                              __combo_operand_operand.setName (\"operand\");\n                              // assign attribute __line_coveredBy_combo\n                              __line_coveredBy_combo.setName (\"coveredBy\");\n                              // assign attribute __combo_covered_line\n                              __combo_covered_line.setName (\"covered\");\n                              // assign attribute __line_coveredBy_operand\n                              __line_coveredBy_operand.setName (\"coveredBy\");\n                              // assign attribute __operand_covered_line\n                              __operand_covered_line.setName (\"covered\");\n                              // assign attribute __operand_guard_guard\n                              __operand_guard_guard.setName (\"guard\");\n                              // assign attribute __guard_specification_spec\n                              __guard_specification_spec.setName (\"specification\");\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                              // create link\n                              __combo_covered_line.setTrg( line);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(line);\n\n\n                              // create link\n                              __line_coveredBy_combo.setSrc( line);\n\n\n                              // create link\n                              __line_coveredBy_operand.setSrc( line);\n\n\n                              // create link\n                              __operand_covered_line.setTrg( line);\n\n\n                              // create link\n                              __messageSend_covered_line.setTrg( line);\n\n\n                              // create link\n                              __line_interaction_interaction.setSrc( line);\n\n\n                              // create link\n                              __interaction_lifeline_line.setTrg( line);\n\n\n                              // create link\n                              __line_coveredBy_messageSend.setSrc( line);\n\n\n                              // create link\n                              __line_coveredBy_messageSend.setTrg( messageSend);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(messageSend);\n\n\n                              // create link\n                              __messageSend_covered_line.setSrc( messageSend);\n\n\n                              // create link\n                              __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n                              // create link\n                              __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n                              // create link\n                              __line_interaction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_fragment_combo.setSrc( interaction);\n\n\n                              // create link\n                              __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_lifeline_line.setSrc( interaction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                              // create link\n                              __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n                              // create link\n                              __interaction_fragment_messageSend.setSrc( interaction);\n\n\n                              // create link\n                              __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __combo_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_fragment_combo.setTrg( combo);\n\n\n                              // create link\n                              __combo_covered_line.setSrc( combo);\n\n\n                              // create link\n                              __combo_enclosingInteraction_interaction.setSrc( combo);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(combo);\n\n\n                              // create link\n                              __line_coveredBy_combo.setTrg( combo);\n\n\n                              // create link\n                              __combo_operand_operand.setSrc( combo);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                              // create link\n                              __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n                              // create link\n                              __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(messageReceive);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setTrg( flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                              // create link\n                              __operand_guard_guard.setSrc( operand);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(operand);\n\n\n                              // create link\n                              __combo_operand_operand.setTrg( operand);\n\n\n                              // create link\n                              __line_coveredBy_operand.setTrg( operand);\n\n\n                              // create link\n                              __operand_covered_line.setSrc( operand);\n\n\n                              // create link\n                              __guard_specification_spec.setSrc( guard);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(guard);\n\n\n                              // create link\n                              __operand_guard_guard.setTrg( guard);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(spec);\n\n\n                              // create link\n                              __guard_specification_spec.setTrg( spec);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_covered_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_operand,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_operand_operand,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageReceive,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_combo,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_enclosingInteraction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_enclosingInteraction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_enclosingInteraction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_covered_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__guard_specification_spec,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_messageSend,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_combo,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_covered_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_guard_guard,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageSend,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,actor,line,messageSend,interaction,combo,flowToInteraction,messageReceive,flow,useCase,useCaseToInteraction,packageDeclaration,operand,guard,spec));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"AltSysStepBFToComboRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n                        }\n                        JavaSDM.ensure (fujaba__Success);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"line\", line);\nmatch.registerObject(\"messageSend\", messageSend);\nmatch.registerObject(\"interaction\", interaction);\nmatch.registerObject(\"combo\", combo);\nmatch.registerObject(\"messageReceive\", messageReceive);\nmatch.registerObject(\"operand\", operand);\nmatch.registerObject(\"guard\", guard);\nmatch.registerObject(\"spec\", spec);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"alt\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE.createVariable(\"combo.interactionOperator\", true, csp);\r\nvar_combo_interactionOperator.setValue(combo.getInteractionOperator());\r\nvar_combo_interactionOperator.setType(\"EObject\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\nEqInterOperKind eqInterOperKind = new EqInterOperKind();\r\n\r\ncsp.getConstraints().add(eqInterOperKind);\r\n\r\n// Solve CSP\r\neqInterOperKind.setRuleName(\"\");\r\neqInterOperKind.solve(var_combo_interactionOperator,literal0);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction, CombinedFragment combo,
			MessageOccurrenceSpecification messageReceive,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\nVariable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(\"literal0\", true, csp);\r\nliteral0.setValue(\"system\");\r\nliteral0.setType(\"String\");\r\n\r\n// Create attribute variables\r\nVariable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.type\", true, csp);\r\nvar_actor_type.setValue(actor.getType());\r\nvar_actor_type.setType(\"EObject\");\r\nVariable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(\"guard.name\", true, csp);\r\nvar_guard_name.setValue(guard.getName());\r\nvar_guard_name.setType(\"\");\r\nVariable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(\"spec.value\", true, csp);\r\nvar_spec_value.setValue(spec.getValue());\r\nvar_spec_value.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"altFlow.name\", csp);\r\nvar_altFlow_name.setType(\"\");\r\nVariable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(\"alt.condition\", csp);\r\nvar_alt_condition.setType(\"\");\r\n\r\n// Create constraints\r\nEqActorType eqActorType = new EqActorType();Eq eq = new Eq();Eq eq_0 = new Eq();\r\n\r\ncsp.getConstraints().add(eqActorType);\r\ncsp.getConstraints().add(eq);\r\ncsp.getConstraints().add(eq_0);\r\n\r\n// Solve CSP\r\neqActorType.setRuleName(\"\");\r\neqActorType.solve(var_actor_type,literal0);\r\neq.setRuleName(\"\");\r\neq.solve(var_altFlow_name,var_guard_name);\r\neq_0.setRuleName(\"\");\r\neq_0.solve(var_alt_condition,var_spec_value);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"messageSend\",messageSend);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"combo\",combo);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"messageReceive\",messageReceive);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"operand\",operand);\r\nisApplicableMatch.registerObject(\"guard\",guard);\r\nisApplicableMatch.registerObject(\"spec\",spec);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			Interaction interaction, CombinedFragment combo,
			FlowToInteractionFragment flowToInteraction,
			MessageOccurrenceSpecification messageReceive, BasicFlow flow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			PackageDeclaration packageDeclaration, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"alt\", alt);\nruleresult.registerObject(\"stepToCombo\", stepToCombo);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"alternative1ToOperand\", alternative1ToOperand);\nruleresult.registerObject(\"guard\", guard);\nruleresult.registerObject(\"spec\", spec);\nruleresult.registerObject(\"altFlow\", altFlow);\nruleresult.registerObject(\"altFlowToOperand\", altFlowToOperand);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject actor,
			EObject line, EObject messageSend, EObject interaction,
			EObject combo, EObject flowToInteraction, EObject messageReceive,
			EObject flow, EObject useCase, EObject useCaseToInteraction,
			EObject packageDeclaration, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"messageSend\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"combo\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getCombinedFragment()) && match.getObject(\"messageReceive\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"operand\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionOperand()) && match.getObject(\"guard\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionConstraint()) && match.getObject(\"spec\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLiteralString());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_845593 = null;\n      InteractionOperand __DEC_messageReceive_fragment_568572 = null;\n      InteractionOperand __DEC_messageSend_fragment_118540 = null;\n      Interaction __DEC_operand_enclosingInteraction_323222 = null;\n      InteractionOperand __DEC_operand_fragment_285151 = null;\n      InteractionOperand __DEC_guard_guard_528509 = null;\n      CombinedFragment __DEC_operand_operand_821911 = null;\n      Constraint __DEC_spec_specification_947711 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterLineToCombo = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // iterate to-many link coveredBy from line to operand\n         fujaba__Success = false;\n\n         fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToOperand.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToOperand.next ();\n\n               // ensure correct type and really bound of object operand\n               JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n               operand = (InteractionOperand) _TmpObject;\n               // bind object\n               guard = operand.getGuard ();\n\n               // check object guard is really bound\n               JavaSDM.ensure ( guard != null );\n\n               // bind object\n               _TmpObject = guard.getSpecification ();\n\n               // ensure correct type and really bound of object spec\n               JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n               spec = (LiteralString) _TmpObject;\n\n               // bind object\n               _TmpObject = _edge_coveredBy.getTrg ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // check link coveredBy from messageSend to line\n               JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n               // iterate to-many link coveredBy from line to combo\n               fujaba__Success = false;\n\n               fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // check link fragment from combo to interaction\n                     JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                     ));\n\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_845593 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_845593 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_845593 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_845593 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_845593.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_568572 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_568572 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_568572 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_568572 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_568572.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_118540 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_118540 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_118540 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_118540 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_118540.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_323222 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_323222 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_323222 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_323222 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_323222.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_285151 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_285151 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_285151 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_285151 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_285151.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_528509 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_528509 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_528509 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_528509.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_528509 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_528509.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_821911 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_821911 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_821911 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_821911.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_821911 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_821911.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_947711 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_947711 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_947711 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_947711.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_947711 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_947711.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_409(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_554397 = null;\n      InteractionOperand __DEC_messageReceive_fragment_613207 = null;\n      InteractionOperand __DEC_messageSend_fragment_867927 = null;\n      Interaction __DEC_operand_enclosingInteraction_377906 = null;\n      InteractionOperand __DEC_operand_fragment_320959 = null;\n      InteractionOperand __DEC_guard_guard_471460 = null;\n      CombinedFragment __DEC_operand_operand_277867 = null;\n      Constraint __DEC_spec_specification_388450 = null;\n      Match match = null;\n      Iterator fujaba__IterLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterLineToCombo = null;\n      CombinedFragment combo = null;\n      LiteralString spec = null;\n      Interaction interaction = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // check link coveredBy from messageSend to line\n         JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n         // iterate to-many link coveredBy from line to operand\n         fujaba__Success = false;\n\n         fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToOperand.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToOperand.next ();\n\n               // ensure correct type and really bound of object operand\n               JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n               operand = (InteractionOperand) _TmpObject;\n               // bind object\n               guard = operand.getGuard ();\n\n               // check object guard is really bound\n               JavaSDM.ensure ( guard != null );\n\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = guard.getSpecification ();\n\n               // ensure correct type and really bound of object spec\n               JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n               spec = (LiteralString) _TmpObject;\n\n               // iterate to-many link coveredBy from line to combo\n               fujaba__Success = false;\n\n               fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // check link fragment from combo to interaction\n                     JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                     ));\n\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // iterate to-many link src from line to _edge_coveredBy\n                           fujaba__Success = false;\n\n                           fujaba__IterLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterLineTo_edge_coveredBy.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy.next ();\n\n                                 // check object _edge_coveredBy is really bound\n                                 JavaSDM.ensure ( _edge_coveredBy != null );\n                                 // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                 JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                 // check link trg from _edge_coveredBy to messageSend\n                                 JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link message from messageReceive\n                                    JavaSDM.ensure (messageReceive.getMessage () == null);\n                                    // negative check for link message from messageSend\n                                    JavaSDM.ensure (messageSend.getMessage () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_combo_fragment_554397 = combo.getEnclosingOperand ();\n\n                                       // check object __DEC_combo_fragment_554397 is really bound\n                                       JavaSDM.ensure ( __DEC_combo_fragment_554397 != null );\n\n                                       // check isomorphic binding between objects __DEC_combo_fragment_554397 and operand \n                                       JavaSDM.ensure ( !__DEC_combo_fragment_554397.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_613207 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_613207 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_613207 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_613207 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_613207.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_867927 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_867927 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_867927 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_867927 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_867927.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_enclosingInteraction_377906 = operand.getEnclosingInteraction ();\n\n                                       // check object __DEC_operand_enclosingInteraction_377906 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_enclosingInteraction_377906 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_enclosingInteraction_377906 and interaction \n                                       JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_377906.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_fragment_320959 = operand.getEnclosingOperand ();\n\n                                       // check object __DEC_operand_fragment_320959 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_fragment_320959 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_fragment_320959 and operand \n                                       JavaSDM.ensure ( !__DEC_operand_fragment_320959.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link packagedElement from guard\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // negative check for link packagedElement from spec\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_guard_guard_471460 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                       // check object __DEC_guard_guard_471460 is really bound\n                                       JavaSDM.ensure ( __DEC_guard_guard_471460 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(guard.equals(__DEC_guard_guard_471460.getGuard()));\n\n                                       // check isomorphic binding between objects __DEC_guard_guard_471460 and operand \n                                       JavaSDM.ensure ( !__DEC_guard_guard_471460.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_operand_277867 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                       // check object __DEC_operand_operand_277867 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_operand_277867 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_operand_operand_277867.getOperand().contains(operand));\n\n                                       // check isomorphic binding between objects __DEC_operand_operand_277867 and combo \n                                       JavaSDM.ensure ( !__DEC_operand_operand_277867.equals (combo) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_spec_specification_388450 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                       // check object __DEC_spec_specification_388450 is really bound\n                                       JavaSDM.ensure ( __DEC_spec_specification_388450 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(spec.equals(__DEC_spec_specification_388450.getSpecification()));\n\n                                       // check isomorphic binding between objects __DEC_spec_specification_388450 and guard \n                                       JavaSDM.ensure ( !__DEC_spec_specification_388450.equals (guard) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link receiveEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link receiveEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check object _edge_covered is really bound\n                                    JavaSDM.ensure ( _edge_covered != null );\n                                    // check object _edge_coveredBy is really bound\n                                    JavaSDM.ensure ( _edge_coveredBy != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object guard is really bound\n                                    JavaSDM.ensure ( guard != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object spec is really bound\n                                    JavaSDM.ensure ( spec != null );\n                                    // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                    JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from combo to interaction\n                                    JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from operand to interaction\n                                    JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from combo to operand\n                                    JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link guard from operand to guard\n                                    JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link specification from spec to guard\n                                    JavaSDM.ensure (guard.equals (spec.eContainer()\n                                    ));\n\n                                    // check link src from _edge_covered to messageSend\n                                    JavaSDM.ensure (messageSend.equals (_edge_covered.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_coveredBy to line\n                                    JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_covered to line\n                                    JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_coveredBy to messageSend\n                                    JavaSDM.ensure (messageSend.equals (_edge_coveredBy.getTrg ()\n                                    ));\n\n                                    // check link coveredBy from combo to line\n                                    JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                    // check link coveredBy from messageSend to line\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                    // check link coveredBy from operand to line\n                                    JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_410(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_516160 = null;\n      InteractionOperand __DEC_messageReceive_fragment_749651 = null;\n      InteractionOperand __DEC_messageSend_fragment_851282 = null;\n      Interaction __DEC_operand_enclosingInteraction_65323 = null;\n      InteractionOperand __DEC_operand_fragment_352628 = null;\n      InteractionOperand __DEC_guard_guard_70083 = null;\n      CombinedFragment __DEC_operand_operand_570293 = null;\n      Constraint __DEC_spec_specification_877 = null;\n      Match match = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      CombinedFragment combo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // bind object\n         interaction = combo.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link trg from _edge_enclosingInteraction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n         ));\n\n         // iterate to-many link fragment from interaction to messageReceive\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n               // iterate to-many link coveredBy from combo to line\n               fujaba__Success = false;\n\n               fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n               while ( fujaba__IterComboToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check link lifeline from line to interaction\n                     JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                     ));\n\n                     // iterate to-many link coveredBy from line to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // check link fragment from messageSend to interaction\n                           JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                           ));\n\n                           // iterate to-many link coveredBy from line to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // bind object\n                                 guard = operand.getGuard ();\n\n                                 // check object guard is really bound\n                                 JavaSDM.ensure ( guard != null );\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // bind object\n                                 _TmpObject = guard.getSpecification ();\n\n                                 // ensure correct type and really bound of object spec\n                                 JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                                 spec = (LiteralString) _TmpObject;\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link message from messageReceive\n                                    JavaSDM.ensure (messageReceive.getMessage () == null);\n                                    // negative check for link message from messageSend\n                                    JavaSDM.ensure (messageSend.getMessage () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_combo_fragment_516160 = combo.getEnclosingOperand ();\n\n                                       // check object __DEC_combo_fragment_516160 is really bound\n                                       JavaSDM.ensure ( __DEC_combo_fragment_516160 != null );\n\n                                       // check isomorphic binding between objects __DEC_combo_fragment_516160 and operand \n                                       JavaSDM.ensure ( !__DEC_combo_fragment_516160.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_749651 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_749651 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_749651 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_749651 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_749651.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_851282 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_851282 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_851282 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_851282 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_851282.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_enclosingInteraction_65323 = operand.getEnclosingInteraction ();\n\n                                       // check object __DEC_operand_enclosingInteraction_65323 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_enclosingInteraction_65323 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_enclosingInteraction_65323 and interaction \n                                       JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_65323.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_fragment_352628 = operand.getEnclosingOperand ();\n\n                                       // check object __DEC_operand_fragment_352628 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_fragment_352628 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_fragment_352628 and operand \n                                       JavaSDM.ensure ( !__DEC_operand_fragment_352628.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link packagedElement from guard\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // negative check for link packagedElement from spec\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_guard_guard_70083 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                       // check object __DEC_guard_guard_70083 is really bound\n                                       JavaSDM.ensure ( __DEC_guard_guard_70083 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(guard.equals(__DEC_guard_guard_70083.getGuard()));\n\n                                       // check isomorphic binding between objects __DEC_guard_guard_70083 and operand \n                                       JavaSDM.ensure ( !__DEC_guard_guard_70083.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_operand_570293 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                       // check object __DEC_operand_operand_570293 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_operand_570293 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_operand_operand_570293.getOperand().contains(operand));\n\n                                       // check isomorphic binding between objects __DEC_operand_operand_570293 and combo \n                                       JavaSDM.ensure ( !__DEC_operand_operand_570293.equals (combo) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_spec_specification_877 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                       // check object __DEC_spec_specification_877 is really bound\n                                       JavaSDM.ensure ( __DEC_spec_specification_877 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(spec.equals(__DEC_spec_specification_877.getSpecification()));\n\n                                       // check isomorphic binding between objects __DEC_spec_specification_877 and guard \n                                       JavaSDM.ensure ( !__DEC_spec_specification_877.equals (guard) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link receiveEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link receiveEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check object _edge_enclosingInteraction is really bound\n                                    JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object guard is really bound\n                                    JavaSDM.ensure ( guard != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object spec is really bound\n                                    JavaSDM.ensure ( spec != null );\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from combo to interaction\n                                    JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from operand to interaction\n                                    JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from combo to operand\n                                    JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link guard from operand to guard\n                                    JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link specification from spec to guard\n                                    JavaSDM.ensure (guard.equals (spec.eContainer()\n                                    ));\n\n                                    // check link src from _edge_enclosingInteraction to combo\n                                    JavaSDM.ensure (combo.equals (_edge_enclosingInteraction.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_enclosingInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                    ));\n\n                                    // check link coveredBy from combo to line\n                                    JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                    // check link coveredBy from messageSend to line\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                    // check link coveredBy from operand to line\n                                    JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_411(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_520670 = null;\n      InteractionOperand __DEC_messageReceive_fragment_105707 = null;\n      InteractionOperand __DEC_messageSend_fragment_432018 = null;\n      Interaction __DEC_operand_enclosingInteraction_121237 = null;\n      InteractionOperand __DEC_operand_fragment_1840 = null;\n      InteractionOperand __DEC_guard_guard_154733 = null;\n      CombinedFragment __DEC_operand_operand_864402 = null;\n      Constraint __DEC_spec_specification_365398 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterComboTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      CombinedFragment combo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getTrg ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // iterate to-many link src from combo to _edge_enclosingInteraction\n         fujaba__Success = false;\n\n         fujaba__IterComboTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(combo,EMoflonEdge.class,\"src\")).iterator ();\n\n         while ( fujaba__IterComboTo_edge_enclosingInteraction.hasNext () )\n         {\n            try\n            {\n               _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterComboTo_edge_enclosingInteraction.next ();\n\n               // check object _edge_enclosingInteraction is really bound\n               JavaSDM.ensure ( _edge_enclosingInteraction != null );\n               // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n               JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n               // iterate to-many link coveredBy from combo to line\n               fujaba__Success = false;\n\n               fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n               while ( fujaba__IterComboToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // iterate to-many link coveredBy from line to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // bind object\n                           interaction = combo.getEnclosingInteraction ();\n\n                           // check object interaction is really bound\n                           JavaSDM.ensure ( interaction != null );\n\n                           // check link fragment from messageSend to interaction\n                           JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                           ));\n\n                           // check link lifeline from line to interaction\n                           JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                           ));\n\n                           // check link src from _edge_fragment to interaction\n                           JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                           ));\n\n                           // check link trg from _edge_enclosingInteraction to interaction\n                           JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                           ));\n\n                           // iterate to-many link coveredBy from line to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // bind object\n                                 guard = operand.getGuard ();\n\n                                 // check object guard is really bound\n                                 JavaSDM.ensure ( guard != null );\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // bind object\n                                 _TmpObject = guard.getSpecification ();\n\n                                 // ensure correct type and really bound of object spec\n                                 JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                                 spec = (LiteralString) _TmpObject;\n\n                                 // iterate to-many link fragment from interaction to messageReceive\n                                 fujaba__Success = false;\n\n                                 fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                                 while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                                       // ensure correct type and really bound of object messageReceive\n                                       JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                                       messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                                       // check isomorphic binding between objects messageSend and messageReceive \n                                       JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // negative check for link message from messageReceive\n                                          JavaSDM.ensure (messageReceive.getMessage () == null);\n                                          // negative check for link message from messageSend\n                                          JavaSDM.ensure (messageSend.getMessage () == null);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_combo_fragment_520670 = combo.getEnclosingOperand ();\n\n                                             // check object __DEC_combo_fragment_520670 is really bound\n                                             JavaSDM.ensure ( __DEC_combo_fragment_520670 != null );\n\n                                             // check isomorphic binding between objects __DEC_combo_fragment_520670 and operand \n                                             JavaSDM.ensure ( !__DEC_combo_fragment_520670.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageReceive_fragment_105707 = messageReceive.getEnclosingOperand ();\n\n                                             // check object __DEC_messageReceive_fragment_105707 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_fragment_105707 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageReceive_fragment_105707 and operand \n                                             JavaSDM.ensure ( !__DEC_messageReceive_fragment_105707.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageSend_fragment_432018 = messageSend.getEnclosingOperand ();\n\n                                             // check object __DEC_messageSend_fragment_432018 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_fragment_432018 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageSend_fragment_432018 and operand \n                                             JavaSDM.ensure ( !__DEC_messageSend_fragment_432018.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_enclosingInteraction_121237 = operand.getEnclosingInteraction ();\n\n                                             // check object __DEC_operand_enclosingInteraction_121237 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_enclosingInteraction_121237 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_enclosingInteraction_121237 and interaction \n                                             JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_121237.equals (interaction) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_fragment_1840 = operand.getEnclosingOperand ();\n\n                                             // check object __DEC_operand_fragment_1840 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_fragment_1840 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_fragment_1840 and operand \n                                             JavaSDM.ensure ( !__DEC_operand_fragment_1840.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link packagedElement from guard\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // negative check for link packagedElement from spec\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_guard_guard_154733 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                             // check object __DEC_guard_guard_154733 is really bound\n                                             JavaSDM.ensure ( __DEC_guard_guard_154733 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(guard.equals(__DEC_guard_guard_154733.getGuard()));\n\n                                             // check isomorphic binding between objects __DEC_guard_guard_154733 and operand \n                                             JavaSDM.ensure ( !__DEC_guard_guard_154733.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_operand_864402 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                             // check object __DEC_operand_operand_864402 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_operand_864402 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_operand_operand_864402.getOperand().contains(operand));\n\n                                             // check isomorphic binding between objects __DEC_operand_operand_864402 and combo \n                                             JavaSDM.ensure ( !__DEC_operand_operand_864402.equals (combo) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_spec_specification_365398 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                             // check object __DEC_spec_specification_365398 is really bound\n                                             JavaSDM.ensure ( __DEC_spec_specification_365398 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(spec.equals(__DEC_spec_specification_365398.getSpecification()));\n\n                                             // check isomorphic binding between objects __DEC_spec_specification_365398 and guard \n                                             JavaSDM.ensure ( !__DEC_spec_specification_365398.equals (guard) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link receiveEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link receiveEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check object _edge_enclosingInteraction is really bound\n                                          JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                          // check object _edge_fragment is really bound\n                                          JavaSDM.ensure ( _edge_fragment != null );\n                                          // check object combo is really bound\n                                          JavaSDM.ensure ( combo != null );\n                                          // check object guard is really bound\n                                          JavaSDM.ensure ( guard != null );\n                                          // check object interaction is really bound\n                                          JavaSDM.ensure ( interaction != null );\n                                          // check object line is really bound\n                                          JavaSDM.ensure ( line != null );\n                                          // check object messageReceive is really bound\n                                          JavaSDM.ensure ( messageReceive != null );\n                                          // check object messageSend is really bound\n                                          JavaSDM.ensure ( messageSend != null );\n                                          // check object operand is really bound\n                                          JavaSDM.ensure ( operand != null );\n                                          // check object spec is really bound\n                                          JavaSDM.ensure ( spec != null );\n                                          // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                          JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                          // check isomorphic binding between objects messageSend and messageReceive \n                                          JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                          // check link fragment from combo to interaction\n                                          JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageReceive to interaction\n                                          JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageSend to interaction\n                                          JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from operand to interaction\n                                          JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                          )));\n\n                                          // check link fragment from combo to operand\n                                          JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageReceive to operand\n                                          JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageSend to operand\n                                          JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                          )));\n\n                                          // check link guard from operand to guard\n                                          JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                          ));\n\n                                          // check link lifeline from line to interaction\n                                          JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                          ));\n\n                                          // check link operand from operand to combo\n                                          JavaSDM.ensure (combo.equals (operand.eContainer()\n                                          ));\n\n                                          // check link specification from spec to guard\n                                          JavaSDM.ensure (guard.equals (spec.eContainer()\n                                          ));\n\n                                          // check link src from _edge_enclosingInteraction to combo\n                                          JavaSDM.ensure (combo.equals (_edge_enclosingInteraction.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_fragment to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                                          ));\n\n                                          // check link trg from _edge_enclosingInteraction to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_fragment to combo\n                                          JavaSDM.ensure (combo.equals (_edge_fragment.getTrg ()\n                                          ));\n\n                                          // check link coveredBy from combo to line\n                                          JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                          // check link coveredBy from messageSend to line\n                                          JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                          // check link coveredBy from operand to line\n                                          JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_BWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_412(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_963641 = null;\n      InteractionOperand __DEC_messageReceive_fragment_728104 = null;\n      InteractionOperand __DEC_messageSend_fragment_160079 = null;\n      Interaction __DEC_operand_enclosingInteraction_715392 = null;\n      InteractionOperand __DEC_operand_fragment_331344 = null;\n      InteractionOperand __DEC_guard_guard_489105 = null;\n      CombinedFragment __DEC_operand_operand_380172 = null;\n      Constraint __DEC_spec_specification_730722 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterMessageSendToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getSrc ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link trg from _edge_enclosingInteraction to interaction\n         JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n         ));\n\n         // iterate to-many link coveredBy from messageSend to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageSendToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // iterate to-many link coveredBy from line to combo\n               fujaba__Success = false;\n\n               fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // check link fragment from combo to interaction\n                     JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                     ));\n\n                     // iterate to-many link coveredBy from line to operand\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterLineToOperand.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                           // ensure correct type and really bound of object operand\n                           JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                           operand = (InteractionOperand) _TmpObject;\n                           // bind object\n                           guard = operand.getGuard ();\n\n                           // check object guard is really bound\n                           JavaSDM.ensure ( guard != null );\n\n                           // check link operand from operand to combo\n                           JavaSDM.ensure (combo.equals (operand.eContainer()\n                           ));\n\n                           // bind object\n                           _TmpObject = guard.getSpecification ();\n\n                           // ensure correct type and really bound of object spec\n                           JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                           spec = (LiteralString) _TmpObject;\n\n                           // iterate to-many link fragment from interaction to messageReceive\n                           fujaba__Success = false;\n\n                           fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                           while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                                 // ensure correct type and really bound of object messageReceive\n                                 JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                                 messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                                 // check isomorphic binding between objects messageSend and messageReceive \n                                 JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link message from messageReceive\n                                    JavaSDM.ensure (messageReceive.getMessage () == null);\n                                    // negative check for link message from messageSend\n                                    JavaSDM.ensure (messageSend.getMessage () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_combo_fragment_963641 = combo.getEnclosingOperand ();\n\n                                       // check object __DEC_combo_fragment_963641 is really bound\n                                       JavaSDM.ensure ( __DEC_combo_fragment_963641 != null );\n\n                                       // check isomorphic binding between objects __DEC_combo_fragment_963641 and operand \n                                       JavaSDM.ensure ( !__DEC_combo_fragment_963641.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_728104 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_728104 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_728104 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_728104 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_728104.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_160079 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_160079 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_160079 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_160079 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_160079.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_enclosingInteraction_715392 = operand.getEnclosingInteraction ();\n\n                                       // check object __DEC_operand_enclosingInteraction_715392 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_enclosingInteraction_715392 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_enclosingInteraction_715392 and interaction \n                                       JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_715392.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_fragment_331344 = operand.getEnclosingOperand ();\n\n                                       // check object __DEC_operand_fragment_331344 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_fragment_331344 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_fragment_331344 and operand \n                                       JavaSDM.ensure ( !__DEC_operand_fragment_331344.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link packagedElement from guard\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // negative check for link packagedElement from spec\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_guard_guard_489105 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                       // check object __DEC_guard_guard_489105 is really bound\n                                       JavaSDM.ensure ( __DEC_guard_guard_489105 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(guard.equals(__DEC_guard_guard_489105.getGuard()));\n\n                                       // check isomorphic binding between objects __DEC_guard_guard_489105 and operand \n                                       JavaSDM.ensure ( !__DEC_guard_guard_489105.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_operand_380172 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                       // check object __DEC_operand_operand_380172 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_operand_380172 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_operand_operand_380172.getOperand().contains(operand));\n\n                                       // check isomorphic binding between objects __DEC_operand_operand_380172 and combo \n                                       JavaSDM.ensure ( !__DEC_operand_operand_380172.equals (combo) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_spec_specification_730722 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                       // check object __DEC_spec_specification_730722 is really bound\n                                       JavaSDM.ensure ( __DEC_spec_specification_730722 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(spec.equals(__DEC_spec_specification_730722.getSpecification()));\n\n                                       // check isomorphic binding between objects __DEC_spec_specification_730722 and guard \n                                       JavaSDM.ensure ( !__DEC_spec_specification_730722.equals (guard) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link receiveEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link receiveEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check object _edge_enclosingInteraction is really bound\n                                    JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object guard is really bound\n                                    JavaSDM.ensure ( guard != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object spec is really bound\n                                    JavaSDM.ensure ( spec != null );\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from combo to interaction\n                                    JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from operand to interaction\n                                    JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from combo to operand\n                                    JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link guard from operand to guard\n                                    JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link specification from spec to guard\n                                    JavaSDM.ensure (guard.equals (spec.eContainer()\n                                    ));\n\n                                    // check link src from _edge_enclosingInteraction to messageSend\n                                    JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_enclosingInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                    ));\n\n                                    // check link coveredBy from combo to line\n                                    JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                    // check link coveredBy from messageSend to line\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                    // check link coveredBy from operand to line\n                                    JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_413(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_88447 = null;\n      InteractionOperand __DEC_messageReceive_fragment_926766 = null;\n      InteractionOperand __DEC_messageSend_fragment_891358 = null;\n      Interaction __DEC_operand_enclosingInteraction_927858 = null;\n      InteractionOperand __DEC_operand_fragment_747567 = null;\n      InteractionOperand __DEC_guard_guard_248285 = null;\n      CombinedFragment __DEC_operand_operand_862099 = null;\n      Constraint __DEC_spec_specification_979956 = null;\n      Match match = null;\n      Iterator fujaba__IterMessageSendTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterLineToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterMessageSendToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link src from _edge_fragment to interaction\n         JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n         ));\n\n         // iterate to-many link coveredBy from messageSend to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageSendToLine = new ArrayList(messageSend.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageSendToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageSendToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // iterate to-many link coveredBy from line to combo\n               fujaba__Success = false;\n\n               fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // check link fragment from combo to interaction\n                     JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                     ));\n\n                     // iterate to-many link coveredBy from line to operand\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterLineToOperand.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                           // ensure correct type and really bound of object operand\n                           JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                           operand = (InteractionOperand) _TmpObject;\n                           // bind object\n                           guard = operand.getGuard ();\n\n                           // check object guard is really bound\n                           JavaSDM.ensure ( guard != null );\n\n                           // check link operand from operand to combo\n                           JavaSDM.ensure (combo.equals (operand.eContainer()\n                           ));\n\n                           // bind object\n                           _TmpObject = guard.getSpecification ();\n\n                           // ensure correct type and really bound of object spec\n                           JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                           spec = (LiteralString) _TmpObject;\n\n                           // iterate to-many link fragment from interaction to messageReceive\n                           fujaba__Success = false;\n\n                           fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                           while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                                 // ensure correct type and really bound of object messageReceive\n                                 JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                                 messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                                 // check isomorphic binding between objects messageSend and messageReceive \n                                 JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                 // iterate to-many link src from messageSend to _edge_enclosingInteraction\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,EMoflonEdge.class,\"src\")).iterator ();\n\n                                 while ( fujaba__IterMessageSendTo_edge_enclosingInteraction.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterMessageSendTo_edge_enclosingInteraction.next ();\n\n                                       // check object _edge_enclosingInteraction is really bound\n                                       JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                       // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                       JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                       // check link trg from _edge_enclosingInteraction to interaction\n                                       JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // negative check for link message from messageReceive\n                                          JavaSDM.ensure (messageReceive.getMessage () == null);\n                                          // negative check for link message from messageSend\n                                          JavaSDM.ensure (messageSend.getMessage () == null);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_combo_fragment_88447 = combo.getEnclosingOperand ();\n\n                                             // check object __DEC_combo_fragment_88447 is really bound\n                                             JavaSDM.ensure ( __DEC_combo_fragment_88447 != null );\n\n                                             // check isomorphic binding between objects __DEC_combo_fragment_88447 and operand \n                                             JavaSDM.ensure ( !__DEC_combo_fragment_88447.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageReceive_fragment_926766 = messageReceive.getEnclosingOperand ();\n\n                                             // check object __DEC_messageReceive_fragment_926766 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_fragment_926766 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageReceive_fragment_926766 and operand \n                                             JavaSDM.ensure ( !__DEC_messageReceive_fragment_926766.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageSend_fragment_891358 = messageSend.getEnclosingOperand ();\n\n                                             // check object __DEC_messageSend_fragment_891358 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_fragment_891358 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageSend_fragment_891358 and operand \n                                             JavaSDM.ensure ( !__DEC_messageSend_fragment_891358.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_enclosingInteraction_927858 = operand.getEnclosingInteraction ();\n\n                                             // check object __DEC_operand_enclosingInteraction_927858 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_enclosingInteraction_927858 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_enclosingInteraction_927858 and interaction \n                                             JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_927858.equals (interaction) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_fragment_747567 = operand.getEnclosingOperand ();\n\n                                             // check object __DEC_operand_fragment_747567 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_fragment_747567 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_fragment_747567 and operand \n                                             JavaSDM.ensure ( !__DEC_operand_fragment_747567.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link packagedElement from guard\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // negative check for link packagedElement from spec\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_guard_guard_248285 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                             // check object __DEC_guard_guard_248285 is really bound\n                                             JavaSDM.ensure ( __DEC_guard_guard_248285 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(guard.equals(__DEC_guard_guard_248285.getGuard()));\n\n                                             // check isomorphic binding between objects __DEC_guard_guard_248285 and operand \n                                             JavaSDM.ensure ( !__DEC_guard_guard_248285.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_operand_862099 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                             // check object __DEC_operand_operand_862099 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_operand_862099 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_operand_operand_862099.getOperand().contains(operand));\n\n                                             // check isomorphic binding between objects __DEC_operand_operand_862099 and combo \n                                             JavaSDM.ensure ( !__DEC_operand_operand_862099.equals (combo) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_spec_specification_979956 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                             // check object __DEC_spec_specification_979956 is really bound\n                                             JavaSDM.ensure ( __DEC_spec_specification_979956 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(spec.equals(__DEC_spec_specification_979956.getSpecification()));\n\n                                             // check isomorphic binding between objects __DEC_spec_specification_979956 and guard \n                                             JavaSDM.ensure ( !__DEC_spec_specification_979956.equals (guard) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link receiveEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link receiveEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check object _edge_enclosingInteraction is really bound\n                                          JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                          // check object _edge_fragment is really bound\n                                          JavaSDM.ensure ( _edge_fragment != null );\n                                          // check object combo is really bound\n                                          JavaSDM.ensure ( combo != null );\n                                          // check object guard is really bound\n                                          JavaSDM.ensure ( guard != null );\n                                          // check object interaction is really bound\n                                          JavaSDM.ensure ( interaction != null );\n                                          // check object line is really bound\n                                          JavaSDM.ensure ( line != null );\n                                          // check object messageReceive is really bound\n                                          JavaSDM.ensure ( messageReceive != null );\n                                          // check object messageSend is really bound\n                                          JavaSDM.ensure ( messageSend != null );\n                                          // check object operand is really bound\n                                          JavaSDM.ensure ( operand != null );\n                                          // check object spec is really bound\n                                          JavaSDM.ensure ( spec != null );\n                                          // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                          JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                          // check isomorphic binding between objects messageSend and messageReceive \n                                          JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                          // check link fragment from combo to interaction\n                                          JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageReceive to interaction\n                                          JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageSend to interaction\n                                          JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from operand to interaction\n                                          JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                          )));\n\n                                          // check link fragment from combo to operand\n                                          JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageReceive to operand\n                                          JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageSend to operand\n                                          JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                          )));\n\n                                          // check link guard from operand to guard\n                                          JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                          ));\n\n                                          // check link lifeline from line to interaction\n                                          JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                          ));\n\n                                          // check link operand from operand to combo\n                                          JavaSDM.ensure (combo.equals (operand.eContainer()\n                                          ));\n\n                                          // check link specification from spec to guard\n                                          JavaSDM.ensure (guard.equals (spec.eContainer()\n                                          ));\n\n                                          // check link src from _edge_enclosingInteraction to messageSend\n                                          JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_fragment to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                                          ));\n\n                                          // check link trg from _edge_enclosingInteraction to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_fragment to messageSend\n                                          JavaSDM.ensure (messageSend.equals (_edge_fragment.getTrg ()\n                                          ));\n\n                                          // check link coveredBy from combo to line\n                                          JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                          // check link coveredBy from messageSend to line\n                                          JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                          // check link coveredBy from operand to line\n                                          JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_BWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_414(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_825506 = null;\n      InteractionOperand __DEC_messageReceive_fragment_341733 = null;\n      InteractionOperand __DEC_messageSend_fragment_598514 = null;\n      Interaction __DEC_operand_enclosingInteraction_104289 = null;\n      InteractionOperand __DEC_operand_fragment_844645 = null;\n      InteractionOperand __DEC_guard_guard_344471 = null;\n      CombinedFragment __DEC_operand_operand_334112 = null;\n      Constraint __DEC_spec_specification_663109 = null;\n      Match match = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterInteractionToCombo = null;\n      CombinedFragment combo = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getSrc ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // iterate to-many link fragment from interaction to combo\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToCombo = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToCombo.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToCombo.next ();\n\n               // ensure correct type and really bound of object combo\n               JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n               combo = (CombinedFragment) _TmpObject;\n               // iterate to-many link fragment from interaction to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n               while ( fujaba__IterInteractionToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // iterate to-many link lifeline from interaction to line\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                     while ( fujaba__IterInteractionToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check link coveredBy from combo to line\n                           JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                           // check link coveredBy from messageSend to line\n                           JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                           // iterate to-many link coveredBy from line to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // bind object\n                                 guard = operand.getGuard ();\n\n                                 // check object guard is really bound\n                                 JavaSDM.ensure ( guard != null );\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // bind object\n                                 _TmpObject = guard.getSpecification ();\n\n                                 // ensure correct type and really bound of object spec\n                                 JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                                 spec = (LiteralString) _TmpObject;\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link message from messageReceive\n                                    JavaSDM.ensure (messageReceive.getMessage () == null);\n                                    // negative check for link message from messageSend\n                                    JavaSDM.ensure (messageSend.getMessage () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_combo_fragment_825506 = combo.getEnclosingOperand ();\n\n                                       // check object __DEC_combo_fragment_825506 is really bound\n                                       JavaSDM.ensure ( __DEC_combo_fragment_825506 != null );\n\n                                       // check isomorphic binding between objects __DEC_combo_fragment_825506 and operand \n                                       JavaSDM.ensure ( !__DEC_combo_fragment_825506.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_341733 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_341733 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_341733 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_341733 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_341733.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_598514 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_598514 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_598514 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_598514 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_598514.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_enclosingInteraction_104289 = operand.getEnclosingInteraction ();\n\n                                       // check object __DEC_operand_enclosingInteraction_104289 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_enclosingInteraction_104289 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_enclosingInteraction_104289 and interaction \n                                       JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_104289.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_fragment_844645 = operand.getEnclosingOperand ();\n\n                                       // check object __DEC_operand_fragment_844645 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_fragment_844645 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_fragment_844645 and operand \n                                       JavaSDM.ensure ( !__DEC_operand_fragment_844645.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link packagedElement from guard\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // negative check for link packagedElement from spec\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_guard_guard_344471 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                       // check object __DEC_guard_guard_344471 is really bound\n                                       JavaSDM.ensure ( __DEC_guard_guard_344471 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(guard.equals(__DEC_guard_guard_344471.getGuard()));\n\n                                       // check isomorphic binding between objects __DEC_guard_guard_344471 and operand \n                                       JavaSDM.ensure ( !__DEC_guard_guard_344471.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_operand_334112 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                       // check object __DEC_operand_operand_334112 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_operand_334112 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_operand_operand_334112.getOperand().contains(operand));\n\n                                       // check isomorphic binding between objects __DEC_operand_operand_334112 and combo \n                                       JavaSDM.ensure ( !__DEC_operand_operand_334112.equals (combo) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_spec_specification_663109 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                       // check object __DEC_spec_specification_663109 is really bound\n                                       JavaSDM.ensure ( __DEC_spec_specification_663109 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(spec.equals(__DEC_spec_specification_663109.getSpecification()));\n\n                                       // check isomorphic binding between objects __DEC_spec_specification_663109 and guard \n                                       JavaSDM.ensure ( !__DEC_spec_specification_663109.equals (guard) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link receiveEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link receiveEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check object _edge_enclosingInteraction is really bound\n                                    JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object guard is really bound\n                                    JavaSDM.ensure ( guard != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object spec is really bound\n                                    JavaSDM.ensure ( spec != null );\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from combo to interaction\n                                    JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from operand to interaction\n                                    JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from combo to operand\n                                    JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link guard from operand to guard\n                                    JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link specification from spec to guard\n                                    JavaSDM.ensure (guard.equals (spec.eContainer()\n                                    ));\n\n                                    // check link src from _edge_enclosingInteraction to messageReceive\n                                    JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_enclosingInteraction to interaction\n                                    JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                    ));\n\n                                    // check link coveredBy from combo to line\n                                    JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                    // check link coveredBy from messageSend to line\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                    // check link coveredBy from operand to line\n                                    JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_415(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_729323 = null;\n      InteractionOperand __DEC_messageReceive_fragment_232745 = null;\n      InteractionOperand __DEC_messageSend_fragment_373202 = null;\n      Interaction __DEC_operand_enclosingInteraction_590084 = null;\n      InteractionOperand __DEC_operand_fragment_689849 = null;\n      InteractionOperand __DEC_guard_guard_100336 = null;\n      CombinedFragment __DEC_operand_operand_639642 = null;\n      Constraint __DEC_spec_specification_596001 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterInteractionToCombo = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_fragment.getTrg ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // iterate to-many link fragment from interaction to combo\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToCombo = new ArrayList(interaction.getFragment()).iterator ();\n\n               while ( fujaba__IterInteractionToCombo.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInteractionToCombo.next ();\n\n                     // ensure correct type and really bound of object combo\n                     JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n                     combo = (CombinedFragment) _TmpObject;\n                     // iterate to-many link lifeline from interaction to line\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n                     while ( fujaba__IterInteractionToLine.hasNext () )\n                     {\n                        try\n                        {\n                           line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                           // check object line is really bound\n                           JavaSDM.ensure ( line != null );\n                           // check link coveredBy from combo to line\n                           JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                           // check link coveredBy from messageSend to line\n                           JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                           // iterate to-many link coveredBy from line to operand\n                           fujaba__Success = false;\n\n                           fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n                           while ( fujaba__IterLineToOperand.hasNext () )\n                           {\n                              try\n                              {\n                                 _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                                 // ensure correct type and really bound of object operand\n                                 JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                                 operand = (InteractionOperand) _TmpObject;\n                                 // bind object\n                                 guard = operand.getGuard ();\n\n                                 // check object guard is really bound\n                                 JavaSDM.ensure ( guard != null );\n\n                                 // check link operand from operand to combo\n                                 JavaSDM.ensure (combo.equals (operand.eContainer()\n                                 ));\n\n                                 // bind object\n                                 _TmpObject = guard.getSpecification ();\n\n                                 // ensure correct type and really bound of object spec\n                                 JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                                 spec = (LiteralString) _TmpObject;\n\n                                 // iterate to-many link trg from interaction to _edge_enclosingInteraction\n                                 fujaba__Success = false;\n\n                                 fujaba__IterInteractionTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n                                 while ( fujaba__IterInteractionTo_edge_enclosingInteraction.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterInteractionTo_edge_enclosingInteraction.next ();\n\n                                       // check object _edge_enclosingInteraction is really bound\n                                       JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                       // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                       JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                       // check link src from _edge_enclosingInteraction to messageReceive\n                                       JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                                       ));\n\n                                       // story node \'test core match and DECs\'\n                                       try \n                                       {\n                                          fujaba__Success = false; \n\n                                          // negative check for link message from messageReceive\n                                          JavaSDM.ensure (messageReceive.getMessage () == null);\n                                          // negative check for link message from messageSend\n                                          JavaSDM.ensure (messageSend.getMessage () == null);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_combo_fragment_729323 = combo.getEnclosingOperand ();\n\n                                             // check object __DEC_combo_fragment_729323 is really bound\n                                             JavaSDM.ensure ( __DEC_combo_fragment_729323 != null );\n\n                                             // check isomorphic binding between objects __DEC_combo_fragment_729323 and operand \n                                             JavaSDM.ensure ( !__DEC_combo_fragment_729323.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageReceive_fragment_232745 = messageReceive.getEnclosingOperand ();\n\n                                             // check object __DEC_messageReceive_fragment_232745 is really bound\n                                             JavaSDM.ensure ( __DEC_messageReceive_fragment_232745 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageReceive_fragment_232745 and operand \n                                             JavaSDM.ensure ( !__DEC_messageReceive_fragment_232745.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_messageSend_fragment_373202 = messageSend.getEnclosingOperand ();\n\n                                             // check object __DEC_messageSend_fragment_373202 is really bound\n                                             JavaSDM.ensure ( __DEC_messageSend_fragment_373202 != null );\n\n                                             // check isomorphic binding between objects __DEC_messageSend_fragment_373202 and operand \n                                             JavaSDM.ensure ( !__DEC_messageSend_fragment_373202.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_enclosingInteraction_590084 = operand.getEnclosingInteraction ();\n\n                                             // check object __DEC_operand_enclosingInteraction_590084 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_enclosingInteraction_590084 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_enclosingInteraction_590084 and interaction \n                                             JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_590084.equals (interaction) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_fragment_689849 = operand.getEnclosingOperand ();\n\n                                             // check object __DEC_operand_fragment_689849 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_fragment_689849 != null );\n\n                                             // check isomorphic binding between objects __DEC_operand_fragment_689849 and operand \n                                             JavaSDM.ensure ( !__DEC_operand_fragment_689849.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link packagedElement from guard\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // negative check for link packagedElement from spec\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_guard_guard_100336 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                             // check object __DEC_guard_guard_100336 is really bound\n                                             JavaSDM.ensure ( __DEC_guard_guard_100336 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(guard.equals(__DEC_guard_guard_100336.getGuard()));\n\n                                             // check isomorphic binding between objects __DEC_guard_guard_100336 and operand \n                                             JavaSDM.ensure ( !__DEC_guard_guard_100336.equals (operand) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_operand_operand_639642 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                             // check object __DEC_operand_operand_639642 is really bound\n                                             JavaSDM.ensure ( __DEC_operand_operand_639642 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(__DEC_operand_operand_639642.getOperand().contains(operand));\n\n                                             // check isomorphic binding between objects __DEC_operand_operand_639642 and combo \n                                             JavaSDM.ensure ( !__DEC_operand_operand_639642.equals (combo) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // check negative bindings\n                                          try\n                                          {\n                                             fujaba__Success = false;\n\n                                             // bind object\n                                             __DEC_spec_specification_596001 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                             // check object __DEC_spec_specification_596001 is really bound\n                                             JavaSDM.ensure ( __DEC_spec_specification_596001 != null );\n\n                                             // check if contained via correct reference\n                                             JavaSDM.ensure(spec.equals(__DEC_spec_specification_596001.getSpecification()));\n\n                                             // check isomorphic binding between objects __DEC_spec_specification_596001 and guard \n                                             JavaSDM.ensure ( !__DEC_spec_specification_596001.equals (guard) );\n\n\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n                                          fujaba__Success = !(fujaba__Success);\n\n                                          JavaSDM.ensure ( fujaba__Success );\n\n                                          // negative check for link receiveEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link receiveEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageReceive\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                          // negative check for link sendEvent from messageSend\n                                          JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from operand to operand\n                                          JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                          )));\n\n                                          // check object _edge_enclosingInteraction is really bound\n                                          JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                                          // check object _edge_fragment is really bound\n                                          JavaSDM.ensure ( _edge_fragment != null );\n                                          // check object combo is really bound\n                                          JavaSDM.ensure ( combo != null );\n                                          // check object guard is really bound\n                                          JavaSDM.ensure ( guard != null );\n                                          // check object interaction is really bound\n                                          JavaSDM.ensure ( interaction != null );\n                                          // check object line is really bound\n                                          JavaSDM.ensure ( line != null );\n                                          // check object messageReceive is really bound\n                                          JavaSDM.ensure ( messageReceive != null );\n                                          // check object messageSend is really bound\n                                          JavaSDM.ensure ( messageSend != null );\n                                          // check object operand is really bound\n                                          JavaSDM.ensure ( operand != null );\n                                          // check object spec is really bound\n                                          JavaSDM.ensure ( spec != null );\n                                          // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                                          JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                                          // check isomorphic binding between objects messageSend and messageReceive \n                                          JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                          // check link fragment from combo to interaction\n                                          JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageReceive to interaction\n                                          JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from messageSend to interaction\n                                          JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                          ));\n\n                                          // check link fragment from operand to interaction\n                                          JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                          )));\n\n                                          // check link fragment from combo to operand\n                                          JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageReceive to operand\n                                          JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                          )));\n\n                                          // check link fragment from messageSend to operand\n                                          JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                          )));\n\n                                          // check link guard from operand to guard\n                                          JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                          ));\n\n                                          // check link lifeline from line to interaction\n                                          JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                          ));\n\n                                          // check link operand from operand to combo\n                                          JavaSDM.ensure (combo.equals (operand.eContainer()\n                                          ));\n\n                                          // check link specification from spec to guard\n                                          JavaSDM.ensure (guard.equals (spec.eContainer()\n                                          ));\n\n                                          // check link src from _edge_enclosingInteraction to messageReceive\n                                          JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                                          ));\n\n                                          // check link src from _edge_fragment to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                                          ));\n\n                                          // check link trg from _edge_enclosingInteraction to interaction\n                                          JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                                          ));\n\n                                          // check link trg from _edge_fragment to messageReceive\n                                          JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                                          ));\n\n                                          // check link coveredBy from combo to line\n                                          JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                          // check link coveredBy from messageSend to line\n                                          JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                          // check link coveredBy from operand to line\n                                          JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                          // create object match\n                                          match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                          // assign attribute match\n                                          match.setRuleName (__eClass.getName());\n                                          // statement node \'bookkeeping with generic isAppropriate method\'\n                                          fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                          if (fujaba__Success)\n                                          {\n                                             // statement node \'Ensure that the correct types of elements are matched\'\n                                             fujaba__Success = this.checkTypes_BWD(match);\n                                             if (fujaba__Success)\n                                             {\n                                                // story node \'Add match to rule result\'\n                                                try \n                                                {\n                                                   fujaba__Success = false; \n\n                                                   // check object __performOperation is really bound\n                                                   JavaSDM.ensure ( __performOperation != null );\n                                                   // check object __result is really bound\n                                                   JavaSDM.ensure ( __result != null );\n                                                   // check object match is really bound\n                                                   JavaSDM.ensure ( match != null );\n\n                                                   // create link\n                                                   org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                                   // create link\n                                                   __result.getContents().add(match);\n\n                                                   fujaba__Success = true;\n                                                }\n                                                catch ( JavaSDMException fujaba__InternalException )\n                                                {\n                                                   fujaba__Success = false;\n                                                }\n\n\n                                             }\n                                             else\n                                             {\n\n                                             }\n\n                                          }\n                                          else\n                                          {\n\n                                          }\n                                          fujaba__Success = true;\n                                       }\n                                       catch ( JavaSDMException fujaba__InternalException )\n                                       {\n                                          fujaba__Success = false;\n                                       }\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_416(
			EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_altFlow_flows_877512 = null;\n      NormalStep __DEC_alt_stepAlternative_914073 = null;\n      Flow __DEC_step_steps_385373 = null;\n      Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_119707 = null;\n      AlternativeFlowAlternative __DEC_altFlow_ref_119707 = null;\n      Match match = null;\n      AlternativeFlow altFlow = null;\n      Iterator fujaba__IterStepToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // check link steps from step to flow\n         JavaSDM.ensure (flow.equals (step.eContainer()\n         ));\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // iterate to-many link stepAlternative from step to alt\n         fujaba__Success = false;\n\n         fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative()).iterator ();\n\n         while ( fujaba__IterStepToAlt.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterStepToAlt.next ();\n\n               // ensure correct type and really bound of object alt\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n               alt = (AlternativeFlowAlternative) _TmpObject;\n               // bind object\n               _TmpObject = alt.getRef ();\n\n               // ensure correct type and really bound of object altFlow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               altFlow = (AlternativeFlow) _TmpObject;\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_altFlow_flows_877512 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow.eContainer() : null;\n\n                     // check object __DEC_altFlow_flows_877512 is really bound\n                     JavaSDM.ensure ( __DEC_altFlow_flows_877512 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_altFlow_flows_877512.getFlows().contains(altFlow));\n\n                     // check isomorphic binding between objects __DEC_altFlow_flows_877512 and useCase \n                     JavaSDM.ensure ( !__DEC_altFlow_flows_877512.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alt_stepAlternative_914073 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                     // check object __DEC_alt_stepAlternative_914073 is really bound\n                     JavaSDM.ensure ( __DEC_alt_stepAlternative_914073 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alt_stepAlternative_914073.getStepAlternative().contains(alt));\n\n                     // check isomorphic binding between objects __DEC_alt_stepAlternative_914073 and step \n                     JavaSDM.ensure ( !__DEC_alt_stepAlternative_914073.equals (step) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_step_steps_385373 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                     // check object __DEC_step_steps_385373 is really bound\n                     JavaSDM.ensure ( __DEC_step_steps_385373 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_step_steps_385373.getSteps().contains(step));\n\n                     // check isomorphic binding between objects __DEC_step_steps_385373 and altFlow \n                     JavaSDM.ensure ( !__DEC_step_steps_385373.equals (altFlow) );\n\n                     // check isomorphic binding between objects __DEC_step_steps_385373 and flow \n                     JavaSDM.ensure ( !__DEC_step_steps_385373.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link ref from altFlow to __DEC_altFlow_ref_119707\n                     fujaba__Success = false;\n\n                     fujaba__IterAltFlowTo__DEC_altFlow_ref_119707 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterAltFlowTo__DEC_altFlow_ref_119707.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_altFlow_ref_119707 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_119707.next ();\n\n                           // check object __DEC_altFlow_ref_119707 is really bound\n                           JavaSDM.ensure ( __DEC_altFlow_ref_119707 != null );\n                           // check isomorphic binding between objects __DEC_altFlow_ref_119707 and alt \n                           JavaSDM.ensure ( !__DEC_altFlow_ref_119707.equals (alt) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_steps is really bound\n                  JavaSDM.ensure ( _edge_steps != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object alt is really bound\n                  JavaSDM.ensure ( alt != null );\n                  // check object altFlow is really bound\n                  JavaSDM.ensure ( altFlow != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actor from step to actor\n                  JavaSDM.ensure (actor.equals (step.getActor ()\n                  ));\n\n                  // check link ref from alt to altFlow\n                  JavaSDM.ensure (altFlow.equals (alt.getRef ()\n                  ));\n\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link flows from altFlow to useCase\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,UseCase.class,\"$eContainer\")\n                  .contains (useCase)));\n\n                  // check link src from _edge_steps to flow\n                  JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n                  ));\n\n                  // check link stepAlternative from alt to step\n                  JavaSDM.ensure (step.equals (alt.eContainer()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link steps from step to altFlow\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,AlternativeFlow.class,\"$eContainer\")\n                  .contains (altFlow)));\n\n                  // check link trg from _edge_steps to step\n                  JavaSDM.ensure (step.equals (_edge_steps.getTrg ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_95(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_altFlow_flows_322172 = null;\n      NormalStep __DEC_alt_stepAlternative_825 = null;\n      Flow __DEC_step_steps_513186 = null;\n      Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_695651 = null;\n      AlternativeFlowAlternative __DEC_altFlow_ref_695651 = null;\n      Match match = null;\n      AlternativeFlow altFlow = null;\n      AlternativeFlowAlternative alt = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      NormalStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_stepAlternative is really bound\n         JavaSDM.ensure ( _edge_stepAlternative != null );\n         // bind object\n         _TmpObject = _edge_stepAlternative.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof BasicFlow ? (BasicFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_stepAlternative.getTrg ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         _TmpObject = alt.getRef ();\n\n         // ensure correct type and really bound of object altFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         altFlow = (AlternativeFlow) _TmpObject;\n\n         // check link stepAlternative from alt to step\n         JavaSDM.ensure (step.equals (alt.eContainer()\n         ));\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_altFlow_flows_322172 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow.eContainer() : null;\n\n               // check object __DEC_altFlow_flows_322172 is really bound\n               JavaSDM.ensure ( __DEC_altFlow_flows_322172 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_altFlow_flows_322172.getFlows().contains(altFlow));\n\n               // check isomorphic binding between objects __DEC_altFlow_flows_322172 and useCase \n               JavaSDM.ensure ( !__DEC_altFlow_flows_322172.equals (useCase) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_alt_stepAlternative_825 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n               // check object __DEC_alt_stepAlternative_825 is really bound\n               JavaSDM.ensure ( __DEC_alt_stepAlternative_825 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_alt_stepAlternative_825.getStepAlternative().contains(alt));\n\n               // check isomorphic binding between objects __DEC_alt_stepAlternative_825 and step \n               JavaSDM.ensure ( !__DEC_alt_stepAlternative_825.equals (step) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_step_steps_513186 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n               // check object __DEC_step_steps_513186 is really bound\n               JavaSDM.ensure ( __DEC_step_steps_513186 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_step_steps_513186.getSteps().contains(step));\n\n               // check isomorphic binding between objects __DEC_step_steps_513186 and altFlow \n               JavaSDM.ensure ( !__DEC_step_steps_513186.equals (altFlow) );\n\n               // check isomorphic binding between objects __DEC_step_steps_513186 and flow \n               JavaSDM.ensure ( !__DEC_step_steps_513186.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link ref from altFlow to __DEC_altFlow_ref_695651\n               fujaba__Success = false;\n\n               fujaba__IterAltFlowTo__DEC_altFlow_ref_695651 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterAltFlowTo__DEC_altFlow_ref_695651.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_altFlow_ref_695651 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_695651.next ();\n\n                     // check object __DEC_altFlow_ref_695651 is really bound\n                     JavaSDM.ensure ( __DEC_altFlow_ref_695651 != null );\n                     // check isomorphic binding between objects __DEC_altFlow_ref_695651 and alt \n                     JavaSDM.ensure ( !__DEC_altFlow_ref_695651.equals (alt) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_stepAlternative is really bound\n            JavaSDM.ensure ( _edge_stepAlternative != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object altFlow is really bound\n            JavaSDM.ensure ( altFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check link actor from step to actor\n            JavaSDM.ensure (actor.equals (step.getActor ()\n            ));\n\n            // check link ref from alt to altFlow\n            JavaSDM.ensure (altFlow.equals (alt.getRef ()\n            ));\n\n            // check link actors from actor to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n            ));\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link flows from altFlow to useCase\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,UseCase.class,\"$eContainer\")\n            .contains (useCase)));\n\n            // check link src from _edge_stepAlternative to step\n            JavaSDM.ensure (step.equals (_edge_stepAlternative.getSrc ()\n            ));\n\n            // check link stepAlternative from alt to step\n            JavaSDM.ensure (step.equals (alt.eContainer()\n            ));\n\n            // check link steps from step to flow\n            JavaSDM.ensure (flow.equals (step.eContainer()\n            ));\n\n            // check link steps from step to altFlow\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,AlternativeFlow.class,\"$eContainer\")\n            .contains (altFlow)));\n\n            // check link trg from _edge_stepAlternative to alt\n            JavaSDM.ensure (alt.equals (_edge_stepAlternative.getTrg ()\n            ));\n\n            // check link useCases from useCase to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_96(
			EMoflonEdge _edge_stepAlternative);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_altFlow_flows_266847 = null;\n      NormalStep __DEC_alt_stepAlternative_343455 = null;\n      Flow __DEC_step_steps_491481 = null;\n      Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_50426 = null;\n      AlternativeFlowAlternative __DEC_altFlow_ref_50426 = null;\n      Match match = null;\n      AlternativeFlow altFlow = null;\n      Iterator fujaba__IterStepToAlt = null;\n      AlternativeFlowAlternative alt = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n      NormalStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof BasicFlow ? (BasicFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         _TmpObject = _edge_actor.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actor from step to actor\n         JavaSDM.ensure (actor.equals (step.getActor ()\n         ));\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // iterate to-many link stepAlternative from step to alt\n         fujaba__Success = false;\n\n         fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative()).iterator ();\n\n         while ( fujaba__IterStepToAlt.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterStepToAlt.next ();\n\n               // ensure correct type and really bound of object alt\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n               alt = (AlternativeFlowAlternative) _TmpObject;\n               // bind object\n               _TmpObject = alt.getRef ();\n\n               // ensure correct type and really bound of object altFlow\n               JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n               altFlow = (AlternativeFlow) _TmpObject;\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_altFlow_flows_266847 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow.eContainer() : null;\n\n                     // check object __DEC_altFlow_flows_266847 is really bound\n                     JavaSDM.ensure ( __DEC_altFlow_flows_266847 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_altFlow_flows_266847.getFlows().contains(altFlow));\n\n                     // check isomorphic binding between objects __DEC_altFlow_flows_266847 and useCase \n                     JavaSDM.ensure ( !__DEC_altFlow_flows_266847.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_alt_stepAlternative_343455 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n                     // check object __DEC_alt_stepAlternative_343455 is really bound\n                     JavaSDM.ensure ( __DEC_alt_stepAlternative_343455 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_alt_stepAlternative_343455.getStepAlternative().contains(alt));\n\n                     // check isomorphic binding between objects __DEC_alt_stepAlternative_343455 and step \n                     JavaSDM.ensure ( !__DEC_alt_stepAlternative_343455.equals (step) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_step_steps_491481 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                     // check object __DEC_step_steps_491481 is really bound\n                     JavaSDM.ensure ( __DEC_step_steps_491481 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_step_steps_491481.getSteps().contains(step));\n\n                     // check isomorphic binding between objects __DEC_step_steps_491481 and altFlow \n                     JavaSDM.ensure ( !__DEC_step_steps_491481.equals (altFlow) );\n\n                     // check isomorphic binding between objects __DEC_step_steps_491481 and flow \n                     JavaSDM.ensure ( !__DEC_step_steps_491481.equals (flow) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link ref from altFlow to __DEC_altFlow_ref_50426\n                     fujaba__Success = false;\n\n                     fujaba__IterAltFlowTo__DEC_altFlow_ref_50426 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterAltFlowTo__DEC_altFlow_ref_50426.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_altFlow_ref_50426 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_50426.next ();\n\n                           // check object __DEC_altFlow_ref_50426 is really bound\n                           JavaSDM.ensure ( __DEC_altFlow_ref_50426 != null );\n                           // check isomorphic binding between objects __DEC_altFlow_ref_50426 and alt \n                           JavaSDM.ensure ( !__DEC_altFlow_ref_50426.equals (alt) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_actor is really bound\n                  JavaSDM.ensure ( _edge_actor != null );\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object alt is really bound\n                  JavaSDM.ensure ( alt != null );\n                  // check object altFlow is really bound\n                  JavaSDM.ensure ( altFlow != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link actor from step to actor\n                  JavaSDM.ensure (actor.equals (step.getActor ()\n                  ));\n\n                  // check link ref from alt to altFlow\n                  JavaSDM.ensure (altFlow.equals (alt.getRef ()\n                  ));\n\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link flows from altFlow to useCase\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,UseCase.class,\"$eContainer\")\n                  .contains (useCase)));\n\n                  // check link src from _edge_actor to step\n                  JavaSDM.ensure (step.equals (_edge_actor.getSrc ()\n                  ));\n\n                  // check link stepAlternative from alt to step\n                  JavaSDM.ensure (step.equals (alt.eContainer()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link steps from step to altFlow\n                  JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,AlternativeFlow.class,\"$eContainer\")\n                  .contains (altFlow)));\n\n                  // check link trg from _edge_actor to actor\n                  JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_97(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_altFlow_flows_928438 = null;\n      NormalStep __DEC_alt_stepAlternative_473388 = null;\n      Flow __DEC_step_steps_770063 = null;\n      Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_525569 = null;\n      AlternativeFlowAlternative __DEC_altFlow_ref_525569 = null;\n      Match match = null;\n      PackageDeclaration packageDeclaration = null;\n      Actor actor = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n      NormalStep step = null;\n      AlternativeFlow altFlow = null;\n      AlternativeFlowAlternative alt = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_ref is really bound\n         JavaSDM.ensure ( _edge_ref != null );\n         // bind object\n         _TmpObject = _edge_ref.getSrc ();\n\n         // ensure correct type and really bound of object alt\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlowAlternative );\n         alt = (AlternativeFlowAlternative) _TmpObject;\n\n         // bind object\n         _TmpObject = alt.getRef ();\n\n         // ensure correct type and really bound of object altFlow\n         JavaSDM.ensure ( _TmpObject instanceof AlternativeFlow );\n         altFlow = (AlternativeFlow) _TmpObject;\n\n         // bind object\n         step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(step.getStepAlternative().contains(alt));\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof BasicFlow ? (BasicFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getActors().contains(actor));\n\n         // check link trg from _edge_ref to altFlow\n         JavaSDM.ensure (altFlow.equals (_edge_ref.getTrg ()\n         ));\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_altFlow_flows_928438 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow.eContainer() : null;\n\n               // check object __DEC_altFlow_flows_928438 is really bound\n               JavaSDM.ensure ( __DEC_altFlow_flows_928438 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_altFlow_flows_928438.getFlows().contains(altFlow));\n\n               // check isomorphic binding between objects __DEC_altFlow_flows_928438 and useCase \n               JavaSDM.ensure ( !__DEC_altFlow_flows_928438.equals (useCase) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_alt_stepAlternative_473388 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt.eContainer() : null;\n\n               // check object __DEC_alt_stepAlternative_473388 is really bound\n               JavaSDM.ensure ( __DEC_alt_stepAlternative_473388 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_alt_stepAlternative_473388.getStepAlternative().contains(alt));\n\n               // check isomorphic binding between objects __DEC_alt_stepAlternative_473388 and step \n               JavaSDM.ensure ( !__DEC_alt_stepAlternative_473388.equals (step) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_step_steps_770063 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n               // check object __DEC_step_steps_770063 is really bound\n               JavaSDM.ensure ( __DEC_step_steps_770063 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_step_steps_770063.getSteps().contains(step));\n\n               // check isomorphic binding between objects __DEC_step_steps_770063 and altFlow \n               JavaSDM.ensure ( !__DEC_step_steps_770063.equals (altFlow) );\n\n               // check isomorphic binding between objects __DEC_step_steps_770063 and flow \n               JavaSDM.ensure ( !__DEC_step_steps_770063.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link ref from altFlow to __DEC_altFlow_ref_525569\n               fujaba__Success = false;\n\n               fujaba__IterAltFlowTo__DEC_altFlow_ref_525569 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,AlternativeFlowAlternative.class,\"ref\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterAltFlowTo__DEC_altFlow_ref_525569.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_altFlow_ref_525569 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_525569.next ();\n\n                     // check object __DEC_altFlow_ref_525569 is really bound\n                     JavaSDM.ensure ( __DEC_altFlow_ref_525569 != null );\n                     // check isomorphic binding between objects __DEC_altFlow_ref_525569 and alt \n                     JavaSDM.ensure ( !__DEC_altFlow_ref_525569.equals (alt) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_ref is really bound\n            JavaSDM.ensure ( _edge_ref != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object alt is really bound\n            JavaSDM.ensure ( alt != null );\n            // check object altFlow is really bound\n            JavaSDM.ensure ( altFlow != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check link actor from step to actor\n            JavaSDM.ensure (actor.equals (step.getActor ()\n            ));\n\n            // check link ref from alt to altFlow\n            JavaSDM.ensure (altFlow.equals (alt.getRef ()\n            ));\n\n            // check link actors from actor to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n            ));\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link flows from altFlow to useCase\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(altFlow,UseCase.class,\"$eContainer\")\n            .contains (useCase)));\n\n            // check link src from _edge_ref to alt\n            JavaSDM.ensure (alt.equals (_edge_ref.getSrc ()\n            ));\n\n            // check link stepAlternative from alt to step\n            JavaSDM.ensure (step.equals (alt.eContainer()\n            ));\n\n            // check link steps from step to flow\n            JavaSDM.ensure (flow.equals (step.eContainer()\n            ));\n\n            // check link steps from step to altFlow\n            JavaSDM.ensure (!(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,AlternativeFlow.class,\"$eContainer\")\n            .contains (altFlow)));\n\n            // check link trg from _edge_ref to altFlow\n            JavaSDM.ensure (altFlow.equals (_edge_ref.getTrg ()\n            ));\n\n            // check link useCases from useCase to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,actor,flow,useCase,packageDeclaration,step,alt,altFlow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_98(EMoflonEdge _edge_ref);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_681526 = null;\n      InteractionOperand __DEC_messageReceive_fragment_876449 = null;\n      InteractionOperand __DEC_messageSend_fragment_439985 = null;\n      Interaction __DEC_operand_enclosingInteraction_927398 = null;\n      InteractionOperand __DEC_operand_fragment_61840 = null;\n      InteractionOperand __DEC_guard_guard_408018 = null;\n      CombinedFragment __DEC_operand_operand_958996 = null;\n      Constraint __DEC_spec_specification_361597 = null;\n      Match match = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterComboToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      CombinedFragment combo = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_operand is really bound\n         JavaSDM.ensure ( _edge_operand != null );\n         // bind object\n         _TmpObject = _edge_operand.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_operand.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // bind object\n         interaction = combo.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link operand from operand to combo\n         JavaSDM.ensure (combo.equals (operand.eContainer()\n         ));\n\n         // iterate to-many link fragment from interaction to messageReceive\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n               // iterate to-many link coveredBy from combo to line\n               fujaba__Success = false;\n\n               fujaba__IterComboToLine = new ArrayList(combo.getCovered()).iterator ();\n\n               while ( fujaba__IterComboToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterComboToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check link lifeline from line to interaction\n                     JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                     ));\n\n                     // check link coveredBy from operand to line\n                     JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                     // iterate to-many link coveredBy from line to messageSend\n                     fujaba__Success = false;\n\n                     fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n                     while ( fujaba__IterLineToMessageSend.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                           // ensure correct type and really bound of object messageSend\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // check link fragment from messageSend to interaction\n                           JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_681526 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_681526 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_681526 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_681526 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_681526.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_876449 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_876449 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_876449 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_876449 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_876449.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_439985 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_439985 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_439985 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_439985 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_439985.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_927398 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_927398 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_927398 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_927398 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_927398.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_61840 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_61840 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_61840 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_61840 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_61840.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_408018 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_408018 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_408018 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_408018.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_408018 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_408018.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_958996 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_958996 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_958996 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_958996.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_958996 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_958996.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_361597 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_361597 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_361597 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_361597.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_361597 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_361597.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_operand is really bound\n                              JavaSDM.ensure ( _edge_operand != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_operand to combo\n                              JavaSDM.ensure (combo.equals (_edge_operand.getSrc ()\n                              ));\n\n                              // check link trg from _edge_operand to operand\n                              JavaSDM.ensure (operand.equals (_edge_operand.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_417(EMoflonEdge _edge_operand);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_759924 = null;\n      InteractionOperand __DEC_messageReceive_fragment_970540 = null;\n      InteractionOperand __DEC_messageSend_fragment_210108 = null;\n      Interaction __DEC_operand_enclosingInteraction_380577 = null;\n      InteractionOperand __DEC_operand_fragment_837421 = null;\n      InteractionOperand __DEC_guard_guard_585100 = null;\n      CombinedFragment __DEC_operand_operand_610006 = null;\n      Constraint __DEC_spec_specification_474834 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      CombinedFragment combo = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // check link coveredBy from combo to line\n         JavaSDM.ensure (combo.getCovered ().contains (line));\n\n         // iterate to-many link coveredBy from line to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from combo to interaction\n               JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n               ));\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // iterate to-many link coveredBy from line to operand\n               fujaba__Success = false;\n\n               fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // bind object\n                     guard = operand.getGuard ();\n\n                     // check object guard is really bound\n                     JavaSDM.ensure ( guard != null );\n\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // bind object\n                     _TmpObject = guard.getSpecification ();\n\n                     // ensure correct type and really bound of object spec\n                     JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                     spec = (LiteralString) _TmpObject;\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_759924 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_759924 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_759924 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_759924 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_759924.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_970540 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_970540 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_970540 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_970540 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_970540.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_210108 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_210108 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_210108 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_210108 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_210108.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_380577 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_380577 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_380577 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_380577 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_380577.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_837421 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_837421 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_837421 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_837421 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_837421.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_585100 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_585100 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_585100 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_585100.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_585100 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_585100.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_610006 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_610006 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_610006 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_610006.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_610006 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_610006.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_474834 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_474834 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_474834 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_474834.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_474834 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_474834.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to combo\n                              JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_418(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_622776 = null;\n      InteractionOperand __DEC_messageReceive_fragment_361231 = null;\n      InteractionOperand __DEC_messageSend_fragment_348118 = null;\n      Interaction __DEC_operand_enclosingInteraction_467109 = null;\n      InteractionOperand __DEC_operand_fragment_519424 = null;\n      InteractionOperand __DEC_guard_guard_452726 = null;\n      CombinedFragment __DEC_operand_operand_945137 = null;\n      Constraint __DEC_spec_specification_561530 = null;\n      Match match = null;\n      Iterator fujaba__IterLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      Iterator fujaba__IterLineToOperand = null;\n      InteractionOperand operand = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline line = null;\n      CombinedFragment combo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // check link coveredBy from combo to line\n         JavaSDM.ensure (combo.getCovered ().contains (line));\n\n         // iterate to-many link coveredBy from line to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from combo to interaction\n               JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n               ));\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // iterate to-many link coveredBy from line to operand\n               fujaba__Success = false;\n\n               fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToOperand.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToOperand.next ();\n\n                     // ensure correct type and really bound of object operand\n                     JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n                     operand = (InteractionOperand) _TmpObject;\n                     // bind object\n                     guard = operand.getGuard ();\n\n                     // check object guard is really bound\n                     JavaSDM.ensure ( guard != null );\n\n                     // check link operand from operand to combo\n                     JavaSDM.ensure (combo.equals (operand.eContainer()\n                     ));\n\n                     // bind object\n                     _TmpObject = guard.getSpecification ();\n\n                     // ensure correct type and really bound of object spec\n                     JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n                     spec = (LiteralString) _TmpObject;\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // iterate to-many link src from line to _edge_coveredBy\n                           fujaba__Success = false;\n\n                           fujaba__IterLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,EMoflonEdge.class,\"src\")).iterator ();\n\n                           while ( fujaba__IterLineTo_edge_coveredBy.hasNext () )\n                           {\n                              try\n                              {\n                                 _edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy.next ();\n\n                                 // check object _edge_coveredBy is really bound\n                                 JavaSDM.ensure ( _edge_coveredBy != null );\n                                 // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                 JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                 // check link trg from _edge_coveredBy to combo\n                                 JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                                 ));\n\n                                 // story node \'test core match and DECs\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // negative check for link message from messageReceive\n                                    JavaSDM.ensure (messageReceive.getMessage () == null);\n                                    // negative check for link message from messageSend\n                                    JavaSDM.ensure (messageSend.getMessage () == null);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_combo_fragment_622776 = combo.getEnclosingOperand ();\n\n                                       // check object __DEC_combo_fragment_622776 is really bound\n                                       JavaSDM.ensure ( __DEC_combo_fragment_622776 != null );\n\n                                       // check isomorphic binding between objects __DEC_combo_fragment_622776 and operand \n                                       JavaSDM.ensure ( !__DEC_combo_fragment_622776.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageReceive_fragment_361231 = messageReceive.getEnclosingOperand ();\n\n                                       // check object __DEC_messageReceive_fragment_361231 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_fragment_361231 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageReceive_fragment_361231 and operand \n                                       JavaSDM.ensure ( !__DEC_messageReceive_fragment_361231.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_messageSend_fragment_348118 = messageSend.getEnclosingOperand ();\n\n                                       // check object __DEC_messageSend_fragment_348118 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_fragment_348118 != null );\n\n                                       // check isomorphic binding between objects __DEC_messageSend_fragment_348118 and operand \n                                       JavaSDM.ensure ( !__DEC_messageSend_fragment_348118.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_enclosingInteraction_467109 = operand.getEnclosingInteraction ();\n\n                                       // check object __DEC_operand_enclosingInteraction_467109 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_enclosingInteraction_467109 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_enclosingInteraction_467109 and interaction \n                                       JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_467109.equals (interaction) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_fragment_519424 = operand.getEnclosingOperand ();\n\n                                       // check object __DEC_operand_fragment_519424 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_fragment_519424 != null );\n\n                                       // check isomorphic binding between objects __DEC_operand_fragment_519424 and operand \n                                       JavaSDM.ensure ( !__DEC_operand_fragment_519424.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link packagedElement from guard\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // negative check for link packagedElement from spec\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_guard_guard_452726 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                       // check object __DEC_guard_guard_452726 is really bound\n                                       JavaSDM.ensure ( __DEC_guard_guard_452726 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(guard.equals(__DEC_guard_guard_452726.getGuard()));\n\n                                       // check isomorphic binding between objects __DEC_guard_guard_452726 and operand \n                                       JavaSDM.ensure ( !__DEC_guard_guard_452726.equals (operand) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_operand_operand_945137 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                       // check object __DEC_operand_operand_945137 is really bound\n                                       JavaSDM.ensure ( __DEC_operand_operand_945137 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(__DEC_operand_operand_945137.getOperand().contains(operand));\n\n                                       // check isomorphic binding between objects __DEC_operand_operand_945137 and combo \n                                       JavaSDM.ensure ( !__DEC_operand_operand_945137.equals (combo) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // check negative bindings\n                                    try\n                                    {\n                                       fujaba__Success = false;\n\n                                       // bind object\n                                       __DEC_spec_specification_561530 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                       // check object __DEC_spec_specification_561530 is really bound\n                                       JavaSDM.ensure ( __DEC_spec_specification_561530 != null );\n\n                                       // check if contained via correct reference\n                                       JavaSDM.ensure(spec.equals(__DEC_spec_specification_561530.getSpecification()));\n\n                                       // check isomorphic binding between objects __DEC_spec_specification_561530 and guard \n                                       JavaSDM.ensure ( !__DEC_spec_specification_561530.equals (guard) );\n\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n                                    fujaba__Success = !(fujaba__Success);\n\n                                    JavaSDM.ensure ( fujaba__Success );\n\n                                    // negative check for link receiveEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link receiveEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageReceive\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                                    // negative check for link sendEvent from messageSend\n                                    JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from operand to operand\n                                    JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                                    )));\n\n                                    // check object _edge_covered is really bound\n                                    JavaSDM.ensure ( _edge_covered != null );\n                                    // check object _edge_coveredBy is really bound\n                                    JavaSDM.ensure ( _edge_coveredBy != null );\n                                    // check object combo is really bound\n                                    JavaSDM.ensure ( combo != null );\n                                    // check object guard is really bound\n                                    JavaSDM.ensure ( guard != null );\n                                    // check object interaction is really bound\n                                    JavaSDM.ensure ( interaction != null );\n                                    // check object line is really bound\n                                    JavaSDM.ensure ( line != null );\n                                    // check object messageReceive is really bound\n                                    JavaSDM.ensure ( messageReceive != null );\n                                    // check object messageSend is really bound\n                                    JavaSDM.ensure ( messageSend != null );\n                                    // check object operand is really bound\n                                    JavaSDM.ensure ( operand != null );\n                                    // check object spec is really bound\n                                    JavaSDM.ensure ( spec != null );\n                                    // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                                    JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                                    // check isomorphic binding between objects messageSend and messageReceive \n                                    JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                                    // check link fragment from combo to interaction\n                                    JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageReceive to interaction\n                                    JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from messageSend to interaction\n                                    JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                                    ));\n\n                                    // check link fragment from operand to interaction\n                                    JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                                    )));\n\n                                    // check link fragment from combo to operand\n                                    JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageReceive to operand\n                                    JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                                    )));\n\n                                    // check link fragment from messageSend to operand\n                                    JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                                    )));\n\n                                    // check link guard from operand to guard\n                                    JavaSDM.ensure (guard.equals (operand.getGuard ()\n                                    ));\n\n                                    // check link lifeline from line to interaction\n                                    JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                                    ));\n\n                                    // check link operand from operand to combo\n                                    JavaSDM.ensure (combo.equals (operand.eContainer()\n                                    ));\n\n                                    // check link specification from spec to guard\n                                    JavaSDM.ensure (guard.equals (spec.eContainer()\n                                    ));\n\n                                    // check link src from _edge_covered to combo\n                                    JavaSDM.ensure (combo.equals (_edge_covered.getSrc ()\n                                    ));\n\n                                    // check link src from _edge_coveredBy to line\n                                    JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                                    ));\n\n                                    // check link trg from _edge_covered to line\n                                    JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                                    ));\n\n                                    // check link trg from _edge_coveredBy to combo\n                                    JavaSDM.ensure (combo.equals (_edge_coveredBy.getTrg ()\n                                    ));\n\n                                    // check link coveredBy from combo to line\n                                    JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                                    // check link coveredBy from messageSend to line\n                                    JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                                    // check link coveredBy from operand to line\n                                    JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                                    // create object match\n                                    match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                                    // assign attribute match\n                                    match.setRuleName (__eClass.getName());\n                                    // statement node \'bookkeeping with generic isAppropriate method\'\n                                    fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                                    if (fujaba__Success)\n                                    {\n                                       // statement node \'Ensure that the correct types of elements are matched\'\n                                       fujaba__Success = this.checkTypes_BWD(match);\n                                       if (fujaba__Success)\n                                       {\n                                          // story node \'Add match to rule result\'\n                                          try \n                                          {\n                                             fujaba__Success = false; \n\n                                             // check object __performOperation is really bound\n                                             JavaSDM.ensure ( __performOperation != null );\n                                             // check object __result is really bound\n                                             JavaSDM.ensure ( __result != null );\n                                             // check object match is really bound\n                                             JavaSDM.ensure ( match != null );\n\n                                             // create link\n                                             org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                             // create link\n                                             __result.getContents().add(match);\n\n                                             fujaba__Success = true;\n                                          }\n                                          catch ( JavaSDMException fujaba__InternalException )\n                                          {\n                                             fujaba__Success = false;\n                                          }\n\n\n                                       }\n                                       else\n                                       {\n\n                                       }\n\n                                    }\n                                    else\n                                    {\n\n                                    }\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_419(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_418624 = null;\n      InteractionOperand __DEC_messageReceive_fragment_543448 = null;\n      InteractionOperand __DEC_messageSend_fragment_273285 = null;\n      Interaction __DEC_operand_enclosingInteraction_805255 = null;\n      InteractionOperand __DEC_operand_fragment_271490 = null;\n      InteractionOperand __DEC_guard_guard_654490 = null;\n      CombinedFragment __DEC_operand_operand_486843 = null;\n      Constraint __DEC_spec_specification_574377 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterLineToCombo = null;\n      CombinedFragment combo = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // check link coveredBy from operand to line\n         JavaSDM.ensure (operand.getCovered ().contains (line));\n\n         // iterate to-many link coveredBy from line to combo\n         fujaba__Success = false;\n\n         fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToCombo.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToCombo.next ();\n\n               // ensure correct type and really bound of object combo\n               JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n               combo = (CombinedFragment) _TmpObject;\n               // check link operand from operand to combo\n               JavaSDM.ensure (combo.equals (operand.eContainer()\n               ));\n\n               // iterate to-many link coveredBy from line to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // bind object\n                     interaction = line.getInteraction ();\n\n                     // check object interaction is really bound\n                     JavaSDM.ensure ( interaction != null );\n\n                     // check link fragment from combo to interaction\n                     JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                     ));\n\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_418624 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_418624 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_418624 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_418624 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_418624.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_543448 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_543448 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_543448 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_543448 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_543448.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_273285 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_273285 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_273285 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_273285 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_273285.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_805255 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_805255 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_805255 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_805255 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_805255.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_271490 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_271490 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_271490 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_271490 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_271490.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_654490 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_654490 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_654490 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_654490.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_654490 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_654490.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_486843 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_486843 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_486843 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_486843.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_486843 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_486843.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_574377 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_574377 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_574377 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_574377.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_574377 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_574377.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to operand\n                              JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_420(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_593129 = null;\n      InteractionOperand __DEC_messageReceive_fragment_45090 = null;\n      InteractionOperand __DEC_messageSend_fragment_556773 = null;\n      Interaction __DEC_operand_enclosingInteraction_375020 = null;\n      InteractionOperand __DEC_operand_fragment_712513 = null;\n      InteractionOperand __DEC_guard_guard_585468 = null;\n      CombinedFragment __DEC_operand_operand_305779 = null;\n      Constraint __DEC_spec_specification_219847 = null;\n      Match match = null;\n      Iterator fujaba__IterLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Lifeline line = null;\n      LiteralString spec = null;\n      CombinedFragment combo = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // check link coveredBy from combo to line\n         JavaSDM.ensure (combo.getCovered ().contains (line));\n\n         // check link coveredBy from operand to line\n         JavaSDM.ensure (operand.getCovered ().contains (line));\n\n         // iterate to-many link coveredBy from line to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n         while ( fujaba__IterLineToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from combo to interaction\n               JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n               ));\n\n               // check link fragment from messageSend to interaction\n               JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n               ));\n\n               // iterate to-many link fragment from interaction to messageReceive\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n               while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // iterate to-many link src from line to _edge_coveredBy\n                     fujaba__Success = false;\n\n                     fujaba__IterLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,EMoflonEdge.class,\"src\")).iterator ();\n\n                     while ( fujaba__IterLineTo_edge_coveredBy.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy.next ();\n\n                           // check object _edge_coveredBy is really bound\n                           JavaSDM.ensure ( _edge_coveredBy != null );\n                           // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                           JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                           // check link trg from _edge_coveredBy to operand\n                           JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_593129 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_593129 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_593129 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_593129 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_593129.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_45090 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_45090 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_45090 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_45090 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_45090.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_556773 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_556773 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_556773 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_556773 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_556773.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_375020 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_375020 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_375020 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_375020 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_375020.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_712513 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_712513 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_712513 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_712513 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_712513.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_585468 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_585468 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_585468 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_585468.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_585468 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_585468.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_305779 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_305779 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_305779 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_305779.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_305779 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_305779.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_219847 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_219847 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_219847 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_219847.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_219847 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_219847.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_covered is really bound\n                              JavaSDM.ensure ( _edge_covered != null );\n                              // check object _edge_coveredBy is really bound\n                              JavaSDM.ensure ( _edge_coveredBy != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                              JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_covered to operand\n                              JavaSDM.ensure (operand.equals (_edge_covered.getSrc ()\n                              ));\n\n                              // check link src from _edge_coveredBy to line\n                              JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                              ));\n\n                              // check link trg from _edge_covered to line\n                              JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                              ));\n\n                              // check link trg from _edge_coveredBy to operand\n                              JavaSDM.ensure (operand.equals (_edge_coveredBy.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_421(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_509708 = null;\n      InteractionOperand __DEC_messageReceive_fragment_275194 = null;\n      InteractionOperand __DEC_messageSend_fragment_263713 = null;\n      Interaction __DEC_operand_enclosingInteraction_904660 = null;\n      InteractionOperand __DEC_operand_fragment_291914 = null;\n      InteractionOperand __DEC_guard_guard_499181 = null;\n      CombinedFragment __DEC_operand_operand_56963 = null;\n      Constraint __DEC_spec_specification_521953 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      LiteralString spec = null;\n      CombinedFragment combo = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_guard is really bound\n         JavaSDM.ensure ( _edge_guard != null );\n         // bind object\n         _TmpObject = _edge_guard.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // check link trg from _edge_guard to guard\n         JavaSDM.ensure (guard.equals (_edge_guard.getTrg ()\n         ));\n\n         // iterate to-many link coveredBy from operand to line\n         fujaba__Success = false;\n\n         fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from combo to interaction\n               JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n               ));\n\n               // check link coveredBy from combo to line\n               JavaSDM.ensure (combo.getCovered ().contains (line));\n\n               // iterate to-many link coveredBy from line to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_509708 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_509708 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_509708 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_509708 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_509708.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_275194 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_275194 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_275194 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_275194 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_275194.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_263713 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_263713 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_263713 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_263713 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_263713.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_904660 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_904660 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_904660 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_904660 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_904660.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_291914 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_291914 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_291914 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_291914 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_291914.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_499181 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_499181 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_499181 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_499181.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_499181 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_499181.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_56963 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_56963 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_56963 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_56963.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_56963 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_56963.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_521953 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_521953 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_521953 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_521953.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_521953 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_521953.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_guard is really bound\n                              JavaSDM.ensure ( _edge_guard != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_guard to operand\n                              JavaSDM.ensure (operand.equals (_edge_guard.getSrc ()\n                              ));\n\n                              // check link trg from _edge_guard to guard\n                              JavaSDM.ensure (guard.equals (_edge_guard.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_422(EMoflonEdge _edge_guard);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_combo_fragment_167831 = null;\n      InteractionOperand __DEC_messageReceive_fragment_594778 = null;\n      InteractionOperand __DEC_messageSend_fragment_486677 = null;\n      Interaction __DEC_operand_enclosingInteraction_636090 = null;\n      InteractionOperand __DEC_operand_fragment_106325 = null;\n      InteractionOperand __DEC_guard_guard_962219 = null;\n      CombinedFragment __DEC_operand_operand_801098 = null;\n      Constraint __DEC_spec_specification_952397 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterLineToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterOperandToLine = null;\n      Lifeline line = null;\n      LiteralString spec = null;\n      CombinedFragment combo = null;\n      InteractionOperand operand = null;\n      InteractionConstraint guard = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_specification is really bound\n         JavaSDM.ensure ( _edge_specification != null );\n         // bind object\n         _TmpObject = _edge_specification.getSrc ();\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n\n         // bind object\n         operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(guard.equals(operand.getGuard()));\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = _edge_specification.getTrg ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // check link specification from spec to guard\n         JavaSDM.ensure (guard.equals (spec.eContainer()\n         ));\n\n         // iterate to-many link coveredBy from operand to line\n         fujaba__Success = false;\n\n         fujaba__IterOperandToLine = new ArrayList(operand.getCovered()).iterator ();\n\n         while ( fujaba__IterOperandToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterOperandToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // bind object\n               interaction = line.getInteraction ();\n\n               // check object interaction is really bound\n               JavaSDM.ensure ( interaction != null );\n\n               // check link fragment from combo to interaction\n               JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n               ));\n\n               // check link coveredBy from combo to line\n               JavaSDM.ensure (combo.getCovered ().contains (line));\n\n               // iterate to-many link coveredBy from line to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy()).iterator ();\n\n               while ( fujaba__IterLineToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterLineToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // iterate to-many link fragment from interaction to messageReceive\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n                     while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n                           // ensure correct type and really bound of object messageReceive\n                           JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                           messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n                           // check isomorphic binding between objects messageSend and messageReceive \n                           JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link message from messageReceive\n                              JavaSDM.ensure (messageReceive.getMessage () == null);\n                              // negative check for link message from messageSend\n                              JavaSDM.ensure (messageSend.getMessage () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_combo_fragment_167831 = combo.getEnclosingOperand ();\n\n                                 // check object __DEC_combo_fragment_167831 is really bound\n                                 JavaSDM.ensure ( __DEC_combo_fragment_167831 != null );\n\n                                 // check isomorphic binding between objects __DEC_combo_fragment_167831 and operand \n                                 JavaSDM.ensure ( !__DEC_combo_fragment_167831.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageReceive_fragment_594778 = messageReceive.getEnclosingOperand ();\n\n                                 // check object __DEC_messageReceive_fragment_594778 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_fragment_594778 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageReceive_fragment_594778 and operand \n                                 JavaSDM.ensure ( !__DEC_messageReceive_fragment_594778.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_messageSend_fragment_486677 = messageSend.getEnclosingOperand ();\n\n                                 // check object __DEC_messageSend_fragment_486677 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_fragment_486677 != null );\n\n                                 // check isomorphic binding between objects __DEC_messageSend_fragment_486677 and operand \n                                 JavaSDM.ensure ( !__DEC_messageSend_fragment_486677.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_enclosingInteraction_636090 = operand.getEnclosingInteraction ();\n\n                                 // check object __DEC_operand_enclosingInteraction_636090 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_enclosingInteraction_636090 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_enclosingInteraction_636090 and interaction \n                                 JavaSDM.ensure ( !__DEC_operand_enclosingInteraction_636090.equals (interaction) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_fragment_106325 = operand.getEnclosingOperand ();\n\n                                 // check object __DEC_operand_fragment_106325 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_fragment_106325 != null );\n\n                                 // check isomorphic binding between objects __DEC_operand_fragment_106325 and operand \n                                 JavaSDM.ensure ( !__DEC_operand_fragment_106325.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link packagedElement from guard\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // negative check for link packagedElement from spec\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_guard_guard_962219 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n                                 // check object __DEC_guard_guard_962219 is really bound\n                                 JavaSDM.ensure ( __DEC_guard_guard_962219 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(guard.equals(__DEC_guard_guard_962219.getGuard()));\n\n                                 // check isomorphic binding between objects __DEC_guard_guard_962219 and operand \n                                 JavaSDM.ensure ( !__DEC_guard_guard_962219.equals (operand) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_operand_operand_801098 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n                                 // check object __DEC_operand_operand_801098 is really bound\n                                 JavaSDM.ensure ( __DEC_operand_operand_801098 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(__DEC_operand_operand_801098.getOperand().contains(operand));\n\n                                 // check isomorphic binding between objects __DEC_operand_operand_801098 and combo \n                                 JavaSDM.ensure ( !__DEC_operand_operand_801098.equals (combo) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // bind object\n                                 __DEC_spec_specification_952397 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n                                 // check object __DEC_spec_specification_952397 is really bound\n                                 JavaSDM.ensure ( __DEC_spec_specification_952397 != null );\n\n                                 // check if contained via correct reference\n                                 JavaSDM.ensure(spec.equals(__DEC_spec_specification_952397.getSpecification()));\n\n                                 // check isomorphic binding between objects __DEC_spec_specification_952397 and guard \n                                 JavaSDM.ensure ( !__DEC_spec_specification_952397.equals (guard) );\n\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // negative check for link receiveEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link receiveEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageReceive\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\") .size() == 0);\n                              // negative check for link sendEvent from messageSend\n                              JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\") .size() == 0);\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from operand to operand\n                              JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n                              )));\n\n                              // check object _edge_specification is really bound\n                              JavaSDM.ensure ( _edge_specification != null );\n                              // check object combo is really bound\n                              JavaSDM.ensure ( combo != null );\n                              // check object guard is really bound\n                              JavaSDM.ensure ( guard != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object operand is really bound\n                              JavaSDM.ensure ( operand != null );\n                              // check object spec is really bound\n                              JavaSDM.ensure ( spec != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from combo to interaction\n                              JavaSDM.ensure (interaction.equals (combo.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from operand to interaction\n                              JavaSDM.ensure (!(interaction.equals (operand.getEnclosingInteraction ()\n                              )));\n\n                              // check link fragment from combo to operand\n                              JavaSDM.ensure (!(operand.equals (combo.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageReceive to operand\n                              JavaSDM.ensure (!(operand.equals (messageReceive.getEnclosingOperand ()\n                              )));\n\n                              // check link fragment from messageSend to operand\n                              JavaSDM.ensure (!(operand.equals (messageSend.getEnclosingOperand ()\n                              )));\n\n                              // check link guard from operand to guard\n                              JavaSDM.ensure (guard.equals (operand.getGuard ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link operand from operand to combo\n                              JavaSDM.ensure (combo.equals (operand.eContainer()\n                              ));\n\n                              // check link specification from spec to guard\n                              JavaSDM.ensure (guard.equals (spec.eContainer()\n                              ));\n\n                              // check link src from _edge_specification to guard\n                              JavaSDM.ensure (guard.equals (_edge_specification.getSrc ()\n                              ));\n\n                              // check link trg from _edge_specification to spec\n                              JavaSDM.ensure (spec.equals (_edge_specification.getTrg ()\n                              ));\n\n                              // check link coveredBy from combo to line\n                              JavaSDM.ensure (combo.getCovered ().contains (line));\n\n                              // check link coveredBy from messageSend to line\n                              JavaSDM.ensure (messageSend.getCovered ().contains (line));\n\n                              // check link coveredBy from operand to line\n                              JavaSDM.ensure (operand.getCovered ().contains (line));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,line,messageSend,interaction,combo,messageReceive,operand,guard,spec);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_423(
			EMoflonEdge _edge_specification);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // AltSysStepBFToComboRule
