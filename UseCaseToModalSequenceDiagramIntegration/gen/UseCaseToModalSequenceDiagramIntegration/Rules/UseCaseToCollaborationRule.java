/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.Collaboration;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToCollaboration;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Use Case To Collaboration Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getUseCaseToCollaborationRule()
 * @model
 * @generated
 */
public interface UseCaseToCollaborationRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,packageDeclaration,useCase));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"toBeTranslatedNodes\");\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,packageDeclaration,useCase);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclarationToPackage_source_packageDeclaration = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __packageDeclarationToPackage_target__package = null;\n      CSP csp = null;\n      ModalSequenceDiagram.Package _package = null;\n      Iterator fujaba__IterPackageDeclarationToPackageDeclarationToPackage = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UseCaseToCollaborationRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from packageDeclaration to packageDeclarationToPackage\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToPackageDeclarationToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(packageDeclaration,PackageDeclarationToPackage.class,\"source\")).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToPackageDeclarationToPackage.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPackage = (PackageDeclarationToPackage) fujaba__IterPackageDeclarationToPackageDeclarationToPackage.next ();\n\n               // check object packageDeclarationToPackage is really bound\n               JavaSDM.ensure ( packageDeclarationToPackage != null );\n               // bind object\n               _package = packageDeclarationToPackage.getTarget ();\n\n               // check object _package is really bound\n               JavaSDM.ensure ( _package != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToPackage is really bound\n                  JavaSDM.ensure ( packageDeclarationToPackage != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check link source from packageDeclarationToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToPackage.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToPackage to _package\n                  JavaSDM.ensure (_package.equals (packageDeclarationToPackage.getTarget ()\n                  ));\n\n                  // check link useCases from useCase to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __packageDeclaration_useCases_useCase\n                  __packageDeclaration_useCases_useCase.setName (\"useCases\");\n                  // assign attribute __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration.setName (\"source\");\n                  // assign attribute __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package.setName (\"target\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(_package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setTrg( _package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                  // create link\n                  __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_target__package,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_source_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,packageDeclaration,_package,packageDeclarationToPackage,useCase));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UseCaseToCollaborationRule\");\n\n                        // create link\n                        isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      ModalSequenceDiagram.Package _package = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Collaboration collaboration = null;\n      UseCaseToCollaboration useCaseToCollaboration = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge useCaseToCollaboration__target__collaboration = null;\n      EMoflonEdge _package__packagedElement__collaboration = null;\n      EMoflonEdge useCaseToCollaboration__source__useCase = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToPackage\"));\n\n         // ensure correct type and really bound of object packageDeclarationToPackage\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToPackage = (PackageDeclarationToPackage) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object collaboration\n         collaboration = ModalSequenceDiagramFactory.eINSTANCE.createCollaboration();\n\n         // create object useCaseToCollaboration\n         useCaseToCollaboration = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createUseCaseToCollaboration();\n\n         // assign attribute collaboration\n         collaboration.setName ((java.lang.String)csp.getAttributeVariable(\"collaboration\",\"name\").getValue());\n\n         // create link\n         \t_package.getPackagedElement().add(collaboration); // add link\n\n\n         // create link\n         useCaseToCollaboration.setSource( useCase);\n\n\n         // create link\n         useCaseToCollaboration.setTarget( collaboration);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object collaboration is really bound\n         JavaSDM.ensure ( collaboration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToCollaboration is really bound\n         JavaSDM.ensure ( useCaseToCollaboration != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,collaboration,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object collaboration is really bound\n         JavaSDM.ensure ( collaboration != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToCollaboration is really bound\n         JavaSDM.ensure ( useCaseToCollaboration != null );\n         // check isomorphic binding between objects collaboration and _package \n         JavaSDM.ensure ( !collaboration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and _package \n         JavaSDM.ensure ( !packageDeclaration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and _package \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (_package) );\n\n         // check isomorphic binding between objects useCase and _package \n         JavaSDM.ensure ( !useCase.equals (_package) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and _package \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and collaboration \n         JavaSDM.ensure ( !packageDeclaration.equals (collaboration) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and collaboration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (collaboration) );\n\n         // check isomorphic binding between objects useCase and collaboration \n         JavaSDM.ensure ( !useCase.equals (collaboration) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and collaboration \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (collaboration) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and packageDeclaration \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCase.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and useCase \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (useCase) );\n\n         // create object __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCaseToCollaboration__target__collaboration\n         useCaseToCollaboration__target__collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object _package__packagedElement__collaboration\n         _package__packagedElement__collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCaseToCollaboration__source__useCase\n         useCaseToCollaboration__source__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UseCaseToCollaborationRule\");\n         // assign attribute __packageDeclaration_useCases_useCase\n         __packageDeclaration_useCases_useCase.setName (\"useCases\");\n         // assign attribute _package__packagedElement__collaboration\n         _package__packagedElement__collaboration.setName (\"packagedElement\");\n         // assign attribute useCaseToCollaboration__source__useCase\n         useCaseToCollaboration__source__useCase.setName (\"source\");\n         // assign attribute useCaseToCollaboration__target__collaboration\n         useCaseToCollaboration__target__collaboration.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_useCases_useCase,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration__target__collaboration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,_package__packagedElement__collaboration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration__source__useCase,\"createdEdges\");\n\n         // create link\n         __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         _package__packagedElement__collaboration.setSrc( _package);\n\n\n         // create link\n         __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n         // create link\n         useCaseToCollaboration__source__useCase.setTrg( useCase);\n\n\n         // create link\n         useCaseToCollaboration__target__collaboration.setTrg( collaboration);\n\n\n         // create link\n         _package__packagedElement__collaboration.setTrg( collaboration);\n\n\n         // create link\n         useCaseToCollaboration__source__useCase.setSrc( useCaseToCollaboration);\n\n\n         // create link\n         useCaseToCollaboration__target__collaboration.setSrc( useCaseToCollaboration);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,packageDeclaration,_package,packageDeclarationToPackage,useCase,collaboration,useCaseToCollaboration);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"useCase\", useCase);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, UseCase useCase);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", true, csp);\r\nvar_useCase_name.setValue(useCase.getName());\r\nvar_useCase_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_collaboration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"collaboration.name\", csp);\r\nvar_collaboration_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_useCase_name,var_collaboration_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"_package\",_package);\r\nisApplicableMatch.registerObject(\"packageDeclarationToPackage\",packageDeclarationToPackage);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package _package,
			PackageDeclarationToPackage packageDeclarationToPackage,
			UseCase useCase);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"_package\", _package);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"collaboration\", collaboration);\nruleresult.registerObject(\"useCaseToCollaboration\", useCaseToCollaboration);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject _package,
			EObject packageDeclarationToPackage, EObject useCase,
			EObject collaboration, EObject useCaseToCollaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"useCase\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getUseCase());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge ___package_packagedElement_collaboration = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object collaboration is really bound\n         JavaSDM.ensure ( collaboration != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,_package,collaboration));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object collaboration is really bound\n            JavaSDM.ensure ( collaboration != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // create object ___package_packagedElement_collaboration\n            ___package_packagedElement_collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute ___package_packagedElement_collaboration\n            ___package_packagedElement_collaboration.setName (\"packagedElement\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,collaboration,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,___package_packagedElement_collaboration,\"toBeTranslatedEdges\");\n\n            // create link\n            ___package_packagedElement_collaboration.setSrc( _package);\n\n\n            // create link\n            ___package_packagedElement_collaboration.setTrg( collaboration);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object collaboration is really bound\n            JavaSDM.ensure ( collaboration != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,_package,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,_package,collaboration);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match,
			ModalSequenceDiagram.Package _package, Collaboration collaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      ModalSequenceDiagram.Package _package = null;\n      Collaboration collaboration = null;\n      EMoflonEdge __packageDeclarationToPackage_source_packageDeclaration = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclarationToPackage_target__package = null;\n      EMoflonEdge ___package_packagedElement_collaboration = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__Iter_packageToPackageDeclarationToPackage = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"UseCaseToCollaborationRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (match.getObject(\"collaboration\"));\n\n         // ensure correct type and really bound of object collaboration\n         JavaSDM.ensure ( _TmpObject instanceof Collaboration );\n         collaboration = (Collaboration) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from _package to packageDeclarationToPackage\n         fujaba__Success = false;\n\n         fujaba__Iter_packageToPackageDeclarationToPackage = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(_package,PackageDeclarationToPackage.class,\"target\")).iterator ();\n\n         while ( fujaba__Iter_packageToPackageDeclarationToPackage.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPackage = (PackageDeclarationToPackage) fujaba__Iter_packageToPackageDeclarationToPackage.next ();\n\n               // check object packageDeclarationToPackage is really bound\n               JavaSDM.ensure ( packageDeclarationToPackage != null );\n               // bind object\n               packageDeclaration = packageDeclarationToPackage.getSource ();\n\n               // check object packageDeclaration is really bound\n               JavaSDM.ensure ( packageDeclaration != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object _package is really bound\n                  JavaSDM.ensure ( _package != null );\n                  // check object collaboration is really bound\n                  JavaSDM.ensure ( collaboration != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToPackage is really bound\n                  JavaSDM.ensure ( packageDeclarationToPackage != null );\n                  // check link packagedElement from collaboration to _package\n                  JavaSDM.ensure (_package.equals (collaboration.eContainer()\n                  ));\n\n                  // check link source from packageDeclarationToPackage to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToPackage.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToPackage to _package\n                  JavaSDM.ensure (_package.equals (packageDeclarationToPackage.getTarget ()\n                  ));\n\n                  // create object __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object ___package_packagedElement_collaboration\n                  ___package_packagedElement_collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute ___package_packagedElement_collaboration\n                  ___package_packagedElement_collaboration.setName (\"packagedElement\");\n                  // assign attribute __packageDeclarationToPackage_source_packageDeclaration\n                  __packageDeclarationToPackage_source_packageDeclaration.setName (\"source\");\n                  // assign attribute __packageDeclarationToPackage_target__package\n                  __packageDeclarationToPackage_target__package.setName (\"target\");\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setTrg( _package);\n\n\n                  // create link\n                  ___package_packagedElement_collaboration.setSrc( _package);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(_package);\n\n\n                  // create link\n                  __packageDeclarationToPackage_target__package.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclarationToPackage);\n\n\n                  // create link\n                  __packageDeclarationToPackage_source_packageDeclaration.setSrc( packageDeclarationToPackage);\n\n\n                  // create link\n                  ___package_packagedElement_collaboration.setTrg( collaboration);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(collaboration);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_source_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,___package_packagedElement_collaboration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToPackage_target__package,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,packageDeclaration,_package,packageDeclarationToPackage,collaboration));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"UseCaseToCollaborationRule\");\n\n                        // create link\n                        isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      ModalSequenceDiagram.Package _package = null;\n      Collaboration collaboration = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      UseCaseToCollaboration useCaseToCollaboration = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge ___package_packagedElement_collaboration = null;\n      EMoflonEdge packageDeclaration__useCases__useCase = null;\n      EMoflonEdge useCaseToCollaboration__target__collaboration = null;\n      EMoflonEdge useCaseToCollaboration__source__useCase = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"_package\"));\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"collaboration\"));\n\n         // ensure correct type and really bound of object collaboration\n         JavaSDM.ensure ( _TmpObject instanceof Collaboration );\n         collaboration = (Collaboration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToPackage\"));\n\n         // ensure correct type and really bound of object packageDeclarationToPackage\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToPackage = (PackageDeclarationToPackage) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object useCase\n         useCase = UseCaseDSLFactory.eINSTANCE.createUseCase();\n\n         // create object useCaseToCollaboration\n         useCaseToCollaboration = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createUseCaseToCollaboration();\n\n         // assign attribute useCase\n         useCase.setName ((java.lang.String)csp.getAttributeVariable(\"useCase\",\"name\").getValue());\n\n         // create link\n         useCaseToCollaboration.setTarget( collaboration);\n\n\n         // create link\n         \tpackageDeclaration.getUseCases().add(useCase); // add link\n\n\n         // create link\n         useCaseToCollaboration.setSource( useCase);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object collaboration is really bound\n         JavaSDM.ensure ( collaboration != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToCollaboration is really bound\n         JavaSDM.ensure ( useCaseToCollaboration != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,collaboration,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _package is really bound\n         JavaSDM.ensure ( _package != null );\n         // check object collaboration is really bound\n         JavaSDM.ensure ( collaboration != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToPackage is really bound\n         JavaSDM.ensure ( packageDeclarationToPackage != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToCollaboration is really bound\n         JavaSDM.ensure ( useCaseToCollaboration != null );\n         // check isomorphic binding between objects collaboration and _package \n         JavaSDM.ensure ( !collaboration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and _package \n         JavaSDM.ensure ( !packageDeclaration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and _package \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (_package) );\n\n         // check isomorphic binding between objects useCase and _package \n         JavaSDM.ensure ( !useCase.equals (_package) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and _package \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (_package) );\n\n         // check isomorphic binding between objects packageDeclaration and collaboration \n         JavaSDM.ensure ( !packageDeclaration.equals (collaboration) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and collaboration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (collaboration) );\n\n         // check isomorphic binding between objects useCase and collaboration \n         JavaSDM.ensure ( !useCase.equals (collaboration) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and collaboration \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (collaboration) );\n\n         // check isomorphic binding between objects packageDeclarationToPackage and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToPackage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and packageDeclaration \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCase.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and packageDeclarationToPackage \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (packageDeclarationToPackage) );\n\n         // check isomorphic binding between objects useCaseToCollaboration and useCase \n         JavaSDM.ensure ( !useCaseToCollaboration.equals (useCase) );\n\n         // create object ___package_packagedElement_collaboration\n         ___package_packagedElement_collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCaseToCollaboration__target__collaboration\n         useCaseToCollaboration__target__collaboration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCaseToCollaboration__source__useCase\n         useCaseToCollaboration__source__useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"UseCaseToCollaborationRule\");\n         // assign attribute packageDeclaration__useCases__useCase\n         packageDeclaration__useCases__useCase.setName (\"useCases\");\n         // assign attribute ___package_packagedElement_collaboration\n         ___package_packagedElement_collaboration.setName (\"packagedElement\");\n         // assign attribute useCaseToCollaboration__source__useCase\n         useCaseToCollaboration__source__useCase.setName (\"source\");\n         // assign attribute useCaseToCollaboration__target__collaboration\n         useCaseToCollaboration__target__collaboration.setName (\"target\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,___package_packagedElement_collaboration,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__useCases__useCase,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration__target__collaboration,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCaseToCollaboration__source__useCase,\"createdEdges\");\n\n         // create link\n         packageDeclaration__useCases__useCase.setSrc( packageDeclaration);\n\n\n         // create link\n         ___package_packagedElement_collaboration.setSrc( _package);\n\n\n         // create link\n         useCaseToCollaboration__source__useCase.setTrg( useCase);\n\n\n         // create link\n         packageDeclaration__useCases__useCase.setTrg( useCase);\n\n\n         // create link\n         ___package_packagedElement_collaboration.setTrg( collaboration);\n\n\n         // create link\n         useCaseToCollaboration__target__collaboration.setTrg( collaboration);\n\n\n         // create link\n         useCaseToCollaboration__source__useCase.setSrc( useCaseToCollaboration);\n\n\n         // create link\n         useCaseToCollaboration__target__collaboration.setSrc( useCaseToCollaboration);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,packageDeclaration,_package,packageDeclarationToPackage,useCase,collaboration,useCaseToCollaboration);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"_package\", _package);\nmatch.registerObject(\"collaboration\", collaboration);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match,
			ModalSequenceDiagram.Package _package, Collaboration collaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match,
			ModalSequenceDiagram.Package _package, Collaboration collaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_collaboration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"collaboration.name\", true, csp);\r\nvar_collaboration_name.setValue(collaboration.getName());\r\nvar_collaboration_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", csp);\r\nvar_useCase_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_useCase_name,var_collaboration_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"_package\",_package);\r\nisApplicableMatch.registerObject(\"packageDeclarationToPackage\",packageDeclarationToPackage);\r\nisApplicableMatch.registerObject(\"collaboration\",collaboration);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package _package,
			PackageDeclarationToPackage packageDeclarationToPackage,
			Collaboration collaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"_package\", _package);\nruleresult.registerObject(\"packageDeclarationToPackage\", packageDeclarationToPackage);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"collaboration\", collaboration);\nruleresult.registerObject(\"useCaseToCollaboration\", useCaseToCollaboration);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject _package,
			EObject packageDeclarationToPackage, EObject useCase,
			EObject collaboration, EObject useCaseToCollaboration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"collaboration\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getCollaboration());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_useCase_useCases_65977 = null;\n      Match match = null;\n      UseCase useCase = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_useCases is really bound\n         JavaSDM.ensure ( _edge_useCases != null );\n         // bind object\n         _TmpObject = _edge_useCases.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_useCases.getTrg ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // check link useCases from useCase to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_useCase_useCases_65977 = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n               // check object __DEC_useCase_useCases_65977 is really bound\n               JavaSDM.ensure ( __DEC_useCase_useCases_65977 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_useCase_useCases_65977.getUseCases().contains(useCase));\n\n               // check isomorphic binding between objects __DEC_useCase_useCases_65977 and packageDeclaration \n               JavaSDM.ensure ( !__DEC_useCase_useCases_65977.equals (packageDeclaration) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_useCases is really bound\n            JavaSDM.ensure ( _edge_useCases != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check link src from _edge_useCases to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (_edge_useCases.getSrc ()\n            ));\n\n            // check link trg from _edge_useCases to useCase\n            JavaSDM.ensure (useCase.equals (_edge_useCases.getTrg ()\n            ));\n\n            // check link useCases from useCase to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,packageDeclaration,useCase);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_5(EMoflonEdge _edge_useCases);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      ModalSequenceDiagram.Package __DEC_collaboration_packagedElement_39140 = null;\n      Match match = null;\n      Collaboration collaboration = null;\n      ModalSequenceDiagram.Package _package = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_packagedElement is really bound\n         JavaSDM.ensure ( _edge_packagedElement != null );\n         // bind object\n         _TmpObject = _edge_packagedElement.getSrc ();\n\n         // ensure correct type and really bound of object _package\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         _package = (ModalSequenceDiagram.Package) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_packagedElement.getTrg ();\n\n         // ensure correct type and really bound of object collaboration\n         JavaSDM.ensure ( _TmpObject instanceof Collaboration );\n         collaboration = (Collaboration) _TmpObject;\n\n         // check link packagedElement from collaboration to _package\n         JavaSDM.ensure (_package.equals (collaboration.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_collaboration_packagedElement_39140 = collaboration.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) collaboration.eContainer() : null;\n\n               // check object __DEC_collaboration_packagedElement_39140 is really bound\n               JavaSDM.ensure ( __DEC_collaboration_packagedElement_39140 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_collaboration_packagedElement_39140.getPackagedElement().contains(collaboration));\n\n               // check isomorphic binding between objects __DEC_collaboration_packagedElement_39140 and _package \n               JavaSDM.ensure ( !__DEC_collaboration_packagedElement_39140.equals (_package) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_packagedElement is really bound\n            JavaSDM.ensure ( _edge_packagedElement != null );\n            // check object _package is really bound\n            JavaSDM.ensure ( _package != null );\n            // check object collaboration is really bound\n            JavaSDM.ensure ( collaboration != null );\n            // check link packagedElement from collaboration to _package\n            JavaSDM.ensure (_package.equals (collaboration.eContainer()\n            ));\n\n            // check link src from _edge_packagedElement to _package\n            JavaSDM.ensure (_package.equals (_edge_packagedElement.getSrc ()\n            ));\n\n            // check link trg from _edge_packagedElement to collaboration\n            JavaSDM.ensure (collaboration.equals (_edge_packagedElement.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,_package,collaboration);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_5(
			EMoflonEdge _edge_packagedElement);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Collaboration collaboration = null;\n      UseCaseToCollaboration useCaseToCollaboration = null;\n      ModalSequenceDiagram.Package _package = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__IterPackageDeclarationToPackageListToPackageDeclarationToPackage = null;\n      PackageDeclarationToPackage packageDeclarationToPackage = null;\n      Iterator fujaba__IterRuleEntryContainerToPackageDeclarationToPackageList = null;\n      RuleEntryList packageDeclarationToPackageList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to packageDeclarationToPackageList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToPackageDeclarationToPackageList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToPackageDeclarationToPackageList.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPackageList = (RuleEntryList) fujaba__IterRuleEntryContainerToPackageDeclarationToPackageList.next ();\n\n               // check object packageDeclarationToPackageList is really bound\n               JavaSDM.ensure ( packageDeclarationToPackageList != null );\n               // iterate to-many link entryObjects from packageDeclarationToPackageList to packageDeclarationToPackage\n               fujaba__Success = false;\n\n               fujaba__IterPackageDeclarationToPackageListToPackageDeclarationToPackage = new ArrayList(packageDeclarationToPackageList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterPackageDeclarationToPackageListToPackageDeclarationToPackage.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterPackageDeclarationToPackageListToPackageDeclarationToPackage.next ();\n\n                     // ensure correct type and really bound of object packageDeclarationToPackage\n                     JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n                     packageDeclarationToPackage = (PackageDeclarationToPackage) _TmpObject;\n                     // bind object\n                     packageDeclaration = packageDeclarationToPackage.getSource ();\n\n                     // check object packageDeclaration is really bound\n                     JavaSDM.ensure ( packageDeclaration != null );\n\n                     // bind object\n                     _package = packageDeclarationToPackage.getTarget ();\n\n                     // check object _package is really bound\n                     JavaSDM.ensure ( _package != null );\n\n                     // story node \'solve CSP\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,packageDeclaration,_package,packageDeclarationToPackage,useCase,collaboration,useCaseToCollaboration,ruleResult));\n\n                        // ensure correct type and really bound of object csp\n                        JavaSDM.ensure ( _TmpObject instanceof CSP );\n                        csp = (CSP) _TmpObject;\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n                     // statement node \'check CSP\'\n                     fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                     if (fujaba__Success)\n                     {\n                        // story node \'perform\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object _package is really bound\n                           JavaSDM.ensure ( _package != null );\n                           // check object packageDeclaration is really bound\n                           JavaSDM.ensure ( packageDeclaration != null );\n                           // check object packageDeclarationToPackage is really bound\n                           JavaSDM.ensure ( packageDeclarationToPackage != null );\n                           // check object ruleResult is really bound\n                           JavaSDM.ensure ( ruleResult != null );\n                           // create object useCase\n                           useCase = UseCaseDSLFactory.eINSTANCE.createUseCase();\n\n                           // create object collaboration\n                           collaboration = ModalSequenceDiagramFactory.eINSTANCE.createCollaboration();\n\n                           // create object useCaseToCollaboration\n                           useCaseToCollaboration = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createUseCaseToCollaboration();\n\n                           // assign attribute useCase\n                           useCase.setName ((java.lang.String)csp.getAttributeVariable(\"useCase\",\"name\").getValue());\n                           // assign attribute collaboration\n                           collaboration.setName ((java.lang.String)csp.getAttributeVariable(\"collaboration\",\"name\").getValue());\n                           // assign attribute ruleResult\n                           ruleResult.setSuccess (true);\n\n                           // create link\n                           \tpackageDeclaration.getUseCases().add(useCase); // add link\n\n\n                           // create link\n                           \t_package.getPackagedElement().add(collaboration); // add link\n\n\n                           // create link\n                           ruleResult.getSourceObjects().add(useCase);\n\n\n                           // create link\n                           useCaseToCollaboration.setSource( useCase);\n\n\n                           // create link\n                           useCaseToCollaboration.setTarget( collaboration);\n\n\n                           // create link\n                           ruleResult.getTargetObjects().add(collaboration);\n\n\n                           // create link\n                           ruleResult.getCorrObjects().add(useCaseToCollaboration);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        return ruleResult;\n\n                     }\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			PackageDeclarationToPackage packageDeclarationToPackageDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_useCase_name = CSPFactoryHelper.eINSTANCE.createVariable(\"useCase.name\", csp);\r\nvar_useCase_name.setType(\"\");\r\nVariable var_collaboration_name = CSPFactoryHelper.eINSTANCE.createVariable(\"collaboration.name\", csp);\r\nvar_collaboration_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_useCase_name,var_collaboration_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"_package\",_package);\r\nisApplicableMatch.registerObject(\"packageDeclarationToPackage\",packageDeclarationToPackage);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package _package,
			PackageDeclarationToPackage packageDeclarationToPackage,
			UseCase useCase, Collaboration collaboration,
			UseCaseToCollaboration useCaseToCollaboration,
			ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // UseCaseToCollaborationRule
