/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToMessage;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Parallel Flow To Operand Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getParallelFlowToOperandRule()
 * @model
 * @generated
 */
public interface ParallelFlowToOperandRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __step_invokedFlows_parFlow = null;\n      EMoflonEdge __useCase_flows_parFlow = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object parFlow is really bound\n         JavaSDM.ensure ( parFlow != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,step,parFlow,useCase,flow));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parFlow is really bound\n            JavaSDM.ensure ( parFlow != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parFlow and flow \n            JavaSDM.ensure ( !parFlow.equals (flow) );\n\n            // create object __step_invokedFlows_parFlow\n            __step_invokedFlows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_parFlow\n            __useCase_flows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __step_invokedFlows_parFlow\n            __step_invokedFlows_parFlow.setName (\"invokedFlows\");\n            // assign attribute __useCase_flows_parFlow\n            __useCase_flows_parFlow.setName (\"flows\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_invokedFlows_parFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,parFlow,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_parFlow,\"toBeTranslatedEdges\");\n\n            // create link\n            __step_invokedFlows_parFlow.setSrc( step);\n\n\n            // create link\n            __useCase_flows_parFlow.setTrg( parFlow);\n\n\n            // create link\n            __step_invokedFlows_parFlow.setTrg( parFlow);\n\n\n            // create link\n            __useCase_flows_parFlow.setSrc( useCase);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object parFlow is really bound\n            JavaSDM.ensure ( parFlow != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parFlow and flow \n            JavaSDM.ensure ( !parFlow.equals (flow) );\n\n            // create object __flow_steps_step\n            __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __flow_steps_step\n            __flow_steps_step.setName (\"steps\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_step,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            __flow_steps_step.setTrg( step);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __flow_steps_step.setSrc( flow);\n\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,step,parFlow,useCase,flow);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, ParallelStep step,
			ParallelFlow parFlow, UseCase useCase, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CombinedFragment combo = null;\n      Flow flow = null;\n      ParallelFlow parFlow = null;\n      ParallelStep step = null;\n      ParallelStepToCombinedFragment stepToCombo = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      InteractionOperand operand = null;\n      FlowToInteractionFragment parFlowToOperand = null;\n      InteractionConstraint guard = null;\n      LiteralString spec = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge combo__operand__operand = null;\n      EMoflonEdge guard__specification__spec = null;\n      EMoflonEdge operand__guard__guard = null;\n      EMoflonEdge parFlowToOperand__target__operand = null;\n      EMoflonEdge __useCase_flows_parFlow = null;\n      EMoflonEdge __step_invokedFlows_parFlow = null;\n      EMoflonEdge parFlowToOperand__source__parFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"parFlow\"));\n\n         // ensure correct type and really bound of object parFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parFlow = (ParallelFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         step = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"stepToCombo\"));\n\n         // ensure correct type and really bound of object stepToCombo\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStepToCombinedFragment );\n         stepToCombo = (ParallelStepToCombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object operand\n         operand = ModalSequenceDiagramFactory.eINSTANCE.createInteractionOperand();\n\n         // create object parFlowToOperand\n         parFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // create object guard\n         guard = ModalSequenceDiagramFactory.eINSTANCE.createInteractionConstraint();\n\n         // create object spec\n         spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();\n\n         // assign attribute spec\n         spec.setValue ((java.lang.String)csp.getValue(\"spec\",\"value\"));\n\n         // create link\n         \tcombo.getOperand().add(operand); // add link\n\n\n         // create link\n         parFlowToOperand.setSource( parFlow);\n\n\n         // create link\n         \toperand.setGuard(guard); // add link to one\n\n\n         // create link\n         parFlowToOperand.setTarget( operand);\n\n\n         // create link\n         \tguard.setSpecification(spec); // add link to one\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object parFlow is really bound\n         JavaSDM.ensure ( parFlow != null );\n         // check object parFlowToOperand is really bound\n         JavaSDM.ensure ( parFlowToOperand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlow,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,spec,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object parFlow is really bound\n         JavaSDM.ensure ( parFlow != null );\n         // check object parFlowToOperand is really bound\n         JavaSDM.ensure ( parFlowToOperand != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects guard and combo \n         JavaSDM.ensure ( !guard.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects parFlow and combo \n         JavaSDM.ensure ( !parFlow.equals (combo) );\n\n         // check isomorphic binding between objects parFlowToOperand and combo \n         JavaSDM.ensure ( !parFlowToOperand.equals (combo) );\n\n         // check isomorphic binding between objects spec and combo \n         JavaSDM.ensure ( !spec.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToCombo and combo \n         JavaSDM.ensure ( !stepToCombo.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects guard and flow \n         JavaSDM.ensure ( !guard.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         // check isomorphic binding between objects parFlowToOperand and flow \n         JavaSDM.ensure ( !parFlowToOperand.equals (flow) );\n\n         // check isomorphic binding between objects spec and flow \n         JavaSDM.ensure ( !spec.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToCombo and flow \n         JavaSDM.ensure ( !stepToCombo.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects operand and guard \n         JavaSDM.ensure ( !operand.equals (guard) );\n\n         // check isomorphic binding between objects parFlow and guard \n         JavaSDM.ensure ( !parFlow.equals (guard) );\n\n         // check isomorphic binding between objects parFlowToOperand and guard \n         JavaSDM.ensure ( !parFlowToOperand.equals (guard) );\n\n         // check isomorphic binding between objects spec and guard \n         JavaSDM.ensure ( !spec.equals (guard) );\n\n         // check isomorphic binding between objects step and guard \n         JavaSDM.ensure ( !step.equals (guard) );\n\n         // check isomorphic binding between objects stepToCombo and guard \n         JavaSDM.ensure ( !stepToCombo.equals (guard) );\n\n         // check isomorphic binding between objects useCase and guard \n         JavaSDM.ensure ( !useCase.equals (guard) );\n\n         // check isomorphic binding between objects parFlow and operand \n         JavaSDM.ensure ( !parFlow.equals (operand) );\n\n         // check isomorphic binding between objects parFlowToOperand and operand \n         JavaSDM.ensure ( !parFlowToOperand.equals (operand) );\n\n         // check isomorphic binding between objects spec and operand \n         JavaSDM.ensure ( !spec.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToCombo and operand \n         JavaSDM.ensure ( !stepToCombo.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects parFlowToOperand and parFlow \n         JavaSDM.ensure ( !parFlowToOperand.equals (parFlow) );\n\n         // check isomorphic binding between objects spec and parFlow \n         JavaSDM.ensure ( !spec.equals (parFlow) );\n\n         // check isomorphic binding between objects step and parFlow \n         JavaSDM.ensure ( !step.equals (parFlow) );\n\n         // check isomorphic binding between objects stepToCombo and parFlow \n         JavaSDM.ensure ( !stepToCombo.equals (parFlow) );\n\n         // check isomorphic binding between objects useCase and parFlow \n         JavaSDM.ensure ( !useCase.equals (parFlow) );\n\n         // check isomorphic binding between objects spec and parFlowToOperand \n         JavaSDM.ensure ( !spec.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects step and parFlowToOperand \n         JavaSDM.ensure ( !step.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and parFlowToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects useCase and parFlowToOperand \n         JavaSDM.ensure ( !useCase.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects step and spec \n         JavaSDM.ensure ( !step.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and spec \n         JavaSDM.ensure ( !stepToCombo.equals (spec) );\n\n         // check isomorphic binding between objects useCase and spec \n         JavaSDM.ensure ( !useCase.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and step \n         JavaSDM.ensure ( !stepToCombo.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToCombo \n         JavaSDM.ensure ( !useCase.equals (stepToCombo) );\n\n         // create object combo__operand__operand\n         combo__operand__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object guard__specification__spec\n         guard__specification__spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object operand__guard__guard\n         operand__guard__guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parFlowToOperand__target__operand\n         parFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __useCase_flows_parFlow\n         __useCase_flows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_invokedFlows_parFlow\n         __step_invokedFlows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parFlowToOperand__source__parFlow\n         parFlowToOperand__source__parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ParallelFlowToOperandRule\");\n         // assign attribute combo__operand__operand\n         combo__operand__operand.setName (\"operand\");\n         // assign attribute __step_invokedFlows_parFlow\n         __step_invokedFlows_parFlow.setName (\"invokedFlows\");\n         // assign attribute __useCase_flows_parFlow\n         __useCase_flows_parFlow.setName (\"flows\");\n         // assign attribute operand__guard__guard\n         operand__guard__guard.setName (\"guard\");\n         // assign attribute parFlowToOperand__source__parFlow\n         parFlowToOperand__source__parFlow.setName (\"source\");\n         // assign attribute parFlowToOperand__target__operand\n         parFlowToOperand__target__operand.setName (\"target\");\n         // assign attribute guard__specification__spec\n         guard__specification__spec.setName (\"specification\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,combo__operand__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard__specification__spec,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand__guard__guard,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__useCase_flows_parFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_invokedFlows_parFlow,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand__source__parFlow,\"createdEdges\");\n\n         // create link\n         combo__operand__operand.setSrc( combo);\n\n\n         // create link\n         __step_invokedFlows_parFlow.setSrc( step);\n\n\n         // create link\n         __useCase_flows_parFlow.setTrg( parFlow);\n\n\n         // create link\n         __step_invokedFlows_parFlow.setTrg( parFlow);\n\n\n         // create link\n         parFlowToOperand__source__parFlow.setTrg( parFlow);\n\n\n         // create link\n         __useCase_flows_parFlow.setSrc( useCase);\n\n\n         // create link\n         combo__operand__operand.setTrg( operand);\n\n\n         // create link\n         operand__guard__guard.setSrc( operand);\n\n\n         // create link\n         parFlowToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         parFlowToOperand__source__parFlow.setSrc( parFlowToOperand);\n\n\n         // create link\n         parFlowToOperand__target__operand.setSrc( parFlowToOperand);\n\n\n         // create link\n         guard__specification__spec.setSrc( guard);\n\n\n         // create link\n         operand__guard__guard.setTrg( guard);\n\n\n         // create link\n         guard__specification__spec.setTrg( spec);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,combo,step,stepToCombo,parFlow,useCase,flow,operand,parFlowToOperand,guard,spec);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Flow flow = null;\n      ParallelFlow parFlow = null;\n      ParallelStep step = null;\n      UseCase useCase = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __stepToCombo_target_combo = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __step_invokedFlows_parFlow = null;\n      EMoflonEdge __stepToCombo_source_step = null;\n      EMoflonEdge __useCase_flows_parFlow = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      CSP csp = null;\n      CombinedFragment combo = null;\n      Iterator fujaba__IterStepToStepToCombo = null;\n      ParallelStepToCombinedFragment stepToCombo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ParallelFlowToOperandRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (match.getObject(\"parFlow\"));\n\n         // ensure correct type and really bound of object parFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parFlow = (ParallelFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         step = (ParallelStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         // iterate to-many link source from step to stepToCombo\n         fujaba__Success = false;\n\n         fujaba__IterStepToStepToCombo = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(step,ParallelStepToCombinedFragment.class,\"source\")).iterator ();\n\n         while ( fujaba__IterStepToStepToCombo.hasNext () )\n         {\n            try\n            {\n               stepToCombo = (ParallelStepToCombinedFragment) fujaba__IterStepToStepToCombo.next ();\n\n               // check object stepToCombo is really bound\n               JavaSDM.ensure ( stepToCombo != null );\n               // bind object\n               combo = stepToCombo.getTarget ();\n\n               // check object combo is really bound\n               JavaSDM.ensure ( combo != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object combo is really bound\n                  JavaSDM.ensure ( combo != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object parFlow is really bound\n                  JavaSDM.ensure ( parFlow != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object stepToCombo is really bound\n                  JavaSDM.ensure ( stepToCombo != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects parFlow and flow \n                  JavaSDM.ensure ( !parFlow.equals (flow) );\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link flows from parFlow to useCase\n                  JavaSDM.ensure (useCase.equals (parFlow.eContainer()\n                  ));\n\n                  // check link source from stepToCombo to step\n                  JavaSDM.ensure (step.equals (stepToCombo.getSource ()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link target from stepToCombo to combo\n                  JavaSDM.ensure (combo.equals (stepToCombo.getTarget ()\n                  ));\n\n                  // check link invokedFlows from parFlow to step\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")\n                  .contains (step));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __stepToCombo_target_combo\n                  __stepToCombo_target_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __flow_steps_step\n                  __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __step_invokedFlows_parFlow\n                  __step_invokedFlows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __stepToCombo_source_step\n                  __stepToCombo_source_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCase_flows_parFlow\n                  __useCase_flows_parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCase_flows_flow\n                  __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __step_invokedFlows_parFlow\n                  __step_invokedFlows_parFlow.setName (\"invokedFlows\");\n                  // assign attribute __stepToCombo_source_step\n                  __stepToCombo_source_step.setName (\"source\");\n                  // assign attribute __stepToCombo_target_combo\n                  __stepToCombo_target_combo.setName (\"target\");\n                  // assign attribute __useCase_flows_flow\n                  __useCase_flows_flow.setName (\"flows\");\n                  // assign attribute __useCase_flows_parFlow\n                  __useCase_flows_parFlow.setName (\"flows\");\n                  // assign attribute __flow_steps_step\n                  __flow_steps_step.setName (\"steps\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(combo);\n\n\n                  // create link\n                  __stepToCombo_target_combo.setTrg( combo);\n\n\n                  // create link\n                  __flow_steps_step.setTrg( step);\n\n\n                  // create link\n                  __step_invokedFlows_parFlow.setSrc( step);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(step);\n\n\n                  // create link\n                  __stepToCombo_source_step.setTrg( step);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(stepToCombo);\n\n\n                  // create link\n                  __stepToCombo_target_combo.setSrc( stepToCombo);\n\n\n                  // create link\n                  __stepToCombo_source_step.setSrc( stepToCombo);\n\n\n                  // create link\n                  __step_invokedFlows_parFlow.setTrg( parFlow);\n\n\n                  // create link\n                  __useCase_flows_parFlow.setTrg( parFlow);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(parFlow);\n\n\n                  // create link\n                  __useCase_flows_parFlow.setSrc( useCase);\n\n\n                  // create link\n                  __useCase_flows_flow.setSrc( useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(flow);\n\n\n                  // create link\n                  __flow_steps_step.setSrc( flow);\n\n\n                  // create link\n                  __useCase_flows_flow.setTrg( flow);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__stepToCombo_target_combo,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_parFlow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_invokedFlows_parFlow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__stepToCombo_source_step,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,combo,step,stepToCombo,parFlow,useCase,flow));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"ParallelFlowToOperandRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"step\", step);\nmatch.registerObject(\"parFlow\", parFlow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"flow\", flow);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, ParallelStep step,
			ParallelFlow parFlow, UseCase useCase, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, ParallelStep step,
			ParallelFlow parFlow, UseCase useCase, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_parFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parFlow.name\", true, csp);\r\nvar_parFlow_name.setValue(parFlow.getName());\r\nvar_parFlow_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(\"spec.value\", csp);\r\nvar_spec_value.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_parFlow_name,var_spec_value);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"combo\",combo);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"stepToCombo\",stepToCombo);\r\nisApplicableMatch.registerObject(\"parFlow\",parFlow);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, ParallelStep step,
			ParallelStepToCombinedFragment stepToCombo, ParallelFlow parFlow,
			UseCase useCase, Flow flow);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"stepToCombo\", stepToCombo);\nruleresult.registerObject(\"parFlow\", parFlow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"parFlowToOperand\", parFlowToOperand);\nruleresult.registerObject(\"guard\", guard);\nruleresult.registerObject(\"spec\", spec);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject combo,
			EObject step, EObject stepToCombo, EObject parFlow,
			EObject useCase, EObject flow, EObject operand,
			EObject parFlowToOperand, EObject guard, EObject spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"parFlow\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getParallelFlow());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge __guard_specification_spec = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,combo,operand,guard,spec));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // create object __combo_operand_operand\n            __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __operand_guard_guard\n            __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __guard_specification_spec\n            __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __combo_operand_operand\n            __combo_operand_operand.setName (\"operand\");\n            // assign attribute __operand_guard_guard\n            __operand_guard_guard.setName (\"guard\");\n            // assign attribute __guard_specification_spec\n            __guard_specification_spec.setName (\"specification\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,guard,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,operand,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__combo_operand_operand,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,spec,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__operand_guard_guard,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__guard_specification_spec,\"toBeTranslatedEdges\");\n\n            // create link\n            __combo_operand_operand.setSrc( combo);\n\n\n            // create link\n            __operand_guard_guard.setSrc( operand);\n\n\n            // create link\n            __combo_operand_operand.setTrg( operand);\n\n\n            // create link\n            __guard_specification_spec.setSrc( guard);\n\n\n            // create link\n            __operand_guard_guard.setTrg( guard);\n\n\n            // create link\n            __guard_specification_spec.setTrg( spec);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,combo,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,combo,operand,guard,spec);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CombinedFragment combo = null;\n      Flow flow = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n      LiteralString spec = null;\n      ParallelStep step = null;\n      ParallelStepToCombinedFragment stepToCombo = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ParallelFlow parFlow = null;\n      FlowToInteractionFragment parFlowToOperand = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge useCase__flows__parFlow = null;\n      EMoflonEdge parFlowToOperand__source__parFlow = null;\n      EMoflonEdge parFlowToOperand__target__operand = null;\n      EMoflonEdge __guard_specification_spec = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge step__invokedFlows__parFlow = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof Flow );\n         flow = (Flow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"guard\"));\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"spec\"));\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         step = (ParallelStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"stepToCombo\"));\n\n         // ensure correct type and really bound of object stepToCombo\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStepToCombinedFragment );\n         stepToCombo = (ParallelStepToCombinedFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object parFlow\n         parFlow = UseCaseDSLFactory.eINSTANCE.createParallelFlow();\n\n         // create object parFlowToOperand\n         parFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createFlowToInteractionFragment();\n\n         // assign attribute parFlow\n         parFlow.setName ((java.lang.String)csp.getValue(\"parFlow\",\"name\"));\n\n         // create link\n         parFlowToOperand.setTarget( operand);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(step,parFlow,\"invokedFlows\");\n\n         // create link\n         useCase.getFlows().add(parFlow);\n\n\n         // create link\n         parFlowToOperand.setSource( parFlow);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object parFlow is really bound\n         JavaSDM.ensure ( parFlow != null );\n         // check object parFlowToOperand is really bound\n         JavaSDM.ensure ( parFlowToOperand != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,operand,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlow,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,spec,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,guard,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n         // check object parFlow is really bound\n         JavaSDM.ensure ( parFlow != null );\n         // check object parFlowToOperand is really bound\n         JavaSDM.ensure ( parFlowToOperand != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object spec is really bound\n         JavaSDM.ensure ( spec != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToCombo is really bound\n         JavaSDM.ensure ( stepToCombo != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check isomorphic binding between objects flow and combo \n         JavaSDM.ensure ( !flow.equals (combo) );\n\n         // check isomorphic binding between objects guard and combo \n         JavaSDM.ensure ( !guard.equals (combo) );\n\n         // check isomorphic binding between objects operand and combo \n         JavaSDM.ensure ( !operand.equals (combo) );\n\n         // check isomorphic binding between objects parFlow and combo \n         JavaSDM.ensure ( !parFlow.equals (combo) );\n\n         // check isomorphic binding between objects parFlowToOperand and combo \n         JavaSDM.ensure ( !parFlowToOperand.equals (combo) );\n\n         // check isomorphic binding between objects spec and combo \n         JavaSDM.ensure ( !spec.equals (combo) );\n\n         // check isomorphic binding between objects step and combo \n         JavaSDM.ensure ( !step.equals (combo) );\n\n         // check isomorphic binding between objects stepToCombo and combo \n         JavaSDM.ensure ( !stepToCombo.equals (combo) );\n\n         // check isomorphic binding between objects useCase and combo \n         JavaSDM.ensure ( !useCase.equals (combo) );\n\n         // check isomorphic binding between objects guard and flow \n         JavaSDM.ensure ( !guard.equals (flow) );\n\n         // check isomorphic binding between objects operand and flow \n         JavaSDM.ensure ( !operand.equals (flow) );\n\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         // check isomorphic binding between objects parFlowToOperand and flow \n         JavaSDM.ensure ( !parFlowToOperand.equals (flow) );\n\n         // check isomorphic binding between objects spec and flow \n         JavaSDM.ensure ( !spec.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToCombo and flow \n         JavaSDM.ensure ( !stepToCombo.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects operand and guard \n         JavaSDM.ensure ( !operand.equals (guard) );\n\n         // check isomorphic binding between objects parFlow and guard \n         JavaSDM.ensure ( !parFlow.equals (guard) );\n\n         // check isomorphic binding between objects parFlowToOperand and guard \n         JavaSDM.ensure ( !parFlowToOperand.equals (guard) );\n\n         // check isomorphic binding between objects spec and guard \n         JavaSDM.ensure ( !spec.equals (guard) );\n\n         // check isomorphic binding between objects step and guard \n         JavaSDM.ensure ( !step.equals (guard) );\n\n         // check isomorphic binding between objects stepToCombo and guard \n         JavaSDM.ensure ( !stepToCombo.equals (guard) );\n\n         // check isomorphic binding between objects useCase and guard \n         JavaSDM.ensure ( !useCase.equals (guard) );\n\n         // check isomorphic binding between objects parFlow and operand \n         JavaSDM.ensure ( !parFlow.equals (operand) );\n\n         // check isomorphic binding between objects parFlowToOperand and operand \n         JavaSDM.ensure ( !parFlowToOperand.equals (operand) );\n\n         // check isomorphic binding between objects spec and operand \n         JavaSDM.ensure ( !spec.equals (operand) );\n\n         // check isomorphic binding between objects step and operand \n         JavaSDM.ensure ( !step.equals (operand) );\n\n         // check isomorphic binding between objects stepToCombo and operand \n         JavaSDM.ensure ( !stepToCombo.equals (operand) );\n\n         // check isomorphic binding between objects useCase and operand \n         JavaSDM.ensure ( !useCase.equals (operand) );\n\n         // check isomorphic binding between objects parFlowToOperand and parFlow \n         JavaSDM.ensure ( !parFlowToOperand.equals (parFlow) );\n\n         // check isomorphic binding between objects spec and parFlow \n         JavaSDM.ensure ( !spec.equals (parFlow) );\n\n         // check isomorphic binding between objects step and parFlow \n         JavaSDM.ensure ( !step.equals (parFlow) );\n\n         // check isomorphic binding between objects stepToCombo and parFlow \n         JavaSDM.ensure ( !stepToCombo.equals (parFlow) );\n\n         // check isomorphic binding between objects useCase and parFlow \n         JavaSDM.ensure ( !useCase.equals (parFlow) );\n\n         // check isomorphic binding between objects spec and parFlowToOperand \n         JavaSDM.ensure ( !spec.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects step and parFlowToOperand \n         JavaSDM.ensure ( !step.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects stepToCombo and parFlowToOperand \n         JavaSDM.ensure ( !stepToCombo.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects useCase and parFlowToOperand \n         JavaSDM.ensure ( !useCase.equals (parFlowToOperand) );\n\n         // check isomorphic binding between objects step and spec \n         JavaSDM.ensure ( !step.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and spec \n         JavaSDM.ensure ( !stepToCombo.equals (spec) );\n\n         // check isomorphic binding between objects useCase and spec \n         JavaSDM.ensure ( !useCase.equals (spec) );\n\n         // check isomorphic binding between objects stepToCombo and step \n         JavaSDM.ensure ( !stepToCombo.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToCombo \n         JavaSDM.ensure ( !useCase.equals (stepToCombo) );\n\n         // create object __combo_operand_operand\n         __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object useCase__flows__parFlow\n         useCase__flows__parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parFlowToOperand__source__parFlow\n         parFlowToOperand__source__parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object parFlowToOperand__target__operand\n         parFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __guard_specification_spec\n         __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __operand_guard_guard\n         __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__invokedFlows__parFlow\n         step__invokedFlows__parFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ParallelFlowToOperandRule\");\n         // assign attribute __combo_operand_operand\n         __combo_operand_operand.setName (\"operand\");\n         // assign attribute step__invokedFlows__parFlow\n         step__invokedFlows__parFlow.setName (\"invokedFlows\");\n         // assign attribute useCase__flows__parFlow\n         useCase__flows__parFlow.setName (\"flows\");\n         // assign attribute __operand_guard_guard\n         __operand_guard_guard.setName (\"guard\");\n         // assign attribute parFlowToOperand__source__parFlow\n         parFlowToOperand__source__parFlow.setName (\"source\");\n         // assign attribute parFlowToOperand__target__operand\n         parFlowToOperand__target__operand.setName (\"target\");\n         // assign attribute __guard_specification_spec\n         __guard_specification_spec.setName (\"specification\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__combo_operand_operand,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,useCase__flows__parFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand__source__parFlow,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,parFlowToOperand__target__operand,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__guard_specification_spec,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__operand_guard_guard,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__invokedFlows__parFlow,\"createdEdges\");\n\n         // create link\n         __combo_operand_operand.setSrc( combo);\n\n\n         // create link\n         step__invokedFlows__parFlow.setSrc( step);\n\n\n         // create link\n         parFlowToOperand__source__parFlow.setTrg( parFlow);\n\n\n         // create link\n         useCase__flows__parFlow.setTrg( parFlow);\n\n\n         // create link\n         step__invokedFlows__parFlow.setTrg( parFlow);\n\n\n         // create link\n         useCase__flows__parFlow.setSrc( useCase);\n\n\n         // create link\n         parFlowToOperand__target__operand.setTrg( operand);\n\n\n         // create link\n         __combo_operand_operand.setTrg( operand);\n\n\n         // create link\n         __operand_guard_guard.setSrc( operand);\n\n\n         // create link\n         parFlowToOperand__target__operand.setSrc( parFlowToOperand);\n\n\n         // create link\n         parFlowToOperand__source__parFlow.setSrc( parFlowToOperand);\n\n\n         // create link\n         __guard_specification_spec.setSrc( guard);\n\n\n         // create link\n         __operand_guard_guard.setTrg( guard);\n\n\n         // create link\n         __guard_specification_spec.setTrg( spec);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,combo,step,stepToCombo,parFlow,useCase,flow,operand,parFlowToOperand,guard,spec);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      CombinedFragment combo = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n      LiteralString spec = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __stepToCombo_target_combo = null;\n      EMoflonEdge __combo_operand_operand = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __stepToCombo_source_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __operand_guard_guard = null;\n      EMoflonEdge __guard_specification_spec = null;\n      CSP csp = null;\n      UseCase useCase = null;\n      Flow flow = null;\n      ParallelStep step = null;\n      Iterator fujaba__IterComboToStepToCombo = null;\n      ParallelStepToCombinedFragment stepToCombo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ParallelFlowToOperandRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"combo\"));\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n         _TmpObject = (match.getObject(\"guard\"));\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n         _TmpObject = (match.getObject(\"operand\"));\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n         _TmpObject = (match.getObject(\"spec\"));\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from combo to stepToCombo\n         fujaba__Success = false;\n\n         fujaba__IterComboToStepToCombo = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(combo,ParallelStepToCombinedFragment.class,\"target\")).iterator ();\n\n         while ( fujaba__IterComboToStepToCombo.hasNext () )\n         {\n            try\n            {\n               stepToCombo = (ParallelStepToCombinedFragment) fujaba__IterComboToStepToCombo.next ();\n\n               // check object stepToCombo is really bound\n               JavaSDM.ensure ( stepToCombo != null );\n               // bind object\n               step = stepToCombo.getSource ();\n\n               // check object step is really bound\n               JavaSDM.ensure ( step != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object combo is really bound\n                  JavaSDM.ensure ( combo != null );\n                  // check object guard is really bound\n                  JavaSDM.ensure ( guard != null );\n                  // check object operand is really bound\n                  JavaSDM.ensure ( operand != null );\n                  // check object spec is really bound\n                  JavaSDM.ensure ( spec != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object stepToCombo is really bound\n                  JavaSDM.ensure ( stepToCombo != null );\n                  // check link guard from operand to guard\n                  JavaSDM.ensure (guard.equals (operand.getGuard ()\n                  ));\n\n                  // check link operand from operand to combo\n                  JavaSDM.ensure (combo.equals (operand.eContainer()\n                  ));\n\n                  // check link source from stepToCombo to step\n                  JavaSDM.ensure (step.equals (stepToCombo.getSource ()\n                  ));\n\n                  // check link specification from spec to guard\n                  JavaSDM.ensure (guard.equals (spec.eContainer()\n                  ));\n\n                  // bind object\n                  flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n\n                  // check if contained via correct reference\n                  JavaSDM.ensure(flow.getSteps().contains(step));\n\n                  // bind object\n                  useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n\n                  // check if contained via correct reference\n                  JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n                  // check link target from stepToCombo to combo\n                  JavaSDM.ensure (combo.equals (stepToCombo.getTarget ()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __stepToCombo_target_combo\n                  __stepToCombo_target_combo = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __combo_operand_operand\n                  __combo_operand_operand = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __flow_steps_step\n                  __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __stepToCombo_source_step\n                  __stepToCombo_source_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __useCase_flows_flow\n                  __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __operand_guard_guard\n                  __operand_guard_guard = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __guard_specification_spec\n                  __guard_specification_spec = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __combo_operand_operand\n                  __combo_operand_operand.setName (\"operand\");\n                  // assign attribute __stepToCombo_source_step\n                  __stepToCombo_source_step.setName (\"source\");\n                  // assign attribute __stepToCombo_target_combo\n                  __stepToCombo_target_combo.setName (\"target\");\n                  // assign attribute __useCase_flows_flow\n                  __useCase_flows_flow.setName (\"flows\");\n                  // assign attribute __flow_steps_step\n                  __flow_steps_step.setName (\"steps\");\n                  // assign attribute __operand_guard_guard\n                  __operand_guard_guard.setName (\"guard\");\n                  // assign attribute __guard_specification_spec\n                  __guard_specification_spec.setName (\"specification\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(combo);\n\n\n                  // create link\n                  __stepToCombo_target_combo.setTrg( combo);\n\n\n                  // create link\n                  __combo_operand_operand.setSrc( combo);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(step);\n\n\n                  // create link\n                  __flow_steps_step.setTrg( step);\n\n\n                  // create link\n                  __stepToCombo_source_step.setTrg( step);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(stepToCombo);\n\n\n                  // create link\n                  __stepToCombo_target_combo.setSrc( stepToCombo);\n\n\n                  // create link\n                  __stepToCombo_source_step.setSrc( stepToCombo);\n\n\n                  // create link\n                  __useCase_flows_flow.setSrc( useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(flow);\n\n\n                  // create link\n                  __flow_steps_step.setSrc( flow);\n\n\n                  // create link\n                  __useCase_flows_flow.setTrg( flow);\n\n\n                  // create link\n                  __operand_guard_guard.setSrc( operand);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(operand);\n\n\n                  // create link\n                  __combo_operand_operand.setTrg( operand);\n\n\n                  // create link\n                  __guard_specification_spec.setSrc( guard);\n\n\n                  // create link\n                  __operand_guard_guard.setTrg( guard);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(guard);\n\n\n                  // create link\n                  __guard_specification_spec.setTrg( spec);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(spec);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__stepToCombo_target_combo,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__stepToCombo_source_step,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__combo_operand_operand,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__guard_specification_spec,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__operand_guard_guard,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,combo,step,stepToCombo,useCase,flow,operand,guard,spec));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"ParallelFlowToOperandRule\");\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n\n                        // create link\n                        ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n\n\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"combo\", combo);\nmatch.registerObject(\"operand\", operand);\nmatch.registerObject(\"guard\", guard);\nmatch.registerObject(\"spec\", spec);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, CombinedFragment combo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(\"spec.value\", true, csp);\r\nvar_spec_value.setValue(spec.getValue());\r\nvar_spec_value.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_parFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(\"parFlow.name\", csp);\r\nvar_parFlow_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_parFlow_name,var_spec_value);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"combo\",combo);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"stepToCombo\",stepToCombo);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"operand\",operand);\r\nisApplicableMatch.registerObject(\"guard\",guard);\r\nisApplicableMatch.registerObject(\"spec\",spec);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, ParallelStep step,
			ParallelStepToCombinedFragment stepToCombo, UseCase useCase,
			Flow flow, InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"combo\", combo);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"stepToCombo\", stepToCombo);\nruleresult.registerObject(\"parFlow\", parFlow);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"operand\", operand);\nruleresult.registerObject(\"parFlowToOperand\", parFlowToOperand);\nruleresult.registerObject(\"guard\", guard);\nruleresult.registerObject(\"spec\", spec);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject combo,
			EObject step, EObject stepToCombo, EObject parFlow,
			EObject useCase, EObject flow, EObject operand,
			EObject parFlowToOperand, EObject guard, EObject spec);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"operand\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionOperand()) && match.getObject(\"guard\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getInteractionConstraint()) && match.getObject(\"spec\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLiteralString());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_operand_fragment_243996 = null;\n      InteractionOperand __DEC_guard_guard_719073 = null;\n      CombinedFragment __DEC_operand_operand_543727 = null;\n      Constraint __DEC_spec_specification_351695 = null;\n      Match match = null;\n      LiteralString spec = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n      CombinedFragment combo = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_operand is really bound\n         JavaSDM.ensure ( _edge_operand != null );\n         // bind object\n         _TmpObject = _edge_operand.getSrc ();\n\n         // ensure correct type and really bound of object combo\n         JavaSDM.ensure ( _TmpObject instanceof CombinedFragment );\n         combo = (CombinedFragment) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_operand.getTrg ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // check link operand from operand to combo\n         JavaSDM.ensure (combo.equals (operand.eContainer()\n         ));\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // negative check for link fragment from operand\n            JavaSDM.ensure (operand.getEnclosingInteraction () == null);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_fragment_243996 = operand.getEnclosingOperand ();\n\n               // check object __DEC_operand_fragment_243996 is really bound\n               JavaSDM.ensure ( __DEC_operand_fragment_243996 != null );\n\n               // check isomorphic binding between objects __DEC_operand_fragment_243996 and operand \n               JavaSDM.ensure ( !__DEC_operand_fragment_243996.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link packagedElement from guard\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // negative check for link packagedElement from spec\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_guard_guard_719073 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n               // check object __DEC_guard_guard_719073 is really bound\n               JavaSDM.ensure ( __DEC_guard_guard_719073 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(guard.equals(__DEC_guard_guard_719073.getGuard()));\n\n               // check isomorphic binding between objects __DEC_guard_guard_719073 and operand \n               JavaSDM.ensure ( !__DEC_guard_guard_719073.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_operand_543727 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object __DEC_operand_operand_543727 is really bound\n               JavaSDM.ensure ( __DEC_operand_operand_543727 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_operand_operand_543727.getOperand().contains(operand));\n\n               // check isomorphic binding between objects __DEC_operand_operand_543727 and combo \n               JavaSDM.ensure ( !__DEC_operand_operand_543727.equals (combo) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_spec_specification_351695 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n               // check object __DEC_spec_specification_351695 is really bound\n               JavaSDM.ensure ( __DEC_spec_specification_351695 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(spec.equals(__DEC_spec_specification_351695.getSpecification()));\n\n               // check isomorphic binding between objects __DEC_spec_specification_351695 and guard \n               JavaSDM.ensure ( !__DEC_spec_specification_351695.equals (guard) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check object _edge_operand is really bound\n            JavaSDM.ensure ( _edge_operand != null );\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // check link guard from operand to guard\n            JavaSDM.ensure (guard.equals (operand.getGuard ()\n            ));\n\n            // check link operand from operand to combo\n            JavaSDM.ensure (combo.equals (operand.eContainer()\n            ));\n\n            // check link specification from spec to guard\n            JavaSDM.ensure (guard.equals (spec.eContainer()\n            ));\n\n            // check link src from _edge_operand to combo\n            JavaSDM.ensure (combo.equals (_edge_operand.getSrc ()\n            ));\n\n            // check link trg from _edge_operand to operand\n            JavaSDM.ensure (operand.equals (_edge_operand.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,combo,operand,guard,spec);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_328(EMoflonEdge _edge_operand);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_parFlow_flows_457967 = null;\n      Iterator fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_744287 = null;\n      ParallelStep __DEC_parFlow_invokedFlows_744287 = null;\n      Match match = null;\n      UseCase useCase = null;\n      ParallelFlow parFlow = null;\n      Flow flow = null;\n      ParallelStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_invokedFlows is really bound\n         JavaSDM.ensure ( _edge_invokedFlows != null );\n         // bind object\n         _TmpObject = _edge_invokedFlows.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof ParallelStep );\n         step = (ParallelStep) _TmpObject;\n\n         // bind object\n         flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         _TmpObject = _edge_invokedFlows.getTrg ();\n\n         // ensure correct type and really bound of object parFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parFlow = (ParallelFlow) _TmpObject;\n\n         // check isomorphic binding between objects parFlow and flow \n         JavaSDM.ensure ( !parFlow.equals (flow) );\n\n         // bind object\n         useCase = parFlow.eContainer() instanceof UseCase ? (UseCase) parFlow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(parFlow));\n\n         // check link flows from flow to useCase\n         JavaSDM.ensure (useCase.equals (flow.eContainer()\n         ));\n\n         // check link invokedFlows from parFlow to step\n         JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")\n         .contains (step));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_parFlow_flows_457967 = parFlow.eContainer() instanceof UseCase ? (UseCase) parFlow.eContainer() : null;\n\n               // check object __DEC_parFlow_flows_457967 is really bound\n               JavaSDM.ensure ( __DEC_parFlow_flows_457967 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_parFlow_flows_457967.getFlows().contains(parFlow));\n\n               // check isomorphic binding between objects __DEC_parFlow_flows_457967 and useCase \n               JavaSDM.ensure ( !__DEC_parFlow_flows_457967.equals (useCase) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link ref from parFlow\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,AlternativeFlowAlternative.class,\"ref\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // iterate to-many link invokedFlows from parFlow to __DEC_parFlow_invokedFlows_744287\n               fujaba__Success = false;\n\n               fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_744287 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n               while ( !(fujaba__Success) && fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_744287.hasNext () )\n               {\n                  try\n                  {\n                     __DEC_parFlow_invokedFlows_744287 = (ParallelStep) fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_744287.next ();\n\n                     // check object __DEC_parFlow_invokedFlows_744287 is really bound\n                     JavaSDM.ensure ( __DEC_parFlow_invokedFlows_744287 != null );\n                     // check isomorphic binding between objects __DEC_parFlow_invokedFlows_744287 and step \n                     JavaSDM.ensure ( !__DEC_parFlow_invokedFlows_744287.equals (step) );\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_invokedFlows is really bound\n            JavaSDM.ensure ( _edge_invokedFlows != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object parFlow is really bound\n            JavaSDM.ensure ( parFlow != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check isomorphic binding between objects parFlow and flow \n            JavaSDM.ensure ( !parFlow.equals (flow) );\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link flows from parFlow to useCase\n            JavaSDM.ensure (useCase.equals (parFlow.eContainer()\n            ));\n\n            // check link src from _edge_invokedFlows to step\n            JavaSDM.ensure (step.equals (_edge_invokedFlows.getSrc ()\n            ));\n\n            // check link steps from step to flow\n            JavaSDM.ensure (flow.equals (step.eContainer()\n            ));\n\n            // check link trg from _edge_invokedFlows to parFlow\n            JavaSDM.ensure (parFlow.equals (_edge_invokedFlows.getTrg ()\n            ));\n\n            // check link invokedFlows from parFlow to step\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")\n            .contains (step));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,step,parFlow,useCase,flow);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_79(
			EMoflonEdge _edge_invokedFlows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      UseCase __DEC_parFlow_flows_86926 = null;\n      Iterator fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_516624 = null;\n      ParallelStep __DEC_parFlow_invokedFlows_516624 = null;\n      Match match = null;\n      Flow flow = null;\n      Iterator fujaba__IterParFlowToStep = null;\n      ParallelStep step = null;\n      ParallelFlow parFlow = null;\n      UseCase useCase = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_flows is really bound\n         JavaSDM.ensure ( _edge_flows != null );\n         // bind object\n         _TmpObject = _edge_flows.getSrc ();\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_flows.getTrg ();\n\n         // ensure correct type and really bound of object parFlow\n         JavaSDM.ensure ( _TmpObject instanceof ParallelFlow );\n         parFlow = (ParallelFlow) _TmpObject;\n\n         // check link flows from parFlow to useCase\n         JavaSDM.ensure (useCase.equals (parFlow.eContainer()\n         ));\n\n         // iterate to-many link invokedFlows from parFlow to step\n         fujaba__Success = false;\n\n         fujaba__IterParFlowToStep = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n         while ( fujaba__IterParFlowToStep.hasNext () )\n         {\n            try\n            {\n               step = (ParallelStep) fujaba__IterParFlowToStep.next ();\n\n               // check object step is really bound\n               JavaSDM.ensure ( step != null );\n               // bind object\n               flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n               // check object flow is really bound\n               JavaSDM.ensure ( flow != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(flow.getSteps().contains(step));\n\n               // check isomorphic binding between objects parFlow and flow \n               JavaSDM.ensure ( !parFlow.equals (flow) );\n\n               // check link flows from flow to useCase\n               JavaSDM.ensure (useCase.equals (flow.eContainer()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // bind object\n                     __DEC_parFlow_flows_86926 = parFlow.eContainer() instanceof UseCase ? (UseCase) parFlow.eContainer() : null;\n\n                     // check object __DEC_parFlow_flows_86926 is really bound\n                     JavaSDM.ensure ( __DEC_parFlow_flows_86926 != null );\n\n                     // check if contained via correct reference\n                     JavaSDM.ensure(__DEC_parFlow_flows_86926.getFlows().contains(parFlow));\n\n                     // check isomorphic binding between objects __DEC_parFlow_flows_86926 and useCase \n                     JavaSDM.ensure ( !__DEC_parFlow_flows_86926.equals (useCase) );\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // negative check for link ref from parFlow\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,AlternativeFlowAlternative.class,\"ref\") .size() == 0);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link invokedFlows from parFlow to __DEC_parFlow_invokedFlows_516624\n                     fujaba__Success = false;\n\n                     fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_516624 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_516624.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_parFlow_invokedFlows_516624 = (ParallelStep) fujaba__IterParFlowTo__DEC_parFlow_invokedFlows_516624.next ();\n\n                           // check object __DEC_parFlow_invokedFlows_516624 is really bound\n                           JavaSDM.ensure ( __DEC_parFlow_invokedFlows_516624 != null );\n                           // check isomorphic binding between objects __DEC_parFlow_invokedFlows_516624 and step \n                           JavaSDM.ensure ( !__DEC_parFlow_invokedFlows_516624.equals (step) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_flows is really bound\n                  JavaSDM.ensure ( _edge_flows != null );\n                  // check object flow is really bound\n                  JavaSDM.ensure ( flow != null );\n                  // check object parFlow is really bound\n                  JavaSDM.ensure ( parFlow != null );\n                  // check object step is really bound\n                  JavaSDM.ensure ( step != null );\n                  // check object useCase is really bound\n                  JavaSDM.ensure ( useCase != null );\n                  // check isomorphic binding between objects parFlow and flow \n                  JavaSDM.ensure ( !parFlow.equals (flow) );\n\n                  // check link flows from flow to useCase\n                  JavaSDM.ensure (useCase.equals (flow.eContainer()\n                  ));\n\n                  // check link flows from parFlow to useCase\n                  JavaSDM.ensure (useCase.equals (parFlow.eContainer()\n                  ));\n\n                  // check link src from _edge_flows to useCase\n                  JavaSDM.ensure (useCase.equals (_edge_flows.getSrc ()\n                  ));\n\n                  // check link steps from step to flow\n                  JavaSDM.ensure (flow.equals (step.eContainer()\n                  ));\n\n                  // check link trg from _edge_flows to parFlow\n                  JavaSDM.ensure (parFlow.equals (_edge_flows.getTrg ()\n                  ));\n\n                  // check link invokedFlows from parFlow to step\n                  JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(parFlow,ParallelStep.class,\"invokedFlows\")\n                  .contains (step));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_FWD(match,step,parFlow,useCase,flow);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_FWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_80(EMoflonEdge _edge_flows);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_operand_fragment_566143 = null;\n      InteractionOperand __DEC_guard_guard_835542 = null;\n      CombinedFragment __DEC_operand_operand_525062 = null;\n      Constraint __DEC_spec_specification_129906 = null;\n      Match match = null;\n      LiteralString spec = null;\n      CombinedFragment combo = null;\n      InteractionConstraint guard = null;\n      InteractionOperand operand = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_guard is really bound\n         JavaSDM.ensure ( _edge_guard != null );\n         // bind object\n         _TmpObject = _edge_guard.getSrc ();\n\n         // ensure correct type and really bound of object operand\n         JavaSDM.ensure ( _TmpObject instanceof InteractionOperand );\n         operand = (InteractionOperand) _TmpObject;\n\n         // bind object\n         guard = operand.getGuard ();\n\n         // check object guard is really bound\n         JavaSDM.ensure ( guard != null );\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = guard.getSpecification ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // check link trg from _edge_guard to guard\n         JavaSDM.ensure (guard.equals (_edge_guard.getTrg ()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // negative check for link fragment from operand\n            JavaSDM.ensure (operand.getEnclosingInteraction () == null);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_fragment_566143 = operand.getEnclosingOperand ();\n\n               // check object __DEC_operand_fragment_566143 is really bound\n               JavaSDM.ensure ( __DEC_operand_fragment_566143 != null );\n\n               // check isomorphic binding between objects __DEC_operand_fragment_566143 and operand \n               JavaSDM.ensure ( !__DEC_operand_fragment_566143.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link packagedElement from guard\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // negative check for link packagedElement from spec\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_guard_guard_835542 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n               // check object __DEC_guard_guard_835542 is really bound\n               JavaSDM.ensure ( __DEC_guard_guard_835542 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(guard.equals(__DEC_guard_guard_835542.getGuard()));\n\n               // check isomorphic binding between objects __DEC_guard_guard_835542 and operand \n               JavaSDM.ensure ( !__DEC_guard_guard_835542.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_operand_525062 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object __DEC_operand_operand_525062 is really bound\n               JavaSDM.ensure ( __DEC_operand_operand_525062 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_operand_operand_525062.getOperand().contains(operand));\n\n               // check isomorphic binding between objects __DEC_operand_operand_525062 and combo \n               JavaSDM.ensure ( !__DEC_operand_operand_525062.equals (combo) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_spec_specification_129906 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n               // check object __DEC_spec_specification_129906 is really bound\n               JavaSDM.ensure ( __DEC_spec_specification_129906 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(spec.equals(__DEC_spec_specification_129906.getSpecification()));\n\n               // check isomorphic binding between objects __DEC_spec_specification_129906 and guard \n               JavaSDM.ensure ( !__DEC_spec_specification_129906.equals (guard) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check object _edge_guard is really bound\n            JavaSDM.ensure ( _edge_guard != null );\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // check link guard from operand to guard\n            JavaSDM.ensure (guard.equals (operand.getGuard ()\n            ));\n\n            // check link operand from operand to combo\n            JavaSDM.ensure (combo.equals (operand.eContainer()\n            ));\n\n            // check link specification from spec to guard\n            JavaSDM.ensure (guard.equals (spec.eContainer()\n            ));\n\n            // check link src from _edge_guard to operand\n            JavaSDM.ensure (operand.equals (_edge_guard.getSrc ()\n            ));\n\n            // check link trg from _edge_guard to guard\n            JavaSDM.ensure (guard.equals (_edge_guard.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,combo,operand,guard,spec);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_329(EMoflonEdge _edge_guard);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      InteractionOperand __DEC_operand_fragment_635666 = null;\n      InteractionOperand __DEC_guard_guard_685231 = null;\n      CombinedFragment __DEC_operand_operand_68040 = null;\n      Constraint __DEC_spec_specification_185936 = null;\n      Match match = null;\n      LiteralString spec = null;\n      CombinedFragment combo = null;\n      InteractionOperand operand = null;\n      InteractionConstraint guard = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_specification is really bound\n         JavaSDM.ensure ( _edge_specification != null );\n         // bind object\n         _TmpObject = _edge_specification.getSrc ();\n\n         // ensure correct type and really bound of object guard\n         JavaSDM.ensure ( _TmpObject instanceof InteractionConstraint );\n         guard = (InteractionConstraint) _TmpObject;\n\n         // bind object\n         operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n         // check object operand is really bound\n         JavaSDM.ensure ( operand != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(guard.equals(operand.getGuard()));\n\n         // bind object\n         combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n         // check object combo is really bound\n         JavaSDM.ensure ( combo != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(combo.getOperand().contains(operand));\n\n         // bind object\n         _TmpObject = _edge_specification.getTrg ();\n\n         // ensure correct type and really bound of object spec\n         JavaSDM.ensure ( _TmpObject instanceof LiteralString );\n         spec = (LiteralString) _TmpObject;\n\n         // check link specification from spec to guard\n         JavaSDM.ensure (guard.equals (spec.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // negative check for link fragment from operand\n            JavaSDM.ensure (operand.getEnclosingInteraction () == null);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_fragment_635666 = operand.getEnclosingOperand ();\n\n               // check object __DEC_operand_fragment_635666 is really bound\n               JavaSDM.ensure ( __DEC_operand_fragment_635666 != null );\n\n               // check isomorphic binding between objects __DEC_operand_fragment_635666 and operand \n               JavaSDM.ensure ( !__DEC_operand_fragment_635666.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // negative check for link packagedElement from guard\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(guard,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // negative check for link packagedElement from spec\n            JavaSDM.ensure (org.moflon.util.eMoflonEMFUtil.getOppositeReference(spec,ModalSequenceDiagram.Package.class,\"packagedElement\") .size() == 0);\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_guard_guard_685231 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard.eContainer() : null;\n\n               // check object __DEC_guard_guard_685231 is really bound\n               JavaSDM.ensure ( __DEC_guard_guard_685231 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(guard.equals(__DEC_guard_guard_685231.getGuard()));\n\n               // check isomorphic binding between objects __DEC_guard_guard_685231 and operand \n               JavaSDM.ensure ( !__DEC_guard_guard_685231.equals (operand) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_operand_operand_68040 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand.eContainer() : null;\n\n               // check object __DEC_operand_operand_68040 is really bound\n               JavaSDM.ensure ( __DEC_operand_operand_68040 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_operand_operand_68040.getOperand().contains(operand));\n\n               // check isomorphic binding between objects __DEC_operand_operand_68040 and combo \n               JavaSDM.ensure ( !__DEC_operand_operand_68040.equals (combo) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_spec_specification_185936 = spec.eContainer() instanceof Constraint ? (Constraint) spec.eContainer() : null;\n\n               // check object __DEC_spec_specification_185936 is really bound\n               JavaSDM.ensure ( __DEC_spec_specification_185936 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(spec.equals(__DEC_spec_specification_185936.getSpecification()));\n\n               // check isomorphic binding between objects __DEC_spec_specification_185936 and guard \n               JavaSDM.ensure ( !__DEC_spec_specification_185936.equals (guard) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check link fragment from operand to operand\n            JavaSDM.ensure (!(operand.equals (operand.getEnclosingOperand ()\n            )));\n\n            // check object _edge_specification is really bound\n            JavaSDM.ensure ( _edge_specification != null );\n            // check object combo is really bound\n            JavaSDM.ensure ( combo != null );\n            // check object guard is really bound\n            JavaSDM.ensure ( guard != null );\n            // check object operand is really bound\n            JavaSDM.ensure ( operand != null );\n            // check object spec is really bound\n            JavaSDM.ensure ( spec != null );\n            // check link guard from operand to guard\n            JavaSDM.ensure (guard.equals (operand.getGuard ()\n            ));\n\n            // check link operand from operand to combo\n            JavaSDM.ensure (combo.equals (operand.eContainer()\n            ));\n\n            // check link specification from spec to guard\n            JavaSDM.ensure (guard.equals (spec.eContainer()\n            ));\n\n            // check link src from _edge_specification to guard\n            JavaSDM.ensure (guard.equals (_edge_specification.getSrc ()\n            ));\n\n            // check link trg from _edge_specification to spec\n            JavaSDM.ensure (spec.equals (_edge_specification.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,combo,operand,guard,spec);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_330(
			EMoflonEdge _edge_specification);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ParallelFlowToOperandRule
