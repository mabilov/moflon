/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGLanguage.modelgenerator.RuleEntryContainer;
import TGGLanguage.modelgenerator.RuleEntryList;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.ModelgeneratorRuleResult;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Actor To Class Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getActorToClassRule()
 * @model
 * @generated
 */
public interface ActorToClassRule extends EObject, AbstractRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,packageDeclaration,actor));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"toBeTranslatedNodes\");\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,packageDeclaration,actor);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclarationToP_source_packageDeclaration = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __p_packagedElement_interaction = null;\n      EMoflonEdge __packageDeclarationToP_target_p = null;\n      CSP csp = null;\n      Iterator fujaba__IterPToInteraction = null;\n      Interaction interaction = null;\n      ModalSequenceDiagram.Package p = null;\n      Iterator fujaba__IterPackageDeclarationToPackageDeclarationToP = null;\n      PackageDeclarationToPackage packageDeclarationToP = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ActorToClassRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from packageDeclaration to packageDeclarationToP\n         fujaba__Success = false;\n\n         fujaba__IterPackageDeclarationToPackageDeclarationToP = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(packageDeclaration,PackageDeclarationToPackage.class,\"source\")).iterator ();\n\n         while ( fujaba__IterPackageDeclarationToPackageDeclarationToP.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToP = (PackageDeclarationToPackage) fujaba__IterPackageDeclarationToPackageDeclarationToP.next ();\n\n               // check object packageDeclarationToP is really bound\n               JavaSDM.ensure ( packageDeclarationToP != null );\n               // bind object\n               p = packageDeclarationToP.getTarget ();\n\n               // check object p is really bound\n               JavaSDM.ensure ( p != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object actor is really bound\n                  JavaSDM.ensure ( actor != null );\n                  // check object p is really bound\n                  JavaSDM.ensure ( p != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToP is really bound\n                  JavaSDM.ensure ( packageDeclarationToP != null );\n                  // check link actors from actor to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                  ));\n\n                  // check link source from packageDeclarationToP to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToP.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToP to p\n                  JavaSDM.ensure (p.equals (packageDeclarationToP.getTarget ()\n                  ));\n\n                  // iterate to-many link packagedElement from p to interaction\n                  fujaba__Success = false;\n\n                  fujaba__IterPToInteraction = new ArrayList(p.getPackagedElement()).iterator ();\n\n                  while ( fujaba__IterPToInteraction.hasNext () )\n                  {\n                     try\n                     {\n                        _TmpObject =  fujaba__IterPToInteraction.next ();\n\n                        // ensure correct type and really bound of object interaction\n                        JavaSDM.ensure ( _TmpObject instanceof Interaction );\n                        interaction = (Interaction) _TmpObject;\n                        // create object isApplicableMatch\n                        isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                        // create object __packageDeclarationToP_source_packageDeclaration\n                        __packageDeclarationToP_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __packageDeclaration_actors_actor\n                        __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __p_packagedElement_interaction\n                        __p_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // create object __packageDeclarationToP_target_p\n                        __packageDeclarationToP_target_p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                        // assign attribute __packageDeclaration_actors_actor\n                        __packageDeclaration_actors_actor.setName (\"actors\");\n                        // assign attribute __p_packagedElement_interaction\n                        __p_packagedElement_interaction.setName (\"packagedElement\");\n                        // assign attribute __packageDeclarationToP_source_packageDeclaration\n                        __packageDeclarationToP_source_packageDeclaration.setName (\"source\");\n                        // assign attribute __packageDeclarationToP_target_p\n                        __packageDeclarationToP_target_p.setName (\"target\");\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                        // create link\n                        __packageDeclarationToP_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                        // create link\n                        __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                        // create link\n                        __p_packagedElement_interaction.setSrc( p);\n\n\n                        // create link\n                        __packageDeclarationToP_target_p.setTrg( p);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(p);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(packageDeclarationToP);\n\n\n                        // create link\n                        __packageDeclarationToP_target_p.setSrc( packageDeclarationToP);\n\n\n                        // create link\n                        __packageDeclarationToP_source_packageDeclaration.setSrc( packageDeclarationToP);\n\n\n                        // create link\n                        __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(actor);\n\n\n                        // create link\n                        isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                        // create link\n                        __p_packagedElement_interaction.setTrg( interaction);\n\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToP_source_packageDeclaration,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToP_target_p,\"allContextElements\");\n\n                        // create link\n                        org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__p_packagedElement_interaction,\"allContextElements\");\n                        // story node \'solve CSP\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,packageDeclaration,p,packageDeclarationToP,actor,interaction));\n\n                           // ensure correct type and really bound of object csp\n                           JavaSDM.ensure ( _TmpObject instanceof CSP );\n                           csp = (CSP) _TmpObject;\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        // statement node \'check CSP\'\n                        fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                        if (fujaba__Success)\n                        {\n                           // story node \'add match to rule result\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object isApplicableMatch is really bound\n                              JavaSDM.ensure ( isApplicableMatch != null );\n                              // check object ruleresult is really bound\n                              JavaSDM.ensure ( ruleresult != null );\n                              // assign attribute ruleresult\n                              ruleresult.setSuccess (true);\n                              // assign attribute isApplicableMatch\n                              isApplicableMatch.setRuleName (\"ActorToClassRule\");\n\n                              // create link\n                              isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                        }\n                        else\n                        {\n\n                        }\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n                  }\n                  JavaSDM.ensure (fujaba__Success);\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      Interaction interaction = null;\n      ModalSequenceDiagram.Package p = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToP = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      ActorToLifeline actorToLine = null;\n      Lifeline line = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge interaction__lifeline__line = null;\n      EMoflonEdge line__interaction__interaction = null;\n      EMoflonEdge actorToLine__source__actor = null;\n      EMoflonEdge actorToLine__target__line = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"p\"));\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToP\"));\n\n         // ensure correct type and really bound of object packageDeclarationToP\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToP = (PackageDeclarationToPackage) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object actorToLine\n         actorToLine = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createActorToLifeline();\n\n         // create object line\n         line = ModalSequenceDiagramFactory.eINSTANCE.createLifeline();\n\n         // assign attribute line\n         line.setName ((java.lang.String)csp.getAttributeVariable(\"line\",\"name\").getValue());\n\n         // create link\n         actorToLine.setSource( actor);\n\n\n         // create link\n         actorToLine.setTarget( line);\n\n\n         // create link\n         interaction.getLifeline().add(line);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToP is really bound\n         JavaSDM.ensure ( packageDeclarationToP != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects p and actor \n         JavaSDM.ensure ( !p.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclarationToP and actor \n         JavaSDM.ensure ( !packageDeclarationToP.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects p and actorToLine \n         JavaSDM.ensure ( !p.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclarationToP and actorToLine \n         JavaSDM.ensure ( !packageDeclarationToP.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects p and interaction \n         JavaSDM.ensure ( !p.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclarationToP and interaction \n         JavaSDM.ensure ( !packageDeclarationToP.equals (interaction) );\n\n         // check isomorphic binding between objects p and line \n         JavaSDM.ensure ( !p.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects packageDeclarationToP and line \n         JavaSDM.ensure ( !packageDeclarationToP.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and p \n         JavaSDM.ensure ( !packageDeclaration.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToP and p \n         JavaSDM.ensure ( !packageDeclarationToP.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToP and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToP.equals (packageDeclaration) );\n\n         // create object __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__lifeline__line\n         interaction__lifeline__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__interaction__interaction\n         line__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__source__actor\n         actorToLine__source__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__target__line\n         actorToLine__target__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ActorToClassRule\");\n         // assign attribute __packageDeclaration_actors_actor\n         __packageDeclaration_actors_actor.setName (\"actors\");\n         // assign attribute actorToLine__source__actor\n         actorToLine__source__actor.setName (\"source\");\n         // assign attribute actorToLine__target__line\n         actorToLine__target__line.setName (\"target\");\n         // assign attribute line__interaction__interaction\n         line__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__lifeline__line\n         interaction__lifeline__line.setName (\"lifeline\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__packageDeclaration_actors_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__lifeline__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__source__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__target__line,\"createdEdges\");\n\n         // create link\n         __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n         // create link\n         actorToLine__source__actor.setTrg( actor);\n\n\n         // create link\n         __packageDeclaration_actors_actor.setTrg( actor);\n\n\n         // create link\n         actorToLine__target__line.setTrg( line);\n\n\n         // create link\n         interaction__lifeline__line.setTrg( line);\n\n\n         // create link\n         line__interaction__interaction.setSrc( line);\n\n\n         // create link\n         actorToLine__target__line.setSrc( actorToLine);\n\n\n         // create link\n         actorToLine__source__actor.setSrc( actorToLine);\n\n\n         // create link\n         line__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__lifeline__line.setSrc( interaction);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,packageDeclaration,p,packageDeclarationToP,actor,line,actorToLine,interaction);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"packageDeclaration\", packageDeclaration);\nmatch.registerObject(\"actor\", actor);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", true, csp);\r\nvar_actor_name.setValue(actor.getName());\r\nvar_actor_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(\"line.name\", csp);\r\nvar_line_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_actor_name,var_line_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"p\",p);\r\nisApplicableMatch.registerObject(\"packageDeclarationToP\",packageDeclarationToP);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package p,
			PackageDeclarationToPackage packageDeclarationToP, Actor actor,
			Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"p\", p);\nruleresult.registerObject(\"packageDeclarationToP\", packageDeclarationToP);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"interaction\", interaction);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject p,
			EObject packageDeclarationToP, EObject actor, EObject line,
			EObject actorToLine, EObject interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"actor\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getActor());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __p_packagedElement_interaction = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,p,line,interaction));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // create object __p_packagedElement_interaction\n            __p_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __p_packagedElement_interaction\n            __p_packagedElement_interaction.setName (\"packagedElement\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,p,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__p_packagedElement_interaction,\"contextEdges\");\n\n            // create link\n            __p_packagedElement_interaction.setSrc( p);\n\n\n            // create link\n            __p_packagedElement_interaction.setTrg( interaction);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,p,line,interaction);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, ModalSequenceDiagram.Package p,
			Lifeline line, Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package p = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __packageDeclarationToP_source_packageDeclaration = null;\n      EMoflonEdge __packageDeclarationToP_target_p = null;\n      EMoflonEdge __p_packagedElement_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__IterPToPackageDeclarationToP = null;\n      PackageDeclarationToPackage packageDeclarationToP = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"ActorToClassRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"p\"));\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link target from p to packageDeclarationToP\n         fujaba__Success = false;\n\n         fujaba__IterPToPackageDeclarationToP = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(p,PackageDeclarationToPackage.class,\"target\")).iterator ();\n\n         while ( fujaba__IterPToPackageDeclarationToP.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToP = (PackageDeclarationToPackage) fujaba__IterPToPackageDeclarationToP.next ();\n\n               // check object packageDeclarationToP is really bound\n               JavaSDM.ensure ( packageDeclarationToP != null );\n               // bind object\n               packageDeclaration = packageDeclarationToP.getSource ();\n\n               // check object packageDeclaration is really bound\n               JavaSDM.ensure ( packageDeclaration != null );\n\n               // story node \'find context\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object p is really bound\n                  JavaSDM.ensure ( p != null );\n                  // check object packageDeclaration is really bound\n                  JavaSDM.ensure ( packageDeclaration != null );\n                  // check object packageDeclarationToP is really bound\n                  JavaSDM.ensure ( packageDeclarationToP != null );\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link packagedElement from interaction to p\n                  JavaSDM.ensure (p.equals (interaction.eContainer()\n                  ));\n\n                  // check link source from packageDeclarationToP to packageDeclaration\n                  JavaSDM.ensure (packageDeclaration.equals (packageDeclarationToP.getSource ()\n                  ));\n\n                  // check link target from packageDeclarationToP to p\n                  JavaSDM.ensure (p.equals (packageDeclarationToP.getTarget ()\n                  ));\n\n                  // create object isApplicableMatch\n                  isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                  // create object __packageDeclarationToP_source_packageDeclaration\n                  __packageDeclarationToP_source_packageDeclaration = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __packageDeclarationToP_target_p\n                  __packageDeclarationToP_target_p = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __p_packagedElement_interaction\n                  __p_packagedElement_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __interaction_lifeline_line\n                  __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // create object __line_interaction_interaction\n                  __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                  // assign attribute __p_packagedElement_interaction\n                  __p_packagedElement_interaction.setName (\"packagedElement\");\n                  // assign attribute __packageDeclarationToP_source_packageDeclaration\n                  __packageDeclarationToP_source_packageDeclaration.setName (\"source\");\n                  // assign attribute __packageDeclarationToP_target_p\n                  __packageDeclarationToP_target_p.setName (\"target\");\n                  // assign attribute __line_interaction_interaction\n                  __line_interaction_interaction.setName (\"interaction\");\n                  // assign attribute __interaction_lifeline_line\n                  __interaction_lifeline_line.setName (\"lifeline\");\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                  // create link\n                  __packageDeclarationToP_source_packageDeclaration.setTrg( packageDeclaration);\n\n\n                  // create link\n                  __packageDeclarationToP_target_p.setTrg( p);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(p);\n\n\n                  // create link\n                  __p_packagedElement_interaction.setSrc( p);\n\n\n                  // create link\n                  __packageDeclarationToP_source_packageDeclaration.setSrc( packageDeclarationToP);\n\n\n                  // create link\n                  __packageDeclarationToP_target_p.setSrc( packageDeclarationToP);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(packageDeclarationToP);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(line);\n\n\n                  // create link\n                  __interaction_lifeline_line.setTrg( line);\n\n\n                  // create link\n                  __line_interaction_interaction.setSrc( line);\n\n\n                  // create link\n                  __line_interaction_interaction.setTrg( interaction);\n\n\n                  // create link\n                  __p_packagedElement_interaction.setTrg( interaction);\n\n\n                  // create link\n                  isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                  // create link\n                  __interaction_lifeline_line.setSrc( interaction);\n\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__p_packagedElement_interaction,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToP_target_p,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclarationToP_source_packageDeclaration,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                  // create link\n                  org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n                  // story node \'solve CSP\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,packageDeclaration,p,packageDeclarationToP,line,interaction));\n\n                     // ensure correct type and really bound of object csp\n                     JavaSDM.ensure ( _TmpObject instanceof CSP );\n                     csp = (CSP) _TmpObject;\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  // statement node \'check CSP\'\n                  fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                  if (fujaba__Success)\n                  {\n                     // story node \'add match to rule result\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // check object isApplicableMatch is really bound\n                        JavaSDM.ensure ( isApplicableMatch != null );\n                        // check object ruleresult is really bound\n                        JavaSDM.ensure ( ruleresult != null );\n                        // assign attribute ruleresult\n                        ruleresult.setSuccess (true);\n                        // assign attribute isApplicableMatch\n                        isApplicableMatch.setRuleName (\"ActorToClassRule\");\n\n                        // create link\n                        isApplicableMatch.setIsApplicableRuleResult( ruleresult);\n\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package p = null;\n      PackageDeclaration packageDeclaration = null;\n      PackageDeclarationToPackage packageDeclarationToP = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge packageDeclaration__actors__actor = null;\n      EMoflonEdge actorToLine__target__line = null;\n      EMoflonEdge actorToLine__source__actor = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"p\"));\n\n         // ensure correct type and really bound of object p\n         JavaSDM.ensure ( _TmpObject instanceof ModalSequenceDiagram.Package );\n         p = (ModalSequenceDiagram.Package) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclarationToP\"));\n\n         // ensure correct type and really bound of object packageDeclarationToP\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n         packageDeclarationToP = (PackageDeclarationToPackage) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         if (!fujaba__Success)\n         {\n            fujaba__Success = true;\n            csp = null;\n         }\n         // create object actor\n         actor = UseCaseDSLFactory.eINSTANCE.createActor();\n\n         // create object actorToLine\n         actorToLine = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createActorToLifeline();\n\n         // assign attribute actor\n         actor.setName ((java.lang.String)csp.getAttributeVariable(\"actor\",\"name\").getValue());\n\n         // create link\n         actorToLine.setTarget( line);\n\n\n         // create link\n         \tpackageDeclaration.getActors().add(actor); // add link\n\n\n         // create link\n         actorToLine.setSource( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actor,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine,\"createdLinkElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object packageDeclarationToP is really bound\n         JavaSDM.ensure ( packageDeclarationToP != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects p and actor \n         JavaSDM.ensure ( !p.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclarationToP and actor \n         JavaSDM.ensure ( !packageDeclarationToP.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects p and actorToLine \n         JavaSDM.ensure ( !p.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclarationToP and actorToLine \n         JavaSDM.ensure ( !packageDeclarationToP.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects p and interaction \n         JavaSDM.ensure ( !p.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclarationToP and interaction \n         JavaSDM.ensure ( !packageDeclarationToP.equals (interaction) );\n\n         // check isomorphic binding between objects p and line \n         JavaSDM.ensure ( !p.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects packageDeclarationToP and line \n         JavaSDM.ensure ( !packageDeclarationToP.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and p \n         JavaSDM.ensure ( !packageDeclaration.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToP and p \n         JavaSDM.ensure ( !packageDeclarationToP.equals (p) );\n\n         // check isomorphic binding between objects packageDeclarationToP and packageDeclaration \n         JavaSDM.ensure ( !packageDeclarationToP.equals (packageDeclaration) );\n\n         // create object __line_interaction_interaction\n         __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object packageDeclaration__actors__actor\n         packageDeclaration__actors__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__target__line\n         actorToLine__target__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object actorToLine__source__actor\n         actorToLine__source__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_lifeline_line\n         __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"ActorToClassRule\");\n         // assign attribute packageDeclaration__actors__actor\n         packageDeclaration__actors__actor.setName (\"actors\");\n         // assign attribute actorToLine__source__actor\n         actorToLine__source__actor.setName (\"source\");\n         // assign attribute actorToLine__target__line\n         actorToLine__target__line.setName (\"target\");\n         // assign attribute __line_interaction_interaction\n         __line_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_lifeline_line\n         __interaction_lifeline_line.setName (\"lifeline\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,packageDeclaration__actors__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__target__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,actorToLine__source__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_lifeline_line,\"translatedEdges\");\n\n         // create link\n         packageDeclaration__actors__actor.setSrc( packageDeclaration);\n\n\n         // create link\n         actorToLine__source__actor.setTrg( actor);\n\n\n         // create link\n         packageDeclaration__actors__actor.setTrg( actor);\n\n\n         // create link\n         __interaction_lifeline_line.setTrg( line);\n\n\n         // create link\n         actorToLine__target__line.setTrg( line);\n\n\n         // create link\n         __line_interaction_interaction.setSrc( line);\n\n\n         // create link\n         actorToLine__source__actor.setSrc( actorToLine);\n\n\n         // create link\n         actorToLine__target__line.setSrc( actorToLine);\n\n\n         // create link\n         __interaction_lifeline_line.setSrc( interaction);\n\n\n         // create link\n         __line_interaction_interaction.setTrg( interaction);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,packageDeclaration,p,packageDeclarationToP,actor,line,actorToLine,interaction);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"p\", p);\nmatch.registerObject(\"line\", line);\nmatch.registerObject(\"interaction\", interaction);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match,
			ModalSequenceDiagram.Package p, Lifeline line,
			Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, ModalSequenceDiagram.Package p,
			Lifeline line, Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(\"line.name\", true, csp);\r\nvar_line_name.setValue(line.getName());\r\nvar_line_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", csp);\r\nvar_actor_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_actor_name,var_line_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"p\",p);\r\nisApplicableMatch.registerObject(\"packageDeclarationToP\",packageDeclarationToP);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package p,
			PackageDeclarationToPackage packageDeclarationToP, Lifeline line,
			Interaction interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\nruleresult.registerObject(\"p\", p);\nruleresult.registerObject(\"packageDeclarationToP\", packageDeclarationToP);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"interaction\", interaction);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject p,
			EObject packageDeclarationToP, EObject actor, EObject line,
			EObject actorToLine, EObject interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"line\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getLifeline());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      PackageDeclaration __DEC_actor_actors_974681 = null;\n      Match match = null;\n      Actor actor = null;\n      PackageDeclaration packageDeclaration = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actors is really bound\n         JavaSDM.ensure ( _edge_actors != null );\n         // bind object\n         _TmpObject = _edge_actors.getSrc ();\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_actors.getTrg ();\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_actor_actors_974681 = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor.eContainer() : null;\n\n               // check object __DEC_actor_actors_974681 is really bound\n               JavaSDM.ensure ( __DEC_actor_actors_974681 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_actor_actors_974681.getActors().contains(actor));\n\n               // check isomorphic binding between objects __DEC_actor_actors_974681 and packageDeclaration \n               JavaSDM.ensure ( !__DEC_actor_actors_974681.equals (packageDeclaration) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_actors is really bound\n            JavaSDM.ensure ( _edge_actors != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check link actors from actor to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n            ));\n\n            // check link src from _edge_actors to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (_edge_actors.getSrc ()\n            ));\n\n            // check link trg from _edge_actors to actor\n            JavaSDM.ensure (actor.equals (_edge_actors.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,packageDeclaration,actor);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_3(EMoflonEdge _edge_actors);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Match match = null;\n      ModalSequenceDiagram.Package p = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_interaction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // bind object\n         p = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(p.getPackagedElement().contains(interaction));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object _edge_interaction is really bound\n            JavaSDM.ensure ( _edge_interaction != null );\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object p is really bound\n            JavaSDM.ensure ( p != null );\n            // check link lifeline from line to interaction\n            JavaSDM.ensure (interaction.equals (line.getInteraction ()\n            ));\n\n            // check link packagedElement from interaction to p\n            JavaSDM.ensure (p.equals (interaction.eContainer()\n            ));\n\n            // check link src from _edge_interaction to line\n            JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n            ));\n\n            // check link trg from _edge_interaction to interaction\n            JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_BWD(match,p,line,interaction);\n            if (fujaba__Success)\n            {\n               // statement node \'\'\n               fujaba__Success = this.checkTypes_BWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_2(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      Lifeline line = null;\n      ModalSequenceDiagram.Package p = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_lifeline is really bound\n         JavaSDM.ensure ( _edge_lifeline != null );\n         // bind object\n         _TmpObject = _edge_lifeline.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // bind object\n         p = interaction.eContainer() instanceof ModalSequenceDiagram.Package ? (ModalSequenceDiagram.Package) interaction.eContainer() : null;\n\n         // check object p is really bound\n         JavaSDM.ensure ( p != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(p.getPackagedElement().contains(interaction));\n\n         // bind object\n         _TmpObject = _edge_lifeline.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // check link lifeline from line to interaction\n         JavaSDM.ensure (interaction.equals (line.getInteraction ()\n         ));\n\n         // iterate to-many link trg from interaction to _edge_interaction\n         fujaba__Success = false;\n\n         fujaba__IterInteractionTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n         while ( fujaba__IterInteractionTo_edge_interaction.hasNext () )\n         {\n            try\n            {\n               _edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction.next ();\n\n               // check object _edge_interaction is really bound\n               JavaSDM.ensure ( _edge_interaction != null );\n               // check isomorphic binding between objects _edge_lifeline and _edge_interaction \n               JavaSDM.ensure ( !_edge_lifeline.equals (_edge_interaction) );\n\n               // check link src from _edge_interaction to line\n               JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // check object _edge_interaction is really bound\n                  JavaSDM.ensure ( _edge_interaction != null );\n                  // check object _edge_lifeline is really bound\n                  JavaSDM.ensure ( _edge_lifeline != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object p is really bound\n                  JavaSDM.ensure ( p != null );\n                  // check isomorphic binding between objects _edge_lifeline and _edge_interaction \n                  JavaSDM.ensure ( !_edge_lifeline.equals (_edge_interaction) );\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link packagedElement from interaction to p\n                  JavaSDM.ensure (p.equals (interaction.eContainer()\n                  ));\n\n                  // check link src from _edge_interaction to line\n                  JavaSDM.ensure (line.equals (_edge_interaction.getSrc ()\n                  ));\n\n                  // check link src from _edge_lifeline to interaction\n                  JavaSDM.ensure (interaction.equals (_edge_lifeline.getSrc ()\n                  ));\n\n                  // check link trg from _edge_interaction to interaction\n                  JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                  ));\n\n                  // check link trg from _edge_lifeline to line\n                  JavaSDM.ensure (line.equals (_edge_lifeline.getTrg ()\n                  ));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,p,line,interaction);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_3(EMoflonEdge _edge_lifeline);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      ModelgeneratorRuleResult ruleResult = null;\n      IsApplicableMatch isApplicableMatch = null;\n      Object _TmpObject = null;\n      CSP csp = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterPToInteraction = null;\n      Interaction interaction = null;\n      ModalSequenceDiagram.Package p = null;\n      PackageDeclaration packageDeclaration = null;\n      Iterator fujaba__IterPackageDeclarationToPListToPackageDeclarationToP = null;\n      PackageDeclarationToPackage packageDeclarationToP = null;\n      Iterator fujaba__IterRuleEntryContainerToPackageDeclarationToPList = null;\n      RuleEntryList packageDeclarationToPList = null;\n\n      // story node \'create result\'\n      try \n      {\n         fujaba__Success = false; \n\n         // create object ruleResult\n         ruleResult = TGGRuntimeFactory.eINSTANCE.createModelgeneratorRuleResult();\n\n         // create object isApplicableMatch\n         isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n         // assign attribute ruleResult\n         ruleResult.setSuccess (false);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'is applicable core\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object ruleEntryContainer is really bound\n         JavaSDM.ensure ( ruleEntryContainer != null );\n         // iterate to-many link ruleEntryList from ruleEntryContainer to packageDeclarationToPList\n         fujaba__Success = false;\n\n         fujaba__IterRuleEntryContainerToPackageDeclarationToPList = new ArrayList(ruleEntryContainer.getRuleEntryList()).iterator ();\n\n         while ( fujaba__IterRuleEntryContainerToPackageDeclarationToPList.hasNext () )\n         {\n            try\n            {\n               packageDeclarationToPList = (RuleEntryList) fujaba__IterRuleEntryContainerToPackageDeclarationToPList.next ();\n\n               // check object packageDeclarationToPList is really bound\n               JavaSDM.ensure ( packageDeclarationToPList != null );\n               // iterate to-many link entryObjects from packageDeclarationToPList to packageDeclarationToP\n               fujaba__Success = false;\n\n               fujaba__IterPackageDeclarationToPListToPackageDeclarationToP = new ArrayList(packageDeclarationToPList.getEntryObjects()).iterator ();\n\n               while ( fujaba__IterPackageDeclarationToPListToPackageDeclarationToP.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterPackageDeclarationToPListToPackageDeclarationToP.next ();\n\n                     // ensure correct type and really bound of object packageDeclarationToP\n                     JavaSDM.ensure ( _TmpObject instanceof PackageDeclarationToPackage );\n                     packageDeclarationToP = (PackageDeclarationToPackage) _TmpObject;\n                     // bind object\n                     packageDeclaration = packageDeclarationToP.getSource ();\n\n                     // check object packageDeclaration is really bound\n                     JavaSDM.ensure ( packageDeclaration != null );\n\n                     // bind object\n                     p = packageDeclarationToP.getTarget ();\n\n                     // check object p is really bound\n                     JavaSDM.ensure ( p != null );\n\n                     // iterate to-many link packagedElement from p to interaction\n                     fujaba__Success = false;\n\n                     fujaba__IterPToInteraction = new ArrayList(p.getPackagedElement()).iterator ();\n\n                     while ( fujaba__IterPToInteraction.hasNext () )\n                     {\n                        try\n                        {\n                           _TmpObject =  fujaba__IterPToInteraction.next ();\n\n                           // ensure correct type and really bound of object interaction\n                           JavaSDM.ensure ( _TmpObject instanceof Interaction );\n                           interaction = (Interaction) _TmpObject;\n                           // story node \'solve CSP\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              _TmpObject = (this.generateModel_solveCsp_BWD(isApplicableMatch,packageDeclaration,p,packageDeclarationToP,actor,line,actorToLine,interaction,ruleResult));\n\n                              // ensure correct type and really bound of object csp\n                              JavaSDM.ensure ( _TmpObject instanceof CSP );\n                              csp = (CSP) _TmpObject;\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n                           // statement node \'check CSP\'\n                           fujaba__Success = this.generateModel_checkCsp_BWD(csp);\n                           if (fujaba__Success)\n                           {\n                              // story node \'perform\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object interaction is really bound\n                                 JavaSDM.ensure ( interaction != null );\n                                 // check object p is really bound\n                                 JavaSDM.ensure ( p != null );\n                                 // check object packageDeclaration is really bound\n                                 JavaSDM.ensure ( packageDeclaration != null );\n                                 // check object packageDeclarationToP is really bound\n                                 JavaSDM.ensure ( packageDeclarationToP != null );\n                                 // check object ruleResult is really bound\n                                 JavaSDM.ensure ( ruleResult != null );\n                                 // create object actor\n                                 actor = UseCaseDSLFactory.eINSTANCE.createActor();\n\n                                 // create object actorToLine\n                                 actorToLine = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createActorToLifeline();\n\n                                 // create object line\n                                 line = ModalSequenceDiagramFactory.eINSTANCE.createLifeline();\n\n                                 // assign attribute actor\n                                 actor.setName ((java.lang.String)csp.getAttributeVariable(\"actor\",\"name\").getValue());\n                                 // assign attribute line\n                                 line.setName ((java.lang.String)csp.getAttributeVariable(\"line\",\"name\").getValue());\n                                 // assign attribute ruleResult\n                                 ruleResult.setSuccess (true);\n\n                                 // create link\n                                 \tpackageDeclaration.getActors().add(actor); // add link\n\n\n                                 // create link\n                                 actorToLine.setSource( actor);\n\n\n                                 // create link\n                                 ruleResult.getSourceObjects().add(actor);\n\n\n                                 // create link\n                                 actorToLine.setTarget( line);\n\n\n                                 // create link\n                                 ruleResult.getTargetObjects().add(line);\n\n\n                                 // create link\n                                 interaction.getLifeline().add(line);\n\n\n                                 // create link\n                                 ruleResult.getCorrObjects().add(actorToLine);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              return ruleResult;\n\n                           }\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleResult;'"
	 * @generated
	 */
	ModelgeneratorRuleResult generateModel(
			RuleEntryContainer ruleEntryContainer,
			PackageDeclarationToPackage packageDeclarationToPDummyParameter);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_actor_name = CSPFactoryHelper.eINSTANCE.createVariable(\"actor.name\", csp);\r\nvar_actor_name.setType(\"\");\r\nVariable var_line_name = CSPFactoryHelper.eINSTANCE.createVariable(\"line.name\", csp);\r\nvar_line_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_actor_name,var_line_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nisApplicableMatch.registerObject(\"p\",p);\r\nisApplicableMatch.registerObject(\"packageDeclarationToP\",packageDeclarationToP);\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nreturn csp;'"
	 * @generated
	 */
	CSP generateModel_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration,
			ModalSequenceDiagram.Package p,
			PackageDeclarationToPackage packageDeclarationToP, Actor actor,
			Lifeline line, ActorToLifeline actorToLine,
			Interaction interaction, ModelgeneratorRuleResult ruleResult);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean generateModel_checkCsp_BWD(CSP csp);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // ActorToClassRule
