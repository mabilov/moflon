/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGLanguage.csp.*;

import TGGRuntime.AbstractRule;
import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import csp.constraints.*;

import de.upb.tools.sdm.*;

import java.util.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Normal Step BF To Message Rule</b></em>'.
 * <!-- end-user-doc -->
 *
 *
 * @see UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage#getNormalStepBFToMessageRule()
 * @model
 * @generated
 */
public interface NormalStepBFToMessageRule extends AbstractRule,
		NormalStepToMessageRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __useCase_flows_flow = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_FWD(match,flow,useCase,step,actor,packageDeclaration));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __step_actor_actor\n            __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __flow_steps_step\n            __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __flow_steps_step\n            __flow_steps_step.setName (\"steps\");\n            // assign attribute __step_actor_actor\n            __step_actor_actor.setName (\"actor\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,step,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__step_actor_actor,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__flow_steps_step,\"toBeTranslatedEdges\");\n\n            // create link\n            __flow_steps_step.setSrc( flow);\n\n\n            // create link\n            __flow_steps_step.setTrg( step);\n\n\n            // create link\n            __step_actor_actor.setSrc( step);\n\n\n            // create link\n            __step_actor_actor.setTrg( actor);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // create object __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __useCase_flows_flow\n            __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __useCase_flows_flow\n            __useCase_flows_flow.setName (\"flows\");\n            // assign attribute __packageDeclaration_actors_actor\n            __packageDeclaration_actors_actor.setName (\"actors\");\n            // assign attribute __packageDeclaration_useCases_useCase\n            __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,flow,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_actors_actor,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__packageDeclaration_useCases_useCase,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,useCase,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__useCase_flows_flow,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,actor,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,packageDeclaration,\"contextNodes\");\n\n            // create link\n            __useCase_flows_flow.setTrg( flow);\n\n\n            // create link\n            __useCase_flows_flow.setSrc( useCase);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setTrg( actor);\n\n\n            // create link\n            __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n            // create link\n            __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_FWD(match,flow,useCase,step,actor,packageDeclaration);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_FWD(Match match, BasicFlow flow, UseCase useCase,
			NormalStep step, Actor actor, PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge message__sendEvent__messageSend = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge messageReceive__enclosingInteraction__interaction = null;\n      EMoflonEdge interaction__message__message = null;\n      EMoflonEdge messageReceive__covered__line = null;\n      EMoflonEdge interaction__fragment__messageSend = null;\n      EMoflonEdge interaction__fragment__messageReceive = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge message__interaction__interaction = null;\n      EMoflonEdge messageSend__message__message = null;\n      EMoflonEdge messageSend__enclosingInteraction__interaction = null;\n      EMoflonEdge message__receiveEvent__messageReceive = null;\n      EMoflonEdge messageReceive__message__message = null;\n      EMoflonEdge line__coveredBy__messageReceive = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object messageSend\n         messageSend = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object messageReceive\n         messageReceive = ModalSequenceDiagramFactory.eINSTANCE.createMessageOccurrenceSpecification();\n\n         // create object message\n         message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute message\n         message.setName ((java.lang.String)csp.getValue(\"message\",\"name\"));\n\n         // create link\n         messageSend.setEnclosingInteraction( interaction);\n\n\n         // create link\n         messageReceive.setEnclosingInteraction( interaction);\n\n\n         // create link\n         message.setInteraction( interaction);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,message,\"message\");\n\n         // create link\n         message.setSendEvent( messageSend);\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,message,\"message\");\n\n         // create link\n         line.getCoveredBy().add(messageReceive);\n\n\n         // create link\n         message.setReceiveEvent( messageReceive);\n\n\n         // create link\n         stepToMessage.setSource( step);\n\n\n         // create link\n         stepToMessage.setTarget( message);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"createdElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and actorToLine \n         JavaSDM.ensure ( !flowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects message and flowToInteraction \n         JavaSDM.ensure ( !message.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToMessage and flowToInteraction \n         JavaSDM.ensure ( !stepToMessage.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object message__sendEvent__messageSend\n         message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __step_actor_actor\n         __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__message__message\n         interaction__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__covered__line\n         messageReceive__covered__line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageSend\n         interaction__fragment__messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object interaction__fragment__messageReceive\n         interaction__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __flow_steps_step\n         __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__interaction__interaction\n         message__interaction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__message__message\n         messageSend__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object messageReceive__message__message\n         messageReceive__message__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object line__coveredBy__messageReceive\n         line__coveredBy__messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"NormalStepBFToMessageRule\");\n         // assign attribute messageSend__enclosingInteraction__interaction\n         messageSend__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageSend\n         interaction__fragment__messageSend.setName (\"fragment\");\n         // assign attribute messageReceive__enclosingInteraction__interaction\n         messageReceive__enclosingInteraction__interaction.setName (\"enclosingInteraction\");\n         // assign attribute interaction__fragment__messageReceive\n         interaction__fragment__messageReceive.setName (\"fragment\");\n         // assign attribute __flow_steps_step\n         __flow_steps_step.setName (\"steps\");\n         // assign attribute __step_actor_actor\n         __step_actor_actor.setName (\"actor\");\n         // assign attribute message__sendEvent__messageSend\n         message__sendEvent__messageSend.setName (\"sendEvent\");\n         // assign attribute message__receiveEvent__messageReceive\n         message__receiveEvent__messageReceive.setName (\"receiveEvent\");\n         // assign attribute message__interaction__interaction\n         message__interaction__interaction.setName (\"interaction\");\n         // assign attribute interaction__message__message\n         interaction__message__message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute messageSend__message__message\n         messageSend__message__message.setName (\"message\");\n         // assign attribute messageReceive__message__message\n         messageReceive__message__message.setName (\"message\");\n         // assign attribute line__coveredBy__messageReceive\n         line__coveredBy__messageReceive.setName (\"coveredBy\");\n         // assign attribute messageReceive__covered__line\n         messageReceive__covered__line.setName (\"covered\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__sendEvent__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__step_actor_actor,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__covered__line,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageSend,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,interaction__fragment__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__flow_steps_step,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__interaction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend__enclosingInteraction__interaction,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message__receiveEvent__messageReceive,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive__message__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,line__coveredBy__messageReceive,\"createdEdges\");\n\n         // create link\n         interaction__message__message.setSrc( interaction);\n\n\n         // create link\n         interaction__fragment__messageSend.setSrc( interaction);\n\n\n         // create link\n         message__interaction__interaction.setTrg( interaction);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setTrg( interaction);\n\n\n         // create link\n         interaction__fragment__messageReceive.setSrc( interaction);\n\n\n         // create link\n         interaction__fragment__messageSend.setTrg( messageSend);\n\n\n         // create link\n         messageSend__message__message.setSrc( messageSend);\n\n\n         // create link\n         messageSend__enclosingInteraction__interaction.setSrc( messageSend);\n\n\n         // create link\n         message__sendEvent__messageSend.setTrg( messageSend);\n\n\n         // create link\n         line__coveredBy__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__enclosingInteraction__interaction.setSrc( messageReceive);\n\n\n         // create link\n         interaction__fragment__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         messageReceive__message__message.setSrc( messageReceive);\n\n\n         // create link\n         messageReceive__covered__line.setSrc( messageReceive);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __flow_steps_step.setSrc( flow);\n\n\n         // create link\n         __flow_steps_step.setTrg( step);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         __step_actor_actor.setSrc( step);\n\n\n         // create link\n         interaction__message__message.setTrg( message);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         messageSend__message__message.setTrg( message);\n\n\n         // create link\n         messageReceive__message__message.setTrg( message);\n\n\n         // create link\n         message__sendEvent__messageSend.setSrc( message);\n\n\n         // create link\n         message__interaction__interaction.setSrc( message);\n\n\n         // create link\n         message__receiveEvent__messageReceive.setSrc( message);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n\n         // create link\n         line__coveredBy__messageReceive.setSrc( line);\n\n\n         // create link\n         messageReceive__covered__line.setTrg( line);\n\n\n         // create link\n         __step_actor_actor.setTrg( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_FWD(ruleresult,interaction,messageSend,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,step,message,stepToMessage,line,actor,actorToLine,packageDeclaration);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Actor actor = null;\n      BasicFlow flow = null;\n      PackageDeclaration packageDeclaration = null;\n      NormalStep step = null;\n      UseCase useCase = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __flow_steps_step = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __step_actor_actor = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      CSP csp = null;\n      Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Interaction interaction = null;\n      Iterator fujaba__IterFlowToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Lifeline line = null;\n      Iterator fujaba__IterActorToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"NormalStepBFToMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (match.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (match.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (match.getObject(\"step\"));\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n         _TmpObject = (match.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // iterate to-many link source from actor to actorToLine\n         fujaba__Success = false;\n\n         fujaba__IterActorToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,ActorToLifeline.class,\"source\")).iterator ();\n\n         while ( fujaba__IterActorToActorToLine.hasNext () )\n         {\n            try\n            {\n               actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine.next ();\n\n               // check object actorToLine is really bound\n               JavaSDM.ensure ( actorToLine != null );\n               // bind object\n               line = actorToLine.getTarget ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n\n               // iterate to-many link source from flow to flowToInteraction\n               fujaba__Success = false;\n\n               fujaba__IterFlowToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,FlowToInteractionFragment.class,\"source\")).iterator ();\n\n               while ( fujaba__IterFlowToFlowToInteraction.hasNext () )\n               {\n                  try\n                  {\n                     flowToInteraction = (FlowToInteractionFragment) fujaba__IterFlowToFlowToInteraction.next ();\n\n                     // check object flowToInteraction is really bound\n                     JavaSDM.ensure ( flowToInteraction != null );\n                     // bind object\n                     _TmpObject = flowToInteraction.getTarget ();\n\n                     // ensure correct type and really bound of object interaction\n                     JavaSDM.ensure ( _TmpObject instanceof Interaction );\n                     interaction = (Interaction) _TmpObject;\n\n                     // iterate to-many link source from useCase to useCaseToInteraction\n                     fujaba__Success = false;\n\n                     fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(useCase,UseCaseToInteraction.class,\"source\")).iterator ();\n\n                     while ( fujaba__IterUseCaseToUseCaseToInteraction.hasNext () )\n                     {\n                        try\n                        {\n                           useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction.next ();\n\n                           // check object useCaseToInteraction is really bound\n                           JavaSDM.ensure ( useCaseToInteraction != null );\n                           // check link target from useCaseToInteraction to interaction\n                           JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                           ));\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object actorToLine is really bound\n                              JavaSDM.ensure ( actorToLine != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object flowToInteraction is really bound\n                              JavaSDM.ensure ( flowToInteraction != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object packageDeclaration is really bound\n                              JavaSDM.ensure ( packageDeclaration != null );\n                              // check object step is really bound\n                              JavaSDM.ensure ( step != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check object useCaseToInteraction is really bound\n                              JavaSDM.ensure ( useCaseToInteraction != null );\n                              // check link actor from step to actor\n                              JavaSDM.ensure (actor.equals (step.getActor ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link actors from actor to packageDeclaration\n                              JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from actorToLine to actor\n                              JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                              ));\n\n                              // check link source from flowToInteraction to flow\n                              JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                              ));\n\n                              // check link source from useCaseToInteraction to useCase\n                              JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                              ));\n\n                              // check link steps from step to flow\n                              JavaSDM.ensure (flow.equals (step.eContainer()\n                              ));\n\n                              // check link target from actorToLine to line\n                              JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                              ));\n\n                              // check link target from flowToInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                              ));\n\n                              // check link target from useCaseToInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                              ));\n\n                              // check link useCases from useCase to packageDeclaration\n                              JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n                              ));\n\n                              // create object __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __line_interaction_interaction\n                              __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_lifeline_line\n                              __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flow_steps_step\n                              __flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __step_actor_actor\n                              __step_actor_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __actorToLine_target_line\n                              __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __actorToLine_source_actor\n                              __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow.setName (\"source\");\n                              // assign attribute __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase.setName (\"source\");\n                              // assign attribute __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __flow_steps_step\n                              __flow_steps_step.setName (\"steps\");\n                              // assign attribute __step_actor_actor\n                              __step_actor_actor.setName (\"actor\");\n                              // assign attribute __line_interaction_interaction\n                              __line_interaction_interaction.setName (\"interaction\");\n                              // assign attribute __interaction_lifeline_line\n                              __interaction_lifeline_line.setName (\"lifeline\");\n                              // assign attribute __actorToLine_source_actor\n                              __actorToLine_source_actor.setName (\"source\");\n                              // assign attribute __actorToLine_target_line\n                              __actorToLine_target_line.setName (\"target\");\n                              // assign attribute __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor.setName (\"actors\");\n                              // assign attribute __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n                              // create link\n                              __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                              // create link\n                              __line_interaction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_lifeline_line.setSrc( interaction);\n\n\n                              // create link\n                              __flow_steps_step.setSrc( flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setTrg( flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                              // create link\n                              __flow_steps_step.setTrg( step);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(step);\n\n\n                              // create link\n                              __step_actor_actor.setSrc( step);\n\n\n                              // create link\n                              __actorToLine_target_line.setTrg( line);\n\n\n                              // create link\n                              __line_interaction_interaction.setSrc( line);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(line);\n\n\n                              // create link\n                              __interaction_lifeline_line.setTrg( line);\n\n\n                              // create link\n                              __actorToLine_source_actor.setTrg( actor);\n\n\n                              // create link\n                              __step_actor_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                              // create link\n                              __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                              // create link\n                              __actorToLine_target_line.setSrc( actorToLine);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__step_actor_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flow_steps_step,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_FWD(isApplicableMatch,interaction,flow,flowToInteraction,useCase,useCaseToInteraction,step,line,actor,actorToLine,packageDeclaration));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_FWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"NormalStepBFToMessageRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"flow\", flow);\nmatch.registerObject(\"useCase\", useCase);\nmatch.registerObject(\"step\", step);\nmatch.registerObject(\"actor\", actor);\nmatch.registerObject(\"packageDeclaration\", packageDeclaration);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_FWD(Match match, BasicFlow flow,
			UseCase useCase, NormalStep step, Actor actor,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_FWD(Match match, BasicFlow flow,
			UseCase useCase, NormalStep step, Actor actor,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", true, csp);\r\nvar_step_name.setValue(step.getName());\r\nvar_step_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", csp);\r\nvar_message_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"step\",step);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Interaction interaction, BasicFlow flow,
			FlowToInteractionFragment flowToInteraction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, NormalStep step,
			Lifeline line, Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_FWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\n'"
	 * @generated
	 */
	void registerObjects_FWD(PerformRuleResult ruleresult, EObject interaction,
			EObject messageSend, EObject messageReceive, EObject flow,
			EObject flowToInteraction, EObject useCase,
			EObject useCaseToInteraction, EObject step, EObject message,
			EObject stepToMessage, EObject line, EObject actor,
			EObject actorToLine, EObject packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"step\").eClass().equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE.getNormalStep());'"
	 * @generated
	 */
	boolean checkTypes_FWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      CSP csp = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n\n      // story node \'initial bindings\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'Solve CSP\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.isAppropriate_solveCsp_BWD(match,interaction,messageSend,messageReceive,message,line));\n\n         // ensure correct type and really bound of object csp\n         JavaSDM.ensure ( _TmpObject instanceof CSP );\n         csp = (CSP) _TmpObject;\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'Check CSP\'\n      fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);\n      if (fujaba__Success)\n      {\n         // story node \'collect elements to be translated\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __messageReceive_covered_line\n            __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_interaction_interaction\n            __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_sendEvent_messageSend\n            __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_message_message\n            __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_fragment_messageSend\n            __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageSend_message_message\n            __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_message_message\n            __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __messageSend_enclosingInteraction_interaction\n            __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageSend\n            __interaction_fragment_messageSend.setName (\"fragment\");\n            // assign attribute __messageReceive_enclosingInteraction_interaction\n            __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n            // assign attribute __interaction_fragment_messageReceive\n            __interaction_fragment_messageReceive.setName (\"fragment\");\n            // assign attribute __message_sendEvent_messageSend\n            __message_sendEvent_messageSend.setName (\"sendEvent\");\n            // assign attribute __message_receiveEvent_messageReceive\n            __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n            // assign attribute __message_interaction_interaction\n            __message_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_message_message\n            __interaction_message_message.setName (\"message\");\n            // assign attribute __messageSend_message_message\n            __messageSend_message_message.setName (\"message\");\n            // assign attribute __messageReceive_message_message\n            __messageReceive_message_message.setName (\"message\");\n            // assign attribute __line_coveredBy_messageReceive\n            __line_coveredBy_messageReceive.setName (\"coveredBy\");\n            // assign attribute __messageReceive_covered_line\n            __messageReceive_covered_line.setName (\"covered\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageReceive,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_covered_line,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_interaction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_sendEvent_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_coveredBy_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,message,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,messageSend,\"toBeTranslatedNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_fragment_messageSend,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageSend_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_message_message,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__messageReceive_enclosingInteraction_interaction,\"toBeTranslatedEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__message_receiveEvent_messageReceive,\"toBeTranslatedEdges\");\n\n            // create link\n            __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __interaction_fragment_messageSend.setSrc( interaction);\n\n\n            // create link\n            __interaction_message_message.setSrc( interaction);\n\n\n            // create link\n            __message_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n            // create link\n            __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n            // create link\n            __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __messageSend_message_message.setSrc( messageSend);\n\n\n            // create link\n            __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n            // create link\n            __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n            // create link\n            __messageReceive_covered_line.setSrc( messageReceive);\n\n\n            // create link\n            __messageReceive_message_message.setSrc( messageReceive);\n\n\n            // create link\n            __messageSend_message_message.setTrg( message);\n\n\n            // create link\n            __interaction_message_message.setTrg( message);\n\n\n            // create link\n            __message_receiveEvent_messageReceive.setSrc( message);\n\n\n            // create link\n            __message_interaction_interaction.setSrc( message);\n\n\n            // create link\n            __message_sendEvent_messageSend.setSrc( message);\n\n\n            // create link\n            __messageReceive_message_message.setTrg( message);\n\n\n            // create link\n            __line_coveredBy_messageReceive.setSrc( line);\n\n\n            // create link\n            __messageReceive_covered_line.setTrg( line);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // story node \'collect context elements\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check object interaction is really bound\n            JavaSDM.ensure ( interaction != null );\n            // check object line is really bound\n            JavaSDM.ensure ( line != null );\n            // check object match is really bound\n            JavaSDM.ensure ( match != null );\n            // check object message is really bound\n            JavaSDM.ensure ( message != null );\n            // check object messageReceive is really bound\n            JavaSDM.ensure ( messageReceive != null );\n            // check object messageSend is really bound\n            JavaSDM.ensure ( messageSend != null );\n            // check isomorphic binding between objects messageSend and messageReceive \n            JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n            // create object __line_interaction_interaction\n            __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // create object __interaction_lifeline_line\n            __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n            // assign attribute __line_interaction_interaction\n            __line_interaction_interaction.setName (\"interaction\");\n            // assign attribute __interaction_lifeline_line\n            __interaction_lifeline_line.setName (\"lifeline\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,line,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__line_interaction_interaction,\"contextEdges\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,interaction,\"contextNodes\");\n\n            // create link\n            org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__interaction_lifeline_line,\"contextEdges\");\n\n            // create link\n            __interaction_lifeline_line.setSrc( interaction);\n\n\n            // create link\n            __line_interaction_interaction.setTrg( interaction);\n\n\n            // create link\n            __line_interaction_interaction.setSrc( line);\n\n\n            // create link\n            __interaction_lifeline_line.setTrg( line);\n\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n         // statement node \'register objects to match\'\n         this.registerObjectsToMatch_BWD(match,interaction,messageSend,messageReceive,message,line);\n         return true;\n\n      }\n      else\n      {\n         return false;\n\n      }'"
	 * @generated
	 */
	boolean isAppropriate_BWD(Match match, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      Actor actor = null;\n      ActorToLifeline actorToLine = null;\n      BasicFlow flow = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      Iterator fujaba__IterIsApplicableMatchToCsp = null;\n      CSP csp = null;\n      NormalStep step = null;\n      NormalStepToMessage stepToMessage = null;\n      PerformRuleResult ruleresult = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge step__actor__actor = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge stepToMessage__source__step = null;\n      EMoflonEdge flow__steps__step = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge stepToMessage__target__message = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __messageSend_message_message = null;\n\n      // story node \'perform transformation\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (isApplicableMatch.getObject(\"actor\"));\n\n         // ensure correct type and really bound of object actor\n         JavaSDM.ensure ( _TmpObject instanceof Actor );\n         actor = (Actor) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"actorToLine\"));\n\n         // ensure correct type and really bound of object actorToLine\n         JavaSDM.ensure ( _TmpObject instanceof ActorToLifeline );\n         actorToLine = (ActorToLifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flow\"));\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"flowToInteraction\"));\n\n         // ensure correct type and really bound of object flowToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof FlowToInteractionFragment );\n         flowToInteraction = (FlowToInteractionFragment) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"packageDeclaration\"));\n\n         // ensure correct type and really bound of object packageDeclaration\n         JavaSDM.ensure ( _TmpObject instanceof PackageDeclaration );\n         packageDeclaration = (PackageDeclaration) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCase\"));\n\n         // ensure correct type and really bound of object useCase\n         JavaSDM.ensure ( _TmpObject instanceof UseCase );\n         useCase = (UseCase) _TmpObject;\n         _TmpObject = (isApplicableMatch.getObject(\"useCaseToInteraction\"));\n\n         // ensure correct type and really bound of object useCaseToInteraction\n         JavaSDM.ensure ( _TmpObject instanceof UseCaseToInteraction );\n         useCaseToInteraction = (UseCaseToInteraction) _TmpObject;\n         // check object isApplicableMatch is really bound\n         JavaSDM.ensure ( isApplicableMatch != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link attributeInfo from isApplicableMatch to csp\n         fujaba__Success = false;\n\n         fujaba__IterIsApplicableMatchToCsp = isApplicableMatch.getAttributeInfo().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterIsApplicableMatchToCsp.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterIsApplicableMatchToCsp.next ();\n\n               // ensure correct type and really bound of object csp\n               JavaSDM.ensure ( _TmpObject instanceof CSP );\n               csp = (CSP) _TmpObject;\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object step\n         step = UseCaseDSLFactory.eINSTANCE.createNormalStep();\n\n         // create object stepToMessage\n         stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE.createNormalStepToMessage();\n\n         // assign attribute step\n         step.setName ((java.lang.String)csp.getValue(\"step\",\"name\"));\n\n         // create link\n         stepToMessage.setTarget( message);\n\n\n         // create link\n         \tflow.getSteps().add(step); // add link\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(step,actor,\"actor\");\n\n         // create link\n         stepToMessage.setSource( step);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'collect translated elements\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();\n\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage,\"createdLinkElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageSend,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,messageReceive,\"translatedElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step,\"createdElements\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,message,\"translatedElements\");\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'bookkeeping for edges\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n         // check object actorToLine is really bound\n         JavaSDM.ensure ( actorToLine != null );\n         // check object flow is really bound\n         JavaSDM.ensure ( flow != null );\n         // check object flowToInteraction is really bound\n         JavaSDM.ensure ( flowToInteraction != null );\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n         // check object line is really bound\n         JavaSDM.ensure ( line != null );\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n         // check object messageReceive is really bound\n         JavaSDM.ensure ( messageReceive != null );\n         // check object messageSend is really bound\n         JavaSDM.ensure ( messageSend != null );\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n         // check object ruleresult is really bound\n         JavaSDM.ensure ( ruleresult != null );\n         // check object step is really bound\n         JavaSDM.ensure ( step != null );\n         // check object stepToMessage is really bound\n         JavaSDM.ensure ( stepToMessage != null );\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n         // check object useCaseToInteraction is really bound\n         JavaSDM.ensure ( useCaseToInteraction != null );\n         // check isomorphic binding between objects actorToLine and actor \n         JavaSDM.ensure ( !actorToLine.equals (actor) );\n\n         // check isomorphic binding between objects flow and actor \n         JavaSDM.ensure ( !flow.equals (actor) );\n\n         // check isomorphic binding between objects flowToInteraction and actor \n         JavaSDM.ensure ( !flowToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects interaction and actor \n         JavaSDM.ensure ( !interaction.equals (actor) );\n\n         // check isomorphic binding between objects line and actor \n         JavaSDM.ensure ( !line.equals (actor) );\n\n         // check isomorphic binding between objects message and actor \n         JavaSDM.ensure ( !message.equals (actor) );\n\n         // check isomorphic binding between objects messageReceive and actor \n         JavaSDM.ensure ( !messageReceive.equals (actor) );\n\n         // check isomorphic binding between objects messageSend and actor \n         JavaSDM.ensure ( !messageSend.equals (actor) );\n\n         // check isomorphic binding between objects packageDeclaration and actor \n         JavaSDM.ensure ( !packageDeclaration.equals (actor) );\n\n         // check isomorphic binding between objects step and actor \n         JavaSDM.ensure ( !step.equals (actor) );\n\n         // check isomorphic binding between objects stepToMessage and actor \n         JavaSDM.ensure ( !stepToMessage.equals (actor) );\n\n         // check isomorphic binding between objects useCase and actor \n         JavaSDM.ensure ( !useCase.equals (actor) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actor \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actor) );\n\n         // check isomorphic binding between objects flow and actorToLine \n         JavaSDM.ensure ( !flow.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and actorToLine \n         JavaSDM.ensure ( !flowToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects interaction and actorToLine \n         JavaSDM.ensure ( !interaction.equals (actorToLine) );\n\n         // check isomorphic binding between objects line and actorToLine \n         JavaSDM.ensure ( !line.equals (actorToLine) );\n\n         // check isomorphic binding between objects message and actorToLine \n         JavaSDM.ensure ( !message.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageReceive and actorToLine \n         JavaSDM.ensure ( !messageReceive.equals (actorToLine) );\n\n         // check isomorphic binding between objects messageSend and actorToLine \n         JavaSDM.ensure ( !messageSend.equals (actorToLine) );\n\n         // check isomorphic binding between objects packageDeclaration and actorToLine \n         JavaSDM.ensure ( !packageDeclaration.equals (actorToLine) );\n\n         // check isomorphic binding between objects step and actorToLine \n         JavaSDM.ensure ( !step.equals (actorToLine) );\n\n         // check isomorphic binding between objects stepToMessage and actorToLine \n         JavaSDM.ensure ( !stepToMessage.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCase and actorToLine \n         JavaSDM.ensure ( !useCase.equals (actorToLine) );\n\n         // check isomorphic binding between objects useCaseToInteraction and actorToLine \n         JavaSDM.ensure ( !useCaseToInteraction.equals (actorToLine) );\n\n         // check isomorphic binding between objects flowToInteraction and flow \n         JavaSDM.ensure ( !flowToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flow \n         JavaSDM.ensure ( !interaction.equals (flow) );\n\n         // check isomorphic binding between objects line and flow \n         JavaSDM.ensure ( !line.equals (flow) );\n\n         // check isomorphic binding between objects message and flow \n         JavaSDM.ensure ( !message.equals (flow) );\n\n         // check isomorphic binding between objects messageReceive and flow \n         JavaSDM.ensure ( !messageReceive.equals (flow) );\n\n         // check isomorphic binding between objects messageSend and flow \n         JavaSDM.ensure ( !messageSend.equals (flow) );\n\n         // check isomorphic binding between objects packageDeclaration and flow \n         JavaSDM.ensure ( !packageDeclaration.equals (flow) );\n\n         // check isomorphic binding between objects step and flow \n         JavaSDM.ensure ( !step.equals (flow) );\n\n         // check isomorphic binding between objects stepToMessage and flow \n         JavaSDM.ensure ( !stepToMessage.equals (flow) );\n\n         // check isomorphic binding between objects useCase and flow \n         JavaSDM.ensure ( !useCase.equals (flow) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flow \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flow) );\n\n         // check isomorphic binding between objects interaction and flowToInteraction \n         JavaSDM.ensure ( !interaction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and flowToInteraction \n         JavaSDM.ensure ( !line.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects message and flowToInteraction \n         JavaSDM.ensure ( !message.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageReceive and flowToInteraction \n         JavaSDM.ensure ( !messageReceive.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects messageSend and flowToInteraction \n         JavaSDM.ensure ( !messageSend.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects packageDeclaration and flowToInteraction \n         JavaSDM.ensure ( !packageDeclaration.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects step and flowToInteraction \n         JavaSDM.ensure ( !step.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects stepToMessage and flowToInteraction \n         JavaSDM.ensure ( !stepToMessage.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCase and flowToInteraction \n         JavaSDM.ensure ( !useCase.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and flowToInteraction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (flowToInteraction) );\n\n         // check isomorphic binding between objects line and interaction \n         JavaSDM.ensure ( !line.equals (interaction) );\n\n         // check isomorphic binding between objects message and interaction \n         JavaSDM.ensure ( !message.equals (interaction) );\n\n         // check isomorphic binding between objects messageReceive and interaction \n         JavaSDM.ensure ( !messageReceive.equals (interaction) );\n\n         // check isomorphic binding between objects messageSend and interaction \n         JavaSDM.ensure ( !messageSend.equals (interaction) );\n\n         // check isomorphic binding between objects packageDeclaration and interaction \n         JavaSDM.ensure ( !packageDeclaration.equals (interaction) );\n\n         // check isomorphic binding between objects step and interaction \n         JavaSDM.ensure ( !step.equals (interaction) );\n\n         // check isomorphic binding between objects stepToMessage and interaction \n         JavaSDM.ensure ( !stepToMessage.equals (interaction) );\n\n         // check isomorphic binding between objects useCase and interaction \n         JavaSDM.ensure ( !useCase.equals (interaction) );\n\n         // check isomorphic binding between objects useCaseToInteraction and interaction \n         JavaSDM.ensure ( !useCaseToInteraction.equals (interaction) );\n\n         // check isomorphic binding between objects message and line \n         JavaSDM.ensure ( !message.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and line \n         JavaSDM.ensure ( !messageReceive.equals (line) );\n\n         // check isomorphic binding between objects messageSend and line \n         JavaSDM.ensure ( !messageSend.equals (line) );\n\n         // check isomorphic binding between objects packageDeclaration and line \n         JavaSDM.ensure ( !packageDeclaration.equals (line) );\n\n         // check isomorphic binding between objects step and line \n         JavaSDM.ensure ( !step.equals (line) );\n\n         // check isomorphic binding between objects stepToMessage and line \n         JavaSDM.ensure ( !stepToMessage.equals (line) );\n\n         // check isomorphic binding between objects useCase and line \n         JavaSDM.ensure ( !useCase.equals (line) );\n\n         // check isomorphic binding between objects useCaseToInteraction and line \n         JavaSDM.ensure ( !useCaseToInteraction.equals (line) );\n\n         // check isomorphic binding between objects messageReceive and message \n         JavaSDM.ensure ( !messageReceive.equals (message) );\n\n         // check isomorphic binding between objects messageSend and message \n         JavaSDM.ensure ( !messageSend.equals (message) );\n\n         // check isomorphic binding between objects packageDeclaration and message \n         JavaSDM.ensure ( !packageDeclaration.equals (message) );\n\n         // check isomorphic binding between objects step and message \n         JavaSDM.ensure ( !step.equals (message) );\n\n         // check isomorphic binding between objects stepToMessage and message \n         JavaSDM.ensure ( !stepToMessage.equals (message) );\n\n         // check isomorphic binding between objects useCase and message \n         JavaSDM.ensure ( !useCase.equals (message) );\n\n         // check isomorphic binding between objects useCaseToInteraction and message \n         JavaSDM.ensure ( !useCaseToInteraction.equals (message) );\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageReceive \n         JavaSDM.ensure ( !packageDeclaration.equals (messageReceive) );\n\n         // check isomorphic binding between objects step and messageReceive \n         JavaSDM.ensure ( !step.equals (messageReceive) );\n\n         // check isomorphic binding between objects stepToMessage and messageReceive \n         JavaSDM.ensure ( !stepToMessage.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCase and messageReceive \n         JavaSDM.ensure ( !useCase.equals (messageReceive) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageReceive \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageReceive) );\n\n         // check isomorphic binding between objects packageDeclaration and messageSend \n         JavaSDM.ensure ( !packageDeclaration.equals (messageSend) );\n\n         // check isomorphic binding between objects step and messageSend \n         JavaSDM.ensure ( !step.equals (messageSend) );\n\n         // check isomorphic binding between objects stepToMessage and messageSend \n         JavaSDM.ensure ( !stepToMessage.equals (messageSend) );\n\n         // check isomorphic binding between objects useCase and messageSend \n         JavaSDM.ensure ( !useCase.equals (messageSend) );\n\n         // check isomorphic binding between objects useCaseToInteraction and messageSend \n         JavaSDM.ensure ( !useCaseToInteraction.equals (messageSend) );\n\n         // check isomorphic binding between objects step and packageDeclaration \n         JavaSDM.ensure ( !step.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and packageDeclaration \n         JavaSDM.ensure ( !stepToMessage.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCase and packageDeclaration \n         JavaSDM.ensure ( !useCase.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects useCaseToInteraction and packageDeclaration \n         JavaSDM.ensure ( !useCaseToInteraction.equals (packageDeclaration) );\n\n         // check isomorphic binding between objects stepToMessage and step \n         JavaSDM.ensure ( !stepToMessage.equals (step) );\n\n         // check isomorphic binding between objects useCase and step \n         JavaSDM.ensure ( !useCase.equals (step) );\n\n         // check isomorphic binding between objects useCaseToInteraction and step \n         JavaSDM.ensure ( !useCaseToInteraction.equals (step) );\n\n         // check isomorphic binding between objects useCase and stepToMessage \n         JavaSDM.ensure ( !useCase.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and stepToMessage \n         JavaSDM.ensure ( !useCaseToInteraction.equals (stepToMessage) );\n\n         // check isomorphic binding between objects useCaseToInteraction and useCase \n         JavaSDM.ensure ( !useCaseToInteraction.equals (useCase) );\n\n         // create object __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object step__actor__actor\n         step__actor__actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageSend\n         __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__source__step\n         stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object flow__steps__step\n         flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_interaction_interaction\n         __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_message_message\n         __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __message_sendEvent_messageSend\n         __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageReceive_covered_line\n         __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object stepToMessage__target__message\n         stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __interaction_message_message\n         __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // create object __messageSend_message_message\n         __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n         // assign attribute ruleresult\n         ruleresult.setRuleName (\"NormalStepBFToMessageRule\");\n         // assign attribute __messageSend_enclosingInteraction_interaction\n         __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageSend\n         __interaction_fragment_messageSend.setName (\"fragment\");\n         // assign attribute __messageReceive_enclosingInteraction_interaction\n         __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n         // assign attribute __interaction_fragment_messageReceive\n         __interaction_fragment_messageReceive.setName (\"fragment\");\n         // assign attribute flow__steps__step\n         flow__steps__step.setName (\"steps\");\n         // assign attribute step__actor__actor\n         step__actor__actor.setName (\"actor\");\n         // assign attribute __message_sendEvent_messageSend\n         __message_sendEvent_messageSend.setName (\"sendEvent\");\n         // assign attribute __message_receiveEvent_messageReceive\n         __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n         // assign attribute __message_interaction_interaction\n         __message_interaction_interaction.setName (\"interaction\");\n         // assign attribute __interaction_message_message\n         __interaction_message_message.setName (\"message\");\n         // assign attribute stepToMessage__source__step\n         stepToMessage__source__step.setName (\"source\");\n         // assign attribute stepToMessage__target__message\n         stepToMessage__target__message.setName (\"target\");\n         // assign attribute __messageSend_message_message\n         __messageSend_message_message.setName (\"message\");\n         // assign attribute __messageReceive_message_message\n         __messageReceive_message_message.setName (\"message\");\n         // assign attribute __line_coveredBy_messageReceive\n         __line_coveredBy_messageReceive.setName (\"coveredBy\");\n         // assign attribute __messageReceive_covered_line\n         __messageReceive_covered_line.setName (\"covered\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_receiveEvent_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,step__actor__actor,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_fragment_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__source__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,flow__steps__step,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_interaction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__message_sendEvent_messageSend,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_enclosingInteraction_interaction,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageReceive_covered_line,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,stepToMessage__target__message,\"createdEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__interaction_message_message,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__line_coveredBy_messageReceive,\"translatedEdges\");\n\n         // create link\n         org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,__messageSend_message_message,\"translatedEdges\");\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __message_interaction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_fragment_messageSend.setSrc( interaction);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n         // create link\n         __interaction_message_message.setSrc( interaction);\n\n\n         // create link\n         __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n         // create link\n         __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n         // create link\n         __messageSend_message_message.setSrc( messageSend);\n\n\n         // create link\n         __messageReceive_message_message.setSrc( messageReceive);\n\n\n         // create link\n         __messageReceive_covered_line.setSrc( messageReceive);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n         // create link\n         flow__steps__step.setSrc( flow);\n\n\n         // create link\n         stepToMessage__source__step.setTrg( step);\n\n\n         // create link\n         flow__steps__step.setTrg( step);\n\n\n         // create link\n         step__actor__actor.setSrc( step);\n\n\n         // create link\n         __message_interaction_interaction.setSrc( message);\n\n\n         // create link\n         stepToMessage__target__message.setTrg( message);\n\n\n         // create link\n         __message_receiveEvent_messageReceive.setSrc( message);\n\n\n         // create link\n         __message_sendEvent_messageSend.setSrc( message);\n\n\n         // create link\n         __messageSend_message_message.setTrg( message);\n\n\n         // create link\n         __messageReceive_message_message.setTrg( message);\n\n\n         // create link\n         __interaction_message_message.setTrg( message);\n\n\n         // create link\n         stepToMessage__target__message.setSrc( stepToMessage);\n\n\n         // create link\n         stepToMessage__source__step.setSrc( stepToMessage);\n\n\n         // create link\n         __line_coveredBy_messageReceive.setSrc( line);\n\n\n         // create link\n         __messageReceive_covered_line.setTrg( line);\n\n\n         // create link\n         step__actor__actor.setTrg( actor);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // statement node \'perform postprocessing\'\n      // No post processing method found\n      // statement node \'register objects\'\n      this.registerObjects_BWD(ruleresult,interaction,messageSend,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,step,message,stepToMessage,line,actor,actorToLine,packageDeclaration);\n      return ruleresult;'"
	 * @generated
	 */
	PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass eClass = null;\n      Iterator fujaba__IterEClassToPerformOperation = null;\n      EOperation performOperation = null;\n      IsApplicableRuleResult ruleresult = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      Message message = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      MessageOccurrenceSpecification messageSend = null;\n      EMoflonEdge __line_interaction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageReceive = null;\n      EMoflonEdge __message_interaction_interaction = null;\n      EMoflonEdge __useCaseToInteraction_target_interaction = null;\n      IsApplicableMatch isApplicableMatch = null;\n      EMoflonEdge __messageReceive_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_fragment_messageSend = null;\n      EMoflonEdge __flowToInteraction_target_interaction = null;\n      EMoflonEdge __interaction_lifeline_line = null;\n      EMoflonEdge __messageSend_enclosingInteraction_interaction = null;\n      EMoflonEdge __interaction_message_message = null;\n      EMoflonEdge __message_sendEvent_messageSend = null;\n      EMoflonEdge __messageSend_message_message = null;\n      EMoflonEdge __messageReceive_covered_line = null;\n      EMoflonEdge __messageReceive_message_message = null;\n      EMoflonEdge __line_coveredBy_messageReceive = null;\n      EMoflonEdge __message_receiveEvent_messageReceive = null;\n      EMoflonEdge __useCase_flows_flow = null;\n      EMoflonEdge __flowToInteraction_source_flow = null;\n      EMoflonEdge __useCaseToInteraction_source_useCase = null;\n      EMoflonEdge __packageDeclaration_useCases_useCase = null;\n      EMoflonEdge __actorToLine_target_line = null;\n      EMoflonEdge __packageDeclaration_actors_actor = null;\n      EMoflonEdge __actorToLine_source_actor = null;\n      CSP csp = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      Iterator fujaba__IterInteractionToUseCaseToInteraction = null;\n      UseCaseToInteraction useCaseToInteraction = null;\n      BasicFlow flow = null;\n      Iterator fujaba__IterInteractionToFlowToInteraction = null;\n      FlowToInteractionFragment flowToInteraction = null;\n      Actor actor = null;\n      Iterator fujaba__IterLineToActorToLine = null;\n      ActorToLifeline actorToLine = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from eClass to performOperation\n         fujaba__Success = false;\n\n         fujaba__IterEClassToPerformOperation = eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__IterEClassToPerformOperation.hasNext () )\n         {\n            try\n            {\n               performOperation = (EOperation) fujaba__IterEClassToPerformOperation.next ();\n\n               // check object performOperation is really bound\n               JavaSDM.ensure ( performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (performOperation.getName (), \"perform_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object ruleresult\n         ruleresult = TGGRuntimeFactory.eINSTANCE.createIsApplicableRuleResult();\n\n         // assign attribute ruleresult\n         ruleresult.setSuccess (false);\n         // assign attribute ruleresult\n         ruleresult.setRule (\"NormalStepBFToMessageRule\");\n\n         // create link\n         ruleresult.setPerformOperation( performOperation);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'core match\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (match.getObject(\"interaction\"));\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n         _TmpObject = (match.getObject(\"line\"));\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n         _TmpObject = (match.getObject(\"message\"));\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n         _TmpObject = (match.getObject(\"messageReceive\"));\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n         _TmpObject = (match.getObject(\"messageSend\"));\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n         // check object match is really bound\n         JavaSDM.ensure ( match != null );\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // iterate to-many link target from line to actorToLine\n         fujaba__Success = false;\n\n         fujaba__IterLineToActorToLine = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,ActorToLifeline.class,\"target\")).iterator ();\n\n         while ( fujaba__IterLineToActorToLine.hasNext () )\n         {\n            try\n            {\n               actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine.next ();\n\n               // check object actorToLine is really bound\n               JavaSDM.ensure ( actorToLine != null );\n               // bind object\n               actor = actorToLine.getSource ();\n\n               // check object actor is really bound\n               JavaSDM.ensure ( actor != null );\n\n               // iterate to-many link target from interaction to flowToInteraction\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToFlowToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,FlowToInteractionFragment.class,\"target\")).iterator ();\n\n               while ( fujaba__IterInteractionToFlowToInteraction.hasNext () )\n               {\n                  try\n                  {\n                     flowToInteraction = (FlowToInteractionFragment) fujaba__IterInteractionToFlowToInteraction.next ();\n\n                     // check object flowToInteraction is really bound\n                     JavaSDM.ensure ( flowToInteraction != null );\n                     // bind object\n                     _TmpObject = flowToInteraction.getSource ();\n\n                     // ensure correct type and really bound of object flow\n                     JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n                     flow = (BasicFlow) _TmpObject;\n\n                     // iterate to-many link target from interaction to useCaseToInteraction\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,UseCaseToInteraction.class,\"target\")).iterator ();\n\n                     while ( fujaba__IterInteractionToUseCaseToInteraction.hasNext () )\n                     {\n                        try\n                        {\n                           useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction.next ();\n\n                           // check object useCaseToInteraction is really bound\n                           JavaSDM.ensure ( useCaseToInteraction != null );\n                           // bind object\n                           useCase = useCaseToInteraction.getSource ();\n\n                           // check object useCase is really bound\n                           JavaSDM.ensure ( useCase != null );\n\n                           // story node \'find context\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // check object actor is really bound\n                              JavaSDM.ensure ( actor != null );\n                              // check object actorToLine is really bound\n                              JavaSDM.ensure ( actorToLine != null );\n                              // check object flow is really bound\n                              JavaSDM.ensure ( flow != null );\n                              // check object flowToInteraction is really bound\n                              JavaSDM.ensure ( flowToInteraction != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check object useCase is really bound\n                              JavaSDM.ensure ( useCase != null );\n                              // check object useCaseToInteraction is really bound\n                              JavaSDM.ensure ( useCaseToInteraction != null );\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link flows from flow to useCase\n                              JavaSDM.ensure (useCase.equals (flow.eContainer()\n                              ));\n\n                              // check link source from actorToLine to actor\n                              JavaSDM.ensure (actor.equals (actorToLine.getSource ()\n                              ));\n\n                              // check link source from flowToInteraction to flow\n                              JavaSDM.ensure (flow.equals (flowToInteraction.getSource ()\n                              ));\n\n                              // check link source from useCaseToInteraction to useCase\n                              JavaSDM.ensure (useCase.equals (useCaseToInteraction.getSource ()\n                              ));\n\n                              // check link target from actorToLine to line\n                              JavaSDM.ensure (line.equals (actorToLine.getTarget ()\n                              ));\n\n                              // check link target from flowToInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (flowToInteraction.getTarget ()\n                              ));\n\n                              // check link target from useCaseToInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (useCaseToInteraction.getTarget ()\n                              ));\n\n                              // bind object\n                              packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n                              // check object packageDeclaration is really bound\n                              JavaSDM.ensure ( packageDeclaration != null );\n\n                              // check if contained via correct reference\n                              JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n                              // check link actors from actor to packageDeclaration\n                              JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // create object __line_interaction_interaction\n                              __line_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_fragment_messageReceive\n                              __interaction_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __message_interaction_interaction\n                              __message_interaction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object isApplicableMatch\n                              isApplicableMatch = TGGRuntimeFactory.eINSTANCE.createIsApplicableMatch();\n\n                              // create object __messageReceive_enclosingInteraction_interaction\n                              __messageReceive_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_fragment_messageSend\n                              __interaction_fragment_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_lifeline_line\n                              __interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageSend_enclosingInteraction_interaction\n                              __messageSend_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __interaction_message_message\n                              __interaction_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __message_sendEvent_messageSend\n                              __message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageSend_message_message\n                              __messageSend_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageReceive_covered_line\n                              __messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __messageReceive_message_message\n                              __messageReceive_message_message = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __line_coveredBy_messageReceive\n                              __line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __message_receiveEvent_messageReceive\n                              __message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCase_flows_flow\n                              __useCase_flows_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __actorToLine_target_line\n                              __actorToLine_target_line = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // create object __actorToLine_source_actor\n                              __actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();\n\n                              // assign attribute __messageSend_enclosingInteraction_interaction\n                              __messageSend_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                              // assign attribute __interaction_fragment_messageSend\n                              __interaction_fragment_messageSend.setName (\"fragment\");\n                              // assign attribute __messageReceive_enclosingInteraction_interaction\n                              __messageReceive_enclosingInteraction_interaction.setName (\"enclosingInteraction\");\n                              // assign attribute __interaction_fragment_messageReceive\n                              __interaction_fragment_messageReceive.setName (\"fragment\");\n                              // assign attribute __flowToInteraction_source_flow\n                              __flowToInteraction_source_flow.setName (\"source\");\n                              // assign attribute __flowToInteraction_target_interaction\n                              __flowToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __useCase_flows_flow\n                              __useCase_flows_flow.setName (\"flows\");\n                              // assign attribute __useCaseToInteraction_source_useCase\n                              __useCaseToInteraction_source_useCase.setName (\"source\");\n                              // assign attribute __useCaseToInteraction_target_interaction\n                              __useCaseToInteraction_target_interaction.setName (\"target\");\n                              // assign attribute __message_sendEvent_messageSend\n                              __message_sendEvent_messageSend.setName (\"sendEvent\");\n                              // assign attribute __message_receiveEvent_messageReceive\n                              __message_receiveEvent_messageReceive.setName (\"receiveEvent\");\n                              // assign attribute __message_interaction_interaction\n                              __message_interaction_interaction.setName (\"interaction\");\n                              // assign attribute __interaction_message_message\n                              __interaction_message_message.setName (\"message\");\n                              // assign attribute __line_interaction_interaction\n                              __line_interaction_interaction.setName (\"interaction\");\n                              // assign attribute __interaction_lifeline_line\n                              __interaction_lifeline_line.setName (\"lifeline\");\n                              // assign attribute __messageSend_message_message\n                              __messageSend_message_message.setName (\"message\");\n                              // assign attribute __messageReceive_message_message\n                              __messageReceive_message_message.setName (\"message\");\n                              // assign attribute __line_coveredBy_messageReceive\n                              __line_coveredBy_messageReceive.setName (\"coveredBy\");\n                              // assign attribute __messageReceive_covered_line\n                              __messageReceive_covered_line.setName (\"covered\");\n                              // assign attribute __actorToLine_source_actor\n                              __actorToLine_source_actor.setName (\"source\");\n                              // assign attribute __actorToLine_target_line\n                              __actorToLine_target_line.setName (\"target\");\n                              // assign attribute __packageDeclaration_actors_actor\n                              __packageDeclaration_actors_actor.setName (\"actors\");\n                              // assign attribute __packageDeclaration_useCases_useCase\n                              __packageDeclaration_useCases_useCase.setName (\"useCases\");\n\n                              // create link\n                              __line_interaction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_fragment_messageReceive.setSrc( interaction);\n\n\n                              // create link\n                              __message_interaction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(interaction);\n\n\n                              // create link\n                              __messageReceive_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_fragment_messageSend.setSrc( interaction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_lifeline_line.setSrc( interaction);\n\n\n                              // create link\n                              __messageSend_enclosingInteraction_interaction.setTrg( interaction);\n\n\n                              // create link\n                              __interaction_message_message.setSrc( interaction);\n\n\n                              // create link\n                              __message_sendEvent_messageSend.setTrg( messageSend);\n\n\n                              // create link\n                              __messageSend_enclosingInteraction_interaction.setSrc( messageSend);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(messageSend);\n\n\n                              // create link\n                              __interaction_fragment_messageSend.setTrg( messageSend);\n\n\n                              // create link\n                              __messageSend_message_message.setSrc( messageSend);\n\n\n                              // create link\n                              __interaction_fragment_messageReceive.setTrg( messageReceive);\n\n\n                              // create link\n                              __messageReceive_covered_line.setSrc( messageReceive);\n\n\n                              // create link\n                              __messageReceive_message_message.setSrc( messageReceive);\n\n\n                              // create link\n                              __line_coveredBy_messageReceive.setTrg( messageReceive);\n\n\n                              // create link\n                              __message_receiveEvent_messageReceive.setTrg( messageReceive);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(messageReceive);\n\n\n                              // create link\n                              __messageReceive_enclosingInteraction_interaction.setSrc( messageReceive);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flow);\n\n\n                              // create link\n                              __useCase_flows_flow.setTrg( flow);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setTrg( flow);\n\n\n                              // create link\n                              __flowToInteraction_source_flow.setSrc( flowToInteraction);\n\n\n                              // create link\n                              __flowToInteraction_target_interaction.setSrc( flowToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(flowToInteraction);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setTrg( useCase);\n\n\n                              // create link\n                              __useCase_flows_flow.setSrc( useCase);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCase);\n\n\n                              // create link\n                              __useCaseToInteraction_source_useCase.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(useCaseToInteraction);\n\n\n                              // create link\n                              __useCaseToInteraction_target_interaction.setSrc( useCaseToInteraction);\n\n\n                              // create link\n                              __message_sendEvent_messageSend.setSrc( message);\n\n\n                              // create link\n                              __message_receiveEvent_messageReceive.setSrc( message);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(message);\n\n\n                              // create link\n                              __messageReceive_message_message.setTrg( message);\n\n\n                              // create link\n                              __messageSend_message_message.setTrg( message);\n\n\n                              // create link\n                              __message_interaction_interaction.setSrc( message);\n\n\n                              // create link\n                              __interaction_message_message.setTrg( message);\n\n\n                              // create link\n                              __line_interaction_interaction.setSrc( line);\n\n\n                              // create link\n                              __interaction_lifeline_line.setTrg( line);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(line);\n\n\n                              // create link\n                              __actorToLine_target_line.setTrg( line);\n\n\n                              // create link\n                              __messageReceive_covered_line.setTrg( line);\n\n\n                              // create link\n                              __line_coveredBy_messageReceive.setSrc( line);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actor);\n\n\n                              // create link\n                              __actorToLine_source_actor.setTrg( actor);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(actorToLine);\n\n\n                              // create link\n                              __actorToLine_target_line.setSrc( actorToLine);\n\n\n                              // create link\n                              __actorToLine_source_actor.setSrc( actorToLine);\n\n\n                              // create link\n                              __packageDeclaration_useCases_useCase.setSrc( packageDeclaration);\n\n\n                              // create link\n                              __packageDeclaration_actors_actor.setSrc( packageDeclaration);\n\n\n                              // create link\n                              isApplicableMatch.getAllContextElements().add(packageDeclaration);\n\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_enclosingInteraction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_source_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_interaction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_message_message,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCaseToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__useCase_flows_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_actors_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_lifeline_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_message_message,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageSend,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__interaction_fragment_messageReceive,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__line_coveredBy_messageReceive,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_sendEvent_messageSend,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_receiveEvent_messageReceive,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_target_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_target_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageReceive_covered_line,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_message_message,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__messageSend_enclosingInteraction_interaction,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__flowToInteraction_source_flow,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__packageDeclaration_useCases_useCase,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__actorToLine_source_actor,\"allContextElements\");\n\n                              // create link\n                              org.moflon.util.eMoflonEMFUtil.addOppositeReference(isApplicableMatch,__message_interaction_interaction,\"allContextElements\");\n                              // story node \'solve CSP\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 _TmpObject = (this.isApplicable_solveCsp_BWD(isApplicableMatch,interaction,messageSend,messageReceive,flow,flowToInteraction,useCase,useCaseToInteraction,message,line,actor,actorToLine,packageDeclaration));\n\n                                 // ensure correct type and really bound of object csp\n                                 JavaSDM.ensure ( _TmpObject instanceof CSP );\n                                 csp = (CSP) _TmpObject;\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              // statement node \'check CSP\'\n                              fujaba__Success = this.isApplicable_checkCsp_BWD(csp);\n                              if (fujaba__Success)\n                              {\n                                 // story node \'add match to rule result\'\n                                 try \n                                 {\n                                    fujaba__Success = false; \n\n                                    // check object isApplicableMatch is really bound\n                                    JavaSDM.ensure ( isApplicableMatch != null );\n                                    // check object ruleresult is really bound\n                                    JavaSDM.ensure ( ruleresult != null );\n                                    // assign attribute isApplicableMatch\n                                    isApplicableMatch.setRuleName (\"NormalStepBFToMessageRule\");\n                                    // assign attribute ruleresult\n                                    ruleresult.setSuccess (true);\n\n                                    // create link\n                                    ruleresult.getIsApplicableMatch().add(isApplicableMatch);\n\n                                    fujaba__Success = true;\n                                 }\n                                 catch ( JavaSDMException fujaba__InternalException )\n                                 {\n                                    fujaba__Success = false;\n                                 }\n\n\n                              }\n                              else\n                              {\n\n                              }\n\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return ruleresult;'"
	 * @generated
	 */
	IsApplicableRuleResult isApplicable_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='match.registerObject(\"interaction\", interaction);\nmatch.registerObject(\"messageSend\", messageSend);\nmatch.registerObject(\"messageReceive\", messageReceive);\nmatch.registerObject(\"message\", message);\nmatch.registerObject(\"line\", line);\n'"
	 * @generated
	 */
	void registerObjectsToMatch_BWD(Match match, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\n\r\n// Create constraints\r\n\r\n\r\n\r\n\r\n// Solve CSP\r\nreturn csp;'"
	 * @generated
	 */
	CSP isAppropriate_solveCsp_BWD(Match match, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Message message,
			Lifeline line);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isAppropriate_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='// Create CSP\r\nCSP csp = CspFactory.eINSTANCE.createCSP();\r\nisApplicableMatch.getAttributeInfo().add(csp);\r\n\r\n// Create literals\r\n\r\n// Create attribute variables\r\nVariable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(\"message.name\", true, csp);\r\nvar_message_name.setValue(message.getName());\r\nvar_message_name.setType(\"\");\r\n\r\n// Create explicit parameters\r\n\r\n// Create unbound variables\r\nVariable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(\"step.name\", csp);\r\nvar_step_name.setType(\"\");\r\n\r\n// Create constraints\r\nEq eq = new Eq();\r\n\r\ncsp.getConstraints().add(eq);\r\n\r\n// Solve CSP\r\neq.setRuleName(\"\");\r\neq.solve(var_step_name,var_message_name);\r\n\r\n// Snapshot pattern match on which CSP is solved\r\nisApplicableMatch.registerObject(\"interaction\",interaction);\r\nisApplicableMatch.registerObject(\"messageSend\",messageSend);\r\nisApplicableMatch.registerObject(\"messageReceive\",messageReceive);\r\nisApplicableMatch.registerObject(\"flow\",flow);\r\nisApplicableMatch.registerObject(\"flowToInteraction\",flowToInteraction);\r\nisApplicableMatch.registerObject(\"useCase\",useCase);\r\nisApplicableMatch.registerObject(\"useCaseToInteraction\",useCaseToInteraction);\r\nisApplicableMatch.registerObject(\"message\",message);\r\nisApplicableMatch.registerObject(\"line\",line);\r\nisApplicableMatch.registerObject(\"actor\",actor);\r\nisApplicableMatch.registerObject(\"actorToLine\",actorToLine);\r\nisApplicableMatch.registerObject(\"packageDeclaration\",packageDeclaration);\r\nreturn csp;'"
	 * @generated
	 */
	CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, BasicFlow flow,
			FlowToInteractionFragment flowToInteraction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Lifeline line, Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return csp.check();'"
	 * @generated
	 */
	boolean isApplicable_checkCsp_BWD(CSP csp);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='ruleresult.registerObject(\"interaction\", interaction);\nruleresult.registerObject(\"messageSend\", messageSend);\nruleresult.registerObject(\"messageReceive\", messageReceive);\nruleresult.registerObject(\"flow\", flow);\nruleresult.registerObject(\"flowToInteraction\", flowToInteraction);\nruleresult.registerObject(\"useCase\", useCase);\nruleresult.registerObject(\"useCaseToInteraction\", useCaseToInteraction);\nruleresult.registerObject(\"step\", step);\nruleresult.registerObject(\"message\", message);\nruleresult.registerObject(\"stepToMessage\", stepToMessage);\nruleresult.registerObject(\"line\", line);\nruleresult.registerObject(\"actor\", actor);\nruleresult.registerObject(\"actorToLine\", actorToLine);\nruleresult.registerObject(\"packageDeclaration\", packageDeclaration);\n'"
	 * @generated
	 */
	void registerObjects_BWD(PerformRuleResult ruleresult, EObject interaction,
			EObject messageSend, EObject messageReceive, EObject flow,
			EObject flowToInteraction, EObject useCase,
			EObject useCaseToInteraction, EObject step, EObject message,
			EObject stepToMessage, EObject line, EObject actor,
			EObject actorToLine, EObject packageDeclaration);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='return true && match.getObject(\"messageSend\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"messageReceive\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessageOccurrenceSpecification()) && match.getObject(\"message\").eClass().equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE.getMessage());'"
	 * @generated
	 */
	boolean checkTypes_BWD(Match match);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_639490 = null;\n      Message __DEC_messageReceive_receiveEvent_639490 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_285202 = null;\n      Message __DEC_messageSend_receiveEvent_285202 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_146154 = null;\n      Message __DEC_messageReceive_sendEvent_146154 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728061 = null;\n      Message __DEC_messageSend_sendEvent_728061 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_360067 = null;\n      MessageEnd __DEC_message_message_360067 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // iterate to-many link message from interaction to message\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n               while ( fujaba__IterInteractionToMessage.hasNext () )\n               {\n                  try\n                  {\n                     message = (Message) fujaba__IterInteractionToMessage.next ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getSendEvent ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageSend to message\n                     JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                     ));\n\n                     // check link src from _edge_enclosingInteraction to messageSend\n                     JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_639490\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_639490 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_639490.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_639490 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_639490.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_639490 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_639490 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_639490 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_639490.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_285202\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_285202 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_285202.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_285202 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_285202.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_285202 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_285202 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_285202 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_285202.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_146154\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_146154 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_146154.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_146154 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_146154.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_146154 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_146154 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_146154 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_146154.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_728061\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728061 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728061.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_728061 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_728061.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_728061 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_728061 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_728061 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_728061.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_360067\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_360067 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_360067.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_360067 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_360067.next ();\n\n                                 // check object __DEC_message_message_360067 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_360067 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_360067 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_360067.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_360067 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_360067.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_enclosingInteraction is really bound\n                        JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_enclosingInteraction to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                        ));\n\n                        // check link trg from _edge_enclosingInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_12(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_974103 = null;\n      Message __DEC_messageReceive_receiveEvent_974103 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605512 = null;\n      Message __DEC_messageSend_receiveEvent_605512 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_765171 = null;\n      Message __DEC_messageReceive_sendEvent_765171 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_942466 = null;\n      Message __DEC_messageSend_sendEvent_942466 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_230426 = null;\n      MessageEnd __DEC_message_message_230426 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // iterate to-many link message from interaction to message\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n               while ( fujaba__IterInteractionToMessage.hasNext () )\n               {\n                  try\n                  {\n                     message = (Message) fujaba__IterInteractionToMessage.next ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getSendEvent ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageSend to message\n                     JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                     ));\n\n                     // check link trg from _edge_fragment to messageSend\n                     JavaSDM.ensure (messageSend.equals (_edge_fragment.getTrg ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // iterate to-many link trg from interaction to _edge_enclosingInteraction\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterInteractionTo_edge_enclosingInteraction.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterInteractionTo_edge_enclosingInteraction.next ();\n\n                           // check object _edge_enclosingInteraction is really bound\n                           JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                           // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                           JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                           // check link src from _edge_enclosingInteraction to messageSend\n                           JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_974103\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_974103 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_974103.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_974103 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_974103.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_974103 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_974103 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_974103 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_974103.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_605512\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605512 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605512.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_605512 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605512.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_605512 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_605512 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_605512 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_605512.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_765171\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_765171 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_765171.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_765171 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_765171.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_765171 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_765171 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_765171 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_765171.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_942466\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_942466 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_942466.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_942466 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_942466.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_942466 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_942466 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_942466 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_942466.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_230426\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_230426 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_230426.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_230426 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_230426.next ();\n\n                                       // check object __DEC_message_message_230426 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_230426 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_230426 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_230426.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_230426 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_230426.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_enclosingInteraction is really bound\n                              JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                              // check object _edge_fragment is really bound\n                              JavaSDM.ensure ( _edge_fragment != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                              JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_enclosingInteraction to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_enclosingInteraction.getSrc ()\n                              ));\n\n                              // check link src from _edge_fragment to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                              ));\n\n                              // check link trg from _edge_enclosingInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                              ));\n\n                              // check link trg from _edge_fragment to messageSend\n                              JavaSDM.ensure (messageSend.equals (_edge_fragment.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_13(EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_851040 = null;\n      Message __DEC_messageReceive_receiveEvent_851040 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89923 = null;\n      Message __DEC_messageSend_receiveEvent_89923 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_966221 = null;\n      Message __DEC_messageReceive_sendEvent_966221 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_733205 = null;\n      Message __DEC_messageSend_sendEvent_733205 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_557536 = null;\n      MessageEnd __DEC_message_message_557536 = null;\n      Match match = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_enclosingInteraction is really bound\n         JavaSDM.ensure ( _edge_enclosingInteraction != null );\n         // bind object\n         _TmpObject = _edge_enclosingInteraction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // iterate to-many link message from interaction to message\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n               while ( fujaba__IterInteractionToMessage.hasNext () )\n               {\n                  try\n                  {\n                     message = (Message) fujaba__IterInteractionToMessage.next ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getSendEvent ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageSend to message\n                     JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                     ));\n\n                     // check link src from _edge_enclosingInteraction to messageReceive\n                     JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_851040\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_851040 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_851040.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_851040 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_851040.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_851040 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_851040 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_851040 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_851040.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_89923\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89923 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89923.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_89923 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_89923.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_89923 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_89923 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_89923 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_89923.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_966221\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_966221 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_966221.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_966221 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_966221.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_966221 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_966221 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_966221 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_966221.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_733205\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_733205 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_733205.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_733205 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_733205.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_733205 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_733205 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_733205 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_733205.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_557536\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_557536 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_557536.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_557536 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_557536.next ();\n\n                                 // check object __DEC_message_message_557536 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_557536 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_557536 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_557536.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_557536 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_557536.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_enclosingInteraction is really bound\n                        JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_enclosingInteraction to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                        ));\n\n                        // check link trg from _edge_enclosingInteraction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_14(
			EMoflonEdge _edge_enclosingInteraction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_380882 = null;\n      Message __DEC_messageReceive_receiveEvent_380882 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_95654 = null;\n      Message __DEC_messageSend_receiveEvent_95654 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_731292 = null;\n      Message __DEC_messageReceive_sendEvent_731292 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_455407 = null;\n      Message __DEC_messageSend_sendEvent_455407 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_6147 = null;\n      MessageEnd __DEC_message_message_6147 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_enclosingInteraction = null;\n      EMoflonEdge _edge_enclosingInteraction = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Iterator fujaba__IterInteractionToMessage = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_fragment is really bound\n         JavaSDM.ensure ( _edge_fragment != null );\n         // bind object\n         _TmpObject = _edge_fragment.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // iterate to-many link message from interaction to message\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessage = new ArrayList(interaction.getMessage()).iterator ();\n\n               while ( fujaba__IterInteractionToMessage.hasNext () )\n               {\n                  try\n                  {\n                     message = (Message) fujaba__IterInteractionToMessage.next ();\n\n                     // check object message is really bound\n                     JavaSDM.ensure ( message != null );\n                     // bind object\n                     _TmpObject = message.getReceiveEvent ();\n\n                     // ensure correct type and really bound of object messageReceive\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check link fragment from messageReceive to interaction\n                     JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageReceive to message\n                     JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                     ));\n\n                     // bind object\n                     _TmpObject = message.getSendEvent ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link fragment from messageSend to interaction\n                     JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                     ));\n\n                     // check link message from messageSend to message\n                     JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                     ));\n\n                     // check link trg from _edge_fragment to messageReceive\n                     JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                     ));\n\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // iterate to-many link trg from interaction to _edge_enclosingInteraction\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionTo_edge_enclosingInteraction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterInteractionTo_edge_enclosingInteraction.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_enclosingInteraction = (EMoflonEdge) fujaba__IterInteractionTo_edge_enclosingInteraction.next ();\n\n                           // check object _edge_enclosingInteraction is really bound\n                           JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                           // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                           JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                           // check link src from _edge_enclosingInteraction to messageReceive\n                           JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_380882\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_380882 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_380882.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_380882 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_380882.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_380882 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_380882 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_380882 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_380882.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_95654\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_95654 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_95654.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_95654 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_95654.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_95654 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_95654 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_95654 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_95654.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_731292\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_731292 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_731292.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_731292 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_731292.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_731292 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_731292 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_731292 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_731292.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_455407\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_455407 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_455407.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_455407 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_455407.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_455407 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_455407 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_455407 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_455407.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_6147\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_6147 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_6147.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_6147 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_6147.next ();\n\n                                       // check object __DEC_message_message_6147 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_6147 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_6147 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_6147.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_6147 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_6147.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_enclosingInteraction is really bound\n                              JavaSDM.ensure ( _edge_enclosingInteraction != null );\n                              // check object _edge_fragment is really bound\n                              JavaSDM.ensure ( _edge_fragment != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction \n                              JavaSDM.ensure ( !_edge_fragment.equals (_edge_enclosingInteraction) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_enclosingInteraction to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_enclosingInteraction.getSrc ()\n                              ));\n\n                              // check link src from _edge_fragment to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_fragment.getSrc ()\n                              ));\n\n                              // check link trg from _edge_enclosingInteraction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_enclosingInteraction.getTrg ()\n                              ));\n\n                              // check link trg from _edge_fragment to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (_edge_fragment.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_15(EMoflonEdge _edge_fragment);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_427192 = null;\n      Match match = null;\n      Actor actor = null;\n      NormalStep step = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_steps is really bound\n         JavaSDM.ensure ( _edge_steps != null );\n         // bind object\n         _TmpObject = _edge_steps.getSrc ();\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // bind object\n         packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n         // bind object\n         _TmpObject = _edge_steps.getTrg ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // check link steps from step to flow\n         JavaSDM.ensure (flow.equals (step.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_step_steps_427192 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n               // check object __DEC_step_steps_427192 is really bound\n               JavaSDM.ensure ( __DEC_step_steps_427192 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_step_steps_427192.getSteps().contains(step));\n\n               // check isomorphic binding between objects __DEC_step_steps_427192 and flow \n               JavaSDM.ensure ( !__DEC_step_steps_427192.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_steps is really bound\n            JavaSDM.ensure ( _edge_steps != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check link actor from step to actor\n            JavaSDM.ensure (actor.equals (step.getActor ()\n            ));\n\n            // check link actors from actor to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n            ));\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link src from _edge_steps to flow\n            JavaSDM.ensure (flow.equals (_edge_steps.getSrc ()\n            ));\n\n            // check link steps from step to flow\n            JavaSDM.ensure (flow.equals (step.eContainer()\n            ));\n\n            // check link trg from _edge_steps to step\n            JavaSDM.ensure (step.equals (_edge_steps.getTrg ()\n            ));\n\n            // check link useCases from useCase to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,flow,useCase,step,actor,packageDeclaration);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_6(EMoflonEdge _edge_steps);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Flow __DEC_step_steps_932049 = null;\n      Match match = null;\n      PackageDeclaration packageDeclaration = null;\n      UseCase useCase = null;\n      BasicFlow flow = null;\n      Actor actor = null;\n      NormalStep step = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_FWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_actor is really bound\n         JavaSDM.ensure ( _edge_actor != null );\n         // bind object\n         _TmpObject = _edge_actor.getSrc ();\n\n         // ensure correct type and really bound of object step\n         JavaSDM.ensure ( _TmpObject instanceof NormalStep );\n         step = (NormalStep) _TmpObject;\n\n         // bind object\n         actor = step.getActor ();\n\n         // check object actor is really bound\n         JavaSDM.ensure ( actor != null );\n\n         // bind object\n         _TmpObject = step.eContainer() instanceof BasicFlow ? (BasicFlow) step.eContainer() : null;\n\n         // ensure correct type and really bound of object flow\n         JavaSDM.ensure ( _TmpObject instanceof BasicFlow );\n         flow = (BasicFlow) _TmpObject;\n\n         // check if contained via correct reference\n         JavaSDM.ensure(flow.getSteps().contains(step));\n\n         // bind object\n         useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow.eContainer() : null;\n\n         // check object useCase is really bound\n         JavaSDM.ensure ( useCase != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(useCase.getFlows().contains(flow));\n\n         // check link trg from _edge_actor to actor\n         JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n         ));\n\n         // bind object\n         packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase.eContainer() : null;\n\n         // check object packageDeclaration is really bound\n         JavaSDM.ensure ( packageDeclaration != null );\n\n         // check if contained via correct reference\n         JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));\n\n         // check link actors from actor to packageDeclaration\n         JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n         ));\n\n         // story node \'test core match and DECs\'\n         try \n         {\n            fujaba__Success = false; \n\n            // check negative bindings\n            try\n            {\n               fujaba__Success = false;\n\n               // bind object\n               __DEC_step_steps_932049 = step.eContainer() instanceof Flow ? (Flow) step.eContainer() : null;\n\n               // check object __DEC_step_steps_932049 is really bound\n               JavaSDM.ensure ( __DEC_step_steps_932049 != null );\n\n               // check if contained via correct reference\n               JavaSDM.ensure(__DEC_step_steps_932049.getSteps().contains(step));\n\n               // check isomorphic binding between objects __DEC_step_steps_932049 and flow \n               JavaSDM.ensure ( !__DEC_step_steps_932049.equals (flow) );\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n\n            fujaba__Success = !(fujaba__Success);\n\n            JavaSDM.ensure ( fujaba__Success );\n\n            // check object _edge_actor is really bound\n            JavaSDM.ensure ( _edge_actor != null );\n            // check object actor is really bound\n            JavaSDM.ensure ( actor != null );\n            // check object flow is really bound\n            JavaSDM.ensure ( flow != null );\n            // check object packageDeclaration is really bound\n            JavaSDM.ensure ( packageDeclaration != null );\n            // check object step is really bound\n            JavaSDM.ensure ( step != null );\n            // check object useCase is really bound\n            JavaSDM.ensure ( useCase != null );\n            // check link actor from step to actor\n            JavaSDM.ensure (actor.equals (step.getActor ()\n            ));\n\n            // check link actors from actor to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (actor.eContainer()\n            ));\n\n            // check link flows from flow to useCase\n            JavaSDM.ensure (useCase.equals (flow.eContainer()\n            ));\n\n            // check link src from _edge_actor to step\n            JavaSDM.ensure (step.equals (_edge_actor.getSrc ()\n            ));\n\n            // check link steps from step to flow\n            JavaSDM.ensure (flow.equals (step.eContainer()\n            ));\n\n            // check link trg from _edge_actor to actor\n            JavaSDM.ensure (actor.equals (_edge_actor.getTrg ()\n            ));\n\n            // check link useCases from useCase to packageDeclaration\n            JavaSDM.ensure (packageDeclaration.equals (useCase.eContainer()\n            ));\n\n            // create object match\n            match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n            // assign attribute match\n            match.setRuleName (__eClass.getName());\n            // statement node \'bookkeeping with generic isAppropriate method\'\n            fujaba__Success = this.isAppropriate_FWD(match,flow,useCase,step,actor,packageDeclaration);\n            if (fujaba__Success)\n            {\n               // statement node \'Ensure that the correct types of elements are matched\'\n               fujaba__Success = this.checkTypes_FWD(match);\n               if (fujaba__Success)\n               {\n                  // story node \'Add match to rule result\'\n                  try \n                  {\n                     fujaba__Success = false; \n\n                     // check object __performOperation is really bound\n                     JavaSDM.ensure ( __performOperation != null );\n                     // check object __result is really bound\n                     JavaSDM.ensure ( __result != null );\n                     // check object match is really bound\n                     JavaSDM.ensure ( match != null );\n\n                     // create link\n                     org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                     // create link\n                     __result.getContents().add(match);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n\n               }\n               else\n               {\n\n               }\n\n            }\n            else\n            {\n\n            }\n            fujaba__Success = true;\n         }\n         catch ( JavaSDMException fujaba__InternalException )\n         {\n            fujaba__Success = false;\n         }\n\n\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_FWD_EMoflonEdge_7(EMoflonEdge _edge_actor);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_597038 = null;\n      Message __DEC_messageReceive_receiveEvent_597038 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463692 = null;\n      Message __DEC_messageSend_receiveEvent_463692 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_643642 = null;\n      Message __DEC_messageReceive_sendEvent_643642 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_473029 = null;\n      Message __DEC_messageSend_sendEvent_473029 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_524119 = null;\n      MessageEnd __DEC_message_message_524119 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      Iterator fujaba__IterInteractionToMessageReceive = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageSend = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_sendEvent is really bound\n         JavaSDM.ensure ( _edge_sendEvent != null );\n         // bind object\n         _TmpObject = _edge_sendEvent.getTrg ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageSend.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageSend.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link sendEvent from message to messageSend\n         JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n         ));\n\n         // check link src from _edge_sendEvent to message\n         JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n         ));\n\n         // iterate to-many link fragment from interaction to messageReceive\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageReceive = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageReceive.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageReceive.next ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link receiveEvent from message to messageReceive\n               JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_597038\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_597038 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_597038.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_597038 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_597038.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_597038 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_597038 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_597038 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_597038.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_463692\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463692 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463692.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_463692 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_463692.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_463692 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_463692 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_463692 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_463692.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_643642\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_643642 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_643642.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_643642 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_643642.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_643642 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_643642 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_643642 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_643642.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_473029\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_473029 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_473029.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_473029 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_473029.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_473029 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_473029 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_473029 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_473029.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_524119\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_524119 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_524119.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_524119 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_524119.next ();\n\n                                 // check object __DEC_message_message_524119 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_524119 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_524119 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_524119.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_524119 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_524119.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_sendEvent is really bound\n                        JavaSDM.ensure ( _edge_sendEvent != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_sendEvent to message\n                        JavaSDM.ensure (message.equals (_edge_sendEvent.getSrc ()\n                        ));\n\n                        // check link trg from _edge_sendEvent to messageSend\n                        JavaSDM.ensure (messageSend.equals (_edge_sendEvent.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_16(
			EMoflonEdge _edge_sendEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_493216 = null;\n      Message __DEC_messageReceive_receiveEvent_493216 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_92548 = null;\n      Message __DEC_messageSend_receiveEvent_92548 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_182620 = null;\n      Message __DEC_messageReceive_sendEvent_182620 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_319115 = null;\n      Message __DEC_messageSend_sendEvent_319115 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_34480 = null;\n      MessageEnd __DEC_message_message_34480 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_receiveEvent is really bound\n         JavaSDM.ensure ( _edge_receiveEvent != null );\n         // bind object\n         _TmpObject = _edge_receiveEvent.getSrc ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link fragment from messageSend to interaction\n         JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link trg from _edge_receiveEvent to messageReceive\n         JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n         ));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageSend\n                  JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_493216\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_493216 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_493216.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_493216 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_493216.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_493216 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_493216 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_493216 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_493216.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_92548\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_92548 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_92548.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_receiveEvent_92548 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_92548.next ();\n\n                           // check object __DEC_messageSend_receiveEvent_92548 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_receiveEvent_92548 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_receiveEvent_92548 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_92548.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_182620\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_182620 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_182620.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_182620 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_182620.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_182620 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_182620 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_182620 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_182620.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_319115\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_319115 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_319115.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_sendEvent_319115 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_319115.next ();\n\n                           // check object __DEC_messageSend_sendEvent_319115 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_sendEvent_319115 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_sendEvent_319115 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_sendEvent_319115.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_34480\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_34480 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_34480.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_34480 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_34480.next ();\n\n                           // check object __DEC_message_message_34480 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_34480 != null );\n                           // check isomorphic binding between objects __DEC_message_message_34480 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_34480.equals (messageReceive) );\n\n                           // check isomorphic binding between objects __DEC_message_message_34480 and messageSend \n                           JavaSDM.ensure ( !__DEC_message_message_34480.equals (messageSend) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_receiveEvent is really bound\n                  JavaSDM.ensure ( _edge_receiveEvent != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check object messageSend is really bound\n                  JavaSDM.ensure ( messageSend != null );\n                  // check isomorphic binding between objects messageSend and messageReceive \n                  JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link fragment from messageSend to interaction\n                  JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link message from messageSend to message\n                  JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link receiveEvent from message to messageSend\n                  JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                  )));\n\n                  // check link sendEvent from message to messageSend\n                  JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link src from _edge_receiveEvent to message\n                  JavaSDM.ensure (message.equals (_edge_receiveEvent.getSrc ()\n                  ));\n\n                  // check link trg from _edge_receiveEvent to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_receiveEvent.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_17(
			EMoflonEdge _edge_receiveEvent);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_803332 = null;\n      Message __DEC_messageReceive_receiveEvent_803332 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868391 = null;\n      Message __DEC_messageSend_receiveEvent_868391 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_557828 = null;\n      Message __DEC_messageReceive_sendEvent_557828 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_983502 = null;\n      Message __DEC_messageSend_sendEvent_983502 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_698762 = null;\n      MessageEnd __DEC_message_message_698762 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_interaction is really bound\n         JavaSDM.ensure ( _edge_interaction != null );\n         // bind object\n         _TmpObject = _edge_interaction.getTrg ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link src from _edge_interaction to message\n               JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_803332\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_803332 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_803332.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_803332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_803332.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_803332 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_803332 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_803332 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_803332.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_868391\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868391 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868391.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_868391 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_868391.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_868391 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_868391 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_868391 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_868391.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_557828\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_557828 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_557828.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_557828 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_557828.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_557828 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_557828 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_557828 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_557828.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_983502\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_983502 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_983502.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_983502 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_983502.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_983502 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_983502 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_983502 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_983502.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_698762\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_698762 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_698762.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_698762 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_698762.next ();\n\n                                 // check object __DEC_message_message_698762 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_698762 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_698762 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_698762.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_698762 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_698762.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_interaction is really bound\n                        JavaSDM.ensure ( _edge_interaction != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_interaction to message\n                        JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                        ));\n\n                        // check link trg from _edge_interaction to interaction\n                        JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_18(
			EMoflonEdge _edge_interaction);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_654569 = null;\n      Message __DEC_messageReceive_receiveEvent_654569 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_886917 = null;\n      Message __DEC_messageSend_receiveEvent_886917 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_370280 = null;\n      Message __DEC_messageReceive_sendEvent_370280 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_424311 = null;\n      Message __DEC_messageSend_sendEvent_424311 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_813244 = null;\n      MessageEnd __DEC_message_message_813244 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionTo_edge_interaction = null;\n      EMoflonEdge _edge_interaction = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getSrc ();\n\n         // ensure correct type and really bound of object interaction\n         JavaSDM.ensure ( _TmpObject instanceof Interaction );\n         interaction = (Interaction) _TmpObject;\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link trg from _edge_message to message\n               JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n               ));\n\n               // iterate to-many link lifeline from interaction to line\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n               while ( fujaba__IterInteractionToLine.hasNext () )\n               {\n                  try\n                  {\n                     line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n                     // check object line is really bound\n                     JavaSDM.ensure ( line != null );\n                     // check link covered from line to messageReceive\n                     JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                     // iterate to-many link trg from interaction to _edge_interaction\n                     fujaba__Success = false;\n\n                     fujaba__IterInteractionTo_edge_interaction = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(interaction,EMoflonEdge.class,\"trg\")).iterator ();\n\n                     while ( fujaba__IterInteractionTo_edge_interaction.hasNext () )\n                     {\n                        try\n                        {\n                           _edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction.next ();\n\n                           // check object _edge_interaction is really bound\n                           JavaSDM.ensure ( _edge_interaction != null );\n                           // check isomorphic binding between objects _edge_message and _edge_interaction \n                           JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                           // check link src from _edge_interaction to message\n                           JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                           ));\n\n                           // story node \'test core match and DECs\'\n                           try \n                           {\n                              fujaba__Success = false; \n\n                              // negative check for link fragment from messageReceive\n                              JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                              // negative check for link fragment from messageSend\n                              JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_654569\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_654569 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_654569.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_receiveEvent_654569 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_654569.next ();\n\n                                       // check object __DEC_messageReceive_receiveEvent_654569 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_654569 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_654569 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_654569.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_886917\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_886917 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_886917.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_receiveEvent_886917 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_886917.next ();\n\n                                       // check object __DEC_messageSend_receiveEvent_886917 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_receiveEvent_886917 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_receiveEvent_886917 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_886917.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_370280\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_370280 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_370280.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageReceive_sendEvent_370280 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_370280.next ();\n\n                                       // check object __DEC_messageReceive_sendEvent_370280 is really bound\n                                       JavaSDM.ensure ( __DEC_messageReceive_sendEvent_370280 != null );\n                                       // check isomorphic binding between objects __DEC_messageReceive_sendEvent_370280 and message \n                                       JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_370280.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_424311\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_424311 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_424311.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_messageSend_sendEvent_424311 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_424311.next ();\n\n                                       // check object __DEC_messageSend_sendEvent_424311 is really bound\n                                       JavaSDM.ensure ( __DEC_messageSend_sendEvent_424311 != null );\n                                       // check isomorphic binding between objects __DEC_messageSend_sendEvent_424311 and message \n                                       JavaSDM.ensure ( !__DEC_messageSend_sendEvent_424311.equals (message) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check negative bindings\n                              try\n                              {\n                                 fujaba__Success = false;\n\n                                 // iterate to-many link message from message to __DEC_message_message_813244\n                                 fujaba__Success = false;\n\n                                 fujaba__IterMessageTo__DEC_message_message_813244 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                                 while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_813244.hasNext () )\n                                 {\n                                    try\n                                    {\n                                       __DEC_message_message_813244 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_813244.next ();\n\n                                       // check object __DEC_message_message_813244 is really bound\n                                       JavaSDM.ensure ( __DEC_message_message_813244 != null );\n                                       // check isomorphic binding between objects __DEC_message_message_813244 and messageReceive \n                                       JavaSDM.ensure ( !__DEC_message_message_813244.equals (messageReceive) );\n\n                                       // check isomorphic binding between objects __DEC_message_message_813244 and messageSend \n                                       JavaSDM.ensure ( !__DEC_message_message_813244.equals (messageSend) );\n\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n                                 }\n                                 JavaSDM.ensure (fujaba__Success);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n                              fujaba__Success = !(fujaba__Success);\n\n                              JavaSDM.ensure ( fujaba__Success );\n\n                              // check object _edge_interaction is really bound\n                              JavaSDM.ensure ( _edge_interaction != null );\n                              // check object _edge_message is really bound\n                              JavaSDM.ensure ( _edge_message != null );\n                              // check object interaction is really bound\n                              JavaSDM.ensure ( interaction != null );\n                              // check object line is really bound\n                              JavaSDM.ensure ( line != null );\n                              // check object message is really bound\n                              JavaSDM.ensure ( message != null );\n                              // check object messageReceive is really bound\n                              JavaSDM.ensure ( messageReceive != null );\n                              // check object messageSend is really bound\n                              JavaSDM.ensure ( messageSend != null );\n                              // check isomorphic binding between objects _edge_message and _edge_interaction \n                              JavaSDM.ensure ( !_edge_message.equals (_edge_interaction) );\n\n                              // check isomorphic binding between objects messageSend and messageReceive \n                              JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                              // check link fragment from messageReceive to interaction\n                              JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                              ));\n\n                              // check link fragment from messageSend to interaction\n                              JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                              ));\n\n                              // check link lifeline from line to interaction\n                              JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                              ));\n\n                              // check link message from message to interaction\n                              JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                              ));\n\n                              // check link message from messageReceive to message\n                              JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                              ));\n\n                              // check link message from messageSend to message\n                              JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                              ));\n\n                              // check link receiveEvent from message to messageReceive\n                              JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                              ));\n\n                              // check link receiveEvent from message to messageSend\n                              JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                              )));\n\n                              // check link sendEvent from message to messageSend\n                              JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                              ));\n\n                              // check link sendEvent from message to messageReceive\n                              JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                              )));\n\n                              // check link src from _edge_interaction to message\n                              JavaSDM.ensure (message.equals (_edge_interaction.getSrc ()\n                              ));\n\n                              // check link src from _edge_message to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_message.getSrc ()\n                              ));\n\n                              // check link trg from _edge_interaction to interaction\n                              JavaSDM.ensure (interaction.equals (_edge_interaction.getTrg ()\n                              ));\n\n                              // check link trg from _edge_message to message\n                              JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                              ));\n\n                              // check link covered from line to messageReceive\n                              JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                              // create object match\n                              match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                              // assign attribute match\n                              match.setRuleName (__eClass.getName());\n                              // statement node \'bookkeeping with generic isAppropriate method\'\n                              fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                              if (fujaba__Success)\n                              {\n                                 // statement node \'Ensure that the correct types of elements are matched\'\n                                 fujaba__Success = this.checkTypes_BWD(match);\n                                 if (fujaba__Success)\n                                 {\n                                    // story node \'Add match to rule result\'\n                                    try \n                                    {\n                                       fujaba__Success = false; \n\n                                       // check object __performOperation is really bound\n                                       JavaSDM.ensure ( __performOperation != null );\n                                       // check object __result is really bound\n                                       JavaSDM.ensure ( __result != null );\n                                       // check object match is really bound\n                                       JavaSDM.ensure ( match != null );\n\n                                       // create link\n                                       org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                       // create link\n                                       __result.getContents().add(match);\n\n                                       fujaba__Success = true;\n                                    }\n                                    catch ( JavaSDMException fujaba__InternalException )\n                                    {\n                                       fujaba__Success = false;\n                                    }\n\n\n                                 }\n                                 else\n                                 {\n\n                                 }\n\n                              }\n                              else\n                              {\n\n                              }\n                              fujaba__Success = true;\n                           }\n                           catch ( JavaSDMException fujaba__InternalException )\n                           {\n                              fujaba__Success = false;\n                           }\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_19(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299178 = null;\n      Message __DEC_messageReceive_receiveEvent_299178 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923876 = null;\n      Message __DEC_messageSend_receiveEvent_923876 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_946390 = null;\n      Message __DEC_messageReceive_sendEvent_946390 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_740412 = null;\n      Message __DEC_messageSend_sendEvent_740412 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_205916 = null;\n      MessageEnd __DEC_message_message_205916 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToLine = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageSend = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Interaction interaction = null;\n      Message message = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getTrg ();\n\n         // ensure correct type and really bound of object message\n         JavaSDM.ensure ( _TmpObject instanceof Message );\n         message = (Message) _TmpObject;\n\n         // bind object\n         interaction = message.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         _TmpObject = message.getReceiveEvent ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageReceive to message\n         JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n         ));\n\n         // bind object\n         _TmpObject = message.getSendEvent ();\n\n         // ensure correct type and really bound of object messageSend\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageSend = (MessageOccurrenceSpecification) _TmpObject;\n\n         // check isomorphic binding between objects messageSend and messageReceive \n         JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n         // check link fragment from messageSend to interaction\n         JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n         ));\n\n         // check link message from messageSend to message\n         JavaSDM.ensure (message.equals (messageSend.getMessage ()\n         ));\n\n         // check link src from _edge_message to messageSend\n         JavaSDM.ensure (messageSend.equals (_edge_message.getSrc ()\n         ));\n\n         // iterate to-many link lifeline from interaction to line\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToLine = new ArrayList(interaction.getLifeline()).iterator ();\n\n         while ( fujaba__IterInteractionToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterInteractionToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageSend\n                  JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_299178\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299178 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299178.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_299178 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_299178.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_299178 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_299178 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_299178 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_299178.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_923876\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923876 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923876.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_receiveEvent_923876 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_923876.next ();\n\n                           // check object __DEC_messageSend_receiveEvent_923876 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_receiveEvent_923876 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_receiveEvent_923876 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_923876.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_946390\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_946390 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_946390.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_946390 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_946390.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_946390 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_946390 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_946390 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_946390.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_740412\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_740412 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_740412.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_sendEvent_740412 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_740412.next ();\n\n                           // check object __DEC_messageSend_sendEvent_740412 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_sendEvent_740412 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_sendEvent_740412 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_sendEvent_740412.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_205916\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_205916 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_205916.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_205916 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_205916.next ();\n\n                           // check object __DEC_message_message_205916 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_205916 != null );\n                           // check isomorphic binding between objects __DEC_message_message_205916 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_205916.equals (messageReceive) );\n\n                           // check isomorphic binding between objects __DEC_message_message_205916 and messageSend \n                           JavaSDM.ensure ( !__DEC_message_message_205916.equals (messageSend) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_message is really bound\n                  JavaSDM.ensure ( _edge_message != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check object messageSend is really bound\n                  JavaSDM.ensure ( messageSend != null );\n                  // check isomorphic binding between objects messageSend and messageReceive \n                  JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link fragment from messageSend to interaction\n                  JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link message from messageSend to message\n                  JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link receiveEvent from message to messageSend\n                  JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                  )));\n\n                  // check link sendEvent from message to messageSend\n                  JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link src from _edge_message to messageSend\n                  JavaSDM.ensure (messageSend.equals (_edge_message.getSrc ()\n                  ));\n\n                  // check link trg from _edge_message to message\n                  JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_20(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_752490 = null;\n      Message __DEC_messageReceive_receiveEvent_752490 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_992283 = null;\n      Message __DEC_messageSend_receiveEvent_992283 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_176285 = null;\n      Message __DEC_messageReceive_sendEvent_176285 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579720 = null;\n      Message __DEC_messageSend_sendEvent_579720 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_396872 = null;\n      MessageEnd __DEC_message_message_396872 = null;\n      Match match = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Iterator fujaba__IterMessageReceiveToLine = null;\n      Lifeline line = null;\n      Message message = null;\n      Interaction interaction = null;\n      MessageOccurrenceSpecification messageReceive = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_message is really bound\n         JavaSDM.ensure ( _edge_message != null );\n         // bind object\n         _TmpObject = _edge_message.getSrc ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         interaction = messageReceive.getEnclosingInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // bind object\n         message = messageReceive.getMessage ();\n\n         // check object message is really bound\n         JavaSDM.ensure ( message != null );\n\n         // check link message from message to interaction\n         JavaSDM.ensure (interaction.equals (message.getInteraction ()\n         ));\n\n         // check link receiveEvent from message to messageReceive\n         JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n         ));\n\n         // check link trg from _edge_message to message\n         JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n         ));\n\n         // iterate to-many link covered from messageReceive to line\n         fujaba__Success = false;\n\n         fujaba__IterMessageReceiveToLine = new ArrayList(messageReceive.getCovered()).iterator ();\n\n         while ( fujaba__IterMessageReceiveToLine.hasNext () )\n         {\n            try\n            {\n               line = (Lifeline) fujaba__IterMessageReceiveToLine.next ();\n\n               // check object line is really bound\n               JavaSDM.ensure ( line != null );\n               // check link lifeline from line to interaction\n               JavaSDM.ensure (interaction.equals (line.getInteraction ()\n               ));\n\n               // iterate to-many link fragment from interaction to messageSend\n               fujaba__Success = false;\n\n               fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n               while ( fujaba__IterInteractionToMessageSend.hasNext () )\n               {\n                  try\n                  {\n                     _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n                     // ensure correct type and really bound of object messageSend\n                     JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n                     messageSend = (MessageOccurrenceSpecification) _TmpObject;\n                     // check isomorphic binding between objects messageSend and messageReceive \n                     JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                     // check link message from messageSend to message\n                     JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                     ));\n\n                     // check link sendEvent from message to messageSend\n                     JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_752490\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_752490 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_752490.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_752490 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_752490.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_752490 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_752490 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_752490 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_752490.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_992283\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_992283 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_992283.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_992283 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_992283.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_992283 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_992283 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_992283 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_992283.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_176285\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_176285 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_176285.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_176285 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_176285.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_176285 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_176285 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_176285 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_176285.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_579720\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579720 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579720.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_579720 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579720.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_579720 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_579720 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_579720 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_579720.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_396872\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_396872 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_396872.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_396872 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_396872.next ();\n\n                                 // check object __DEC_message_message_396872 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_396872 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_396872 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_396872.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_396872 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_396872.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_message is really bound\n                        JavaSDM.ensure ( _edge_message != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_message.getSrc ()\n                        ));\n\n                        // check link trg from _edge_message to message\n                        JavaSDM.ensure (message.equals (_edge_message.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_21(EMoflonEdge _edge_message);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777497 = null;\n      Message __DEC_messageReceive_receiveEvent_777497 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_603702 = null;\n      Message __DEC_messageSend_receiveEvent_603702 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_262772 = null;\n      Message __DEC_messageReceive_sendEvent_262772 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_425723 = null;\n      Message __DEC_messageSend_sendEvent_425723 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_720701 = null;\n      MessageEnd __DEC_message_message_720701 = null;\n      Match match = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n      MessageOccurrenceSpecification messageReceive = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_coveredBy is really bound\n         JavaSDM.ensure ( _edge_coveredBy != null );\n         // bind object\n         _TmpObject = _edge_coveredBy.getTrg ();\n\n         // ensure correct type and really bound of object messageReceive\n         JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n         messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n         // bind object\n         _TmpObject = _edge_coveredBy.getSrc ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // check link fragment from messageReceive to interaction\n         JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n         ));\n\n         // check link covered from line to messageReceive\n         JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link receiveEvent from message to messageReceive\n               JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // story node \'test core match and DECs\'\n               try \n               {\n                  fujaba__Success = false; \n\n                  // negative check for link fragment from messageReceive\n                  JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                  // negative check for link fragment from messageSend\n                  JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_777497\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777497 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777497.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_receiveEvent_777497 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777497.next ();\n\n                           // check object __DEC_messageReceive_receiveEvent_777497 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_777497 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_777497 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_777497.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_603702\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_603702 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_603702.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_receiveEvent_603702 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_603702.next ();\n\n                           // check object __DEC_messageSend_receiveEvent_603702 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_receiveEvent_603702 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_receiveEvent_603702 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_603702.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_262772\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_262772 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_262772.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageReceive_sendEvent_262772 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_262772.next ();\n\n                           // check object __DEC_messageReceive_sendEvent_262772 is really bound\n                           JavaSDM.ensure ( __DEC_messageReceive_sendEvent_262772 != null );\n                           // check isomorphic binding between objects __DEC_messageReceive_sendEvent_262772 and message \n                           JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_262772.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_425723\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_425723 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_425723.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_messageSend_sendEvent_425723 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_425723.next ();\n\n                           // check object __DEC_messageSend_sendEvent_425723 is really bound\n                           JavaSDM.ensure ( __DEC_messageSend_sendEvent_425723 != null );\n                           // check isomorphic binding between objects __DEC_messageSend_sendEvent_425723 and message \n                           JavaSDM.ensure ( !__DEC_messageSend_sendEvent_425723.equals (message) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check negative bindings\n                  try\n                  {\n                     fujaba__Success = false;\n\n                     // iterate to-many link message from message to __DEC_message_message_720701\n                     fujaba__Success = false;\n\n                     fujaba__IterMessageTo__DEC_message_message_720701 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                     while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_720701.hasNext () )\n                     {\n                        try\n                        {\n                           __DEC_message_message_720701 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_720701.next ();\n\n                           // check object __DEC_message_message_720701 is really bound\n                           JavaSDM.ensure ( __DEC_message_message_720701 != null );\n                           // check isomorphic binding between objects __DEC_message_message_720701 and messageReceive \n                           JavaSDM.ensure ( !__DEC_message_message_720701.equals (messageReceive) );\n\n                           // check isomorphic binding between objects __DEC_message_message_720701 and messageSend \n                           JavaSDM.ensure ( !__DEC_message_message_720701.equals (messageSend) );\n\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n                     }\n                     JavaSDM.ensure (fujaba__Success);\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n\n                  fujaba__Success = !(fujaba__Success);\n\n                  JavaSDM.ensure ( fujaba__Success );\n\n                  // check object _edge_coveredBy is really bound\n                  JavaSDM.ensure ( _edge_coveredBy != null );\n                  // check object interaction is really bound\n                  JavaSDM.ensure ( interaction != null );\n                  // check object line is really bound\n                  JavaSDM.ensure ( line != null );\n                  // check object message is really bound\n                  JavaSDM.ensure ( message != null );\n                  // check object messageReceive is really bound\n                  JavaSDM.ensure ( messageReceive != null );\n                  // check object messageSend is really bound\n                  JavaSDM.ensure ( messageSend != null );\n                  // check isomorphic binding between objects messageSend and messageReceive \n                  JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                  // check link fragment from messageReceive to interaction\n                  JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                  ));\n\n                  // check link fragment from messageSend to interaction\n                  JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                  ));\n\n                  // check link lifeline from line to interaction\n                  JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                  ));\n\n                  // check link message from message to interaction\n                  JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                  ));\n\n                  // check link message from messageReceive to message\n                  JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                  ));\n\n                  // check link message from messageSend to message\n                  JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                  ));\n\n                  // check link receiveEvent from message to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                  ));\n\n                  // check link receiveEvent from message to messageSend\n                  JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                  )));\n\n                  // check link sendEvent from message to messageSend\n                  JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                  ));\n\n                  // check link sendEvent from message to messageReceive\n                  JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                  )));\n\n                  // check link src from _edge_coveredBy to line\n                  JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                  ));\n\n                  // check link trg from _edge_coveredBy to messageReceive\n                  JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                  ));\n\n                  // check link covered from line to messageReceive\n                  JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                  // create object match\n                  match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                  // assign attribute match\n                  match.setRuleName (__eClass.getName());\n                  // statement node \'bookkeeping with generic isAppropriate method\'\n                  fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                  if (fujaba__Success)\n                  {\n                     // statement node \'Ensure that the correct types of elements are matched\'\n                     fujaba__Success = this.checkTypes_BWD(match);\n                     if (fujaba__Success)\n                     {\n                        // story node \'Add match to rule result\'\n                        try \n                        {\n                           fujaba__Success = false; \n\n                           // check object __performOperation is really bound\n                           JavaSDM.ensure ( __performOperation != null );\n                           // check object __result is really bound\n                           JavaSDM.ensure ( __result != null );\n                           // check object match is really bound\n                           JavaSDM.ensure ( match != null );\n\n                           // create link\n                           org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                           // create link\n                           __result.getContents().add(match);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n\n                     }\n                     else\n                     {\n\n                     }\n\n                  }\n                  else\n                  {\n\n                  }\n                  fujaba__Success = true;\n               }\n               catch ( JavaSDMException fujaba__InternalException )\n               {\n                  fujaba__Success = false;\n               }\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_22(
			EMoflonEdge _edge_coveredBy);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='boolean fujaba__Success = false;\n      Object _TmpObject = null;\n      EClass __eClass = null;\n      Iterator fujaba__Iter__eClassTo__performOperation = null;\n      EOperation __performOperation = null;\n      EObjectContainer __result = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_483338 = null;\n      Message __DEC_messageReceive_receiveEvent_483338 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662321 = null;\n      Message __DEC_messageSend_receiveEvent_662321 = null;\n      Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_244450 = null;\n      Message __DEC_messageReceive_sendEvent_244450 = null;\n      Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_750509 = null;\n      Message __DEC_messageSend_sendEvent_750509 = null;\n      Iterator fujaba__IterMessageTo__DEC_message_message_184164 = null;\n      MessageEnd __DEC_message_message_184164 = null;\n      Match match = null;\n      Iterator fujaba__IterLineTo_edge_coveredBy = null;\n      EMoflonEdge _edge_coveredBy = null;\n      MessageOccurrenceSpecification messageReceive = null;\n      Message message = null;\n      Iterator fujaba__IterInteractionToMessageSend = null;\n      MessageOccurrenceSpecification messageSend = null;\n      Interaction interaction = null;\n      Lifeline line = null;\n\n      // story node \'prepare return value\'\n      try \n      {\n         fujaba__Success = false; \n\n         _TmpObject = (this.eClass());\n\n         // ensure correct type and really bound of object __eClass\n         JavaSDM.ensure ( _TmpObject instanceof EClass );\n         __eClass = (EClass) _TmpObject;\n         // iterate to-many link eOperations from __eClass to __performOperation\n         fujaba__Success = false;\n\n         fujaba__Iter__eClassTo__performOperation = __eClass.getEOperations().iterator ();\n\n         while ( !(fujaba__Success) && fujaba__Iter__eClassTo__performOperation.hasNext () )\n         {\n            try\n            {\n               __performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation.next ();\n\n               // check object __performOperation is really bound\n               JavaSDM.ensure ( __performOperation != null );\n               // attribute condition\n               JavaSDM.ensure ( JavaSDM.stringCompare (__performOperation.getName (), \"isApplicable_BWD\") == 0 );\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n         // create object __result\n         __result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      // story node \'test core match kernel\'\n      try \n      {\n         fujaba__Success = false; \n\n         // check object _edge_covered is really bound\n         JavaSDM.ensure ( _edge_covered != null );\n         // bind object\n         _TmpObject = _edge_covered.getTrg ();\n\n         // ensure correct type and really bound of object line\n         JavaSDM.ensure ( _TmpObject instanceof Lifeline );\n         line = (Lifeline) _TmpObject;\n\n         // bind object\n         interaction = line.getInteraction ();\n\n         // check object interaction is really bound\n         JavaSDM.ensure ( interaction != null );\n\n         // iterate to-many link fragment from interaction to messageSend\n         fujaba__Success = false;\n\n         fujaba__IterInteractionToMessageSend = new ArrayList(interaction.getFragment()).iterator ();\n\n         while ( fujaba__IterInteractionToMessageSend.hasNext () )\n         {\n            try\n            {\n               _TmpObject =  fujaba__IterInteractionToMessageSend.next ();\n\n               // ensure correct type and really bound of object messageSend\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageSend = (MessageOccurrenceSpecification) _TmpObject;\n               // bind object\n               message = messageSend.getMessage ();\n\n               // check object message is really bound\n               JavaSDM.ensure ( message != null );\n\n               // check link message from message to interaction\n               JavaSDM.ensure (interaction.equals (message.getInteraction ()\n               ));\n\n               // bind object\n               _TmpObject = message.getReceiveEvent ();\n\n               // ensure correct type and really bound of object messageReceive\n               JavaSDM.ensure ( _TmpObject instanceof MessageOccurrenceSpecification );\n               messageReceive = (MessageOccurrenceSpecification) _TmpObject;\n\n               // check isomorphic binding between objects messageSend and messageReceive \n               JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n               // check link fragment from messageReceive to interaction\n               JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n               ));\n\n               // check link message from messageReceive to message\n               JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n               ));\n\n               // check link sendEvent from message to messageSend\n               JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n               ));\n\n               // check link src from _edge_covered to messageReceive\n               JavaSDM.ensure (messageReceive.equals (_edge_covered.getSrc ()\n               ));\n\n               // check link covered from line to messageReceive\n               JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n               // iterate to-many link src from line to _edge_coveredBy\n               fujaba__Success = false;\n\n               fujaba__IterLineTo_edge_coveredBy = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(line,EMoflonEdge.class,\"src\")).iterator ();\n\n               while ( fujaba__IterLineTo_edge_coveredBy.hasNext () )\n               {\n                  try\n                  {\n                     _edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy.next ();\n\n                     // check object _edge_coveredBy is really bound\n                     JavaSDM.ensure ( _edge_coveredBy != null );\n                     // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                     JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                     // check link trg from _edge_coveredBy to messageReceive\n                     JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                     ));\n\n                     // story node \'test core match and DECs\'\n                     try \n                     {\n                        fujaba__Success = false; \n\n                        // negative check for link fragment from messageReceive\n                        JavaSDM.ensure (messageReceive.getEnclosingOperand () == null);\n                        // negative check for link fragment from messageSend\n                        JavaSDM.ensure (messageSend.getEnclosingOperand () == null);\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_483338\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_483338 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_483338.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_receiveEvent_483338 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_483338.next ();\n\n                                 // check object __DEC_messageReceive_receiveEvent_483338 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_receiveEvent_483338 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_receiveEvent_483338 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_receiveEvent_483338.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_662321\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662321 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"receiveEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662321.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_receiveEvent_662321 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_662321.next ();\n\n                                 // check object __DEC_messageSend_receiveEvent_662321 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_receiveEvent_662321 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_receiveEvent_662321 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_receiveEvent_662321.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_244450\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_244450 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageReceive,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_244450.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageReceive_sendEvent_244450 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_244450.next ();\n\n                                 // check object __DEC_messageReceive_sendEvent_244450 is really bound\n                                 JavaSDM.ensure ( __DEC_messageReceive_sendEvent_244450 != null );\n                                 // check isomorphic binding between objects __DEC_messageReceive_sendEvent_244450 and message \n                                 JavaSDM.ensure ( !__DEC_messageReceive_sendEvent_244450.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_750509\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_750509 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(messageSend,Message.class,\"sendEvent\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_750509.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_messageSend_sendEvent_750509 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_750509.next ();\n\n                                 // check object __DEC_messageSend_sendEvent_750509 is really bound\n                                 JavaSDM.ensure ( __DEC_messageSend_sendEvent_750509 != null );\n                                 // check isomorphic binding between objects __DEC_messageSend_sendEvent_750509 and message \n                                 JavaSDM.ensure ( !__DEC_messageSend_sendEvent_750509.equals (message) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check negative bindings\n                        try\n                        {\n                           fujaba__Success = false;\n\n                           // iterate to-many link message from message to __DEC_message_message_184164\n                           fujaba__Success = false;\n\n                           fujaba__IterMessageTo__DEC_message_message_184164 = new ArrayList(org.moflon.util.eMoflonEMFUtil.getOppositeReference(message,MessageEnd.class,\"message\")).iterator ();\n\n                           while ( !(fujaba__Success) && fujaba__IterMessageTo__DEC_message_message_184164.hasNext () )\n                           {\n                              try\n                              {\n                                 __DEC_message_message_184164 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_184164.next ();\n\n                                 // check object __DEC_message_message_184164 is really bound\n                                 JavaSDM.ensure ( __DEC_message_message_184164 != null );\n                                 // check isomorphic binding between objects __DEC_message_message_184164 and messageReceive \n                                 JavaSDM.ensure ( !__DEC_message_message_184164.equals (messageReceive) );\n\n                                 // check isomorphic binding between objects __DEC_message_message_184164 and messageSend \n                                 JavaSDM.ensure ( !__DEC_message_message_184164.equals (messageSend) );\n\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n                           }\n                           JavaSDM.ensure (fujaba__Success);\n\n                           fujaba__Success = true;\n                        }\n                        catch ( JavaSDMException fujaba__InternalException )\n                        {\n                           fujaba__Success = false;\n                        }\n\n                        fujaba__Success = !(fujaba__Success);\n\n                        JavaSDM.ensure ( fujaba__Success );\n\n                        // check object _edge_covered is really bound\n                        JavaSDM.ensure ( _edge_covered != null );\n                        // check object _edge_coveredBy is really bound\n                        JavaSDM.ensure ( _edge_coveredBy != null );\n                        // check object interaction is really bound\n                        JavaSDM.ensure ( interaction != null );\n                        // check object line is really bound\n                        JavaSDM.ensure ( line != null );\n                        // check object message is really bound\n                        JavaSDM.ensure ( message != null );\n                        // check object messageReceive is really bound\n                        JavaSDM.ensure ( messageReceive != null );\n                        // check object messageSend is really bound\n                        JavaSDM.ensure ( messageSend != null );\n                        // check isomorphic binding between objects _edge_coveredBy and _edge_covered \n                        JavaSDM.ensure ( !_edge_coveredBy.equals (_edge_covered) );\n\n                        // check isomorphic binding between objects messageSend and messageReceive \n                        JavaSDM.ensure ( !messageSend.equals (messageReceive) );\n\n                        // check link fragment from messageReceive to interaction\n                        JavaSDM.ensure (interaction.equals (messageReceive.getEnclosingInteraction ()\n                        ));\n\n                        // check link fragment from messageSend to interaction\n                        JavaSDM.ensure (interaction.equals (messageSend.getEnclosingInteraction ()\n                        ));\n\n                        // check link lifeline from line to interaction\n                        JavaSDM.ensure (interaction.equals (line.getInteraction ()\n                        ));\n\n                        // check link message from message to interaction\n                        JavaSDM.ensure (interaction.equals (message.getInteraction ()\n                        ));\n\n                        // check link message from messageReceive to message\n                        JavaSDM.ensure (message.equals (messageReceive.getMessage ()\n                        ));\n\n                        // check link message from messageSend to message\n                        JavaSDM.ensure (message.equals (messageSend.getMessage ()\n                        ));\n\n                        // check link receiveEvent from message to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (message.getReceiveEvent ()\n                        ));\n\n                        // check link receiveEvent from message to messageSend\n                        JavaSDM.ensure (!(messageSend.equals (message.getReceiveEvent ()\n                        )));\n\n                        // check link sendEvent from message to messageSend\n                        JavaSDM.ensure (messageSend.equals (message.getSendEvent ()\n                        ));\n\n                        // check link sendEvent from message to messageReceive\n                        JavaSDM.ensure (!(messageReceive.equals (message.getSendEvent ()\n                        )));\n\n                        // check link src from _edge_covered to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_covered.getSrc ()\n                        ));\n\n                        // check link src from _edge_coveredBy to line\n                        JavaSDM.ensure (line.equals (_edge_coveredBy.getSrc ()\n                        ));\n\n                        // check link trg from _edge_covered to line\n                        JavaSDM.ensure (line.equals (_edge_covered.getTrg ()\n                        ));\n\n                        // check link trg from _edge_coveredBy to messageReceive\n                        JavaSDM.ensure (messageReceive.equals (_edge_coveredBy.getTrg ()\n                        ));\n\n                        // check link covered from line to messageReceive\n                        JavaSDM.ensure (line.getCoveredBy ().contains (messageReceive));\n\n                        // create object match\n                        match = TGGRuntimeFactory.eINSTANCE.createMatch();\n\n                        // assign attribute match\n                        match.setRuleName (__eClass.getName());\n                        // statement node \'bookkeeping with generic isAppropriate method\'\n                        fujaba__Success = this.isAppropriate_BWD(match,interaction,messageSend,messageReceive,message,line);\n                        if (fujaba__Success)\n                        {\n                           // statement node \'Ensure that the correct types of elements are matched\'\n                           fujaba__Success = this.checkTypes_BWD(match);\n                           if (fujaba__Success)\n                           {\n                              // story node \'Add match to rule result\'\n                              try \n                              {\n                                 fujaba__Success = false; \n\n                                 // check object __performOperation is really bound\n                                 JavaSDM.ensure ( __performOperation != null );\n                                 // check object __result is really bound\n                                 JavaSDM.ensure ( __result != null );\n                                 // check object match is really bound\n                                 JavaSDM.ensure ( match != null );\n\n                                 // create link\n                                 org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,__performOperation,\"isApplicableOperation\");\n\n                                 // create link\n                                 __result.getContents().add(match);\n\n                                 fujaba__Success = true;\n                              }\n                              catch ( JavaSDMException fujaba__InternalException )\n                              {\n                                 fujaba__Success = false;\n                              }\n\n\n                           }\n                           else\n                           {\n\n                           }\n\n                        }\n                        else\n                        {\n\n                        }\n                        fujaba__Success = true;\n                     }\n                     catch ( JavaSDMException fujaba__InternalException )\n                     {\n                        fujaba__Success = false;\n                     }\n\n\n                     fujaba__Success = true;\n                  }\n                  catch ( JavaSDMException fujaba__InternalException )\n                  {\n                     fujaba__Success = false;\n                  }\n               }\n               JavaSDM.ensure (fujaba__Success);\n\n\n\n               fujaba__Success = true;\n            }\n            catch ( JavaSDMException fujaba__InternalException )\n            {\n               fujaba__Success = false;\n            }\n         }\n         JavaSDM.ensure (fujaba__Success);\n\n\n         fujaba__Success = true;\n      }\n      catch ( JavaSDMException fujaba__InternalException )\n      {\n         fujaba__Success = false;\n      }\n\n      return __result;'"
	 * @generated
	 */
	EObjectContainer isAppropriate_BWD_EMoflonEdge_23(EMoflonEdge _edge_covered);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_FWD(TripleMatch tripleMatch);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='\n// [user code injected with eMoflon]\n\n// TODO: implement this method here but do not remove the injection marker \nthrow new UnsupportedOperationException();'"
	 * @generated
	 */
	RuleResult checkAttributes_BWD(TripleMatch tripleMatch);
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} // NormalStepBFToMessageRule
