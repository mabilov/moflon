/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;

import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltSysStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.NormalStepToMessageRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt Sys Step NF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class AltSysStepNFToComboRuleImpl extends AbstractRuleImpl implements
		AltSysStepNFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltSysStepNFToComboRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getAltSysStepNFToComboRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, Actor actor, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, actor, flow,
					step, alt, altFlow, useCase));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				__step_actor_actor.setTrg(actor);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, actor, flow, step, alt,
					altFlow, useCase);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		NormalStep step = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment combo = null;
		NormalStepToCombinedFragment stepToCombo = null;
		NormalStepToMessage stepToMessage = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		InteractionConstraint guard = null;
		FlowToInteractionFragment altFlowToOperand = null;
		LiteralString spec = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge messageReceive__message__message = null;
		EMoflonEdge line__coveredBy__parentOperand = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge line__coveredBy__operand = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge parentCombo__covered__line = null;
		EMoflonEdge line__coveredBy__parentCombo = null;
		EMoflonEdge parentOperand__fragment__messageSend = null;
		EMoflonEdge message__interaction__interaction = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge operand__covered__line = null;
		EMoflonEdge messageSend__covered__line = null;
		EMoflonEdge parentOperand__fragment__combo = null;
		EMoflonEdge messageReceive__enclosingOperand__parentOperand = null;
		EMoflonEdge combo__operand__operand = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge messageSend__message__message = null;
		EMoflonEdge message__sendEvent__messageSend = null;
		EMoflonEdge messageSend__enclosingOperand__parentOperand = null;
		EMoflonEdge parentOperand__covered__line = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge combo__enclosingOperand__parentOperand = null;
		EMoflonEdge interaction__message__message = null;
		EMoflonEdge operand__guard__guard = null;
		EMoflonEdge line__coveredBy__messageSend = null;
		EMoflonEdge message__receiveEvent__messageReceive = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge guard__specification__spec = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge parentOperand__fragment__messageReceive = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object operand
			operand = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionOperand();

			// create object messageSend
			messageSend = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object message
			message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();

			// create object messageReceive
			messageReceive = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object combo
			combo = ModalSequenceDiagramFactory.eINSTANCE
					.createCombinedFragment();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object guard
			guard = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionConstraint();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object spec
			spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();

			// assign attribute combo
			combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
					.getValue("combo", "interactionOperator"));
			// assign attribute guard
			guard.setName((java.lang.String) csp.getValue("guard", "name"));
			// assign attribute spec
			spec.setValue((java.lang.String) csp.getValue("spec", "value"));
			// assign attribute message
			message.setName((java.lang.String) csp.getValue("message", "name"));

			// create link
			operand.getCovered().add(line);

			// create link
			messageSend.getCovered().add(line);

			// create link
			parentOperand.getCovered().add(line);

			// create link
			parentCombo.getCovered().add(line);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,
					message, "message");

			// create link
			parentOperand.getFragment().add(messageSend);

			// create link
			message.setSendEvent(messageSend);

			// create link
			messageReceive.setEnclosingOperand(parentOperand);

			// create link
			combo.setEnclosingOperand(parentOperand);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,
					message, "message");

			// create link
			message.setReceiveEvent(messageReceive);

			// create link
			combo.getOperand().add(operand); // add link

			// create link
			stepToCombo.setTarget(combo);

			// create link
			stepToMessage.setSource(step);

			// create link
			stepToCombo.setSource(step);

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			operand.setGuard(guard); // add link to one

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			guard.setSpecification(spec); // add link to one

			// create link
			altFlowToOperand.setSource(altFlow);

			// create link
			stepToMessage.setTarget(message);

			// create link
			interaction.getMessage().add(message);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object messageReceive__message__message
			messageReceive__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentOperand
			line__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__operand
			line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__line
			parentCombo__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentCombo
			line__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__messageSend
			parentOperand__fragment__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__interaction__interaction
			message__interaction__interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_actor_actor
			__step_actor_actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__line
			operand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__covered__line
			messageSend__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__combo
			parentOperand__fragment__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__operand__operand
			combo__operand__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__message__message
			messageSend__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__sendEvent__messageSend
			message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__enclosingOperand__parentOperand
			messageSend__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__line
			parentOperand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__enclosingOperand__parentOperand
			combo__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object interaction__message__message
			interaction__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__guard__guard
			operand__guard__guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__messageSend
			line__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_stepAlternative_alt
			__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object guard__specification__spec
			guard__specification__spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __alt_ref_altFlow
			__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __flow_steps_step
			__flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltSysStepNFToComboRule");
			// assign attribute line__coveredBy__messageSend
			line__coveredBy__messageSend.setName("coveredBy");
			// assign attribute messageSend__covered__line
			messageSend__covered__line.setName("covered");
			// assign attribute parentOperand__fragment__messageSend
			parentOperand__fragment__messageSend.setName("fragment");
			// assign attribute messageSend__enclosingOperand__parentOperand
			messageSend__enclosingOperand__parentOperand
					.setName("enclosingOperand");
			// assign attribute parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive.setName("fragment");
			// assign attribute messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand
					.setName("enclosingOperand");
			// assign attribute line__coveredBy__parentOperand
			line__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__line
			parentOperand__covered__line.setName("covered");
			// assign attribute parentOperand__fragment__combo
			parentOperand__fragment__combo.setName("fragment");
			// assign attribute combo__enclosingOperand__parentOperand
			combo__enclosingOperand__parentOperand.setName("enclosingOperand");
			// assign attribute line__coveredBy__parentCombo
			line__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__line
			parentCombo__covered__line.setName("covered");
			// assign attribute __step_stepAlternative_alt
			__step_stepAlternative_alt.setName("stepAlternative");
			// assign attribute __alt_ref_altFlow
			__alt_ref_altFlow.setName("ref");
			// assign attribute combo__operand__operand
			combo__operand__operand.setName("operand");
			// assign attribute line__coveredBy__operand
			line__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__line
			operand__covered__line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute operand__guard__guard
			operand__guard__guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute guard__specification__spec
			guard__specification__spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute __flow_steps_step
			__flow_steps_step.setName("steps");
			// assign attribute __step_actor_actor
			__step_actor_actor.setName("actor");
			// assign attribute message__sendEvent__messageSend
			message__sendEvent__messageSend.setName("sendEvent");
			// assign attribute message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive.setName("receiveEvent");
			// assign attribute message__interaction__interaction
			message__interaction__interaction.setName("interaction");
			// assign attribute interaction__message__message
			interaction__message__message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute messageSend__message__message
			messageSend__message__message.setName("message");
			// assign attribute messageReceive__message__message
			messageReceive__message__message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__interaction__interaction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_actor_actor, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__enclosingOperand__parentOperand,
					"createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__operand__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__sendEvent__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__enclosingOperand__parentOperand,
					"createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__enclosingOperand__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					interaction__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__guard__guard, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__receiveEvent__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_stepAlternative_alt, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard__specification__spec, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__alt_ref_altFlow, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__flow_steps_step, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__messageReceive, "createdEdges");

			// create link
			__step_actor_actor.setTrg(actor);

			// create link
			line__coveredBy__parentCombo.setSrc(line);

			// create link
			operand__covered__line.setTrg(line);

			// create link
			line__coveredBy__parentOperand.setSrc(line);

			// create link
			parentCombo__covered__line.setTrg(line);

			// create link
			line__coveredBy__operand.setSrc(line);

			// create link
			messageSend__covered__line.setTrg(line);

			// create link
			line__coveredBy__messageSend.setSrc(line);

			// create link
			parentOperand__covered__line.setTrg(line);

			// create link
			messageSend__enclosingOperand__parentOperand.setSrc(messageSend);

			// create link
			messageSend__covered__line.setSrc(messageSend);

			// create link
			parentOperand__fragment__messageSend.setTrg(messageSend);

			// create link
			message__sendEvent__messageSend.setTrg(messageSend);

			// create link
			messageSend__message__message.setSrc(messageSend);

			// create link
			line__coveredBy__messageSend.setTrg(messageSend);

			// create link
			__flow_steps_step.setSrc(flow);

			// create link
			combo__enclosingOperand__parentOperand.setTrg(parentOperand);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setTrg(parentOperand);

			// create link
			parentOperand__fragment__messageSend.setSrc(parentOperand);

			// create link
			parentOperand__fragment__messageReceive.setSrc(parentOperand);

			// create link
			messageSend__enclosingOperand__parentOperand.setTrg(parentOperand);

			// create link
			parentOperand__covered__line.setSrc(parentOperand);

			// create link
			parentOperand__fragment__combo.setSrc(parentOperand);

			// create link
			line__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			message__receiveEvent__messageReceive.setTrg(messageReceive);

			// create link
			messageReceive__message__message.setSrc(messageReceive);

			// create link
			parentOperand__fragment__messageReceive.setTrg(messageReceive);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setSrc(messageReceive);

			// create link
			combo__enclosingOperand__parentOperand.setSrc(combo);

			// create link
			combo__operand__operand.setSrc(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			parentOperand__fragment__combo.setTrg(combo);

			// create link
			parentCombo__covered__line.setSrc(parentCombo);

			// create link
			line__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			__step_stepAlternative_alt.setSrc(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			__flow_steps_step.setTrg(step);

			// create link
			__step_actor_actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			__alt_ref_altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			__step_stepAlternative_alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			operand__guard__guard.setSrc(operand);

			// create link
			combo__operand__operand.setTrg(operand);

			// create link
			line__coveredBy__operand.setTrg(operand);

			// create link
			operand__covered__line.setSrc(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			guard__specification__spec.setSrc(guard);

			// create link
			operand__guard__guard.setTrg(guard);

			// create link
			guard__specification__spec.setTrg(spec);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			__alt_ref_altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			message__sendEvent__messageSend.setSrc(message);

			// create link
			message__receiveEvent__messageReceive.setSrc(message);

			// create link
			messageReceive__message__message.setTrg(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			messageSend__message__message.setTrg(message);

			// create link
			message__interaction__interaction.setSrc(message);

			// create link
			interaction__message__message.setTrg(message);

			// create link
			message__interaction__interaction.setTrg(interaction);

			// create link
			interaction__message__message.setSrc(interaction);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_FWD(ruleresult, actor, line, messageSend, flow,
				parentOperand, flowToParentOperand, messageReceive, combo,
				parentCombo, step, alt, stepToCombo, operand,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		NormalStep step = null;
		UseCase useCase = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		CSP csp = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterFlowToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltSysStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (match.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (match.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (match.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (match.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link source from flow to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterFlowToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,
							FlowToInteractionFragment.class, "source"))
					.iterator();

			while (fujaba__IterFlowToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterFlowToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getTarget();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;

					// iterate to-many link source from useCase to useCaseToInteraction
					fujaba__Success = false;

					fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(useCase,
											UseCaseToInteraction.class,
											"source")).iterator();

					while (fujaba__IterUseCaseToUseCaseToInteraction.hasNext()) {
						try {
							useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction
									.next();

							// check object useCaseToInteraction is really bound
							JavaSDM.ensure(useCaseToInteraction != null);
							// bind object
							interaction = useCaseToInteraction.getTarget();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// story node 'find context'
							try {
								fujaba__Success = false;

								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object flowToParentOperand is really bound
								JavaSDM.ensure(flowToParentOperand != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check object useCaseToInteraction is really bound
								JavaSDM.ensure(useCaseToInteraction != null);
								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// bind object
								parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
										.eContainer() : null;

								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);

								// check if contained via correct reference
								JavaSDM.ensure(parentCombo.getOperand()
										.contains(parentOperand));

								// check link source from flowToParentOperand to flow
								JavaSDM.ensure(flow.equals(flowToParentOperand
										.getSource()));

								// check link source from useCaseToInteraction to useCase
								JavaSDM.ensure(useCase
										.equals(useCaseToInteraction
												.getSource()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link target from flowToParentOperand to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(flowToParentOperand.getTarget()));

								// check link target from useCaseToInteraction to interaction
								JavaSDM.ensure(interaction
										.equals(useCaseToInteraction
												.getTarget()));

								// iterate to-many link lifeline from interaction to line
								fujaba__Success = false;

								fujaba__IterInteractionToLine = new ArrayList(
										interaction.getLifeline()).iterator();

								while (fujaba__IterInteractionToLine.hasNext()) {
									try {
										line = (Lifeline) fujaba__IterInteractionToLine
												.next();

										// check object line is really bound
										JavaSDM.ensure(line != null);
										// create object isApplicableMatch
										isApplicableMatch = TGGRuntimeFactory.eINSTANCE
												.createIsApplicableMatch();

										// create object __step_actor_actor
										__step_actor_actor = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __line_interaction_interaction
										__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __interaction_lifeline_line
										__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCase_flows_flow
										__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __flow_steps_step
										__flow_steps_step = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __flowToParentOperand_source_flow
										__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __flowToParentOperand_target_parentOperand
										__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __parentCombo_operand_parentOperand
										__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __step_stepAlternative_alt
										__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __alt_ref_altFlow
										__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCaseToInteraction_source_useCase
										__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// create object __useCaseToInteraction_target_interaction
										__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
												.createEMoflonEdge();

										// assign attribute __flowToParentOperand_source_flow
										__flowToParentOperand_source_flow
												.setName("source");
										// assign attribute __flowToParentOperand_target_parentOperand
										__flowToParentOperand_target_parentOperand
												.setName("target");
										// assign attribute __parentCombo_operand_parentOperand
										__parentCombo_operand_parentOperand
												.setName("operand");
										// assign attribute __step_stepAlternative_alt
										__step_stepAlternative_alt
												.setName("stepAlternative");
										// assign attribute __alt_ref_altFlow
										__alt_ref_altFlow.setName("ref");
										// assign attribute __useCase_flows_flow
										__useCase_flows_flow.setName("flows");
										// assign attribute __useCaseToInteraction_source_useCase
										__useCaseToInteraction_source_useCase
												.setName("source");
										// assign attribute __useCaseToInteraction_target_interaction
										__useCaseToInteraction_target_interaction
												.setName("target");
										// assign attribute __flow_steps_step
										__flow_steps_step.setName("steps");
										// assign attribute __step_actor_actor
										__step_actor_actor.setName("actor");
										// assign attribute __line_interaction_interaction
										__line_interaction_interaction
												.setName("interaction");
										// assign attribute __interaction_lifeline_line
										__interaction_lifeline_line
												.setName("lifeline");

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														actor);

										// create link
										__step_actor_actor.setTrg(actor);

										// create link
										__line_interaction_interaction
												.setSrc(line);

										// create link
										__interaction_lifeline_line
												.setTrg(line);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														line);

										// create link
										__useCase_flows_flow.setTrg(flow);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														flow);

										// create link
										__flow_steps_step.setSrc(flow);

										// create link
										__flowToParentOperand_source_flow
												.setTrg(flow);

										// create link
										__flowToParentOperand_target_parentOperand
												.setTrg(parentOperand);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														parentOperand);

										// create link
										__parentCombo_operand_parentOperand
												.setTrg(parentOperand);

										// create link
										__flowToParentOperand_target_parentOperand
												.setSrc(flowToParentOperand);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														flowToParentOperand);

										// create link
										__flowToParentOperand_source_flow
												.setSrc(flowToParentOperand);

										// create link
										__parentCombo_operand_parentOperand
												.setSrc(parentCombo);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														parentCombo);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														step);

										// create link
										__flow_steps_step.setTrg(step);

										// create link
										__step_actor_actor.setSrc(step);

										// create link
										__step_stepAlternative_alt.setSrc(step);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														alt);

										// create link
										__alt_ref_altFlow.setSrc(alt);

										// create link
										__step_stepAlternative_alt.setTrg(alt);

										// create link
										__alt_ref_altFlow.setTrg(altFlow);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														altFlow);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														useCase);

										// create link
										__useCaseToInteraction_source_useCase
												.setTrg(useCase);

										// create link
										__useCase_flows_flow.setSrc(useCase);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														useCaseToInteraction);

										// create link
										__useCaseToInteraction_target_interaction
												.setSrc(useCaseToInteraction);

										// create link
										__useCaseToInteraction_source_useCase
												.setSrc(useCaseToInteraction);

										// create link
										__line_interaction_interaction
												.setTrg(interaction);

										// create link
										__interaction_lifeline_line
												.setSrc(interaction);

										// create link
										__useCaseToInteraction_target_interaction
												.setTrg(interaction);

										// create link
										isApplicableMatch
												.getAllContextElements().add(
														interaction);

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCaseToInteraction_source_useCase,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__alt_ref_altFlow,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__step_actor_actor,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__parentCombo_operand_parentOperand,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCase_flows_flow,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__flowToParentOperand_target_parentOperand,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__step_stepAlternative_alt,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__line_interaction_interaction,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__interaction_lifeline_line,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__useCaseToInteraction_target_interaction,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__flowToParentOperand_source_flow,
														"allContextElements");

										// create link
										org.moflon.util.eMoflonEMFUtil
												.addOppositeReference(
														isApplicableMatch,
														__flow_steps_step,
														"allContextElements");
										// story node 'solve CSP'
										try {
											fujaba__Success = false;

											_TmpObject = (this
													.isApplicable_solveCsp_FWD(
															isApplicableMatch,
															actor,
															line,
															flow,
															parentOperand,
															flowToParentOperand,
															parentCombo,
															step,
															alt,
															altFlow,
															useCase,
															useCaseToInteraction,
															interaction));

											// ensure correct type and really bound of object csp
											JavaSDM.ensure(_TmpObject instanceof CSP);
											csp = (CSP) _TmpObject;
											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										// statement node 'check CSP'
										fujaba__Success = this
												.isApplicable_checkCsp_FWD(csp);
										if (fujaba__Success) {
											// story node 'add match to rule result'
											try {
												fujaba__Success = false;

												// check object isApplicableMatch is really bound
												JavaSDM.ensure(isApplicableMatch != null);
												// check object ruleresult is really bound
												JavaSDM.ensure(ruleresult != null);
												// assign attribute isApplicableMatch
												isApplicableMatch
														.setRuleName("AltSysStepNFToComboRule");
												// assign attribute ruleresult
												ruleresult.setSuccess(true);

												// create link
												ruleresult
														.getIsApplicableMatch()
														.add(isApplicableMatch);

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

										} else {

										}

										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}
								}
								JavaSDM.ensure(fujaba__Success);

								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, Actor actor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		match.registerObject("actor", actor);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, Actor actor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("system");
		literal0.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqActorType eqActorType = new EqActorType();

		csp.getConstraints().add(eqActorType);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Lifeline line, NamedFlow flow,
			InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand,
			CombinedFragment parentCombo, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject actor, EObject line, EObject messageSend, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageReceive, EObject combo, EObject parentCombo,
			EObject step, EObject alt, EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage) {
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageReceive,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, line,
					messageSend, parentOperand, messageReceive, combo,
					parentCombo, operand, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_covered_line
				__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageSend
				__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_combo
				__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_coveredBy_messageSend
				__line_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_line
				__messageSend_covered_line.setName("covered");
				// assign attribute __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend.setName("fragment");
				// assign attribute __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __parentOperand_fragment_combo
				__parentOperand_fragment_combo.setName("fragment");
				// assign attribute __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageSend,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageSend.setSrc(line);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__messageSend_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setSrc(messageSend);

				// create link
				__parentOperand_fragment_messageSend.setTrg(messageSend);

				// create link
				__messageSend_covered_line.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__parentOperand_fragment_combo.setSrc(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_messageSend.setSrc(parentOperand);

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__combo_enclosingOperand_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__parentOperand_fragment_combo.setTrg(combo);

				// create link
				__combo_enclosingOperand_parentOperand.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, line, messageSend,
					parentOperand, messageReceive, combo, parentCombo, operand,
					guard, spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		CombinedFragment combo = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStep step = null;
		NormalStepToCombinedFragment stepToCombo = null;
		AlternativeFlowAlternative alt = null;
		NormalStepToMessage stepToMessage = null;
		AlternativeFlow altFlow = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		FlowToInteractionFragment altFlowToOperand = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge alt__ref__altFlow = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge flow__steps__step = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge step__actor__actor = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge step__stepAlternative__alt = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge __parentOperand_covered_line = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object step
			step = UseCaseDSLFactory.eINSTANCE.createNormalStep();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object alt
			alt = UseCaseDSLFactory.eINSTANCE
					.createAlternativeFlowAlternative();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object altFlow
			altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// assign attribute step
			step.setName((java.lang.String) csp.getValue("step", "name"));
			// assign attribute alt
			alt.setCondition((java.lang.String) csp
					.getValue("alt", "condition"));
			// assign attribute altFlow
			altFlow.setName((java.lang.String) csp.getValue("altFlow", "name"));

			// create link
			stepToMessage.setTarget(message);

			// create link
			step.setActor(actor);

			// create link
			flow.getSteps().add(step); // add link

			// create link
			stepToCombo.setTarget(combo);

			// create link
			step.getStepAlternative().add(alt); // add link

			// create link
			stepToCombo.setSource(step);

			// create link
			stepToMessage.setSource(step);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt, altFlow,
					"ref");

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			altFlowToOperand.setSource(altFlow);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alt__ref__altFlow
			alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_enclosingOperand_parentOperand
			__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_covered_line
			__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_line
			__operand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_operand_operand
			__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_message_message
			__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_operand
			__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_guard_guard
			__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_interaction_interaction
			__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object flow__steps__step
			flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __messageReceive_message_message
			__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_enclosingOperand_parentOperand
			__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__actor__actor
			step__actor__actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __guard_specification_spec
			__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_messageSend
			__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_line
			__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_fragment_combo
			__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __interaction_message_message
			__interaction_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_sendEvent_messageSend
			__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__stepAlternative__alt
			step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_fragment_messageSend
			__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_line
			__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltSysStepNFToComboRule");
			// assign attribute __line_coveredBy_messageSend
			__line_coveredBy_messageSend.setName("coveredBy");
			// assign attribute __messageSend_covered_line
			__messageSend_covered_line.setName("covered");
			// assign attribute __parentOperand_fragment_messageSend
			__parentOperand_fragment_messageSend.setName("fragment");
			// assign attribute __messageSend_enclosingOperand_parentOperand
			__messageSend_enclosingOperand_parentOperand
					.setName("enclosingOperand");
			// assign attribute __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive.setName("fragment");
			// assign attribute __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand
					.setName("enclosingOperand");
			// assign attribute __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_line
			__parentOperand_covered_line.setName("covered");
			// assign attribute __parentOperand_fragment_combo
			__parentOperand_fragment_combo.setName("fragment");
			// assign attribute __combo_enclosingOperand_parentOperand
			__combo_enclosingOperand_parentOperand.setName("enclosingOperand");
			// assign attribute __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_line
			__parentCombo_covered_line.setName("covered");
			// assign attribute step__stepAlternative__alt
			step__stepAlternative__alt.setName("stepAlternative");
			// assign attribute alt__ref__altFlow
			alt__ref__altFlow.setName("ref");
			// assign attribute __combo_operand_operand
			__combo_operand_operand.setName("operand");
			// assign attribute __line_coveredBy_operand
			__line_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_line
			__operand_covered_line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute __operand_guard_guard
			__operand_guard_guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute __guard_specification_spec
			__guard_specification_spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute flow__steps__step
			flow__steps__step.setName("steps");
			// assign attribute step__actor__actor
			step__actor__actor.setName("actor");
			// assign attribute __message_sendEvent_messageSend
			__message_sendEvent_messageSend.setName("sendEvent");
			// assign attribute __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive.setName("receiveEvent");
			// assign attribute __message_interaction_interaction
			__message_interaction_interaction.setName("interaction");
			// assign attribute __interaction_message_message
			__interaction_message_message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute __messageSend_message_message
			__messageSend_message_message.setName("message");
			// assign attribute __messageReceive_message_message
			__messageReceive_message_message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt__ref__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_enclosingOperand_parentOperand,
					"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_enclosingOperand_parentOperand,
					"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_operand_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_guard_guard, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_interaction_interaction, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					flow__steps__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_enclosingOperand_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__actor__actor, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__guard_specification_spec, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__interaction_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_sendEvent_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__stepAlternative__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_receiveEvent_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_line, "translatedEdges");

			// create link
			step__actor__actor.setTrg(actor);

			// create link
			__line_coveredBy_messageSend.setSrc(line);

			// create link
			__parentOperand_covered_line.setTrg(line);

			// create link
			__line_coveredBy_operand.setSrc(line);

			// create link
			__line_coveredBy_parentCombo.setSrc(line);

			// create link
			__messageSend_covered_line.setTrg(line);

			// create link
			__operand_covered_line.setTrg(line);

			// create link
			__parentCombo_covered_line.setTrg(line);

			// create link
			__line_coveredBy_parentOperand.setSrc(line);

			// create link
			__message_sendEvent_messageSend.setTrg(messageSend);

			// create link
			__messageSend_message_message.setSrc(messageSend);

			// create link
			__messageSend_covered_line.setSrc(messageSend);

			// create link
			__parentOperand_fragment_messageSend.setTrg(messageSend);

			// create link
			__line_coveredBy_messageSend.setTrg(messageSend);

			// create link
			__messageSend_enclosingOperand_parentOperand.setSrc(messageSend);

			// create link
			flow__steps__step.setSrc(flow);

			// create link
			__parentOperand_fragment_combo.setSrc(parentOperand);

			// create link
			__parentOperand_covered_line.setSrc(parentOperand);

			// create link
			__messageSend_enclosingOperand_parentOperand.setTrg(parentOperand);

			// create link
			__parentOperand_fragment_messageReceive.setSrc(parentOperand);

			// create link
			__line_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__combo_enclosingOperand_parentOperand.setTrg(parentOperand);

			// create link
			__parentOperand_fragment_messageSend.setSrc(parentOperand);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setTrg(parentOperand);

			// create link
			__message_receiveEvent_messageReceive.setTrg(messageReceive);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setSrc(messageReceive);

			// create link
			__messageReceive_message_message.setSrc(messageReceive);

			// create link
			__parentOperand_fragment_messageReceive.setTrg(messageReceive);

			// create link
			__combo_operand_operand.setSrc(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			__parentOperand_fragment_combo.setTrg(combo);

			// create link
			__combo_enclosingOperand_parentOperand.setSrc(combo);

			// create link
			__parentCombo_covered_line.setSrc(parentCombo);

			// create link
			__line_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			step__actor__actor.setSrc(step);

			// create link
			flow__steps__step.setTrg(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			alt__ref__altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			step__stepAlternative__alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			__operand_covered_line.setSrc(operand);

			// create link
			__combo_operand_operand.setTrg(operand);

			// create link
			__operand_guard_guard.setSrc(operand);

			// create link
			__line_coveredBy_operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			__guard_specification_spec.setSrc(guard);

			// create link
			__operand_guard_guard.setTrg(guard);

			// create link
			__guard_specification_spec.setTrg(spec);

			// create link
			alt__ref__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			__messageSend_message_message.setTrg(message);

			// create link
			__interaction_message_message.setTrg(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			__messageReceive_message_message.setTrg(message);

			// create link
			__message_interaction_interaction.setSrc(message);

			// create link
			__message_receiveEvent_messageReceive.setSrc(message);

			// create link
			__message_sendEvent_messageSend.setSrc(message);

			// create link
			__message_interaction_interaction.setTrg(interaction);

			// create link
			__interaction_message_message.setSrc(interaction);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_BWD(ruleresult, actor, line, messageSend, flow,
				parentOperand, flowToParentOperand, messageReceive, combo,
				parentCombo, step, alt, stepToCombo, operand,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __line_coveredBy_messageSend = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __messageSend_covered_line = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		CSP csp = null;
		UseCase useCase = null;
		Iterator fujaba__IterInteractionToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		NamedFlow flow = null;
		Iterator fujaba__IterParentOperandToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltSysStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (match.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (match.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (match.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (match.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link target from parentOperand to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterParentOperandToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							parentOperand, FlowToInteractionFragment.class,
							"target")).iterator();

			while (fujaba__IterParentOperandToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterParentOperandToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getSource();

					// ensure correct type and really bound of object flow
					JavaSDM.ensure(_TmpObject instanceof NamedFlow);
					flow = (NamedFlow) _TmpObject;

					// iterate to-many link target from interaction to useCaseToInteraction
					fujaba__Success = false;

					fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(interaction,
											UseCaseToInteraction.class,
											"target")).iterator();

					while (fujaba__IterInteractionToUseCaseToInteraction
							.hasNext()) {
						try {
							useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction
									.next();

							// check object useCaseToInteraction is really bound
							JavaSDM.ensure(useCaseToInteraction != null);
							// bind object
							useCase = useCaseToInteraction.getSource();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);

							// story node 'find context'
							try {
								fujaba__Success = false;

								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object flowToParentOperand is really bound
								JavaSDM.ensure(flowToParentOperand != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check object useCaseToInteraction is really bound
								JavaSDM.ensure(useCaseToInteraction != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link source from flowToParentOperand to flow
								JavaSDM.ensure(flow.equals(flowToParentOperand
										.getSource()));

								// check link source from useCaseToInteraction to useCase
								JavaSDM.ensure(useCase
										.equals(useCaseToInteraction
												.getSource()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link target from flowToParentOperand to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(flowToParentOperand.getTarget()));

								// check link target from useCaseToInteraction to interaction
								JavaSDM.ensure(interaction
										.equals(useCaseToInteraction
												.getTarget()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object isApplicableMatch
								isApplicableMatch = TGGRuntimeFactory.eINSTANCE
										.createIsApplicableMatch();

								// create object __parentOperand_covered_line
								__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __parentCombo_covered_line
								__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __operand_covered_line
								__operand_covered_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_coveredBy_messageSend
								__line_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_interaction_interaction
								__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_coveredBy_parentCombo
								__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __messageSend_covered_line
								__messageSend_covered_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_coveredBy_operand
								__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __line_coveredBy_parentOperand
								__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __interaction_lifeline_line
								__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __message_sendEvent_messageSend
								__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __parentOperand_fragment_messageSend
								__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __messageSend_message_message
								__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __messageSend_enclosingOperand_parentOperand
								__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCase_flows_flow
								__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __flowToParentOperand_source_flow
								__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __parentOperand_fragment_messageReceive
								__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __messageReceive_enclosingOperand_parentOperand
								__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __combo_enclosingOperand_parentOperand
								__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __parentCombo_operand_parentOperand
								__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __flowToParentOperand_target_parentOperand
								__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __parentOperand_fragment_combo
								__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __messageReceive_message_message
								__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __message_receiveEvent_messageReceive
								__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __combo_operand_operand
								__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __operand_guard_guard
								__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __guard_specification_spec
								__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCaseToInteraction_source_useCase
								__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __useCaseToInteraction_target_interaction
								__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __interaction_message_message
								__interaction_message_message = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// create object __message_interaction_interaction
								__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
										.createEMoflonEdge();

								// assign attribute __line_coveredBy_messageSend
								__line_coveredBy_messageSend
										.setName("coveredBy");
								// assign attribute __messageSend_covered_line
								__messageSend_covered_line.setName("covered");
								// assign attribute __parentOperand_fragment_messageSend
								__parentOperand_fragment_messageSend
										.setName("fragment");
								// assign attribute __messageSend_enclosingOperand_parentOperand
								__messageSend_enclosingOperand_parentOperand
										.setName("enclosingOperand");
								// assign attribute __parentOperand_fragment_messageReceive
								__parentOperand_fragment_messageReceive
										.setName("fragment");
								// assign attribute __messageReceive_enclosingOperand_parentOperand
								__messageReceive_enclosingOperand_parentOperand
										.setName("enclosingOperand");
								// assign attribute __flowToParentOperand_source_flow
								__flowToParentOperand_source_flow
										.setName("source");
								// assign attribute __flowToParentOperand_target_parentOperand
								__flowToParentOperand_target_parentOperand
										.setName("target");
								// assign attribute __line_coveredBy_parentOperand
								__line_coveredBy_parentOperand
										.setName("coveredBy");
								// assign attribute __parentOperand_covered_line
								__parentOperand_covered_line.setName("covered");
								// assign attribute __parentOperand_fragment_combo
								__parentOperand_fragment_combo
										.setName("fragment");
								// assign attribute __combo_enclosingOperand_parentOperand
								__combo_enclosingOperand_parentOperand
										.setName("enclosingOperand");
								// assign attribute __parentCombo_operand_parentOperand
								__parentCombo_operand_parentOperand
										.setName("operand");
								// assign attribute __line_coveredBy_parentCombo
								__line_coveredBy_parentCombo
										.setName("coveredBy");
								// assign attribute __parentCombo_covered_line
								__parentCombo_covered_line.setName("covered");
								// assign attribute __combo_operand_operand
								__combo_operand_operand.setName("operand");
								// assign attribute __line_coveredBy_operand
								__line_coveredBy_operand.setName("coveredBy");
								// assign attribute __operand_covered_line
								__operand_covered_line.setName("covered");
								// assign attribute __operand_guard_guard
								__operand_guard_guard.setName("guard");
								// assign attribute __guard_specification_spec
								__guard_specification_spec
										.setName("specification");
								// assign attribute __useCase_flows_flow
								__useCase_flows_flow.setName("flows");
								// assign attribute __useCaseToInteraction_source_useCase
								__useCaseToInteraction_source_useCase
										.setName("source");
								// assign attribute __useCaseToInteraction_target_interaction
								__useCaseToInteraction_target_interaction
										.setName("target");
								// assign attribute __message_sendEvent_messageSend
								__message_sendEvent_messageSend
										.setName("sendEvent");
								// assign attribute __message_receiveEvent_messageReceive
								__message_receiveEvent_messageReceive
										.setName("receiveEvent");
								// assign attribute __message_interaction_interaction
								__message_interaction_interaction
										.setName("interaction");
								// assign attribute __interaction_message_message
								__interaction_message_message
										.setName("message");
								// assign attribute __line_interaction_interaction
								__line_interaction_interaction
										.setName("interaction");
								// assign attribute __interaction_lifeline_line
								__interaction_lifeline_line.setName("lifeline");
								// assign attribute __messageSend_message_message
								__messageSend_message_message
										.setName("message");
								// assign attribute __messageReceive_message_message
								__messageReceive_message_message
										.setName("message");

								// create link
								isApplicableMatch.getAllContextElements().add(
										actor);

								// create link
								__parentOperand_covered_line.setTrg(line);

								// create link
								__parentCombo_covered_line.setTrg(line);

								// create link
								__operand_covered_line.setTrg(line);

								// create link
								__line_coveredBy_messageSend.setSrc(line);

								// create link
								__line_interaction_interaction.setSrc(line);

								// create link
								__line_coveredBy_parentCombo.setSrc(line);

								// create link
								__messageSend_covered_line.setTrg(line);

								// create link
								isApplicableMatch.getAllContextElements().add(
										line);

								// create link
								__line_coveredBy_operand.setSrc(line);

								// create link
								__line_coveredBy_parentOperand.setSrc(line);

								// create link
								__interaction_lifeline_line.setTrg(line);

								// create link
								__message_sendEvent_messageSend
										.setTrg(messageSend);

								// create link
								isApplicableMatch.getAllContextElements().add(
										messageSend);

								// create link
								__parentOperand_fragment_messageSend
										.setTrg(messageSend);

								// create link
								__messageSend_message_message
										.setSrc(messageSend);

								// create link
								__line_coveredBy_messageSend
										.setTrg(messageSend);

								// create link
								__messageSend_enclosingOperand_parentOperand
										.setSrc(messageSend);

								// create link
								__messageSend_covered_line.setSrc(messageSend);

								// create link
								__useCase_flows_flow.setTrg(flow);

								// create link
								isApplicableMatch.getAllContextElements().add(
										flow);

								// create link
								__flowToParentOperand_source_flow.setTrg(flow);

								// create link
								__parentOperand_covered_line
										.setSrc(parentOperand);

								// create link
								__parentOperand_fragment_messageSend
										.setSrc(parentOperand);

								// create link
								__line_coveredBy_parentOperand
										.setTrg(parentOperand);

								// create link
								__parentOperand_fragment_messageReceive
										.setSrc(parentOperand);

								// create link
								__messageReceive_enclosingOperand_parentOperand
										.setTrg(parentOperand);

								// create link
								__combo_enclosingOperand_parentOperand
										.setTrg(parentOperand);

								// create link
								__parentCombo_operand_parentOperand
										.setTrg(parentOperand);

								// create link
								isApplicableMatch.getAllContextElements().add(
										parentOperand);

								// create link
								__flowToParentOperand_target_parentOperand
										.setTrg(parentOperand);

								// create link
								__messageSend_enclosingOperand_parentOperand
										.setTrg(parentOperand);

								// create link
								__parentOperand_fragment_combo
										.setSrc(parentOperand);

								// create link
								__flowToParentOperand_target_parentOperand
										.setSrc(flowToParentOperand);

								// create link
								__flowToParentOperand_source_flow
										.setSrc(flowToParentOperand);

								// create link
								isApplicableMatch.getAllContextElements().add(
										flowToParentOperand);

								// create link
								__messageReceive_message_message
										.setSrc(messageReceive);

								// create link
								__message_receiveEvent_messageReceive
										.setTrg(messageReceive);

								// create link
								__messageReceive_enclosingOperand_parentOperand
										.setSrc(messageReceive);

								// create link
								__parentOperand_fragment_messageReceive
										.setTrg(messageReceive);

								// create link
								isApplicableMatch.getAllContextElements().add(
										messageReceive);

								// create link
								__combo_operand_operand.setSrc(combo);

								// create link
								isApplicableMatch.getAllContextElements().add(
										combo);

								// create link
								__combo_enclosingOperand_parentOperand
										.setSrc(combo);

								// create link
								__parentOperand_fragment_combo.setTrg(combo);

								// create link
								isApplicableMatch.getAllContextElements().add(
										parentCombo);

								// create link
								__parentCombo_covered_line.setSrc(parentCombo);

								// create link
								__parentCombo_operand_parentOperand
										.setSrc(parentCombo);

								// create link
								__line_coveredBy_parentCombo
										.setTrg(parentCombo);

								// create link
								__combo_operand_operand.setTrg(operand);

								// create link
								__operand_covered_line.setSrc(operand);

								// create link
								__operand_guard_guard.setSrc(operand);

								// create link
								__line_coveredBy_operand.setTrg(operand);

								// create link
								isApplicableMatch.getAllContextElements().add(
										operand);

								// create link
								isApplicableMatch.getAllContextElements().add(
										guard);

								// create link
								__operand_guard_guard.setTrg(guard);

								// create link
								__guard_specification_spec.setSrc(guard);

								// create link
								isApplicableMatch.getAllContextElements().add(
										spec);

								// create link
								__guard_specification_spec.setTrg(spec);

								// create link
								__useCase_flows_flow.setSrc(useCase);

								// create link
								isApplicableMatch.getAllContextElements().add(
										useCase);

								// create link
								__useCaseToInteraction_source_useCase
										.setTrg(useCase);

								// create link
								__useCaseToInteraction_source_useCase
										.setSrc(useCaseToInteraction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										useCaseToInteraction);

								// create link
								__useCaseToInteraction_target_interaction
										.setSrc(useCaseToInteraction);

								// create link
								__interaction_message_message.setTrg(message);

								// create link
								__message_sendEvent_messageSend.setSrc(message);

								// create link
								__message_interaction_interaction
										.setSrc(message);

								// create link
								__message_receiveEvent_messageReceive
										.setSrc(message);

								// create link
								isApplicableMatch.getAllContextElements().add(
										message);

								// create link
								__messageSend_message_message.setTrg(message);

								// create link
								__messageReceive_message_message
										.setTrg(message);

								// create link
								__message_interaction_interaction
										.setTrg(interaction);

								// create link
								isApplicableMatch.getAllContextElements().add(
										interaction);

								// create link
								__useCaseToInteraction_target_interaction
										.setTrg(interaction);

								// create link
								__interaction_message_message
										.setSrc(interaction);

								// create link
								__interaction_lifeline_line.setSrc(interaction);

								// create link
								__line_interaction_interaction
										.setTrg(interaction);

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_coveredBy_operand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentOperand_covered_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__interaction_lifeline_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCase_flows_flow,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__combo_enclosingOperand_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__combo_operand_operand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__messageReceive_enclosingOperand_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentCombo_operand_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__flowToParentOperand_source_flow,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__operand_guard_guard,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__message_sendEvent_messageSend,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_coveredBy_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_coveredBy_messageSend,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__message_receiveEvent_messageReceive,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__messageSend_covered_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__interaction_message_message,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__guard_specification_spec,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentOperand_fragment_combo,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__messageReceive_message_message,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentCombo_covered_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentOperand_fragment_messageReceive,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__operand_covered_line,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_coveredBy_parentCombo,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__parentOperand_fragment_messageSend,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__line_interaction_interaction,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__message_interaction_interaction,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCaseToInteraction_target_interaction,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__messageSend_message_message,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__flowToParentOperand_target_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__messageSend_enclosingOperand_parentOperand,
												"allContextElements");

								// create link
								org.moflon.util.eMoflonEMFUtil
										.addOppositeReference(
												isApplicableMatch,
												__useCaseToInteraction_source_useCase,
												"allContextElements");
								// story node 'solve CSP'
								try {
									fujaba__Success = false;

									_TmpObject = (this
											.isApplicable_solveCsp_BWD(
													isApplicableMatch, actor,
													line, messageSend, flow,
													parentOperand,
													flowToParentOperand,
													messageReceive, combo,
													parentCombo, operand,
													guard, spec, useCase,
													useCaseToInteraction,
													message, interaction));

									// ensure correct type and really bound of object csp
									JavaSDM.ensure(_TmpObject instanceof CSP);
									csp = (CSP) _TmpObject;
									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								// statement node 'check CSP'
								fujaba__Success = this
										.isApplicable_checkCsp_BWD(csp);
								if (fujaba__Success) {
									// story node 'add match to rule result'
									try {
										fujaba__Success = false;

										// check object isApplicableMatch is really bound
										JavaSDM.ensure(isApplicableMatch != null);
										// check object ruleresult is really bound
										JavaSDM.ensure(ruleresult != null);
										// assign attribute isApplicableMatch
										isApplicableMatch
												.setRuleName("AltSysStepNFToComboRule");
										// assign attribute ruleresult
										ruleresult.setSuccess(true);

										// create link
										ruleresult.getIsApplicableMatch().add(
												isApplicableMatch);

										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageReceive,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		match.registerObject("line", line);
		match.registerObject("messageSend", messageSend);
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("combo", combo);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Lifeline line,
			MessageOccurrenceSpecification messageSend,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageReceive,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			Actor actor, Lifeline line,
			MessageOccurrenceSpecification messageSend, NamedFlow flow,
			InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("system");
		literal0.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject actor, EObject line, EObject messageSend, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageReceive, EObject combo, EObject parentCombo,
			EObject step, EObject alt, EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage) {
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString())
				&& match.getObject("message")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessage());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_227(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_642460 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_89801 = null;
		Interaction __DEC_messageSend_enclosingInteraction_238236 = null;
		Interaction __DEC_operand_enclosingInteraction_420557 = null;
		InteractionOperand __DEC_combo_fragment_959818 = null;
		InteractionOperand __DEC_messageReceive_fragment_449801 = null;
		InteractionOperand __DEC_messageSend_fragment_317258 = null;
		InteractionOperand __DEC_operand_fragment_997791 = null;
		Constraint __DEC_spec_specification_464170 = null;
		InteractionOperand __DEC_guard_guard_190731 = null;
		CombinedFragment __DEC_operand_operand_366482 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_317817 = null;
		Message __DEC_messageReceive_receiveEvent_317817 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_477883 = null;
		Message __DEC_messageSend_receiveEvent_477883 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_719492 = null;
		Message __DEC_messageReceive_sendEvent_719492 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_741900 = null;
		Message __DEC_messageSend_sendEvent_741900 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_615082 = null;
		MessageEnd __DEC_message_message_615082 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
							.eContainer() : null;

					// check object combo is really bound
					JavaSDM.ensure(combo != null);

					// check if contained via correct reference
					JavaSDM.ensure(combo.getOperand().contains(operand));

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// bind object
					_TmpObject = _edge_coveredBy.getTrg();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// check link covered from messageSend to line
					JavaSDM.ensure(messageSend.getCovered().contains(line));

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// check link fragment from messageSend to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageSend
									.getEnclosingOperand()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_642460 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_642460 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_642460 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_642460 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_642460
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_89801 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_89801 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_89801 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_89801 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_89801
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_238236 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_238236 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_238236 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_238236 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_238236
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_420557 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_420557 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_420557 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_420557 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_420557
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_959818 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_959818 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_959818 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_959818 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_959818
											.equals(operand));

									// check isomorphic binding between objects __DEC_combo_fragment_959818 and parentOperand 
									JavaSDM.ensure(!__DEC_combo_fragment_959818
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_449801 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_449801 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_449801 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_449801 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_449801
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageReceive_fragment_449801 and parentOperand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_449801
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_317258 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_317258 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_317258 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_317258 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_317258
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageSend_fragment_317258 and parentOperand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_317258
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_997791 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_997791 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_997791 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_997791 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_997791
											.equals(operand));

									// check isomorphic binding between objects __DEC_operand_fragment_997791 and parentOperand 
									JavaSDM.ensure(!__DEC_operand_fragment_997791
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_464170 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_464170 is really bound
									JavaSDM.ensure(__DEC_spec_specification_464170 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_464170
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_464170 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_464170
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_190731 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_190731 is really bound
									JavaSDM.ensure(__DEC_guard_guard_190731 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_190731
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_190731 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_190731
											.equals(operand));

									// check isomorphic binding between objects __DEC_guard_guard_190731 and parentOperand 
									JavaSDM.ensure(!__DEC_guard_guard_190731
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_366482 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_366482 is really bound
									JavaSDM.ensure(__DEC_operand_operand_366482 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_366482
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_366482 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_366482
											.equals(combo));

									// check isomorphic binding between objects __DEC_operand_operand_366482 and parentCombo 
									JavaSDM.ensure(!__DEC_operand_operand_366482
											.equals(parentCombo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_317817
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_317817 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_317817
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_317817 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_317817
													.next();

											// check object __DEC_messageReceive_receiveEvent_317817 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_317817 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_317817 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_317817
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_477883
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_477883 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_477883
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_477883 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_477883
													.next();

											// check object __DEC_messageSend_receiveEvent_477883 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_477883 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_477883 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_477883
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_719492
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_719492 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_719492
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_719492 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_719492
													.next();

											// check object __DEC_messageReceive_sendEvent_719492 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_719492 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_719492 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_719492
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_741900
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_741900 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_741900
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_741900 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_741900
													.next();

											// check object __DEC_messageSend_sendEvent_741900 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_741900 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_741900 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_741900
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_615082
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_615082 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_615082
													.hasNext()) {
										try {
											__DEC_message_message_615082 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_615082
													.next();

											// check object __DEC_message_message_615082 is really bound
											JavaSDM.ensure(__DEC_message_message_615082 != null);
											// check isomorphic binding between objects __DEC_message_message_615082 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_615082
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_615082 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_615082
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link fragment from operand to parentOperand
								JavaSDM.ensure(!(parentOperand.equals(operand
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link guard from parentOperand to guard
								JavaSDM.ensure(!(guard.equals(parentOperand
										.getGuard())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link operand from operand to parentCombo
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(operand,
												CombinedFragment.class,
												"$eContainer")
										.contains(parentCombo)));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to messageSend
								JavaSDM.ensure(messageSend
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										line, messageSend, parentOperand,
										messageReceive, combo, parentCombo,
										operand, guard, spec, message,
										interaction);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_228(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_843895 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_654477 = null;
		Interaction __DEC_messageSend_enclosingInteraction_129986 = null;
		Interaction __DEC_operand_enclosingInteraction_979929 = null;
		InteractionOperand __DEC_combo_fragment_892156 = null;
		InteractionOperand __DEC_messageReceive_fragment_266423 = null;
		InteractionOperand __DEC_messageSend_fragment_33184 = null;
		InteractionOperand __DEC_operand_fragment_669611 = null;
		Constraint __DEC_spec_specification_128134 = null;
		InteractionOperand __DEC_guard_guard_724122 = null;
		CombinedFragment __DEC_operand_operand_269469 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_305796 = null;
		Message __DEC_messageReceive_receiveEvent_305796 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_513381 = null;
		Message __DEC_messageSend_receiveEvent_513381 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_665508 = null;
		Message __DEC_messageReceive_sendEvent_665508 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_736295 = null;
		Message __DEC_messageSend_sendEvent_736295 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_414350 = null;
		MessageEnd __DEC_message_message_414350 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to line
			JavaSDM.ensure(messageSend.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check link fragment from messageReceive to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageReceive
							.getEnclosingOperand()));

					// check link fragment from messageSend to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageSend
							.getEnclosingOperand()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link src from line to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterLineTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link trg from _edge_coveredBy to messageSend
									JavaSDM.ensure(messageSend
											.equals(_edge_coveredBy.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_843895 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_843895 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_843895 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_843895 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_843895
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_654477 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_654477 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_654477 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_654477 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_654477
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_129986 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_129986 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_129986 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_129986 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_129986
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_979929 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_979929 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_979929 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_979929 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_979929
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_892156 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_892156 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_892156 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_892156 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_892156
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_892156 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_892156
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_266423 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_266423 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_266423 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_266423 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_266423
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_266423 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_266423
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_33184 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_33184 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_33184 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_33184 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_33184
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_33184 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_33184
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_669611 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_669611 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_669611 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_669611 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_669611
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_669611 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_669611
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_128134 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_128134 is really bound
											JavaSDM.ensure(__DEC_spec_specification_128134 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_128134
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_128134 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_128134
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_724122 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_724122 is really bound
											JavaSDM.ensure(__DEC_guard_guard_724122 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_724122
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_724122 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_724122
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_724122 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_724122
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_269469 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_269469 is really bound
											JavaSDM.ensure(__DEC_operand_operand_269469 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_269469
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_269469 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_269469
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_269469 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_269469
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_305796
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_305796 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_305796
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_305796 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_305796
															.next();

													// check object __DEC_messageReceive_receiveEvent_305796 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_305796 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_305796 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_305796
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_513381
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_513381 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_513381
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_513381 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_513381
															.next();

													// check object __DEC_messageSend_receiveEvent_513381 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_513381 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_513381 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_513381
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_665508
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_665508 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_665508
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_665508 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_665508
															.next();

													// check object __DEC_messageReceive_sendEvent_665508 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_665508 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_665508 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_665508
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_736295
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_736295 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_736295
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_736295 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_736295
															.next();

													// check object __DEC_messageSend_sendEvent_736295 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_736295 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_736295 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_736295
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_414350
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_414350 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_414350
															.hasNext()) {
												try {
													__DEC_message_message_414350 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_414350
															.next();

													// check object __DEC_message_message_414350 is really bound
													JavaSDM.ensure(__DEC_message_message_414350 != null);
													// check isomorphic binding between objects __DEC_message_message_414350 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_414350
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_414350 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_414350
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_229(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_288386 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_7142 = null;
		Interaction __DEC_messageSend_enclosingInteraction_485729 = null;
		Interaction __DEC_operand_enclosingInteraction_998165 = null;
		InteractionOperand __DEC_combo_fragment_247253 = null;
		InteractionOperand __DEC_messageReceive_fragment_333648 = null;
		InteractionOperand __DEC_messageSend_fragment_370374 = null;
		InteractionOperand __DEC_operand_fragment_719872 = null;
		Constraint __DEC_spec_specification_604296 = null;
		InteractionOperand __DEC_guard_guard_489614 = null;
		CombinedFragment __DEC_operand_operand_204965 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_675485 = null;
		Message __DEC_messageReceive_receiveEvent_675485 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_185748 = null;
		Message __DEC_messageSend_receiveEvent_185748 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374677 = null;
		Message __DEC_messageReceive_sendEvent_374677 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_663509 = null;
		Message __DEC_messageSend_sendEvent_663509 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_370866 = null;
		MessageEnd __DEC_message_message_370866 = null;
		Match match = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link src from _edge_fragment to parentOperand
			JavaSDM.ensure(parentOperand.equals(_edge_fragment.getSrc()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from line to parentCombo
							fujaba__Success = false;

							fujaba__IterLineToParentCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from parentOperand to parentCombo
									JavaSDM.ensure(parentCombo
											.equals(parentOperand.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_288386 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_288386 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_288386 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_288386 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_288386
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_7142 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_7142 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_7142 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_7142 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_7142
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_485729 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_485729 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_485729 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_485729 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_485729
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_998165 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_998165 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_998165 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_998165 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_998165
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_247253 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_247253 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_247253 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_247253 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_247253
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_247253 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_247253
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_333648 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_333648 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_333648 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_333648 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_333648
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_333648 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_333648
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_370374 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_370374 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_370374 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_370374 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_370374
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_370374 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_370374
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_719872 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_719872 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_719872 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_719872 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_719872
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_719872 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_719872
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_604296 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_604296 is really bound
											JavaSDM.ensure(__DEC_spec_specification_604296 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_604296
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_604296 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_604296
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_489614 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_489614 is really bound
											JavaSDM.ensure(__DEC_guard_guard_489614 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_489614
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_489614 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_489614
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_489614 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_489614
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_204965 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_204965 is really bound
											JavaSDM.ensure(__DEC_operand_operand_204965 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_204965
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_204965 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_204965
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_204965 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_204965
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_675485
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_675485 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_675485
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_675485 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_675485
															.next();

													// check object __DEC_messageReceive_receiveEvent_675485 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_675485 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_675485 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_675485
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_185748
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_185748 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_185748
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_185748 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_185748
															.next();

													// check object __DEC_messageSend_receiveEvent_185748 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_185748 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_185748 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_185748
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_374677
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374677 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374677
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_374677 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374677
															.next();

													// check object __DEC_messageReceive_sendEvent_374677 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_374677 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_374677 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_374677
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_663509
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_663509 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_663509
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_663509 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_663509
															.next();

													// check object __DEC_messageSend_sendEvent_663509 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_663509 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_663509 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_663509
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_370866
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_370866 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_370866
															.hasNext()) {
												try {
													__DEC_message_message_370866 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_370866
															.next();

													// check object __DEC_message_message_370866 is really bound
													JavaSDM.ensure(__DEC_message_message_370866 != null);
													// check isomorphic binding between objects __DEC_message_message_370866 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_370866
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_370866 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_370866
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_fragment is really bound
										JavaSDM.ensure(_edge_fragment != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_fragment to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(_edge_fragment.getSrc()));

										// check link trg from _edge_fragment to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_fragment.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_230(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_309350 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_983750 = null;
		Interaction __DEC_messageSend_enclosingInteraction_648974 = null;
		Interaction __DEC_operand_enclosingInteraction_620995 = null;
		InteractionOperand __DEC_combo_fragment_263852 = null;
		InteractionOperand __DEC_messageReceive_fragment_453859 = null;
		InteractionOperand __DEC_messageSend_fragment_282995 = null;
		InteractionOperand __DEC_operand_fragment_698124 = null;
		Constraint __DEC_spec_specification_5908 = null;
		InteractionOperand __DEC_guard_guard_274237 = null;
		CombinedFragment __DEC_operand_operand_501917 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_994598 = null;
		Message __DEC_messageReceive_receiveEvent_994598 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_622973 = null;
		Message __DEC_messageSend_receiveEvent_622973 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_713929 = null;
		Message __DEC_messageReceive_sendEvent_713929 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_582571 = null;
		Message __DEC_messageSend_sendEvent_582571 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_461084 = null;
		MessageEnd __DEC_message_message_461084 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from messageSend to line
					JavaSDM.ensure(messageSend.getCovered().contains(line));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link src from parentOperand to _edge_fragment
							fujaba__Success = false;

							fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													parentOperand,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterParentOperandTo_edge_fragment
									.hasNext()) {
								try {
									_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
											.next();

									// check object _edge_fragment is really bound
									JavaSDM.ensure(_edge_fragment != null);
									// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
									JavaSDM.ensure(!_edge_fragment
											.equals(_edge_enclosingOperand));

									// check link trg from _edge_fragment to messageSend
									JavaSDM.ensure(messageSend
											.equals(_edge_fragment.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_309350 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_309350 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_309350 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_309350 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_309350
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_983750 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_983750 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_983750 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_983750 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_983750
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_648974 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_648974 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_648974 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_648974 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_648974
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_620995 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_620995 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_620995 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_620995 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_620995
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_263852 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_263852 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_263852 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_263852 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_263852
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_263852 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_263852
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_453859 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_453859 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_453859 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_453859 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_453859
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_453859 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_453859
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_282995 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_282995 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_282995 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_282995 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_282995
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_282995 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_282995
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_698124 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_698124 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_698124 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_698124 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_698124
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_698124 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_698124
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_5908 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_5908 is really bound
											JavaSDM.ensure(__DEC_spec_specification_5908 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_5908
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_5908 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_5908
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_274237 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_274237 is really bound
											JavaSDM.ensure(__DEC_guard_guard_274237 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_274237
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_274237 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_274237
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_274237 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_274237
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_501917 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_501917 is really bound
											JavaSDM.ensure(__DEC_operand_operand_501917 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_501917
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_501917 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_501917
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_501917 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_501917
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_994598
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_994598 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_994598
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_994598 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_994598
															.next();

													// check object __DEC_messageReceive_receiveEvent_994598 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_994598 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_994598 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_994598
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_622973
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_622973 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_622973
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_622973 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_622973
															.next();

													// check object __DEC_messageSend_receiveEvent_622973 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_622973 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_622973 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_622973
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_713929
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_713929 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_713929
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_713929 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_713929
															.next();

													// check object __DEC_messageReceive_sendEvent_713929 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_713929 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_713929 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_713929
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_582571
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_582571 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_582571
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_582571 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_582571
															.next();

													// check object __DEC_messageSend_sendEvent_582571 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_582571 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_582571 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_582571
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_461084
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_461084 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_461084
															.hasNext()) {
												try {
													__DEC_message_message_461084 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_461084
															.next();

													// check object __DEC_message_message_461084 is really bound
													JavaSDM.ensure(__DEC_message_message_461084 != null);
													// check isomorphic binding between objects __DEC_message_message_461084 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_461084
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_461084 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_461084
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_enclosingOperand is really bound
										JavaSDM.ensure(_edge_enclosingOperand != null);
										// check object _edge_fragment is really bound
										JavaSDM.ensure(_edge_fragment != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
										JavaSDM.ensure(!_edge_fragment
												.equals(_edge_enclosingOperand));

										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_enclosingOperand to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_enclosingOperand
														.getSrc()));

										// check link src from _edge_fragment to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(_edge_fragment.getSrc()));

										// check link trg from _edge_enclosingOperand to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(_edge_enclosingOperand
														.getTrg()));

										// check link trg from _edge_fragment to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_fragment.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_231(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_836864 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_305446 = null;
		Interaction __DEC_messageSend_enclosingInteraction_920558 = null;
		Interaction __DEC_operand_enclosingInteraction_253964 = null;
		InteractionOperand __DEC_combo_fragment_98239 = null;
		InteractionOperand __DEC_messageReceive_fragment_945074 = null;
		InteractionOperand __DEC_messageSend_fragment_829589 = null;
		InteractionOperand __DEC_operand_fragment_447303 = null;
		Constraint __DEC_spec_specification_721676 = null;
		InteractionOperand __DEC_guard_guard_492153 = null;
		CombinedFragment __DEC_operand_operand_579429 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_610928 = null;
		Message __DEC_messageReceive_receiveEvent_610928 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_799368 = null;
		Message __DEC_messageSend_receiveEvent_799368 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_306231 = null;
		Message __DEC_messageReceive_sendEvent_306231 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579354 = null;
		Message __DEC_messageSend_sendEvent_579354 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_307164 = null;
		MessageEnd __DEC_message_message_307164 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link fragment from messageReceive to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageReceive
							.getEnclosingOperand()));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link trg from _edge_fragment to messageReceive
					JavaSDM.ensure(messageReceive.equals(_edge_fragment
							.getTrg()));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from messageSend to line
							JavaSDM.ensure(messageSend.getCovered().contains(
									line));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object combo is really bound
									JavaSDM.ensure(combo != null);

									// check if contained via correct reference
									JavaSDM.ensure(combo.getOperand().contains(
											operand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_836864 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_836864 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_836864 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_836864 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_836864
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_305446 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_305446 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_305446 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_305446 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_305446
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_920558 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_920558 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_920558 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_920558 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_920558
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_253964 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_253964 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_253964 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_253964 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_253964
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_98239 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_98239 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_98239 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_98239 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_98239
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_98239 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_98239
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_945074 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_945074 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_945074 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_945074 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_945074
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_945074 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_945074
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_829589 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_829589 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_829589 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_829589 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_829589
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_829589 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_829589
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_447303 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_447303 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_447303 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_447303 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_447303
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_447303 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_447303
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_721676 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_721676 is really bound
											JavaSDM.ensure(__DEC_spec_specification_721676 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_721676
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_721676 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_721676
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_492153 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_492153 is really bound
											JavaSDM.ensure(__DEC_guard_guard_492153 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_492153
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_492153 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_492153
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_492153 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_492153
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_579429 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_579429 is really bound
											JavaSDM.ensure(__DEC_operand_operand_579429 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_579429
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_579429 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_579429
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_579429 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_579429
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_610928
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_610928 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_610928
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_610928 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_610928
															.next();

													// check object __DEC_messageReceive_receiveEvent_610928 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_610928 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_610928 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_610928
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_799368
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_799368 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_799368
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_799368 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_799368
															.next();

													// check object __DEC_messageSend_receiveEvent_799368 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_799368 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_799368 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_799368
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_306231
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_306231 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_306231
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_306231 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_306231
															.next();

													// check object __DEC_messageReceive_sendEvent_306231 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_306231 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_306231 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_306231
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_579354
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579354 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579354
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_579354 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_579354
															.next();

													// check object __DEC_messageSend_sendEvent_579354 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_579354 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_579354 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_579354
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_307164
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_307164 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_307164
															.hasNext()) {
												try {
													__DEC_message_message_307164 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_307164
															.next();

													// check object __DEC_message_message_307164 is really bound
													JavaSDM.ensure(__DEC_message_message_307164 != null);
													// check isomorphic binding between objects __DEC_message_message_307164 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_307164
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_307164 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_307164
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_fragment is really bound
										JavaSDM.ensure(_edge_fragment != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_fragment to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(_edge_fragment.getSrc()));

										// check link trg from _edge_fragment to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_fragment.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_232(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_665510 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_994327 = null;
		Interaction __DEC_messageSend_enclosingInteraction_333445 = null;
		Interaction __DEC_operand_enclosingInteraction_794038 = null;
		InteractionOperand __DEC_combo_fragment_216401 = null;
		InteractionOperand __DEC_messageReceive_fragment_614805 = null;
		InteractionOperand __DEC_messageSend_fragment_110197 = null;
		InteractionOperand __DEC_operand_fragment_778907 = null;
		Constraint __DEC_spec_specification_558803 = null;
		InteractionOperand __DEC_guard_guard_554970 = null;
		CombinedFragment __DEC_operand_operand_715923 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825826 = null;
		Message __DEC_messageReceive_receiveEvent_825826 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_98835 = null;
		Message __DEC_messageSend_receiveEvent_98835 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_58861 = null;
		Message __DEC_messageReceive_sendEvent_58861 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_128401 = null;
		Message __DEC_messageSend_sendEvent_128401 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_854914 = null;
		MessageEnd __DEC_message_message_854914 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link src from parentOperand to _edge_fragment
			fujaba__Success = false;

			fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							parentOperand, EMoflonEdge.class, "src"))
					.iterator();

			while (fujaba__IterParentOperandTo_edge_fragment.hasNext()) {
				try {
					_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
							.next();

					// check object _edge_fragment is really bound
					JavaSDM.ensure(_edge_fragment != null);
					// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
					JavaSDM.ensure(!_edge_fragment
							.equals(_edge_enclosingOperand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object combo is really bound
									JavaSDM.ensure(combo != null);

									// check if contained via correct reference
									JavaSDM.ensure(combo.getOperand().contains(
											operand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link src from _edge_enclosingOperand to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_enclosingOperand
															.getSrc()));

											// check link trg from _edge_fragment to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_fragment
															.getTrg()));

											// check link covered from messageSend to line
											JavaSDM.ensure(messageSend
													.getCovered()
													.contains(line));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_665510 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_665510 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_665510 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_665510 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_665510
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_994327 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_994327 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_994327 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_994327 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_994327
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_333445 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_333445 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_333445 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_333445 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_333445
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_794038 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_794038 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_794038 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_794038 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_794038
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_216401 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_216401 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_216401 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_216401 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_216401
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_216401 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_216401
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_614805 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_614805 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_614805 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_614805 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_614805
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_614805 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_614805
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_110197 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_110197 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_110197 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_110197 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_110197
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_110197 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_110197
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_778907 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_778907 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_778907 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_778907 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_778907
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_778907 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_778907
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_558803 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_558803 is really bound
													JavaSDM.ensure(__DEC_spec_specification_558803 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_558803
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_558803 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_558803
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_554970 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_554970 is really bound
													JavaSDM.ensure(__DEC_guard_guard_554970 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_554970
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_554970 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_554970
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_554970 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_554970
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_715923 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_715923 is really bound
													JavaSDM.ensure(__DEC_operand_operand_715923 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_715923
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_715923 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_715923
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_715923 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_715923
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_825826
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825826 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825826
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_825826 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825826
																	.next();

															// check object __DEC_messageReceive_receiveEvent_825826 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_825826 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_825826 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_825826
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_98835
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_98835 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_98835
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_98835 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_98835
																	.next();

															// check object __DEC_messageSend_receiveEvent_98835 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_98835 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_98835 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_98835
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_58861
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_58861 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_58861
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_58861 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_58861
																	.next();

															// check object __DEC_messageReceive_sendEvent_58861 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_58861 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_58861 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_58861
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_128401
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_128401 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_128401
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_128401 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_128401
																	.next();

															// check object __DEC_messageSend_sendEvent_128401 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_128401 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_128401 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_128401
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_854914
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_854914 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_854914
																	.hasNext()) {
														try {
															__DEC_message_message_854914 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_854914
																	.next();

															// check object __DEC_message_message_854914 is really bound
															JavaSDM.ensure(__DEC_message_message_854914 != null);
															// check isomorphic binding between objects __DEC_message_message_854914 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_854914
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_854914 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_854914
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_enclosingOperand is really bound
												JavaSDM.ensure(_edge_enclosingOperand != null);
												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
												JavaSDM.ensure(!_edge_fragment
														.equals(_edge_enclosingOperand));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_enclosingOperand to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_enclosingOperand
																.getSrc()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_enclosingOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_enclosingOperand
																.getTrg()));

												// check link trg from _edge_fragment to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from parentOperand to line
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, line,
																messageSend,
																parentOperand,
																messageReceive,
																combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_233(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_622970 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_778088 = null;
		Interaction __DEC_messageSend_enclosingInteraction_386565 = null;
		Interaction __DEC_operand_enclosingInteraction_40501 = null;
		InteractionOperand __DEC_combo_fragment_17969 = null;
		InteractionOperand __DEC_messageReceive_fragment_353785 = null;
		InteractionOperand __DEC_messageSend_fragment_726568 = null;
		InteractionOperand __DEC_operand_fragment_392152 = null;
		Constraint __DEC_spec_specification_407035 = null;
		InteractionOperand __DEC_guard_guard_171023 = null;
		CombinedFragment __DEC_operand_operand_891951 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_151934 = null;
		Message __DEC_messageReceive_receiveEvent_151934 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_436258 = null;
		Message __DEC_messageSend_receiveEvent_436258 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_688080 = null;
		Message __DEC_messageReceive_sendEvent_688080 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_337033 = null;
		Message __DEC_messageSend_sendEvent_337033 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_233848 = null;
		MessageEnd __DEC_message_message_233848 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// iterate to-many link covered from line to messageSend
			fujaba__Success = false;

			fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					parentOperand = messageSend.getEnclosingOperand();

					// check object parentOperand is really bound
					JavaSDM.ensure(parentOperand != null);

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link fragment from messageReceive to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageReceive
							.getEnclosingOperand()));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link trg from _edge_coveredBy to parentOperand
					JavaSDM.ensure(parentOperand.equals(_edge_coveredBy
							.getTrg()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_622970 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_622970 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_622970 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_622970 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_622970
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_778088 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_778088 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_778088 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_778088 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_778088
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_386565 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_386565 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_386565 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_386565 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_386565
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_40501 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_40501 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_40501 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_40501 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_40501
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_17969 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_17969 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_17969 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_17969 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_17969
											.equals(operand));

									// check isomorphic binding between objects __DEC_combo_fragment_17969 and parentOperand 
									JavaSDM.ensure(!__DEC_combo_fragment_17969
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_353785 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_353785 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_353785 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_353785 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_353785
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageReceive_fragment_353785 and parentOperand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_353785
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_726568 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_726568 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_726568 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_726568 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_726568
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageSend_fragment_726568 and parentOperand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_726568
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_392152 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_392152 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_392152 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_392152 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_392152
											.equals(operand));

									// check isomorphic binding between objects __DEC_operand_fragment_392152 and parentOperand 
									JavaSDM.ensure(!__DEC_operand_fragment_392152
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_407035 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_407035 is really bound
									JavaSDM.ensure(__DEC_spec_specification_407035 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_407035
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_407035 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_407035
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_171023 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_171023 is really bound
									JavaSDM.ensure(__DEC_guard_guard_171023 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_171023
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_171023 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_171023
											.equals(operand));

									// check isomorphic binding between objects __DEC_guard_guard_171023 and parentOperand 
									JavaSDM.ensure(!__DEC_guard_guard_171023
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_891951 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_891951 is really bound
									JavaSDM.ensure(__DEC_operand_operand_891951 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_891951
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_891951 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_891951
											.equals(combo));

									// check isomorphic binding between objects __DEC_operand_operand_891951 and parentCombo 
									JavaSDM.ensure(!__DEC_operand_operand_891951
											.equals(parentCombo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_151934
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_151934 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_151934
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_151934 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_151934
													.next();

											// check object __DEC_messageReceive_receiveEvent_151934 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_151934 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_151934 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_151934
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_436258
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_436258 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_436258
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_436258 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_436258
													.next();

											// check object __DEC_messageSend_receiveEvent_436258 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_436258 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_436258 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_436258
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_688080
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_688080 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_688080
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_688080 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_688080
													.next();

											// check object __DEC_messageReceive_sendEvent_688080 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_688080 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_688080 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_688080
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_337033
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_337033 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_337033
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_337033 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_337033
													.next();

											// check object __DEC_messageSend_sendEvent_337033 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_337033 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_337033 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_337033
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_233848
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_233848 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_233848
													.hasNext()) {
										try {
											__DEC_message_message_233848 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_233848
													.next();

											// check object __DEC_message_message_233848 is really bound
											JavaSDM.ensure(__DEC_message_message_233848 != null);
											// check isomorphic binding between objects __DEC_message_message_233848 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_233848
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_233848 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_233848
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link fragment from operand to parentOperand
								JavaSDM.ensure(!(parentOperand.equals(operand
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link guard from parentOperand to guard
								JavaSDM.ensure(!(guard.equals(parentOperand
										.getGuard())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link operand from operand to parentCombo
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(operand,
												CombinedFragment.class,
												"$eContainer")
										.contains(parentCombo)));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										line, messageSend, parentOperand,
										messageReceive, combo, parentCombo,
										operand, guard, spec, message,
										interaction);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_234(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_652042 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_284938 = null;
		Interaction __DEC_messageSend_enclosingInteraction_586831 = null;
		Interaction __DEC_operand_enclosingInteraction_881963 = null;
		InteractionOperand __DEC_combo_fragment_936631 = null;
		InteractionOperand __DEC_messageReceive_fragment_502094 = null;
		InteractionOperand __DEC_messageSend_fragment_818093 = null;
		InteractionOperand __DEC_operand_fragment_496650 = null;
		Constraint __DEC_spec_specification_792273 = null;
		InteractionOperand __DEC_guard_guard_744232 = null;
		CombinedFragment __DEC_operand_operand_645849 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_836465 = null;
		Message __DEC_messageReceive_receiveEvent_836465 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_378414 = null;
		Message __DEC_messageSend_receiveEvent_378414 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_895608 = null;
		Message __DEC_messageReceive_sendEvent_895608 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_876836 = null;
		Message __DEC_messageSend_sendEvent_876836 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_547550 = null;
		MessageEnd __DEC_message_message_547550 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// iterate to-many link covered from line to parentCombo
			fujaba__Success = false;

			fujaba__IterLineToParentCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentCombo.next();

					// ensure correct type and really bound of object parentCombo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					parentCombo = (CombinedFragment) _TmpObject;
					// iterate to-many link src from line to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterLineTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(line,
											EMoflonEdge.class, "src"))
							.iterator();

					while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object combo is really bound
									JavaSDM.ensure(combo != null);

									// check if contained via correct reference
									JavaSDM.ensure(combo.getOperand().contains(
											operand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from line to messageSend
									fujaba__Success = false;

									fujaba__IterLineToMessageSend = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											parentOperand = messageSend
													.getEnclosingOperand();

											// check object parentOperand is really bound
											JavaSDM.ensure(parentOperand != null);

											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from combo to parentOperand
											JavaSDM.ensure(parentOperand.equals(combo
													.getEnclosingOperand()));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link operand from parentOperand to parentCombo
											JavaSDM.ensure(parentCombo
													.equals(parentOperand
															.eContainer()));

											// check link src from _edge_covered to parentOperand
											JavaSDM.ensure(parentOperand
													.equals(_edge_covered
															.getSrc()));

											// check link trg from _edge_coveredBy to parentOperand
											JavaSDM.ensure(parentOperand
													.equals(_edge_coveredBy
															.getTrg()));

											// check link covered from parentOperand to line
											JavaSDM.ensure(parentOperand
													.getCovered()
													.contains(line));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_652042 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_652042 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_652042 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_652042 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_652042
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_284938 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_284938 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_284938 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_284938 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_284938
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_586831 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_586831 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_586831 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_586831 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_586831
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_881963 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_881963 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_881963 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_881963 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_881963
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_936631 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_936631 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_936631 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_936631 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_936631
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_936631 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_936631
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_502094 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_502094 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_502094 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_502094 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_502094
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_502094 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_502094
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_818093 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_818093 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_818093 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_818093 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_818093
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_818093 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_818093
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_496650 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_496650 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_496650 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_496650 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_496650
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_496650 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_496650
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_792273 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_792273 is really bound
													JavaSDM.ensure(__DEC_spec_specification_792273 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_792273
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_792273 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_792273
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_744232 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_744232 is really bound
													JavaSDM.ensure(__DEC_guard_guard_744232 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_744232
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_744232 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_744232
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_744232 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_744232
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_645849 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_645849 is really bound
													JavaSDM.ensure(__DEC_operand_operand_645849 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_645849
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_645849 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_645849
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_645849 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_645849
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_836465
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_836465 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_836465
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_836465 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_836465
																	.next();

															// check object __DEC_messageReceive_receiveEvent_836465 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_836465 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_836465 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_836465
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_378414
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_378414 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_378414
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_378414 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_378414
																	.next();

															// check object __DEC_messageSend_receiveEvent_378414 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_378414 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_378414 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_378414
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_895608
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_895608 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_895608
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_895608 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_895608
																	.next();

															// check object __DEC_messageReceive_sendEvent_895608 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_895608 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_895608 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_895608
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_876836
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_876836 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_876836
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_876836 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_876836
																	.next();

															// check object __DEC_messageSend_sendEvent_876836 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_876836 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_876836 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_876836
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_547550
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_547550 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_547550
																	.hasNext()) {
														try {
															__DEC_message_message_547550 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_547550
																	.next();

															// check object __DEC_message_message_547550 is really bound
															JavaSDM.ensure(__DEC_message_message_547550 != null);
															// check isomorphic binding between objects __DEC_message_message_547550 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_547550
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_547550 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_547550
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_covered is really bound
												JavaSDM.ensure(_edge_covered != null);
												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
												JavaSDM.ensure(!_edge_coveredBy
														.equals(_edge_covered));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_covered to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_covered
																.getSrc()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_covered to line
												JavaSDM.ensure(line
														.equals(_edge_covered
																.getTrg()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from parentOperand to line
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, line,
																messageSend,
																parentOperand,
																messageReceive,
																combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_235(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_860290 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_261710 = null;
		Interaction __DEC_messageSend_enclosingInteraction_208319 = null;
		Interaction __DEC_operand_enclosingInteraction_143700 = null;
		InteractionOperand __DEC_combo_fragment_1787 = null;
		InteractionOperand __DEC_messageReceive_fragment_252058 = null;
		InteractionOperand __DEC_messageSend_fragment_689888 = null;
		InteractionOperand __DEC_operand_fragment_612960 = null;
		Constraint __DEC_spec_specification_664707 = null;
		InteractionOperand __DEC_guard_guard_538759 = null;
		CombinedFragment __DEC_operand_operand_973383 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_960431 = null;
		Message __DEC_messageReceive_receiveEvent_960431 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_743473 = null;
		Message __DEC_messageSend_receiveEvent_743473 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926265 = null;
		Message __DEC_messageReceive_sendEvent_926265 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_818852 = null;
		Message __DEC_messageSend_sendEvent_818852 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_363102 = null;
		MessageEnd __DEC_message_message_363102 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link fragment from combo to parentOperand
			JavaSDM.ensure(parentOperand.equals(combo.getEnclosingOperand()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// check link covered from messageSend to line
									JavaSDM.ensure(messageSend.getCovered()
											.contains(line));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_860290 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_860290 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_860290 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_860290 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_860290
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_261710 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_261710 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_261710 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_261710 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_261710
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_208319 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_208319 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_208319 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_208319 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_208319
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_143700 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_143700 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_143700 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_143700 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_143700
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_1787 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_1787 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_1787 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_1787 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_1787
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_1787 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_1787
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_252058 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_252058 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_252058 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_252058 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_252058
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_252058 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_252058
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_689888 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_689888 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_689888 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_689888 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_689888
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_689888 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_689888
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_612960 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_612960 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_612960 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_612960 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_612960
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_612960 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_612960
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_664707 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_664707 is really bound
											JavaSDM.ensure(__DEC_spec_specification_664707 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_664707
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_664707 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_664707
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_538759 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_538759 is really bound
											JavaSDM.ensure(__DEC_guard_guard_538759 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_538759
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_538759 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_538759
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_538759 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_538759
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_973383 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_973383 is really bound
											JavaSDM.ensure(__DEC_operand_operand_973383 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_973383
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_973383 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_973383
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_973383 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_973383
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_960431
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_960431 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_960431
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_960431 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_960431
															.next();

													// check object __DEC_messageReceive_receiveEvent_960431 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_960431 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_960431 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_960431
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_743473
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_743473 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_743473
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_743473 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_743473
															.next();

													// check object __DEC_messageSend_receiveEvent_743473 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_743473 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_743473 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_743473
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_926265
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926265 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926265
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_926265 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_926265
															.next();

													// check object __DEC_messageReceive_sendEvent_926265 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_926265 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_926265 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_926265
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_818852
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_818852 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_818852
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_818852 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_818852
															.next();

													// check object __DEC_messageSend_sendEvent_818852 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_818852 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_818852 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_818852
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_363102
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_363102 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_363102
															.hasNext()) {
												try {
													__DEC_message_message_363102 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_363102
															.next();

													// check object __DEC_message_message_363102 is really bound
													JavaSDM.ensure(__DEC_message_message_363102 != null);
													// check isomorphic binding between objects __DEC_message_message_363102 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_363102
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_363102 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_363102
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_fragment is really bound
										JavaSDM.ensure(_edge_fragment != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_fragment to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(_edge_fragment.getSrc()));

										// check link trg from _edge_fragment to combo
										JavaSDM.ensure(combo
												.equals(_edge_fragment.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_236(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_740818 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_530802 = null;
		Interaction __DEC_messageSend_enclosingInteraction_544437 = null;
		Interaction __DEC_operand_enclosingInteraction_20311 = null;
		InteractionOperand __DEC_combo_fragment_678855 = null;
		InteractionOperand __DEC_messageReceive_fragment_231522 = null;
		InteractionOperand __DEC_messageSend_fragment_989563 = null;
		InteractionOperand __DEC_operand_fragment_517070 = null;
		Constraint __DEC_spec_specification_901273 = null;
		InteractionOperand __DEC_guard_guard_623550 = null;
		CombinedFragment __DEC_operand_operand_765345 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_698666 = null;
		Message __DEC_messageReceive_receiveEvent_698666 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_206389 = null;
		Message __DEC_messageSend_receiveEvent_206389 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_600467 = null;
		Message __DEC_messageReceive_sendEvent_600467 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140005 = null;
		Message __DEC_messageSend_sendEvent_140005 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_113566 = null;
		MessageEnd __DEC_message_message_113566 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from combo to parentOperand
			JavaSDM.ensure(parentOperand.equals(combo.getEnclosingOperand()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// check link covered from messageSend to line
									JavaSDM.ensure(messageSend.getCovered()
											.contains(line));

									// iterate to-many link src from parentOperand to _edge_fragment
									fujaba__Success = false;

									fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															parentOperand,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterParentOperandTo_edge_fragment
											.hasNext()) {
										try {
											_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
													.next();

											// check object _edge_fragment is really bound
											JavaSDM.ensure(_edge_fragment != null);
											// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
											JavaSDM.ensure(!_edge_fragment
													.equals(_edge_enclosingOperand));

											// check link trg from _edge_fragment to combo
											JavaSDM.ensure(combo
													.equals(_edge_fragment
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_740818 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_740818 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_740818 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_740818 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_740818
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_530802 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_530802 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_530802 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_530802 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_530802
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_544437 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_544437 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_544437 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_544437 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_544437
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_20311 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_20311 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_20311 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_20311 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_20311
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_678855 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_678855 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_678855 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_678855 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_678855
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_678855 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_678855
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_231522 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_231522 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_231522 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_231522 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_231522
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_231522 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_231522
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_989563 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_989563 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_989563 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_989563 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_989563
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_989563 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_989563
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_517070 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_517070 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_517070 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_517070 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_517070
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_517070 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_517070
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_901273 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_901273 is really bound
													JavaSDM.ensure(__DEC_spec_specification_901273 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_901273
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_901273 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_901273
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_623550 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_623550 is really bound
													JavaSDM.ensure(__DEC_guard_guard_623550 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_623550
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_623550 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_623550
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_623550 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_623550
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_765345 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_765345 is really bound
													JavaSDM.ensure(__DEC_operand_operand_765345 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_765345
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_765345 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_765345
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_765345 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_765345
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_698666
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_698666 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_698666
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_698666 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_698666
																	.next();

															// check object __DEC_messageReceive_receiveEvent_698666 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_698666 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_698666 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_698666
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_206389
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_206389 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_206389
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_206389 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_206389
																	.next();

															// check object __DEC_messageSend_receiveEvent_206389 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_206389 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_206389 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_206389
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_600467
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_600467 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_600467
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_600467 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_600467
																	.next();

															// check object __DEC_messageReceive_sendEvent_600467 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_600467 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_600467 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_600467
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_140005
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140005 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140005
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_140005 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140005
																	.next();

															// check object __DEC_messageSend_sendEvent_140005 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_140005 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_140005 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_140005
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_113566
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_113566 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_113566
																	.hasNext()) {
														try {
															__DEC_message_message_113566 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_113566
																	.next();

															// check object __DEC_message_message_113566 is really bound
															JavaSDM.ensure(__DEC_message_message_113566 != null);
															// check isomorphic binding between objects __DEC_message_message_113566 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_113566
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_113566 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_113566
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_enclosingOperand is really bound
												JavaSDM.ensure(_edge_enclosingOperand != null);
												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
												JavaSDM.ensure(!_edge_fragment
														.equals(_edge_enclosingOperand));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_enclosingOperand to combo
												JavaSDM.ensure(combo
														.equals(_edge_enclosingOperand
																.getSrc()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_enclosingOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_enclosingOperand
																.getTrg()));

												// check link trg from _edge_fragment to combo
												JavaSDM.ensure(combo
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from parentOperand to line
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, line,
																messageSend,
																parentOperand,
																messageReceive,
																combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_237(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_646760 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_901092 = null;
		Interaction __DEC_messageSend_enclosingInteraction_412193 = null;
		Interaction __DEC_operand_enclosingInteraction_137733 = null;
		InteractionOperand __DEC_combo_fragment_548288 = null;
		InteractionOperand __DEC_messageReceive_fragment_296987 = null;
		InteractionOperand __DEC_messageSend_fragment_138776 = null;
		InteractionOperand __DEC_operand_fragment_541729 = null;
		Constraint __DEC_spec_specification_230225 = null;
		InteractionOperand __DEC_guard_guard_534801 = null;
		CombinedFragment __DEC_operand_operand_756374 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656367 = null;
		Message __DEC_messageReceive_receiveEvent_656367 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_501169 = null;
		Message __DEC_messageSend_receiveEvent_501169 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_738826 = null;
		Message __DEC_messageReceive_sendEvent_738826 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372123 = null;
		Message __DEC_messageSend_sendEvent_372123 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_127212 = null;
		MessageEnd __DEC_message_message_127212 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to messageSend
			fujaba__Success = false;

			fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					parentOperand = messageSend.getEnclosingOperand();

					// check object parentOperand is really bound
					JavaSDM.ensure(parentOperand != null);

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link fragment from messageReceive to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageReceive
							.getEnclosingOperand()));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// check link operand from parentOperand to parentCombo
					JavaSDM.ensure(parentCombo.equals(parentOperand
							.eContainer()));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_646760 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_646760 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_646760 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_646760 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_646760
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_901092 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_901092 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_901092 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_901092 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_901092
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_412193 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_412193 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_412193 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_412193 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_412193
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_137733 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_137733 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_137733 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_137733 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_137733
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_548288 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_548288 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_548288 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_548288 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_548288
											.equals(operand));

									// check isomorphic binding between objects __DEC_combo_fragment_548288 and parentOperand 
									JavaSDM.ensure(!__DEC_combo_fragment_548288
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_296987 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_296987 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_296987 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_296987 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_296987
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageReceive_fragment_296987 and parentOperand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_296987
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_138776 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_138776 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_138776 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_138776 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_138776
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageSend_fragment_138776 and parentOperand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_138776
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_541729 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_541729 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_541729 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_541729 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_541729
											.equals(operand));

									// check isomorphic binding between objects __DEC_operand_fragment_541729 and parentOperand 
									JavaSDM.ensure(!__DEC_operand_fragment_541729
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_230225 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_230225 is really bound
									JavaSDM.ensure(__DEC_spec_specification_230225 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_230225
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_230225 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_230225
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_534801 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_534801 is really bound
									JavaSDM.ensure(__DEC_guard_guard_534801 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_534801
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_534801 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_534801
											.equals(operand));

									// check isomorphic binding between objects __DEC_guard_guard_534801 and parentOperand 
									JavaSDM.ensure(!__DEC_guard_guard_534801
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_756374 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_756374 is really bound
									JavaSDM.ensure(__DEC_operand_operand_756374 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_756374
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_756374 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_756374
											.equals(combo));

									// check isomorphic binding between objects __DEC_operand_operand_756374 and parentCombo 
									JavaSDM.ensure(!__DEC_operand_operand_756374
											.equals(parentCombo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_656367
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656367 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656367
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_656367 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656367
													.next();

											// check object __DEC_messageReceive_receiveEvent_656367 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_656367 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_656367 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_656367
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_501169
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_501169 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_501169
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_501169 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_501169
													.next();

											// check object __DEC_messageSend_receiveEvent_501169 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_501169 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_501169 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_501169
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_738826
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_738826 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_738826
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_738826 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_738826
													.next();

											// check object __DEC_messageReceive_sendEvent_738826 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_738826 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_738826 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_738826
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_372123
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372123 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372123
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_372123 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372123
													.next();

											// check object __DEC_messageSend_sendEvent_372123 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_372123 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_372123 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_372123
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_127212
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_127212 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_127212
													.hasNext()) {
										try {
											__DEC_message_message_127212 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_127212
													.next();

											// check object __DEC_message_message_127212 is really bound
											JavaSDM.ensure(__DEC_message_message_127212 != null);
											// check isomorphic binding between objects __DEC_message_message_127212 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_127212
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_127212 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_127212
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link fragment from operand to parentOperand
								JavaSDM.ensure(!(parentOperand.equals(operand
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link guard from parentOperand to guard
								JavaSDM.ensure(!(guard.equals(parentOperand
										.getGuard())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link operand from operand to parentCombo
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(operand,
												CombinedFragment.class,
												"$eContainer")
										.contains(parentCombo)));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to parentCombo
								JavaSDM.ensure(parentCombo
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										line, messageSend, parentOperand,
										messageReceive, combo, parentCombo,
										operand, guard, spec, message,
										interaction);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_238(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_161100 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_558408 = null;
		Interaction __DEC_messageSend_enclosingInteraction_405257 = null;
		Interaction __DEC_operand_enclosingInteraction_389606 = null;
		InteractionOperand __DEC_combo_fragment_306468 = null;
		InteractionOperand __DEC_messageReceive_fragment_901018 = null;
		InteractionOperand __DEC_messageSend_fragment_820700 = null;
		InteractionOperand __DEC_operand_fragment_556048 = null;
		Constraint __DEC_spec_specification_869299 = null;
		InteractionOperand __DEC_guard_guard_771026 = null;
		CombinedFragment __DEC_operand_operand_802558 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_449485 = null;
		Message __DEC_messageReceive_receiveEvent_449485 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348124 = null;
		Message __DEC_messageSend_receiveEvent_348124 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426107 = null;
		Message __DEC_messageReceive_sendEvent_426107 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_312254 = null;
		Message __DEC_messageSend_sendEvent_312254 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_634421 = null;
		MessageEnd __DEC_message_message_634421 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
							.eContainer() : null;

					// check object combo is really bound
					JavaSDM.ensure(combo != null);

					// check if contained via correct reference
					JavaSDM.ensure(combo.getOperand().contains(operand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from line to parentOperand
							fujaba__Success = false;

							fujaba__IterLineToParentOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link fragment from messageSend to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageSend
													.getEnclosingOperand()));

									// check link operand from parentOperand to parentCombo
									JavaSDM.ensure(parentCombo
											.equals(parentOperand.eContainer()));

									// iterate to-many link src from line to _edge_coveredBy
									fujaba__Success = false;

									fujaba__IterLineTo_edge_coveredBy = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(line,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterLineTo_edge_coveredBy
											.hasNext()) {
										try {
											_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
													.next();

											// check object _edge_coveredBy is really bound
											JavaSDM.ensure(_edge_coveredBy != null);
											// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
											JavaSDM.ensure(!_edge_coveredBy
													.equals(_edge_covered));

											// check link trg from _edge_coveredBy to parentCombo
											JavaSDM.ensure(parentCombo
													.equals(_edge_coveredBy
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_161100 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_161100 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_161100 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_161100 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_161100
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_558408 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_558408 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_558408 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_558408 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_558408
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_405257 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_405257 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_405257 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_405257 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_405257
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_389606 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_389606 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_389606 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_389606 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_389606
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_306468 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_306468 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_306468 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_306468 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_306468
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_306468 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_306468
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_901018 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_901018 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_901018 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_901018 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_901018
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_901018 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_901018
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_820700 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_820700 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_820700 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_820700 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_820700
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_820700 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_820700
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_556048 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_556048 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_556048 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_556048 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_556048
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_556048 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_556048
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_869299 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_869299 is really bound
													JavaSDM.ensure(__DEC_spec_specification_869299 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_869299
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_869299 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_869299
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_771026 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_771026 is really bound
													JavaSDM.ensure(__DEC_guard_guard_771026 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_771026
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_771026 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_771026
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_771026 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_771026
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_802558 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_802558 is really bound
													JavaSDM.ensure(__DEC_operand_operand_802558 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_802558
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_802558 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_802558
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_802558 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_802558
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_449485
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_449485 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_449485
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_449485 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_449485
																	.next();

															// check object __DEC_messageReceive_receiveEvent_449485 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_449485 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_449485 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_449485
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_348124
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348124 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348124
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_348124 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348124
																	.next();

															// check object __DEC_messageSend_receiveEvent_348124 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_348124 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_348124 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_348124
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_426107
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426107 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426107
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_426107 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426107
																	.next();

															// check object __DEC_messageReceive_sendEvent_426107 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_426107 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_426107 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_426107
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_312254
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_312254 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_312254
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_312254 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_312254
																	.next();

															// check object __DEC_messageSend_sendEvent_312254 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_312254 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_312254 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_312254
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_634421
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_634421 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_634421
																	.hasNext()) {
														try {
															__DEC_message_message_634421 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_634421
																	.next();

															// check object __DEC_message_message_634421 is really bound
															JavaSDM.ensure(__DEC_message_message_634421 != null);
															// check isomorphic binding between objects __DEC_message_message_634421 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_634421
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_634421 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_634421
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_covered is really bound
												JavaSDM.ensure(_edge_covered != null);
												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
												JavaSDM.ensure(!_edge_coveredBy
														.equals(_edge_covered));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_covered to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(_edge_covered
																.getSrc()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_covered to line
												JavaSDM.ensure(line
														.equals(_edge_covered
																.getTrg()));

												// check link trg from _edge_coveredBy to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from parentOperand to line
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, line,
																messageSend,
																parentOperand,
																messageReceive,
																combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_46(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_322687 = null;
		NormalStep __DEC_alt_stepAlternative_405937 = null;
		Flow __DEC_step_steps_600039 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_254362 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_254362 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_322687 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_322687 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_322687 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_322687.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_322687 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_322687.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_405937 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_405937 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_405937 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_405937
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_405937 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_405937
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_600039 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_600039 is really bound
					JavaSDM.ensure(__DEC_step_steps_600039 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_600039.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_600039 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_600039.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_600039 and flow 
					JavaSDM.ensure(!__DEC_step_steps_600039.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_254362
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_254362 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_254362
									.hasNext()) {
						try {
							__DEC_altFlow_ref_254362 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_254362
									.next();

							// check object __DEC_altFlow_ref_254362 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_254362 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_254362 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_254362
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, actor, flow,
						step, alt, altFlow, useCase);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_47(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_373263 = null;
		NormalStep __DEC_alt_stepAlternative_936015 = null;
		Flow __DEC_step_steps_454479 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_77785 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_77785 = null;
		Match match = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_373263 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_373263 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_373263 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_373263.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_373263 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_373263.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_936015 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_936015 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_936015 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_936015
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_936015 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_936015
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_454479 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_454479 is really bound
					JavaSDM.ensure(__DEC_step_steps_454479 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_454479.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_454479 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_454479.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_454479 and flow 
					JavaSDM.ensure(!__DEC_step_steps_454479.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_77785
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_77785 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_77785
									.hasNext()) {
						try {
							__DEC_altFlow_ref_77785 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_77785
									.next();

							// check object __DEC_altFlow_ref_77785 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_77785 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_77785 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_77785.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, actor, flow,
						step, alt, altFlow, useCase);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_239(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_949324 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_99535 = null;
		Interaction __DEC_messageSend_enclosingInteraction_770885 = null;
		Interaction __DEC_operand_enclosingInteraction_140579 = null;
		InteractionOperand __DEC_combo_fragment_664032 = null;
		InteractionOperand __DEC_messageReceive_fragment_662946 = null;
		InteractionOperand __DEC_messageSend_fragment_816519 = null;
		InteractionOperand __DEC_operand_fragment_18314 = null;
		Constraint __DEC_spec_specification_882689 = null;
		InteractionOperand __DEC_guard_guard_443819 = null;
		CombinedFragment __DEC_operand_operand_468915 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_544670 = null;
		Message __DEC_messageReceive_receiveEvent_544670 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_648881 = null;
		Message __DEC_messageSend_receiveEvent_648881 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_448694 = null;
		Message __DEC_messageReceive_sendEvent_448694 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_507009 = null;
		Message __DEC_messageSend_sendEvent_507009 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_713252 = null;
		MessageEnd __DEC_message_message_713252 = null;
		Match match = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							parentOperand = messageSend.getEnclosingOperand();

							// check object parentOperand is really bound
							JavaSDM.ensure(parentOperand != null);

							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// check link covered from parentOperand to line
							JavaSDM.ensure(parentOperand.getCovered().contains(
									line));

							// iterate to-many link covered from line to parentCombo
							fujaba__Success = false;

							fujaba__IterLineToParentCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from parentOperand to parentCombo
									JavaSDM.ensure(parentCombo
											.equals(parentOperand.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_949324 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_949324 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_949324 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_949324 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_949324
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_99535 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_99535 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_99535 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_99535 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_99535
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_770885 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_770885 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_770885 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_770885 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_770885
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_140579 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_140579 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_140579 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_140579 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_140579
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_664032 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_664032 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_664032 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_664032 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_664032
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_664032 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_664032
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_662946 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_662946 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_662946 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_662946 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_662946
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_662946 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_662946
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_816519 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_816519 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_816519 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_816519 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_816519
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_816519 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_816519
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_18314 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_18314 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_18314 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_18314 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_18314
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_18314 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_18314
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_882689 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_882689 is really bound
											JavaSDM.ensure(__DEC_spec_specification_882689 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_882689
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_882689 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_882689
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_443819 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_443819 is really bound
											JavaSDM.ensure(__DEC_guard_guard_443819 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_443819
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_443819 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_443819
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_443819 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_443819
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_468915 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_468915 is really bound
											JavaSDM.ensure(__DEC_operand_operand_468915 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_468915
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_468915 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_468915
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_468915 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_468915
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_544670
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_544670 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_544670
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_544670 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_544670
															.next();

													// check object __DEC_messageReceive_receiveEvent_544670 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_544670 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_544670 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_544670
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_648881
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_648881 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_648881
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_648881 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_648881
															.next();

													// check object __DEC_messageSend_receiveEvent_648881 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_648881 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_648881 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_648881
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_448694
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_448694 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_448694
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_448694 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_448694
															.next();

													// check object __DEC_messageReceive_sendEvent_448694 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_448694 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_448694 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_448694
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_507009
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_507009 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_507009
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_507009 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_507009
															.next();

													// check object __DEC_messageSend_sendEvent_507009 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_507009 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_507009 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_507009
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_713252
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_713252 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_713252
															.hasNext()) {
												try {
													__DEC_message_message_713252 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_713252
															.next();

													// check object __DEC_message_message_713252 is really bound
													JavaSDM.ensure(__DEC_message_message_713252 != null);
													// check isomorphic binding between objects __DEC_message_message_713252 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_713252
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_713252 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_713252
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_operand is really bound
										JavaSDM.ensure(_edge_operand != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_operand to combo
										JavaSDM.ensure(combo
												.equals(_edge_operand.getSrc()));

										// check link trg from _edge_operand to operand
										JavaSDM.ensure(operand
												.equals(_edge_operand.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_240(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_440931 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_860302 = null;
		Interaction __DEC_messageSend_enclosingInteraction_586976 = null;
		Interaction __DEC_operand_enclosingInteraction_485627 = null;
		InteractionOperand __DEC_combo_fragment_964732 = null;
		InteractionOperand __DEC_messageReceive_fragment_870509 = null;
		InteractionOperand __DEC_messageSend_fragment_371486 = null;
		InteractionOperand __DEC_operand_fragment_892852 = null;
		Constraint __DEC_spec_specification_584524 = null;
		InteractionOperand __DEC_guard_guard_719779 = null;
		CombinedFragment __DEC_operand_operand_116571 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_989171 = null;
		Message __DEC_messageReceive_receiveEvent_989171 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_754052 = null;
		Message __DEC_messageSend_receiveEvent_754052 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_404842 = null;
		Message __DEC_messageReceive_sendEvent_404842 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_657444 = null;
		Message __DEC_messageSend_sendEvent_657444 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_884090 = null;
		MessageEnd __DEC_message_message_884090 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentCombo
			fujaba__Success = false;

			fujaba__IterLineToParentCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentCombo.next();

					// ensure correct type and really bound of object parentCombo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					parentCombo = (CombinedFragment) _TmpObject;
					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link covered from line to messageSend
							fujaba__Success = false;

							fujaba__IterLineToMessageSend = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check link fragment from messageSend to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageSend
													.getEnclosingOperand()));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_440931 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_440931 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_440931 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_440931 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_440931
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_860302 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_860302 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_860302 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_860302 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_860302
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_586976 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_586976 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_586976 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_586976 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_586976
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_485627 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_485627 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_485627 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_485627 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_485627
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_964732 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_964732 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_964732 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_964732 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_964732
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_964732 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_964732
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_870509 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_870509 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_870509 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_870509 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_870509
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_870509 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_870509
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_371486 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_371486 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_371486 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_371486 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_371486
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_371486 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_371486
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_892852 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_892852 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_892852 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_892852 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_892852
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_892852 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_892852
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_584524 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_584524 is really bound
											JavaSDM.ensure(__DEC_spec_specification_584524 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_584524
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_584524 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_584524
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_719779 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_719779 is really bound
											JavaSDM.ensure(__DEC_guard_guard_719779 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_719779
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_719779 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_719779
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_719779 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_719779
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_116571 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_116571 is really bound
											JavaSDM.ensure(__DEC_operand_operand_116571 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_116571
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_116571 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_116571
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_116571 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_116571
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_989171
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_989171 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_989171
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_989171 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_989171
															.next();

													// check object __DEC_messageReceive_receiveEvent_989171 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_989171 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_989171 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_989171
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_754052
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_754052 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_754052
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_754052 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_754052
															.next();

													// check object __DEC_messageSend_receiveEvent_754052 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_754052 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_754052 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_754052
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_404842
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_404842 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_404842
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_404842 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_404842
															.next();

													// check object __DEC_messageReceive_sendEvent_404842 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_404842 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_404842 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_404842
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_657444
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_657444 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_657444
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_657444 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_657444
															.next();

													// check object __DEC_messageSend_sendEvent_657444 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_657444 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_657444 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_657444
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_884090
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_884090 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_884090
															.hasNext()) {
												try {
													__DEC_message_message_884090 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_884090
															.next();

													// check object __DEC_message_message_884090 is really bound
													JavaSDM.ensure(__DEC_message_message_884090 != null);
													// check isomorphic binding between objects __DEC_message_message_884090 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_884090
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_884090 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_884090
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_coveredBy to operand
										JavaSDM.ensure(operand
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_241(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_560556 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_50539 = null;
		Interaction __DEC_messageSend_enclosingInteraction_181987 = null;
		Interaction __DEC_operand_enclosingInteraction_545123 = null;
		InteractionOperand __DEC_combo_fragment_916085 = null;
		InteractionOperand __DEC_messageReceive_fragment_34724 = null;
		InteractionOperand __DEC_messageSend_fragment_798412 = null;
		InteractionOperand __DEC_operand_fragment_77352 = null;
		Constraint __DEC_spec_specification_250439 = null;
		InteractionOperand __DEC_guard_guard_542224 = null;
		CombinedFragment __DEC_operand_operand_846200 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_297033 = null;
		Message __DEC_messageReceive_receiveEvent_297033 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_455625 = null;
		Message __DEC_messageSend_receiveEvent_455625 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857438 = null;
		Message __DEC_messageReceive_sendEvent_857438 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_366248 = null;
		Message __DEC_messageSend_sendEvent_366248 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_416776 = null;
		MessageEnd __DEC_message_message_416776 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageSend
			fujaba__Success = false;

			fujaba__IterLineToMessageSend = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					parentOperand = messageSend.getEnclosingOperand();

					// check object parentOperand is really bound
					JavaSDM.ensure(parentOperand != null);

					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// check link fragment from combo to parentOperand
					JavaSDM.ensure(parentOperand.equals(combo
							.getEnclosingOperand()));

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link fragment from messageReceive to parentOperand
					JavaSDM.ensure(parentOperand.equals(messageReceive
							.getEnclosingOperand()));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to parentCombo
					fujaba__Success = false;

					fujaba__IterLineToParentCombo = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentCombo.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link src from line to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterLineTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link trg from _edge_coveredBy to operand
									JavaSDM.ensure(operand
											.equals(_edge_coveredBy.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_560556 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_560556 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_560556 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_560556 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_560556
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_50539 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_50539 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_50539 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_50539 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_50539
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_181987 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_181987 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_181987 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_181987 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_181987
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_545123 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_545123 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_545123 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_545123 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_545123
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_916085 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_916085 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_916085 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_916085 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_916085
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_916085 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_916085
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_34724 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_34724 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_34724 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_34724 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_34724
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_34724 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_34724
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_798412 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_798412 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_798412 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_798412 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_798412
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_798412 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_798412
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_77352 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_77352 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_77352 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_77352 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_77352
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_77352 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_77352
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_250439 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_250439 is really bound
											JavaSDM.ensure(__DEC_spec_specification_250439 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_250439
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_250439 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_250439
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_542224 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_542224 is really bound
											JavaSDM.ensure(__DEC_guard_guard_542224 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_542224
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_542224 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_542224
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_542224 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_542224
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_846200 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_846200 is really bound
											JavaSDM.ensure(__DEC_operand_operand_846200 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_846200
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_846200 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_846200
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_846200 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_846200
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_297033
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_297033 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_297033
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_297033 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_297033
															.next();

													// check object __DEC_messageReceive_receiveEvent_297033 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_297033 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_297033 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_297033
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_455625
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_455625 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_455625
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_455625 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_455625
															.next();

													// check object __DEC_messageSend_receiveEvent_455625 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_455625 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_455625 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_455625
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_857438
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857438
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_857438 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857438
															.next();

													// check object __DEC_messageReceive_sendEvent_857438 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_857438 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_857438 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_857438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_366248
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_366248 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_366248
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_366248 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_366248
															.next();

													// check object __DEC_messageSend_sendEvent_366248 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_366248 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_366248 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_366248
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_416776
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_416776 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_416776
															.hasNext()) {
												try {
													__DEC_message_message_416776 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_416776
															.next();

													// check object __DEC_message_message_416776 is really bound
													JavaSDM.ensure(__DEC_message_message_416776 != null);
													// check isomorphic binding between objects __DEC_message_message_416776 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_416776
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_416776 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_416776
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to operand
										JavaSDM.ensure(operand
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to operand
										JavaSDM.ensure(operand
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_242(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_578139 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_164341 = null;
		Interaction __DEC_messageSend_enclosingInteraction_712552 = null;
		Interaction __DEC_operand_enclosingInteraction_491704 = null;
		InteractionOperand __DEC_combo_fragment_223698 = null;
		InteractionOperand __DEC_messageReceive_fragment_86452 = null;
		InteractionOperand __DEC_messageSend_fragment_203498 = null;
		InteractionOperand __DEC_operand_fragment_185762 = null;
		Constraint __DEC_spec_specification_993537 = null;
		InteractionOperand __DEC_guard_guard_506643 = null;
		CombinedFragment __DEC_operand_operand_852960 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_32202 = null;
		Message __DEC_messageReceive_receiveEvent_32202 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_352517 = null;
		Message __DEC_messageSend_receiveEvent_352517 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_401190 = null;
		Message __DEC_messageReceive_sendEvent_401190 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427203 = null;
		Message __DEC_messageSend_sendEvent_427203 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_643584 = null;
		MessageEnd __DEC_message_message_643584 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							parentOperand = messageSend.getEnclosingOperand();

							// check object parentOperand is really bound
							JavaSDM.ensure(parentOperand != null);

							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// check link covered from parentOperand to line
							JavaSDM.ensure(parentOperand.getCovered().contains(
									line));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_578139 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_578139 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_578139 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_578139 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_578139
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_164341 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_164341 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_164341 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_164341 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_164341
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_712552 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_712552 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_712552 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_712552 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_712552
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_491704 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_491704 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_491704 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_491704 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_491704
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_223698 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_223698 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_223698 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_223698 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_223698
											.equals(operand));

									// check isomorphic binding between objects __DEC_combo_fragment_223698 and parentOperand 
									JavaSDM.ensure(!__DEC_combo_fragment_223698
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_86452 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_86452 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_86452 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_86452 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_86452
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageReceive_fragment_86452 and parentOperand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_86452
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_203498 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_203498 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_203498 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_203498 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_203498
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageSend_fragment_203498 and parentOperand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_203498
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_185762 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_185762 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_185762 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_185762 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_185762
											.equals(operand));

									// check isomorphic binding between objects __DEC_operand_fragment_185762 and parentOperand 
									JavaSDM.ensure(!__DEC_operand_fragment_185762
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_993537 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_993537 is really bound
									JavaSDM.ensure(__DEC_spec_specification_993537 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_993537
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_993537 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_993537
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_506643 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_506643 is really bound
									JavaSDM.ensure(__DEC_guard_guard_506643 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_506643
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_506643 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_506643
											.equals(operand));

									// check isomorphic binding between objects __DEC_guard_guard_506643 and parentOperand 
									JavaSDM.ensure(!__DEC_guard_guard_506643
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_852960 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_852960 is really bound
									JavaSDM.ensure(__DEC_operand_operand_852960 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_852960
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_852960 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_852960
											.equals(combo));

									// check isomorphic binding between objects __DEC_operand_operand_852960 and parentCombo 
									JavaSDM.ensure(!__DEC_operand_operand_852960
											.equals(parentCombo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_32202
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_32202 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_32202
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_32202 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_32202
													.next();

											// check object __DEC_messageReceive_receiveEvent_32202 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_32202 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_32202 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_32202
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_352517
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_352517 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_352517
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_352517 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_352517
													.next();

											// check object __DEC_messageSend_receiveEvent_352517 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_352517 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_352517 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_352517
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_401190
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_401190 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_401190
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_401190 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_401190
													.next();

											// check object __DEC_messageReceive_sendEvent_401190 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_401190 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_401190 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_401190
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_427203
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427203 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427203
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_427203 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_427203
													.next();

											// check object __DEC_messageSend_sendEvent_427203 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_427203 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_427203 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_427203
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_643584
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_643584 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_643584
													.hasNext()) {
										try {
											__DEC_message_message_643584 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_643584
													.next();

											// check object __DEC_message_message_643584 is really bound
											JavaSDM.ensure(__DEC_message_message_643584 != null);
											// check isomorphic binding between objects __DEC_message_message_643584 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_643584
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_643584 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_643584
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_guard is really bound
								JavaSDM.ensure(_edge_guard != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link fragment from operand to parentOperand
								JavaSDM.ensure(!(parentOperand.equals(operand
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link guard from parentOperand to guard
								JavaSDM.ensure(!(guard.equals(parentOperand
										.getGuard())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link operand from operand to parentCombo
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(operand,
												CombinedFragment.class,
												"$eContainer")
										.contains(parentCombo)));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_guard to operand
								JavaSDM.ensure(operand.equals(_edge_guard
										.getSrc()));

								// check link trg from _edge_guard to guard
								JavaSDM.ensure(guard.equals(_edge_guard
										.getTrg()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										line, messageSend, parentOperand,
										messageReceive, combo, parentCombo,
										operand, guard, spec, message,
										interaction);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_243(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_236395 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_100683 = null;
		Interaction __DEC_messageSend_enclosingInteraction_688381 = null;
		Interaction __DEC_operand_enclosingInteraction_562248 = null;
		InteractionOperand __DEC_combo_fragment_122271 = null;
		InteractionOperand __DEC_messageReceive_fragment_859181 = null;
		InteractionOperand __DEC_messageSend_fragment_841970 = null;
		InteractionOperand __DEC_operand_fragment_392650 = null;
		Constraint __DEC_spec_specification_994572 = null;
		InteractionOperand __DEC_guard_guard_798407 = null;
		CombinedFragment __DEC_operand_operand_492988 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_311177 = null;
		Message __DEC_messageReceive_receiveEvent_311177 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_349660 = null;
		Message __DEC_messageSend_receiveEvent_349660 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_57431 = null;
		Message __DEC_messageReceive_sendEvent_57431 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_762914 = null;
		Message __DEC_messageSend_sendEvent_762914 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_526294 = null;
		MessageEnd __DEC_message_message_526294 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from line to messageSend
					fujaba__Success = false;

					fujaba__IterLineToMessageSend = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageSend.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from line to parentOperand
							fujaba__Success = false;

							fujaba__IterLineToParentOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link fragment from messageSend to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageSend
													.getEnclosingOperand()));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_236395 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_236395 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_236395 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_236395 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_236395
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_100683 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_100683 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_100683 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_100683 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_100683
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_688381 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_688381 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_688381 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_688381 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_688381
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_562248 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_562248 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_562248 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_562248 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_562248
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_122271 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_122271 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_122271 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_122271 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_122271
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_122271 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_122271
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_859181 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_859181 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_859181 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_859181 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_859181
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_859181 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_859181
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_841970 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_841970 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_841970 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_841970 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_841970
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_841970 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_841970
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_392650 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_392650 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_392650 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_392650 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_392650
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_392650 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_392650
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_994572 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_994572 is really bound
											JavaSDM.ensure(__DEC_spec_specification_994572 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_994572
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_994572 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_994572
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_798407 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_798407 is really bound
											JavaSDM.ensure(__DEC_guard_guard_798407 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_798407
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_798407 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_798407
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_798407 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_798407
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_492988 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_492988 is really bound
											JavaSDM.ensure(__DEC_operand_operand_492988 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_492988
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_492988 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_492988
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_492988 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_492988
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_311177
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_311177 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_311177
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_311177 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_311177
															.next();

													// check object __DEC_messageReceive_receiveEvent_311177 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_311177 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_311177 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_311177
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_349660
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_349660 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_349660
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_349660 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_349660
															.next();

													// check object __DEC_messageSend_receiveEvent_349660 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_349660 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_349660 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_349660
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_57431
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_57431 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_57431
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_57431 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_57431
															.next();

													// check object __DEC_messageReceive_sendEvent_57431 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_57431 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_57431 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_57431
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_762914
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_762914 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_762914
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_762914 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_762914
															.next();

													// check object __DEC_messageSend_sendEvent_762914 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_762914 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_762914 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_762914
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_526294
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_526294 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_526294
															.hasNext()) {
												try {
													__DEC_message_message_526294 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_526294
															.next();

													// check object __DEC_message_message_526294 is really bound
													JavaSDM.ensure(__DEC_message_message_526294 != null);
													// check isomorphic binding between objects __DEC_message_message_526294 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_526294
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_526294 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_526294
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_specification is really bound
										JavaSDM.ensure(_edge_specification != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_specification to guard
										JavaSDM.ensure(guard
												.equals(_edge_specification
														.getSrc()));

										// check link trg from _edge_specification to spec
										JavaSDM.ensure(spec
												.equals(_edge_specification
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_48(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_31637 = null;
		NormalStep __DEC_alt_stepAlternative_683457 = null;
		Flow __DEC_step_steps_218717 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_514842 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_514842 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_31637 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_31637 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_31637 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_31637.getFlows()
									.contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_31637 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_31637
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_683457 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_683457 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_683457 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_683457
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_683457 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_683457
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_218717 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_218717 is really bound
							JavaSDM.ensure(__DEC_step_steps_218717 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_218717.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_218717 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_218717
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_218717 and flow 
							JavaSDM.ensure(!__DEC_step_steps_218717
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_514842
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_514842 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_514842
											.hasNext()) {
								try {
									__DEC_altFlow_ref_514842 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_514842
											.next();

									// check object __DEC_altFlow_ref_514842 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_514842 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_514842 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_514842
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, actor,
								flow, step, alt, altFlow, useCase);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_49(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_256282 = null;
		NormalStep __DEC_alt_stepAlternative_327313 = null;
		Flow __DEC_step_steps_23035 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_201571 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_201571 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_actor.getTrg();

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;

			// check link actor from step to actor
			JavaSDM.ensure(actor.equals(step.getActor()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_256282 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_256282 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_256282 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_256282
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_256282 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_256282
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_327313 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_327313 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_327313 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_327313
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_327313 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_327313
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_23035 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_23035 is really bound
							JavaSDM.ensure(__DEC_step_steps_23035 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_23035.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_23035 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_23035
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_23035 and flow 
							JavaSDM.ensure(!__DEC_step_steps_23035.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_201571
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_201571 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_201571
											.hasNext()) {
								try {
									__DEC_altFlow_ref_201571 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_201571
											.next();

									// check object __DEC_altFlow_ref_201571 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_201571 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_201571 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_201571
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, actor,
								flow, step, alt, altFlow, useCase);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_244(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_349648 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_145293 = null;
		Interaction __DEC_messageSend_enclosingInteraction_101432 = null;
		Interaction __DEC_operand_enclosingInteraction_553784 = null;
		InteractionOperand __DEC_combo_fragment_745885 = null;
		InteractionOperand __DEC_messageReceive_fragment_605881 = null;
		InteractionOperand __DEC_messageSend_fragment_703039 = null;
		InteractionOperand __DEC_operand_fragment_105866 = null;
		Constraint __DEC_spec_specification_886106 = null;
		InteractionOperand __DEC_guard_guard_379310 = null;
		CombinedFragment __DEC_operand_operand_809306 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_427756 = null;
		Message __DEC_messageReceive_receiveEvent_427756 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_890756 = null;
		Message __DEC_messageSend_receiveEvent_890756 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_645706 = null;
		Message __DEC_messageReceive_sendEvent_645706 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_599474 = null;
		Message __DEC_messageSend_sendEvent_599474 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_587100 = null;
		MessageEnd __DEC_message_message_587100 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to parentCombo
					fujaba__Success = false;

					fujaba__IterLineToParentCombo = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentCombo.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object combo is really bound
									JavaSDM.ensure(combo != null);

									// check if contained via correct reference
									JavaSDM.ensure(combo.getOperand().contains(
											operand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_349648 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_349648 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_349648 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_349648 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_349648
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_145293 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_145293 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_145293 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_145293 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_145293
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_101432 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_101432 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_101432 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_101432 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_101432
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_553784 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_553784 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_553784 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_553784 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_553784
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_745885 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_745885 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_745885 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_745885 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_745885
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_745885 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_745885
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_605881 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_605881 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_605881 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_605881 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_605881
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_605881 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_605881
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_703039 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_703039 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_703039 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_703039 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_703039
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_703039 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_703039
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_105866 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_105866 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_105866 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_105866 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_105866
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_105866 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_105866
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_886106 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_886106 is really bound
											JavaSDM.ensure(__DEC_spec_specification_886106 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_886106
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_886106 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_886106
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_379310 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_379310 is really bound
											JavaSDM.ensure(__DEC_guard_guard_379310 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_379310
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_379310 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_379310
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_379310 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_379310
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_809306 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_809306 is really bound
											JavaSDM.ensure(__DEC_operand_operand_809306 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_809306
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_809306 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_809306
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_809306 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_809306
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_427756
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_427756 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_427756
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_427756 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_427756
															.next();

													// check object __DEC_messageReceive_receiveEvent_427756 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_427756 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_427756 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_427756
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_890756
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_890756 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_890756
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_890756 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_890756
															.next();

													// check object __DEC_messageSend_receiveEvent_890756 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_890756 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_890756 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_890756
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_645706
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_645706 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_645706
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_645706 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_645706
															.next();

													// check object __DEC_messageReceive_sendEvent_645706 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_645706 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_645706 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_645706
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_599474
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_599474 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_599474
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_599474 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_599474
															.next();

													// check object __DEC_messageSend_sendEvent_599474 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_599474 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_599474 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_599474
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_587100
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_587100 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_587100
															.hasNext()) {
												try {
													__DEC_message_message_587100 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_587100
															.next();

													// check object __DEC_message_message_587100 is really bound
													JavaSDM.ensure(__DEC_message_message_587100 != null);
													// check isomorphic binding between objects __DEC_message_message_587100 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_587100
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_587100 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_587100
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_sendEvent is really bound
										JavaSDM.ensure(_edge_sendEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_sendEvent to message
										JavaSDM.ensure(message
												.equals(_edge_sendEvent
														.getSrc()));

										// check link trg from _edge_sendEvent to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_sendEvent
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_245(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_584929 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_451902 = null;
		Interaction __DEC_messageSend_enclosingInteraction_656681 = null;
		Interaction __DEC_operand_enclosingInteraction_819851 = null;
		InteractionOperand __DEC_combo_fragment_84432 = null;
		InteractionOperand __DEC_messageReceive_fragment_155453 = null;
		InteractionOperand __DEC_messageSend_fragment_338189 = null;
		InteractionOperand __DEC_operand_fragment_897342 = null;
		Constraint __DEC_spec_specification_241092 = null;
		InteractionOperand __DEC_guard_guard_753925 = null;
		CombinedFragment __DEC_operand_operand_508770 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_612834 = null;
		Message __DEC_messageReceive_receiveEvent_612834 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_970382 = null;
		Message __DEC_messageSend_receiveEvent_970382 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_364760 = null;
		Message __DEC_messageReceive_sendEvent_364760 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_686861 = null;
		Message __DEC_messageSend_sendEvent_686861 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_17085 = null;
		MessageEnd __DEC_message_message_17085 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to parentCombo
					fujaba__Success = false;

					fujaba__IterLineToParentCombo = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentCombo.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object combo is really bound
									JavaSDM.ensure(combo != null);

									// check if contained via correct reference
									JavaSDM.ensure(combo.getOperand().contains(
											operand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link fragment from combo to parentOperand
									JavaSDM.ensure(parentOperand.equals(combo
											.getEnclosingOperand()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_584929 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_584929 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_584929 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_584929 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_584929
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_451902 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_451902 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_451902 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_451902 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_451902
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_656681 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_656681 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_656681 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_656681 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_656681
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_819851 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_819851 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_819851 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_819851 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_819851
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_84432 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_84432 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_84432 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_84432 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_84432
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_84432 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_84432
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_155453 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_155453 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_155453 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_155453 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_155453
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_155453 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_155453
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_338189 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_338189 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_338189 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_338189 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_338189
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_338189 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_338189
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_897342 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_897342 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_897342 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_897342 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_897342
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_897342 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_897342
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_241092 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_241092 is really bound
											JavaSDM.ensure(__DEC_spec_specification_241092 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_241092
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_241092 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_241092
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_753925 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_753925 is really bound
											JavaSDM.ensure(__DEC_guard_guard_753925 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_753925
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_753925 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_753925
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_753925 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_753925
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_508770 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_508770 is really bound
											JavaSDM.ensure(__DEC_operand_operand_508770 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_508770
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_508770 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_508770
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_508770 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_508770
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_612834
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_612834 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_612834
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_612834 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_612834
															.next();

													// check object __DEC_messageReceive_receiveEvent_612834 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_612834 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_612834 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_612834
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_970382
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_970382 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_970382
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_970382 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_970382
															.next();

													// check object __DEC_messageSend_receiveEvent_970382 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_970382 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_970382 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_970382
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_364760
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_364760 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_364760
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_364760 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_364760
															.next();

													// check object __DEC_messageReceive_sendEvent_364760 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_364760 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_364760 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_364760
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_686861
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_686861 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_686861
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_686861 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_686861
															.next();

													// check object __DEC_messageSend_sendEvent_686861 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_686861 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_686861 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_686861
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_17085
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_17085 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_17085
															.hasNext()) {
												try {
													__DEC_message_message_17085 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_17085
															.next();

													// check object __DEC_message_message_17085 is really bound
													JavaSDM.ensure(__DEC_message_message_17085 != null);
													// check isomorphic binding between objects __DEC_message_message_17085 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_17085
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_17085 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_17085
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_receiveEvent is really bound
										JavaSDM.ensure(_edge_receiveEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_receiveEvent to message
										JavaSDM.ensure(message
												.equals(_edge_receiveEvent
														.getSrc()));

										// check link trg from _edge_receiveEvent to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_receiveEvent
														.getTrg()));

										// check link covered from messageSend to line
										JavaSDM.ensure(messageSend.getCovered()
												.contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from parentOperand to line
										JavaSDM.ensure(parentOperand
												.getCovered().contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match, line,
														messageSend,
														parentOperand,
														messageReceive, combo,
														parentCombo, operand,
														guard, spec, message,
														interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_246(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_29865 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_553872 = null;
		Interaction __DEC_messageSend_enclosingInteraction_713994 = null;
		Interaction __DEC_operand_enclosingInteraction_174974 = null;
		InteractionOperand __DEC_combo_fragment_974526 = null;
		InteractionOperand __DEC_messageReceive_fragment_743349 = null;
		InteractionOperand __DEC_messageSend_fragment_313245 = null;
		InteractionOperand __DEC_operand_fragment_729906 = null;
		Constraint __DEC_spec_specification_431036 = null;
		InteractionOperand __DEC_guard_guard_83576 = null;
		CombinedFragment __DEC_operand_operand_809923 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_774573 = null;
		Message __DEC_messageReceive_receiveEvent_774573 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_576893 = null;
		Message __DEC_messageSend_receiveEvent_576893 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_535193 = null;
		Message __DEC_messageReceive_sendEvent_535193 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_842506 = null;
		Message __DEC_messageSend_sendEvent_842506 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_839059 = null;
		MessageEnd __DEC_message_message_839059 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getTrg();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to parentCombo
					fujaba__Success = false;

					fujaba__IterLineToParentCombo = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentCombo.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to parentOperand
							fujaba__Success = false;

							fujaba__IterLineToParentOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check link operand from parentOperand to parentCombo
									JavaSDM.ensure(parentCombo
											.equals(parentOperand.eContainer()));

									// iterate to-many link covered from line to messageSend
									fujaba__Success = false;

									fujaba__IterLineToMessageSend = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check link fragment from messageSend to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageSend
													.getEnclosingOperand()));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link src from _edge_interaction to message
											JavaSDM.ensure(message
													.equals(_edge_interaction
															.getSrc()));

											// iterate to-many link covered from line to operand
											fujaba__Success = false;

											fujaba__IterLineToOperand = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													combo = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object combo is really bound
													JavaSDM.ensure(combo != null);

													// check if contained via correct reference
													JavaSDM.ensure(combo
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link fragment from combo to parentOperand
													JavaSDM.ensure(parentOperand.equals(combo
															.getEnclosingOperand()));

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_29865 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_29865 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_29865 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_29865 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_29865
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_553872 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_553872 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_553872 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_553872 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_553872
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_713994 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_713994 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_713994 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_713994 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_713994
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_174974 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_174974 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_174974 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_174974 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_174974
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_974526 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_974526 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_974526 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_974526 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_974526
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_974526 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_974526
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_743349 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_743349 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_743349 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_743349 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_743349
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_743349 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_743349
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_313245 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_313245 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_313245 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_313245 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_313245
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_313245 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_313245
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_729906 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_729906 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_729906 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_729906 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_729906
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_729906 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_729906
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_431036 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_431036 is really bound
															JavaSDM.ensure(__DEC_spec_specification_431036 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_431036
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_431036 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_431036
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_83576 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_83576 is really bound
															JavaSDM.ensure(__DEC_guard_guard_83576 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_83576
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_83576 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_83576
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_83576 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_83576
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_809923 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_809923 is really bound
															JavaSDM.ensure(__DEC_operand_operand_809923 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_809923
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_809923 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_809923
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_809923 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_809923
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_774573
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_774573 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_774573
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_774573 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_774573
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_774573 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_774573 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_774573 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_774573
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_576893
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_576893 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_576893
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_576893 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_576893
																			.next();

																	// check object __DEC_messageSend_receiveEvent_576893 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_576893 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_576893 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_576893
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_535193
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_535193 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_535193
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_535193 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_535193
																			.next();

																	// check object __DEC_messageReceive_sendEvent_535193 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_535193 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_535193 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_535193
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_842506
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_842506 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_842506
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_842506 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_842506
																			.next();

																	// check object __DEC_messageSend_sendEvent_842506 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_842506 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_842506 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_842506
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_839059
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_839059 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_839059
																			.hasNext()) {
																try {
																	__DEC_message_message_839059 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_839059
																			.next();

																	// check object __DEC_message_message_839059 is really bound
																	JavaSDM.ensure(__DEC_message_message_839059 != null);
																	// check isomorphic binding between objects __DEC_message_message_839059 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_839059
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_839059 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_839059
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link covered from messageSend to line
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(line));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from parentOperand to line
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(line));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		line,
																		messageSend,
																		parentOperand,
																		messageReceive,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_247(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_360364 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_104525 = null;
		Interaction __DEC_messageSend_enclosingInteraction_213413 = null;
		Interaction __DEC_operand_enclosingInteraction_169701 = null;
		InteractionOperand __DEC_combo_fragment_685366 = null;
		InteractionOperand __DEC_messageReceive_fragment_780537 = null;
		InteractionOperand __DEC_messageSend_fragment_333115 = null;
		InteractionOperand __DEC_operand_fragment_29 = null;
		Constraint __DEC_spec_specification_12667 = null;
		InteractionOperand __DEC_guard_guard_336444 = null;
		CombinedFragment __DEC_operand_operand_357712 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_82242 = null;
		Message __DEC_messageReceive_receiveEvent_82242 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_824172 = null;
		Message __DEC_messageSend_receiveEvent_824172 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_95432 = null;
		Message __DEC_messageReceive_sendEvent_95432 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_27954 = null;
		Message __DEC_messageSend_sendEvent_27954 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_742452 = null;
		MessageEnd __DEC_message_message_742452 = null;
		Match match = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterInteractionTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link trg from interaction to _edge_interaction
			fujaba__Success = false;

			fujaba__IterInteractionTo_edge_interaction = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							interaction, EMoflonEdge.class, "trg")).iterator();

			while (fujaba__IterInteractionTo_edge_interaction.hasNext()) {
				try {
					_edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction
							.next();

					// check object _edge_interaction is really bound
					JavaSDM.ensure(_edge_interaction != null);
					// check isomorphic binding between objects _edge_message and _edge_interaction 
					JavaSDM.ensure(!_edge_message.equals(_edge_interaction));

					// iterate to-many link lifeline from interaction to line
					fujaba__Success = false;

					fujaba__IterInteractionToLine = new ArrayList(
							interaction.getLifeline()).iterator();

					while (fujaba__IterInteractionToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterInteractionToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// iterate to-many link covered from line to parentCombo
							fujaba__Success = false;

							fujaba__IterLineToParentCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object combo is really bound
											JavaSDM.ensure(combo != null);

											// check if contained via correct reference
											JavaSDM.ensure(combo.getOperand()
													.contains(operand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link covered from line to messageSend
											fujaba__Success = false;

											fujaba__IterLineToMessageSend = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													parentOperand = messageSend
															.getEnclosingOperand();

													// check object parentOperand is really bound
													JavaSDM.ensure(parentOperand != null);

													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from combo to parentOperand
													JavaSDM.ensure(parentOperand.equals(combo
															.getEnclosingOperand()));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link src from _edge_interaction to message
													JavaSDM.ensure(message
															.equals(_edge_interaction
																	.getSrc()));

													// check link trg from _edge_message to message
													JavaSDM.ensure(message
															.equals(_edge_message
																	.getTrg()));

													// check link covered from parentOperand to line
													JavaSDM.ensure(parentOperand
															.getCovered()
															.contains(line));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_360364 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_360364 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_360364 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_360364 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_360364
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_104525 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_104525 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_104525 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_104525 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_104525
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_213413 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_213413 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_213413 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_213413 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_213413
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_169701 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_169701 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_169701 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_169701 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_169701
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_685366 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_685366 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_685366 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_685366 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_685366
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_685366 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_685366
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_780537 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_780537 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_780537 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_780537 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_780537
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_780537 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_780537
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_333115 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_333115 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_333115 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_333115 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_333115
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_333115 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_333115
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_29 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_29 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_29 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_29 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_29
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_29 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_29
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_12667 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_12667 is really bound
															JavaSDM.ensure(__DEC_spec_specification_12667 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_12667
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_12667 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_12667
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_336444 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_336444 is really bound
															JavaSDM.ensure(__DEC_guard_guard_336444 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_336444
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_336444 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_336444
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_336444 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_336444
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_357712 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_357712 is really bound
															JavaSDM.ensure(__DEC_operand_operand_357712 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_357712
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_357712 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_357712
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_357712 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_357712
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_82242
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_82242 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_82242
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_82242 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_82242
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_82242 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_82242 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_82242 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_82242
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_824172
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_824172 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_824172
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_824172 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_824172
																			.next();

																	// check object __DEC_messageSend_receiveEvent_824172 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_824172 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_824172 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_824172
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_95432
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_95432 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_95432
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_95432 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_95432
																			.next();

																	// check object __DEC_messageReceive_sendEvent_95432 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_95432 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_95432 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_95432
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_27954
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_27954 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_27954
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_27954 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_27954
																			.next();

																	// check object __DEC_messageSend_sendEvent_27954 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_27954 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_27954 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_27954
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_742452
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_742452 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_742452
																			.hasNext()) {
																try {
																	__DEC_message_message_742452 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_742452
																			.next();

																	// check object __DEC_message_message_742452 is really bound
																	JavaSDM.ensure(__DEC_message_message_742452 != null);
																	// check isomorphic binding between objects __DEC_message_message_742452 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_742452
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_742452 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_742452
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_message and _edge_interaction 
														JavaSDM.ensure(!_edge_message
																.equals(_edge_interaction));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link src from _edge_message to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from messageSend to line
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(line));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from parentOperand to line
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(line));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		line,
																		messageSend,
																		parentOperand,
																		messageReceive,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_248(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_823660 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_190217 = null;
		Interaction __DEC_messageSend_enclosingInteraction_10295 = null;
		Interaction __DEC_operand_enclosingInteraction_942661 = null;
		InteractionOperand __DEC_combo_fragment_430007 = null;
		InteractionOperand __DEC_messageReceive_fragment_642483 = null;
		InteractionOperand __DEC_messageSend_fragment_814675 = null;
		InteractionOperand __DEC_operand_fragment_977958 = null;
		Constraint __DEC_spec_specification_178451 = null;
		InteractionOperand __DEC_guard_guard_318505 = null;
		CombinedFragment __DEC_operand_operand_476878 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112811 = null;
		Message __DEC_messageReceive_receiveEvent_112811 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_391704 = null;
		Message __DEC_messageSend_receiveEvent_391704 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_124038 = null;
		Message __DEC_messageReceive_sendEvent_124038 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_443497 = null;
		Message __DEC_messageSend_sendEvent_443497 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_637031 = null;
		MessageEnd __DEC_message_message_637031 = null;
		Match match = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageSendToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageSend to line
			fujaba__Success = false;

			fujaba__IterMessageSendToLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageSendToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from parentOperand to line
					JavaSDM.ensure(parentOperand.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_823660 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_823660 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_823660 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_823660 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_823660
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_190217 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_190217 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_190217 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_190217 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_190217
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_10295 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_10295 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_10295 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_10295 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_10295
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_942661 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_942661 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_942661 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_942661 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_942661
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_430007 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_430007 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_430007 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_430007 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_430007
											.equals(operand));

									// check isomorphic binding between objects __DEC_combo_fragment_430007 and parentOperand 
									JavaSDM.ensure(!__DEC_combo_fragment_430007
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_642483 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_642483 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_642483 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_642483 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_642483
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageReceive_fragment_642483 and parentOperand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_642483
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_814675 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_814675 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_814675 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_814675 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_814675
											.equals(operand));

									// check isomorphic binding between objects __DEC_messageSend_fragment_814675 and parentOperand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_814675
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_977958 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_977958 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_977958 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_977958 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_977958
											.equals(operand));

									// check isomorphic binding between objects __DEC_operand_fragment_977958 and parentOperand 
									JavaSDM.ensure(!__DEC_operand_fragment_977958
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_178451 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_178451 is really bound
									JavaSDM.ensure(__DEC_spec_specification_178451 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_178451
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_178451 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_178451
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_318505 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_318505 is really bound
									JavaSDM.ensure(__DEC_guard_guard_318505 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_318505
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_318505 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_318505
											.equals(operand));

									// check isomorphic binding between objects __DEC_guard_guard_318505 and parentOperand 
									JavaSDM.ensure(!__DEC_guard_guard_318505
											.equals(parentOperand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_476878 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_476878 is really bound
									JavaSDM.ensure(__DEC_operand_operand_476878 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_476878
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_476878 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_476878
											.equals(combo));

									// check isomorphic binding between objects __DEC_operand_operand_476878 and parentCombo 
									JavaSDM.ensure(!__DEC_operand_operand_476878
											.equals(parentCombo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_112811
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112811 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112811
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_112811 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_112811
													.next();

											// check object __DEC_messageReceive_receiveEvent_112811 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_112811 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_112811 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_112811
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_391704
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_391704 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_391704
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_391704 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_391704
													.next();

											// check object __DEC_messageSend_receiveEvent_391704 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_391704 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_391704 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_391704
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_124038
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_124038 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_124038
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_124038 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_124038
													.next();

											// check object __DEC_messageReceive_sendEvent_124038 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_124038 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_124038 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_124038
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_443497
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_443497 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_443497
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_443497 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_443497
													.next();

											// check object __DEC_messageSend_sendEvent_443497 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_443497 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_443497 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_443497
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_637031
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_637031 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_637031
													.hasNext()) {
										try {
											__DEC_message_message_637031 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_637031
													.next();

											// check object __DEC_message_message_637031 is really bound
											JavaSDM.ensure(__DEC_message_message_637031 != null);
											// check isomorphic binding between objects __DEC_message_message_637031 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_637031
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_637031 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_637031
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_message is really bound
								JavaSDM.ensure(_edge_message != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object parentCombo is really bound
								JavaSDM.ensure(parentCombo != null);
								// check object parentOperand is really bound
								JavaSDM.ensure(parentOperand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects parentCombo and combo 
								JavaSDM.ensure(!parentCombo.equals(combo));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check isomorphic binding between objects parentOperand and operand 
								JavaSDM.ensure(!parentOperand.equals(operand));

								// check link fragment from combo to parentOperand
								JavaSDM.ensure(parentOperand.equals(combo
										.getEnclosingOperand()));

								// check link fragment from messageReceive to parentOperand
								JavaSDM.ensure(parentOperand
										.equals(messageReceive
												.getEnclosingOperand()));

								// check link fragment from messageSend to parentOperand
								JavaSDM.ensure(parentOperand.equals(messageSend
										.getEnclosingOperand()));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link fragment from operand to parentOperand
								JavaSDM.ensure(!(parentOperand.equals(operand
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link guard from parentOperand to guard
								JavaSDM.ensure(!(guard.equals(parentOperand
										.getGuard())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link operand from parentOperand to parentCombo
								JavaSDM.ensure(parentCombo.equals(parentOperand
										.eContainer()));

								// check link operand from operand to parentCombo
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(operand,
												CombinedFragment.class,
												"$eContainer")
										.contains(parentCombo)));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_message to messageSend
								JavaSDM.ensure(messageSend.equals(_edge_message
										.getSrc()));

								// check link trg from _edge_message to message
								JavaSDM.ensure(message.equals(_edge_message
										.getTrg()));

								// check link covered from messageSend to line
								JavaSDM.ensure(messageSend.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// check link covered from parentCombo to line
								JavaSDM.ensure(parentCombo.getCovered()
										.contains(line));

								// check link covered from parentOperand to line
								JavaSDM.ensure(parentOperand.getCovered()
										.contains(line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										line, messageSend, parentOperand,
										messageReceive, combo, parentCombo,
										operand, guard, spec, message,
										interaction);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_249(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_621865 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_670102 = null;
		Interaction __DEC_messageSend_enclosingInteraction_177389 = null;
		Interaction __DEC_operand_enclosingInteraction_402686 = null;
		InteractionOperand __DEC_combo_fragment_94935 = null;
		InteractionOperand __DEC_messageReceive_fragment_542037 = null;
		InteractionOperand __DEC_messageSend_fragment_733349 = null;
		InteractionOperand __DEC_operand_fragment_630721 = null;
		Constraint __DEC_spec_specification_793542 = null;
		InteractionOperand __DEC_guard_guard_996923 = null;
		CombinedFragment __DEC_operand_operand_545976 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_434377 = null;
		Message __DEC_messageReceive_receiveEvent_434377 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_240442 = null;
		Message __DEC_messageSend_receiveEvent_240442 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611668 = null;
		Message __DEC_messageReceive_sendEvent_611668 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_297292 = null;
		Message __DEC_messageSend_sendEvent_297292 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_558957 = null;
		MessageEnd __DEC_message_message_558957 = null;
		Match match = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link covered from messageSend to line
					JavaSDM.ensure(messageSend.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object combo is really bound
							JavaSDM.ensure(combo != null);

							// check if contained via correct reference
							JavaSDM.ensure(combo.getOperand().contains(operand));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from line to parentCombo
							fujaba__Success = false;

							fujaba__IterLineToParentCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link covered from line to parentOperand
									fujaba__Success = false;

									fujaba__IterLineToParentOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from combo to parentOperand
											JavaSDM.ensure(parentOperand.equals(combo
													.getEnclosingOperand()));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link fragment from messageSend to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageSend
													.getEnclosingOperand()));

											// check link operand from parentOperand to parentCombo
											JavaSDM.ensure(parentCombo
													.equals(parentOperand
															.eContainer()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_621865 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_621865 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_621865 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_621865 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_621865
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_670102 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_670102 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_670102 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_670102 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_670102
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_177389 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_177389 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_177389 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_177389 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_177389
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_402686 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_402686 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_402686 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_402686 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_402686
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_94935 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_94935 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_94935 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_94935 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_94935
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_94935 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_94935
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_542037 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_542037 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_542037 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_542037 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_542037
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_542037 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_542037
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_733349 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_733349 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_733349 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_733349 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_733349
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_733349 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_733349
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_630721 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_630721 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_630721 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_630721 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_630721
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_630721 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_630721
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_793542 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_793542 is really bound
													JavaSDM.ensure(__DEC_spec_specification_793542 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_793542
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_793542 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_793542
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_996923 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_996923 is really bound
													JavaSDM.ensure(__DEC_guard_guard_996923 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_996923
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_996923 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_996923
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_996923 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_996923
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_545976 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_545976 is really bound
													JavaSDM.ensure(__DEC_operand_operand_545976 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_545976
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_545976 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_545976
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_545976 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_545976
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_434377
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_434377 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_434377
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_434377 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_434377
																	.next();

															// check object __DEC_messageReceive_receiveEvent_434377 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_434377 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_434377 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_434377
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_240442
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_240442 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_240442
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_240442 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_240442
																	.next();

															// check object __DEC_messageSend_receiveEvent_240442 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_240442 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_240442 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_240442
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_611668
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611668 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611668
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_611668 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611668
																	.next();

															// check object __DEC_messageReceive_sendEvent_611668 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_611668 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_611668 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_611668
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_297292
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_297292 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_297292
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_297292 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_297292
																	.next();

															// check object __DEC_messageSend_sendEvent_297292 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_297292 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_297292 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_297292
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_558957
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_558957 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_558957
																	.hasNext()) {
														try {
															__DEC_message_message_558957 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_558957
																	.next();

															// check object __DEC_message_message_558957 is really bound
															JavaSDM.ensure(__DEC_message_message_558957 != null);
															// check isomorphic binding between objects __DEC_message_message_558957 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_558957
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_558957 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_558957
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from messageSend to line
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from parentOperand to line
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, line,
																messageSend,
																parentOperand,
																messageReceive,
																combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, flow, step,
					alt, altFlow, useCase, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, flow, step, alt, altFlow,
					useCase, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand, Lifeline line,
			CombinedFragment parentCombo, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, parentOperand,
					messageSend, messageReceive, line, combo, parentCombo,
					operand, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_combo
				__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend.setName("fragment");
				// assign attribute __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __parentOperand_fragment_combo
				__parentOperand_fragment_combo.setName("fragment");
				// assign attribute __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageSend,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageSend.setSrc(parentOperand);

				// create link
				__combo_enclosingOperand_parentOperand.setTrg(parentOperand);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_combo.setSrc(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setSrc(messageSend);

				// create link
				__parentOperand_fragment_messageSend.setTrg(messageSend);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__combo_enclosingOperand_parentOperand.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__parentOperand_fragment_combo.setTrg(combo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, parentOperand, messageSend,
					messageReceive, line, combo, parentCombo, operand, guard,
					spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("combo", combo);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_53(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_620173 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_907300 = null;
		Interaction __DEC_messageSend_enclosingInteraction_252360 = null;
		Interaction __DEC_operand_enclosingInteraction_326944 = null;
		InteractionOperand __DEC_combo_fragment_452497 = null;
		InteractionOperand __DEC_messageReceive_fragment_615826 = null;
		InteractionOperand __DEC_messageSend_fragment_225304 = null;
		InteractionOperand __DEC_operand_fragment_987526 = null;
		Constraint __DEC_spec_specification_497960 = null;
		InteractionOperand __DEC_guard_guard_570559 = null;
		CombinedFragment __DEC_operand_operand_620835 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920 = null;
		Message __DEC_messageReceive_receiveEvent_272920 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482 = null;
		Message __DEC_messageSend_receiveEvent_810482 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171 = null;
		Message __DEC_messageReceive_sendEvent_601171 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365 = null;
		Message __DEC_messageSend_sendEvent_519365 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_532458 = null;
		MessageEnd __DEC_message_message_532458 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_620173 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_620173 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_620173 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_620173 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_620173
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_907300 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_907300 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_907300 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_907300 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_907300
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_252360 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_252360 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_252360 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_252360 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_252360
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_326944 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_326944 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_326944 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_326944 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_326944
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_452497 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_452497 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_452497 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_452497 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_452497
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_452497 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_452497
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_615826 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_615826 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_615826 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_615826 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_615826
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_615826 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_615826
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_225304 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_225304 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_225304 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_225304 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_225304
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_225304 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_225304
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_987526 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_987526 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_987526 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_987526 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_987526
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_987526 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_987526
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_497960 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_497960 is really bound
													JavaSDM.ensure(__DEC_spec_specification_497960 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_497960
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_497960 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_497960
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_570559 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_570559 is really bound
													JavaSDM.ensure(__DEC_guard_guard_570559 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_570559
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_570559 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_570559
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_570559 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_570559
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_620835 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_620835 is really bound
													JavaSDM.ensure(__DEC_operand_operand_620835 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_620835
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_620835 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_620835
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_620835 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_620835
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_272920
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_272920 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_272920
																	.next();

															// check object __DEC_messageReceive_receiveEvent_272920 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_272920 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_272920 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_272920
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_810482
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_810482 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_810482
																	.next();

															// check object __DEC_messageSend_receiveEvent_810482 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_810482 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_810482 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_810482
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_601171
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_601171 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_601171
																	.next();

															// check object __DEC_messageReceive_sendEvent_601171 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_601171 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_601171 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_601171
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_519365
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_519365 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_519365
																	.next();

															// check object __DEC_messageSend_sendEvent_519365 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_519365 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_519365 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_519365
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_532458
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_532458 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_532458
																	.hasNext()) {
														try {
															__DEC_message_message_532458 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_532458
																	.next();

															// check object __DEC_message_message_532458 is really bound
															JavaSDM.ensure(__DEC_message_message_532458 != null);
															// check isomorphic binding between objects __DEC_message_message_532458 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_532458
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_532458 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_532458
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_54(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_20032 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_645214 = null;
		Interaction __DEC_messageSend_enclosingInteraction_439645 = null;
		Interaction __DEC_operand_enclosingInteraction_321446 = null;
		InteractionOperand __DEC_combo_fragment_398961 = null;
		InteractionOperand __DEC_messageReceive_fragment_58865 = null;
		InteractionOperand __DEC_messageSend_fragment_68456 = null;
		InteractionOperand __DEC_operand_fragment_360147 = null;
		Constraint __DEC_spec_specification_637702 = null;
		InteractionOperand __DEC_guard_guard_218628 = null;
		CombinedFragment __DEC_operand_operand_160013 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512 = null;
		Message __DEC_messageReceive_receiveEvent_606512 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581 = null;
		Message __DEC_messageSend_receiveEvent_458581 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220 = null;
		Message __DEC_messageReceive_sendEvent_70220 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278 = null;
		Message __DEC_messageSend_sendEvent_846278 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_70874 = null;
		MessageEnd __DEC_message_message_70874 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageSend
													JavaSDM.ensure(messageSend
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_20032 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_20032 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_20032 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_20032 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_20032
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_645214 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_645214 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_645214 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_645214 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_645214
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_439645 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_439645 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_439645 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_439645 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_439645
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_321446 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_321446 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_321446 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_321446 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_321446
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_398961 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_398961 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_398961 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_398961 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_398961
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_398961 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_398961
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_58865 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_58865 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_58865 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_58865 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_58865
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_58865 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_58865
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_68456 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_68456 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_68456 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_68456 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_68456
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_68456 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_68456
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_360147 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_360147 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_360147 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_360147 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_360147
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_360147 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_360147
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_637702 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_637702 is really bound
															JavaSDM.ensure(__DEC_spec_specification_637702 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_637702
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_637702 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_637702
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_218628 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_218628 is really bound
															JavaSDM.ensure(__DEC_guard_guard_218628 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_218628
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_218628 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_218628
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_218628 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_218628
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_160013 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_160013 is really bound
															JavaSDM.ensure(__DEC_operand_operand_160013 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_160013
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_160013 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_160013
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_160013 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_160013
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_606512
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_606512 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_606512
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_606512 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_606512 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_606512 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_606512
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_458581
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_458581 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_458581
																			.next();

																	// check object __DEC_messageSend_receiveEvent_458581 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_458581 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_458581 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_458581
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_70220
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_70220 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_70220
																			.next();

																	// check object __DEC_messageReceive_sendEvent_70220 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_70220 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_70220 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_70220
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_846278
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_846278 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_846278
																			.next();

																	// check object __DEC_messageSend_sendEvent_846278 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_846278 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_846278 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_846278
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_70874
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_70874 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_70874
																			.hasNext()) {
																try {
																	__DEC_message_message_70874 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_70874
																			.next();

																	// check object __DEC_message_message_70874 is really bound
																	JavaSDM.ensure(__DEC_message_message_70874 != null);
																	// check isomorphic binding between objects __DEC_message_message_70874 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_70874
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_70874 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_70874
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_55(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_271926 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_752841 = null;
		Interaction __DEC_messageSend_enclosingInteraction_208558 = null;
		Interaction __DEC_operand_enclosingInteraction_50589 = null;
		InteractionOperand __DEC_combo_fragment_550423 = null;
		InteractionOperand __DEC_messageReceive_fragment_917851 = null;
		InteractionOperand __DEC_messageSend_fragment_550596 = null;
		InteractionOperand __DEC_operand_fragment_949195 = null;
		Constraint __DEC_spec_specification_924555 = null;
		InteractionOperand __DEC_guard_guard_813390 = null;
		CombinedFragment __DEC_operand_operand_432504 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087 = null;
		Message __DEC_messageReceive_receiveEvent_5087 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590 = null;
		Message __DEC_messageSend_receiveEvent_69590 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421 = null;
		Message __DEC_messageReceive_sendEvent_569421 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111 = null;
		Message __DEC_messageSend_sendEvent_59111 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_833828 = null;
		MessageEnd __DEC_message_message_833828 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to combo
									fujaba__Success = false;

									fujaba__IterParentOperandToCombo = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_271926 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_271926 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_271926 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_271926 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_271926
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_752841 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_752841 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_752841 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_752841 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_752841
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_208558 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_208558 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_208558 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_208558 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_208558
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_50589 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_50589 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_50589 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_50589 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_50589
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_550423 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_550423 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_550423 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_550423 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_550423
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_550423 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_550423
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_917851 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_917851 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_917851 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_917851 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_917851
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_917851 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_917851
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_550596 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_550596 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_550596 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_550596 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_550596
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_550596 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_550596
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_949195 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_949195 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_949195 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_949195 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_949195
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_949195 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_949195
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_924555 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_924555 is really bound
													JavaSDM.ensure(__DEC_spec_specification_924555 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_924555
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_924555 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_924555
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_813390 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_813390 is really bound
													JavaSDM.ensure(__DEC_guard_guard_813390 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_813390
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_813390 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_813390
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_813390 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_813390
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_432504 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_432504 is really bound
													JavaSDM.ensure(__DEC_operand_operand_432504 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_432504
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_432504 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_432504
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_432504 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_432504
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_5087
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_5087 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_5087
																	.next();

															// check object __DEC_messageReceive_receiveEvent_5087 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_5087 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_5087 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_5087
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_69590
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_69590 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_69590
																	.next();

															// check object __DEC_messageSend_receiveEvent_69590 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_69590 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_69590 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_69590
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_569421
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_569421 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_569421
																	.next();

															// check object __DEC_messageReceive_sendEvent_569421 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_569421 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_569421 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_569421
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_59111
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_59111 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_59111
																	.next();

															// check object __DEC_messageSend_sendEvent_59111 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_59111 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_59111 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_59111
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_833828
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_833828 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_833828
																	.hasNext()) {
														try {
															__DEC_message_message_833828 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_833828
																	.next();

															// check object __DEC_message_message_833828 is really bound
															JavaSDM.ensure(__DEC_message_message_833828 != null);
															// check isomorphic binding between objects __DEC_message_message_833828 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_833828
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_833828 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_833828
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_56(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_669955 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_586917 = null;
		Interaction __DEC_messageSend_enclosingInteraction_187042 = null;
		Interaction __DEC_operand_enclosingInteraction_726253 = null;
		InteractionOperand __DEC_combo_fragment_231770 = null;
		InteractionOperand __DEC_messageReceive_fragment_567956 = null;
		InteractionOperand __DEC_messageSend_fragment_678085 = null;
		InteractionOperand __DEC_operand_fragment_827843 = null;
		Constraint __DEC_spec_specification_809773 = null;
		InteractionOperand __DEC_guard_guard_426227 = null;
		CombinedFragment __DEC_operand_operand_954639 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188 = null;
		Message __DEC_messageReceive_receiveEvent_446188 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459 = null;
		Message __DEC_messageSend_receiveEvent_619459 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836 = null;
		Message __DEC_messageReceive_sendEvent_783836 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578 = null;
		Message __DEC_messageSend_sendEvent_423578 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_990359 = null;
		MessageEnd __DEC_message_message_990359 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageReceive
													JavaSDM.ensure(messageReceive
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_669955 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_669955 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_669955 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_669955 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_669955
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_586917 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_586917 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_586917 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_586917 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_586917
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_187042 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_187042 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_187042 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_187042 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_187042
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_726253 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_726253 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_726253 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_726253 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_726253
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_231770 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_231770 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_231770 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_231770 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_231770
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_231770 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_231770
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_567956 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_567956 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_567956 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567956 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567956
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567956 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567956
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_678085 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_678085 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_678085 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_678085 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_678085
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_678085 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_678085
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_827843 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_827843 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_827843 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_827843 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_827843
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_827843 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_827843
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_809773 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_809773 is really bound
															JavaSDM.ensure(__DEC_spec_specification_809773 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_809773
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_809773 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_809773
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_426227 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_426227 is really bound
															JavaSDM.ensure(__DEC_guard_guard_426227 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_426227
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_426227 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_426227
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_426227 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_426227
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_954639 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_954639 is really bound
															JavaSDM.ensure(__DEC_operand_operand_954639 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_954639
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_954639 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_954639
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_954639 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_954639
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_446188
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_446188 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_446188
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_446188 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_446188 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_446188 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_446188
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_619459
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_619459 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_619459
																			.next();

																	// check object __DEC_messageSend_receiveEvent_619459 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_619459 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_619459 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_619459
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_783836
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_783836 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783836
																			.next();

																	// check object __DEC_messageReceive_sendEvent_783836 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_783836 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_783836 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_783836
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_423578
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_423578 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_423578
																			.next();

																	// check object __DEC_messageSend_sendEvent_423578 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_423578 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_423578 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_423578
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_990359
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_990359 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_990359
																			.hasNext()) {
																try {
																	__DEC_message_message_990359 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_990359
																			.next();

																	// check object __DEC_message_message_990359 is really bound
																	JavaSDM.ensure(__DEC_message_message_990359 != null);
																	// check isomorphic binding between objects __DEC_message_message_990359 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_990359
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_990359 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_990359
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_57(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_995244 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_984878 = null;
		Interaction __DEC_messageSend_enclosingInteraction_7211 = null;
		Interaction __DEC_operand_enclosingInteraction_748735 = null;
		InteractionOperand __DEC_combo_fragment_368851 = null;
		InteractionOperand __DEC_messageReceive_fragment_298178 = null;
		InteractionOperand __DEC_messageSend_fragment_912200 = null;
		InteractionOperand __DEC_operand_fragment_736398 = null;
		Constraint __DEC_spec_specification_171162 = null;
		InteractionOperand __DEC_guard_guard_458766 = null;
		CombinedFragment __DEC_operand_operand_61362 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980 = null;
		Message __DEC_messageReceive_receiveEvent_780980 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094 = null;
		Message __DEC_messageSend_receiveEvent_995094 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269 = null;
		Message __DEC_messageReceive_sendEvent_760269 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874 = null;
		Message __DEC_messageSend_sendEvent_467874 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_500737 = null;
		MessageEnd __DEC_message_message_500737 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageReceive
													.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_995244 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_995244 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_995244 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_995244 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_995244
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_984878 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_984878 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_984878 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_984878 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_984878
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_7211 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_7211 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_7211 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_7211 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_7211
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_748735 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_748735 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_748735 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_748735 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_748735
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_368851 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_368851 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_368851 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_368851 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_368851
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_368851 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_368851
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_298178 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_298178 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_298178 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_298178 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_298178
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_298178 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_298178
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_912200 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_912200 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_912200 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_912200 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_912200
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_912200 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_912200
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_736398 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_736398 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_736398 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_736398 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_736398
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_736398 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_736398
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_171162 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_171162 is really bound
													JavaSDM.ensure(__DEC_spec_specification_171162 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_171162
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_171162 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_171162
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_458766 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_458766 is really bound
													JavaSDM.ensure(__DEC_guard_guard_458766 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_458766
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_458766 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_458766
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_458766 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_458766
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_61362 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_61362 is really bound
													JavaSDM.ensure(__DEC_operand_operand_61362 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_61362
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_61362 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_61362
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_61362 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_61362
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_780980
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_780980 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_780980
																	.next();

															// check object __DEC_messageReceive_receiveEvent_780980 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_780980 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_780980 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_780980
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_995094
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_995094 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_995094
																	.next();

															// check object __DEC_messageSend_receiveEvent_995094 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_995094 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_995094 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_995094
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_760269
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_760269 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_760269
																	.next();

															// check object __DEC_messageReceive_sendEvent_760269 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_760269 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_760269 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_760269
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_467874
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_467874 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_467874
																	.next();

															// check object __DEC_messageSend_sendEvent_467874 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_467874 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_467874 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_467874
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_500737
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_500737 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_500737
																	.hasNext()) {
														try {
															__DEC_message_message_500737 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_500737
																	.next();

															// check object __DEC_message_message_500737 is really bound
															JavaSDM.ensure(__DEC_message_message_500737 != null);
															// check isomorphic binding between objects __DEC_message_message_500737 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_500737
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_500737 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_500737
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_58(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_847318 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_558431 = null;
		Interaction __DEC_messageSend_enclosingInteraction_99844 = null;
		Interaction __DEC_operand_enclosingInteraction_101110 = null;
		InteractionOperand __DEC_combo_fragment_582139 = null;
		InteractionOperand __DEC_messageReceive_fragment_89664 = null;
		InteractionOperand __DEC_messageSend_fragment_102026 = null;
		InteractionOperand __DEC_operand_fragment_322143 = null;
		Constraint __DEC_spec_specification_559509 = null;
		InteractionOperand __DEC_guard_guard_253114 = null;
		CombinedFragment __DEC_operand_operand_338964 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277 = null;
		Message __DEC_messageReceive_receiveEvent_650277 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394 = null;
		Message __DEC_messageSend_receiveEvent_452394 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206 = null;
		Message __DEC_messageReceive_sendEvent_967206 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546 = null;
		Message __DEC_messageSend_sendEvent_568546 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_729824 = null;
		MessageEnd __DEC_message_message_729824 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageSend
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageSend = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									_TmpObject = _edge_covered.getTrg();

									// ensure correct type and really bound of object line
									JavaSDM.ensure(_TmpObject instanceof Lifeline);
									line = (Lifeline) _TmpObject;

									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link trg from parentOperand to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"trg"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link src from _edge_coveredBy to line
													JavaSDM.ensure(line
															.equals(_edge_coveredBy
																	.getSrc()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_847318 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_847318 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_847318 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_847318 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_847318
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_558431 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_558431 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_558431 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_558431 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_558431
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_99844 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_99844 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_99844 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_99844 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_99844
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_101110 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_101110 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_101110 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_101110 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_101110
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_582139 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_582139 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_582139 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_582139 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_582139
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_582139 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_582139
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_89664 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_89664 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_89664 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_89664 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_89664
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_89664 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_89664
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_102026 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_102026 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_102026 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_102026 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_102026
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_102026 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_102026
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_322143 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_322143 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_322143 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_322143 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_322143
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_322143 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_322143
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_559509 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_559509 is really bound
															JavaSDM.ensure(__DEC_spec_specification_559509 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_559509
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_559509 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_559509
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_253114 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_253114 is really bound
															JavaSDM.ensure(__DEC_guard_guard_253114 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_253114
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_253114 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_253114
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_253114 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_253114
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_338964 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_338964 is really bound
															JavaSDM.ensure(__DEC_operand_operand_338964 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_338964
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_338964 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_338964
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_338964 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_338964
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_650277
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_650277 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_650277
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_650277 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_650277 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_650277 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_650277
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_452394
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_452394 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_452394
																			.next();

																	// check object __DEC_messageSend_receiveEvent_452394 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_452394 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_452394 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_452394
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_967206
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_967206 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_967206
																			.next();

																	// check object __DEC_messageReceive_sendEvent_967206 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_967206 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_967206 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_967206
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_568546
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_568546 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_568546
																			.next();

																	// check object __DEC_messageSend_sendEvent_568546 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_568546 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_568546 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_568546
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_729824
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_729824 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_729824
																			.hasNext()) {
																try {
																	__DEC_message_message_729824 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_729824
																			.next();

																	// check object __DEC_message_message_729824 is really bound
																	JavaSDM.ensure(__DEC_message_message_729824 != null);
																	// check isomorphic binding between objects __DEC_message_message_729824 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_729824
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_729824 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_729824
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_59(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_349764 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_191743 = null;
		Interaction __DEC_messageSend_enclosingInteraction_977878 = null;
		Interaction __DEC_operand_enclosingInteraction_442491 = null;
		InteractionOperand __DEC_combo_fragment_14246 = null;
		InteractionOperand __DEC_messageReceive_fragment_864560 = null;
		InteractionOperand __DEC_messageSend_fragment_919690 = null;
		InteractionOperand __DEC_operand_fragment_793718 = null;
		Constraint __DEC_spec_specification_889981 = null;
		InteractionOperand __DEC_guard_guard_675046 = null;
		CombinedFragment __DEC_operand_operand_349353 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905 = null;
		Message __DEC_messageReceive_receiveEvent_936905 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780 = null;
		Message __DEC_messageSend_receiveEvent_471780 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617 = null;
		Message __DEC_messageReceive_sendEvent_673617 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838 = null;
		Message __DEC_messageSend_sendEvent_830838 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_125102 = null;
		MessageEnd __DEC_message_message_125102 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = _edge_fragment.getTrg();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;

					// check link fragment from combo to parentOperand
					JavaSDM.ensure(parentOperand.equals(combo
							.getEnclosingOperand()));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_349764 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_349764 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_349764 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_349764 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_349764
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_191743 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_191743 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_191743 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_191743 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_191743
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_977878 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_977878 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_977878 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_977878 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_977878
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_442491 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_442491 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_442491 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_442491 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_442491
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_14246 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_14246 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_14246 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_14246 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_14246
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_14246 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_14246
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_864560 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_864560 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_864560 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_864560 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_864560
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_864560 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_864560
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_919690 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_919690 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_919690 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_919690 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_919690
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_919690 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_919690
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_793718 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_793718 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_793718 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_793718 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_793718
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_793718 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_793718
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_889981 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_889981 is really bound
													JavaSDM.ensure(__DEC_spec_specification_889981 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_889981
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_889981 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_889981
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_675046 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_675046 is really bound
													JavaSDM.ensure(__DEC_guard_guard_675046 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_675046
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_675046 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_675046
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_675046 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_675046
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_349353 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_349353 is really bound
													JavaSDM.ensure(__DEC_operand_operand_349353 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_349353
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_349353 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_349353
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_349353 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_349353
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_936905
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_936905 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936905
																	.next();

															// check object __DEC_messageReceive_receiveEvent_936905 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_936905 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_936905 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_936905
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_471780
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_471780 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_471780
																	.next();

															// check object __DEC_messageSend_receiveEvent_471780 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_471780 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_471780 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_471780
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_673617
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_673617 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_673617
																	.next();

															// check object __DEC_messageReceive_sendEvent_673617 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_673617 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_673617 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_673617
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_830838
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_830838 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_830838
																	.next();

															// check object __DEC_messageSend_sendEvent_830838 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_830838 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_830838 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_830838
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_125102
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_125102 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_125102
																	.hasNext()) {
														try {
															__DEC_message_message_125102 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_125102
																	.next();

															// check object __DEC_message_message_125102 is really bound
															JavaSDM.ensure(__DEC_message_message_125102 != null);
															// check isomorphic binding between objects __DEC_message_message_125102 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_125102
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_125102 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_125102
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to combo
												JavaSDM.ensure(combo
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_60(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_39868 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_333957 = null;
		Interaction __DEC_messageSend_enclosingInteraction_821291 = null;
		Interaction __DEC_operand_enclosingInteraction_921836 = null;
		InteractionOperand __DEC_combo_fragment_123008 = null;
		InteractionOperand __DEC_messageReceive_fragment_925544 = null;
		InteractionOperand __DEC_messageSend_fragment_443740 = null;
		InteractionOperand __DEC_operand_fragment_313835 = null;
		Constraint __DEC_spec_specification_812185 = null;
		InteractionOperand __DEC_guard_guard_77678 = null;
		CombinedFragment __DEC_operand_operand_842031 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196 = null;
		Message __DEC_messageReceive_receiveEvent_825196 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917 = null;
		Message __DEC_messageSend_receiveEvent_521917 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288 = null;
		Message __DEC_messageReceive_sendEvent_798288 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379 = null;
		Message __DEC_messageSend_sendEvent_757379 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_221678 = null;
		MessageEnd __DEC_message_message_221678 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from combo to parentOperand
			JavaSDM.ensure(parentOperand.equals(combo.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from parentOperand to line
							fujaba__Success = false;

							fujaba__IterParentOperandToLine = new ArrayList(
									parentOperand.getCovered()).iterator();

							while (fujaba__IterParentOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to combo
													JavaSDM.ensure(combo
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_39868 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_39868 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_39868 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_39868 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_39868
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_333957 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_333957 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_333957 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_333957 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_333957
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_821291 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_821291 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_821291 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_821291 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_821291
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_921836 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_921836 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_921836 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_921836 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_921836
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_123008 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_123008 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_123008 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_123008 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_123008
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_123008 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_123008
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_925544 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_925544 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_925544 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_925544 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_925544
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_925544 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_925544
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_443740 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_443740 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_443740 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_443740 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_443740
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_443740 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_443740
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_313835 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_313835 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_313835 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_313835 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_313835
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_313835 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_313835
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_812185 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_812185 is really bound
															JavaSDM.ensure(__DEC_spec_specification_812185 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_812185
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_812185 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_812185
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_77678 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_77678 is really bound
															JavaSDM.ensure(__DEC_guard_guard_77678 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_77678
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_77678 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_77678
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_77678 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_77678
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_842031 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_842031 is really bound
															JavaSDM.ensure(__DEC_operand_operand_842031 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_842031
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_842031 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_842031
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_842031 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_842031
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_825196
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_825196 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_825196
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_825196 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_825196 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_825196 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_825196
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_521917
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_521917 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_521917
																			.next();

																	// check object __DEC_messageSend_receiveEvent_521917 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_521917 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_521917 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_521917
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_798288
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_798288 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_798288
																			.next();

																	// check object __DEC_messageReceive_sendEvent_798288 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_798288 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_798288 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_798288
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_757379
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_757379 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_757379
																			.next();

																	// check object __DEC_messageSend_sendEvent_757379 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_757379 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_757379 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_757379
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_221678
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_221678 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_221678
																			.hasNext()) {
																try {
																	__DEC_message_message_221678 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_221678
																			.next();

																	// check object __DEC_message_message_221678 is really bound
																	JavaSDM.ensure(__DEC_message_message_221678 != null);
																	// check isomorphic binding between objects __DEC_message_message_221678 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_221678
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_221678 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_221678
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to combo
														JavaSDM.ensure(combo
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to combo
														JavaSDM.ensure(combo
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_61(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_846560 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_6182 = null;
		Interaction __DEC_messageSend_enclosingInteraction_917681 = null;
		Interaction __DEC_operand_enclosingInteraction_815805 = null;
		InteractionOperand __DEC_combo_fragment_87660 = null;
		InteractionOperand __DEC_messageReceive_fragment_501046 = null;
		InteractionOperand __DEC_messageSend_fragment_600786 = null;
		InteractionOperand __DEC_operand_fragment_113906 = null;
		Constraint __DEC_spec_specification_643175 = null;
		InteractionOperand __DEC_guard_guard_363122 = null;
		CombinedFragment __DEC_operand_operand_744796 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062 = null;
		Message __DEC_messageReceive_receiveEvent_142062 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865 = null;
		Message __DEC_messageSend_receiveEvent_490865 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655 = null;
		Message __DEC_messageReceive_sendEvent_126655 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099 = null;
		Message __DEC_messageSend_sendEvent_596099 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_147719 = null;
		MessageEnd __DEC_message_message_147719 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link receiveEvent from message to messageReceive
													JavaSDM.ensure(messageReceive.equals(message
															.getReceiveEvent()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_846560 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_846560 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_846560 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_846560 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_846560
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_6182 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_6182 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_6182 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_6182 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_6182
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_917681 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_917681 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_917681 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_917681 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_917681
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_815805 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_815805 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_815805 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_815805 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_815805
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_87660 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_87660 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_87660 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_87660 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_87660
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_87660 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_87660
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_501046 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_501046 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_501046 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_501046 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_501046
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_501046 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_501046
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_600786 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_600786 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_600786 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_600786 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_600786
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_600786 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_600786
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_113906 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_113906 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_113906 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_113906 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_113906
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_113906 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_113906
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_643175 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_643175 is really bound
															JavaSDM.ensure(__DEC_spec_specification_643175 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_643175
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_643175 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_643175
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_363122 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_363122 is really bound
															JavaSDM.ensure(__DEC_guard_guard_363122 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_363122
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_363122 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_363122
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_363122 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_363122
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_744796 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_744796 is really bound
															JavaSDM.ensure(__DEC_operand_operand_744796 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_744796
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_744796 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_744796
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_744796 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_744796
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_142062
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_142062 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_142062
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_142062 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_142062 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_142062 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_142062
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_490865
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_490865 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490865
																			.next();

																	// check object __DEC_messageSend_receiveEvent_490865 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_490865 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_490865 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_490865
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_126655
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_126655 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_126655
																			.next();

																	// check object __DEC_messageReceive_sendEvent_126655 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_126655 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_126655 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_126655
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_596099
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_596099 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596099
																			.next();

																	// check object __DEC_messageSend_sendEvent_596099 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_596099 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_596099 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_596099
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_147719
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_147719 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_147719
																			.hasNext()) {
																try {
																	__DEC_message_message_147719 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_147719
																			.next();

																	// check object __DEC_message_message_147719 is really bound
																	JavaSDM.ensure(__DEC_message_message_147719 != null);
																	// check isomorphic binding between objects __DEC_message_message_147719 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_147719
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_147719 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_147719
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_62(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_871918 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_714258 = null;
		Interaction __DEC_messageSend_enclosingInteraction_732649 = null;
		Interaction __DEC_operand_enclosingInteraction_521971 = null;
		InteractionOperand __DEC_combo_fragment_365797 = null;
		InteractionOperand __DEC_messageReceive_fragment_45743 = null;
		InteractionOperand __DEC_messageSend_fragment_19868 = null;
		InteractionOperand __DEC_operand_fragment_777932 = null;
		Constraint __DEC_spec_specification_602757 = null;
		InteractionOperand __DEC_guard_guard_872512 = null;
		CombinedFragment __DEC_operand_operand_431051 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151 = null;
		Message __DEC_messageReceive_receiveEvent_316151 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360 = null;
		Message __DEC_messageSend_receiveEvent_247360 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757 = null;
		Message __DEC_messageReceive_sendEvent_201757 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506 = null;
		Message __DEC_messageSend_sendEvent_950506 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_458904 = null;
		MessageEnd __DEC_message_message_458904 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link receiveEvent from message to messageReceive
													JavaSDM.ensure(messageReceive.equals(message
															.getReceiveEvent()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link src from line to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			line,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_871918 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_871918 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_871918 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_871918 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_871918
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_714258 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_714258 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_714258 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_714258 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_714258
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_732649 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_732649 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_732649 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_732649 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_732649
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_521971 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_521971 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_521971 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_521971 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_521971
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_365797 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_365797 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_365797 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_365797 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_365797
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_365797 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_365797
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_45743 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_45743 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_45743 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_45743 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_45743
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_45743 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_45743
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_19868 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_19868 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_19868 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19868 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19868
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19868 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19868
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_777932 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_777932 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_777932 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_777932 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_777932
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_777932 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_777932
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_602757 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_602757 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_602757 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_602757
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_602757 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_602757
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_872512 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_872512 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_872512 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_872512
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_872512 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_872512
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_872512 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_872512
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_431051 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_431051 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_431051 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_431051
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_431051 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_431051
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_431051 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_431051
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_316151
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_316151 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316151
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_316151 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_316151 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_316151 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_316151
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_247360
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_247360 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_247360
																					.next();

																			// check object __DEC_messageSend_receiveEvent_247360 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_247360 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_247360 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_247360
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_201757
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_201757 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201757
																					.next();

																			// check object __DEC_messageReceive_sendEvent_201757 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_201757 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_201757 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_201757
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_950506
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_950506 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_950506
																					.next();

																			// check object __DEC_messageSend_sendEvent_950506 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_950506 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_950506 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_950506
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_458904
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_458904 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_458904
																					.hasNext()) {
																		try {
																			__DEC_message_message_458904 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_458904
																					.next();

																			// check object __DEC_message_message_458904 is really bound
																			JavaSDM.ensure(__DEC_message_message_458904 != null);
																			// check isomorphic binding between objects __DEC_message_message_458904 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_458904
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_458904 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_458904
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(combo
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from operand to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(combo
																		.equals(operand
																				.eContainer()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from operand to line
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				line));

																// check link covered from parentCombo to line
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				line));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				parentOperand,
																				messageSend,
																				messageReceive,
																				line,
																				combo,
																				parentCombo,
																				operand,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_14(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_845003 = null;
		NormalStep __DEC_alt_stepAlternative_192526 = null;
		Flow __DEC_step_steps_250635 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_295896 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_295896 = null;
		Match match = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_845003 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_845003 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_845003 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_845003.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_845003 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_845003.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_192526 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_192526 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_192526 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_192526
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_192526 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_192526
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_250635 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_250635 is really bound
					JavaSDM.ensure(__DEC_step_steps_250635 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_250635.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_250635 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_250635.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_250635 and flow 
					JavaSDM.ensure(!__DEC_step_steps_250635.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_295896
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_295896 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_295896
									.hasNext()) {
						try {
							__DEC_altFlow_ref_295896 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_295896
									.next();

							// check object __DEC_altFlow_ref_295896 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_295896 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_295896 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_295896
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_15(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_548286 = null;
		NormalStep __DEC_alt_stepAlternative_657593 = null;
		Flow __DEC_step_steps_995711 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_944083 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_944083 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_548286 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_548286 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_548286 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_548286.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_548286 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_548286.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_657593 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_657593 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_657593 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_657593
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_657593 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_657593
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_995711 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_995711 is really bound
					JavaSDM.ensure(__DEC_step_steps_995711 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_995711.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_995711 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_995711.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_995711 and flow 
					JavaSDM.ensure(!__DEC_step_steps_995711.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_944083
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_944083 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_944083
									.hasNext()) {
						try {
							__DEC_altFlow_ref_944083 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_944083
									.next();

							// check object __DEC_altFlow_ref_944083 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_944083 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_944083 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_944083
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_63(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_943806 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_48547 = null;
		Interaction __DEC_messageSend_enclosingInteraction_699819 = null;
		Interaction __DEC_operand_enclosingInteraction_987302 = null;
		InteractionOperand __DEC_combo_fragment_393763 = null;
		InteractionOperand __DEC_messageReceive_fragment_805543 = null;
		InteractionOperand __DEC_messageSend_fragment_710593 = null;
		InteractionOperand __DEC_operand_fragment_914977 = null;
		Constraint __DEC_spec_specification_290161 = null;
		InteractionOperand __DEC_guard_guard_968325 = null;
		CombinedFragment __DEC_operand_operand_196439 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623 = null;
		Message __DEC_messageReceive_receiveEvent_8623 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274 = null;
		Message __DEC_messageSend_receiveEvent_355274 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093 = null;
		Message __DEC_messageReceive_sendEvent_472093 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164 = null;
		Message __DEC_messageSend_sendEvent_147164 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_202948 = null;
		MessageEnd __DEC_message_message_202948 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_943806 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_943806 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_943806 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_943806 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_943806
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_48547 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_48547 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_48547 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_48547 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_48547
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_699819 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_699819 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_699819 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_699819 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_699819
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_987302 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_987302 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_987302 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_987302 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_987302
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_393763 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_393763 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_393763 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_393763 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_393763
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_393763 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_393763
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_805543 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_805543 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_805543 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_805543 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_805543
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_805543 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_805543
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_710593 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_710593 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_710593 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_710593 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_710593
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_710593 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_710593
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_914977 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_914977 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_914977 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_914977 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_914977
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_914977 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_914977
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_290161 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_290161 is really bound
											JavaSDM.ensure(__DEC_spec_specification_290161 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_290161
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_290161 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_290161
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_968325 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_968325 is really bound
											JavaSDM.ensure(__DEC_guard_guard_968325 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_968325
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_968325 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_968325
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_968325 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_968325
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_196439 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_196439 is really bound
											JavaSDM.ensure(__DEC_operand_operand_196439 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_196439
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_196439 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_196439
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_196439 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_196439
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_8623
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_8623 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_8623
															.next();

													// check object __DEC_messageReceive_receiveEvent_8623 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_8623 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_8623 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_8623
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_355274
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_355274 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_355274
															.next();

													// check object __DEC_messageSend_receiveEvent_355274 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_355274 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_355274 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_355274
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_472093
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_472093 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_472093
															.next();

													// check object __DEC_messageReceive_sendEvent_472093 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_472093 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_472093 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_472093
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_147164
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_147164 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147164
															.next();

													// check object __DEC_messageSend_sendEvent_147164 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_147164 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_147164 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_147164
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_202948
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_202948 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_202948
															.hasNext()) {
												try {
													__DEC_message_message_202948 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_202948
															.next();

													// check object __DEC_message_message_202948 is really bound
													JavaSDM.ensure(__DEC_message_message_202948 != null);
													// check isomorphic binding between objects __DEC_message_message_202948 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_202948
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_202948 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_202948
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_operand is really bound
										JavaSDM.ensure(_edge_operand != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_operand to combo
										JavaSDM.ensure(combo
												.equals(_edge_operand.getSrc()));

										// check link trg from _edge_operand to operand
										JavaSDM.ensure(operand
												.equals(_edge_operand.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_64(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_294113 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_71107 = null;
		Interaction __DEC_messageSend_enclosingInteraction_720938 = null;
		Interaction __DEC_operand_enclosingInteraction_304033 = null;
		InteractionOperand __DEC_combo_fragment_580749 = null;
		InteractionOperand __DEC_messageReceive_fragment_612158 = null;
		InteractionOperand __DEC_messageSend_fragment_764668 = null;
		InteractionOperand __DEC_operand_fragment_264218 = null;
		Constraint __DEC_spec_specification_857273 = null;
		InteractionOperand __DEC_guard_guard_672673 = null;
		CombinedFragment __DEC_operand_operand_880175 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264 = null;
		Message __DEC_messageReceive_receiveEvent_991264 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617 = null;
		Message __DEC_messageSend_receiveEvent_312617 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444 = null;
		Message __DEC_messageReceive_sendEvent_311444 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388 = null;
		Message __DEC_messageSend_sendEvent_182388 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_478056 = null;
		MessageEnd __DEC_message_message_478056 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_294113 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_294113 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_294113 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_294113 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_294113
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_71107 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_71107 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_71107 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_71107 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_71107
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_720938 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_720938 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_720938 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_720938 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_720938
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_304033 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_304033 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_304033 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_304033 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_304033
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_580749 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_580749 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_580749 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_580749 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_580749
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_580749 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_580749
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_612158 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_612158 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_612158 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_612158 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_612158
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_612158 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_612158
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_764668 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_764668 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_764668 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_764668 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_764668
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_764668 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_764668
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_264218 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_264218 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_264218 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_264218 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_264218
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_264218 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_264218
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_857273 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_857273 is really bound
													JavaSDM.ensure(__DEC_spec_specification_857273 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_857273
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_857273 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_857273
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_672673 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_672673 is really bound
													JavaSDM.ensure(__DEC_guard_guard_672673 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_672673
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_672673 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_672673
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_672673 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_672673
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_880175 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_880175 is really bound
													JavaSDM.ensure(__DEC_operand_operand_880175 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_880175
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_880175 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_880175
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_880175 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_880175
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_991264
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_991264 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_991264
																	.next();

															// check object __DEC_messageReceive_receiveEvent_991264 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_991264 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_991264 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_991264
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_312617
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_312617 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312617
																	.next();

															// check object __DEC_messageSend_receiveEvent_312617 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_312617 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_312617 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_312617
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_311444
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_311444 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_311444
																	.next();

															// check object __DEC_messageReceive_sendEvent_311444 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_311444 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_311444 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_311444
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_182388
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_182388 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_182388
																	.next();

															// check object __DEC_messageSend_sendEvent_182388 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_182388 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_182388 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_182388
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_478056
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_478056 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_478056
																	.hasNext()) {
														try {
															__DEC_message_message_478056 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_478056
																	.next();

															// check object __DEC_message_message_478056 is really bound
															JavaSDM.ensure(__DEC_message_message_478056 != null);
															// check isomorphic binding between objects __DEC_message_message_478056 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_478056
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_478056 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_478056
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to operand
												JavaSDM.ensure(operand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_65(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_320702 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_256262 = null;
		Interaction __DEC_messageSend_enclosingInteraction_373635 = null;
		Interaction __DEC_operand_enclosingInteraction_506957 = null;
		InteractionOperand __DEC_combo_fragment_362866 = null;
		InteractionOperand __DEC_messageReceive_fragment_741371 = null;
		InteractionOperand __DEC_messageSend_fragment_631172 = null;
		InteractionOperand __DEC_operand_fragment_157361 = null;
		Constraint __DEC_spec_specification_858594 = null;
		InteractionOperand __DEC_guard_guard_842329 = null;
		CombinedFragment __DEC_operand_operand_400815 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868 = null;
		Message __DEC_messageReceive_receiveEvent_77868 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085 = null;
		Message __DEC_messageSend_receiveEvent_366085 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669 = null;
		Message __DEC_messageReceive_sendEvent_224669 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563 = null;
		Message __DEC_messageSend_sendEvent_391563 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_690387 = null;
		MessageEnd __DEC_message_message_690387 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from line to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	line,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to operand
													JavaSDM.ensure(operand
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_320702 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_320702 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_320702 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_320702 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_320702
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_256262 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_256262 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_256262 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_256262 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_256262
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_373635 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_373635 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_373635 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_373635 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_373635
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_506957 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_506957 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_506957 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_506957 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_506957
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_362866 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_362866 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_362866 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_362866 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_362866
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_362866 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_362866
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_741371 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_741371 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_741371 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_741371 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_741371
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_741371 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_741371
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_631172 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_631172 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_631172 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_631172 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_631172
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_631172 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_631172
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_157361 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_157361 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_157361 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_157361 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_157361
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_157361 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_157361
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_858594 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_858594 is really bound
															JavaSDM.ensure(__DEC_spec_specification_858594 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_858594
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_858594 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_858594
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_842329 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_842329 is really bound
															JavaSDM.ensure(__DEC_guard_guard_842329 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_842329
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_842329 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_842329
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_842329 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_842329
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_400815 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_400815 is really bound
															JavaSDM.ensure(__DEC_operand_operand_400815 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_400815
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_400815 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_400815
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_400815 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_400815
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_77868
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_77868 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_77868
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_77868 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_77868 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_77868 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_77868
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_366085
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_366085 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_366085
																			.next();

																	// check object __DEC_messageSend_receiveEvent_366085 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_366085 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_366085 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_366085
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_224669
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_224669 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_224669
																			.next();

																	// check object __DEC_messageReceive_sendEvent_224669 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_224669 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_224669 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_224669
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_391563
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_391563 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_391563
																			.next();

																	// check object __DEC_messageSend_sendEvent_391563 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_391563 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_391563 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_391563
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_690387
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_690387 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_690387
																			.hasNext()) {
																try {
																	__DEC_message_message_690387 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_690387
																			.next();

																	// check object __DEC_message_message_690387 is really bound
																	JavaSDM.ensure(__DEC_message_message_690387 != null);
																	// check isomorphic binding between objects __DEC_message_message_690387 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_690387
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_690387 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_690387
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to operand
														JavaSDM.ensure(operand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_66(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_470942 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_29498 = null;
		Interaction __DEC_messageSend_enclosingInteraction_721367 = null;
		Interaction __DEC_operand_enclosingInteraction_668610 = null;
		InteractionOperand __DEC_combo_fragment_460491 = null;
		InteractionOperand __DEC_messageReceive_fragment_620992 = null;
		InteractionOperand __DEC_messageSend_fragment_581384 = null;
		InteractionOperand __DEC_operand_fragment_526974 = null;
		Constraint __DEC_spec_specification_417662 = null;
		InteractionOperand __DEC_guard_guard_156145 = null;
		CombinedFragment __DEC_operand_operand_276155 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715 = null;
		Message __DEC_messageReceive_receiveEvent_267715 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268 = null;
		Message __DEC_messageSend_receiveEvent_48268 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360 = null;
		Message __DEC_messageReceive_sendEvent_767360 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153 = null;
		Message __DEC_messageSend_sendEvent_730153 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_589767 = null;
		MessageEnd __DEC_message_message_589767 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from line to parentOperand
					JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_470942 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_470942 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_470942 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_470942 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_470942
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_29498 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_29498 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_29498 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_29498 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_29498
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_721367 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_721367 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_721367 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_721367 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_721367
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_668610 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_668610 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_668610 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_668610 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_668610
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_460491 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_460491 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_460491 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_460491 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_460491
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_460491 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_460491
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_620992 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_620992 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_620992 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_620992 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_620992
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_620992 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_620992
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_581384 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_581384 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_581384 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_581384 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_581384
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_581384 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_581384
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_526974 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_526974 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_526974 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_526974 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_526974
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_526974 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_526974
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_417662 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_417662 is really bound
											JavaSDM.ensure(__DEC_spec_specification_417662 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_417662
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_417662 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_417662
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_156145 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_156145 is really bound
											JavaSDM.ensure(__DEC_guard_guard_156145 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_156145
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_156145 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_156145
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_156145 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_156145
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_276155 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_276155 is really bound
											JavaSDM.ensure(__DEC_operand_operand_276155 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_276155
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_276155 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_276155
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_276155 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_276155
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_267715
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_267715 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_267715
															.next();

													// check object __DEC_messageReceive_receiveEvent_267715 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_267715 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_267715 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_267715
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_48268
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_48268 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_48268
															.next();

													// check object __DEC_messageSend_receiveEvent_48268 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_48268 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_48268 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_48268
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_767360
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_767360 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_767360
															.next();

													// check object __DEC_messageReceive_sendEvent_767360 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_767360 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_767360 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_767360
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_730153
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_730153 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_730153
															.next();

													// check object __DEC_messageSend_sendEvent_730153 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_730153 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_730153 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_730153
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_589767
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_589767 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_589767
															.hasNext()) {
												try {
													__DEC_message_message_589767 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_589767
															.next();

													// check object __DEC_message_message_589767 is really bound
													JavaSDM.ensure(__DEC_message_message_589767 != null);
													// check isomorphic binding between objects __DEC_message_message_589767 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_589767
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_589767 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_589767
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_guard is really bound
										JavaSDM.ensure(_edge_guard != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_guard to operand
										JavaSDM.ensure(operand
												.equals(_edge_guard.getSrc()));

										// check link trg from _edge_guard to guard
										JavaSDM.ensure(guard.equals(_edge_guard
												.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_67(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_643469 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_97927 = null;
		Interaction __DEC_messageSend_enclosingInteraction_712857 = null;
		Interaction __DEC_operand_enclosingInteraction_229409 = null;
		InteractionOperand __DEC_combo_fragment_844242 = null;
		InteractionOperand __DEC_messageReceive_fragment_81837 = null;
		InteractionOperand __DEC_messageSend_fragment_757877 = null;
		InteractionOperand __DEC_operand_fragment_36377 = null;
		Constraint __DEC_spec_specification_241409 = null;
		InteractionOperand __DEC_guard_guard_226656 = null;
		CombinedFragment __DEC_operand_operand_102513 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438 = null;
		Message __DEC_messageReceive_receiveEvent_718438 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321 = null;
		Message __DEC_messageSend_receiveEvent_624321 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157 = null;
		Message __DEC_messageReceive_sendEvent_377157 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717 = null;
		Message __DEC_messageSend_sendEvent_598717 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_902233 = null;
		MessageEnd __DEC_message_message_902233 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link fragment from parentOperand to messageSend
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageSend = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_643469 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_643469 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_643469 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_643469 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_643469
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_97927 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_97927 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_97927 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_97927 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_97927
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_712857 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_712857 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_712857 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_712857 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_712857
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_229409 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_229409 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_229409 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_229409 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_229409
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_844242 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_844242 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_844242 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_844242 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_844242
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_844242 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_844242
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_81837 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_81837 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_81837 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_81837 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_81837
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_81837 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_81837
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_757877 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_757877 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_757877 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_757877 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_757877
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_757877 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_757877
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_36377 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_36377 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_36377 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_36377 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_36377
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_36377 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_36377
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_241409 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_241409 is really bound
											JavaSDM.ensure(__DEC_spec_specification_241409 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_241409
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_241409 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_241409
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_226656 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_226656 is really bound
											JavaSDM.ensure(__DEC_guard_guard_226656 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_226656
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_226656 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_226656
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_226656 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_226656
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_102513 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_102513 is really bound
											JavaSDM.ensure(__DEC_operand_operand_102513 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_102513
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_102513 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_102513
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_102513 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_102513
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_718438
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_718438 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_718438
															.next();

													// check object __DEC_messageReceive_receiveEvent_718438 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_718438 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_718438 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_718438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_624321
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_624321 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_624321
															.next();

													// check object __DEC_messageSend_receiveEvent_624321 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_624321 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_624321 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_624321
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_377157
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_377157 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_377157
															.next();

													// check object __DEC_messageReceive_sendEvent_377157 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_377157 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_377157 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_377157
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_598717
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_598717 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_598717
															.next();

													// check object __DEC_messageSend_sendEvent_598717 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_598717 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_598717 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_598717
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_902233
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_902233 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_902233
															.hasNext()) {
												try {
													__DEC_message_message_902233 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_902233
															.next();

													// check object __DEC_message_message_902233 is really bound
													JavaSDM.ensure(__DEC_message_message_902233 != null);
													// check isomorphic binding between objects __DEC_message_message_902233 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_902233
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_902233 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_902233
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_specification is really bound
										JavaSDM.ensure(_edge_specification != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_specification to guard
										JavaSDM.ensure(guard
												.equals(_edge_specification
														.getSrc()));

										// check link trg from _edge_specification to spec
										JavaSDM.ensure(spec
												.equals(_edge_specification
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_16(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_100631 = null;
		NormalStep __DEC_alt_stepAlternative_174993 = null;
		Flow __DEC_step_steps_173615 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_159834 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_159834 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_100631 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_100631 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_100631 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_100631
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_100631 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_100631
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_174993 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_174993 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_174993 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_174993
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_174993 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_174993
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_173615 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_173615 is really bound
							JavaSDM.ensure(__DEC_step_steps_173615 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_173615.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_173615 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_173615
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_173615 and flow 
							JavaSDM.ensure(!__DEC_step_steps_173615
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_159834
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_159834 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_159834
											.hasNext()) {
								try {
									__DEC_altFlow_ref_159834 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_159834
											.next();

									// check object __DEC_altFlow_ref_159834 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_159834 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_159834 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_159834
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_17(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_420627 = null;
		NormalStep __DEC_alt_stepAlternative_311545 = null;
		Flow __DEC_step_steps_528507 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_901277 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_901277 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_420627 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_420627 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_420627 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_420627
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_420627 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_420627
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_311545 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_311545 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_311545 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_311545
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_311545 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_311545
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_528507 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_528507 is really bound
							JavaSDM.ensure(__DEC_step_steps_528507 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_528507.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_528507 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_528507
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_528507 and flow 
							JavaSDM.ensure(!__DEC_step_steps_528507
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_901277
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_901277 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_901277
											.hasNext()) {
								try {
									__DEC_altFlow_ref_901277 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_901277
											.next();

									// check object __DEC_altFlow_ref_901277 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_901277 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_901277 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_901277
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_68(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_421506 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_491080 = null;
		Interaction __DEC_messageSend_enclosingInteraction_880697 = null;
		Interaction __DEC_operand_enclosingInteraction_756566 = null;
		InteractionOperand __DEC_combo_fragment_348128 = null;
		InteractionOperand __DEC_messageReceive_fragment_619463 = null;
		InteractionOperand __DEC_messageSend_fragment_480939 = null;
		InteractionOperand __DEC_operand_fragment_866119 = null;
		Constraint __DEC_spec_specification_436360 = null;
		InteractionOperand __DEC_guard_guard_565507 = null;
		CombinedFragment __DEC_operand_operand_929037 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505 = null;
		Message __DEC_messageReceive_receiveEvent_90505 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442 = null;
		Message __DEC_messageSend_receiveEvent_817442 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371 = null;
		Message __DEC_messageReceive_sendEvent_990371 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236 = null;
		Message __DEC_messageSend_sendEvent_606236 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_948299 = null;
		MessageEnd __DEC_message_message_948299 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_421506 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_421506 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_421506 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_421506 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_421506
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_491080 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_491080 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_491080 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_491080 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_491080
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_880697 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_880697 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_880697 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_880697 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_880697
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_756566 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_756566 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_756566 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_756566 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_756566
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_348128 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_348128 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_348128 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_348128 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_348128
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_348128 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_348128
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_619463 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_619463 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_619463 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_619463 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_619463
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_619463 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_619463
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_480939 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_480939 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_480939 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_480939 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_480939
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_480939 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_480939
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_866119 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_866119 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_866119 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_866119 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_866119
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_866119 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_866119
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_436360 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_436360 is really bound
													JavaSDM.ensure(__DEC_spec_specification_436360 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_436360
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_436360 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_436360
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_565507 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_565507 is really bound
													JavaSDM.ensure(__DEC_guard_guard_565507 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_565507
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_565507 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_565507
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_565507 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_565507
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_929037 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_929037 is really bound
													JavaSDM.ensure(__DEC_operand_operand_929037 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_929037
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_929037 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_929037
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_929037 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_929037
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_90505
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_90505 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_90505
																	.next();

															// check object __DEC_messageReceive_receiveEvent_90505 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_90505 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_90505 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_90505
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_817442
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_817442 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_817442
																	.next();

															// check object __DEC_messageSend_receiveEvent_817442 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_817442 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_817442 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_817442
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_990371
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_990371 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_990371
																	.next();

															// check object __DEC_messageReceive_sendEvent_990371 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_990371 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_990371 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_990371
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_606236
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_606236 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_606236
																	.next();

															// check object __DEC_messageSend_sendEvent_606236 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_606236 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_606236 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_606236
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_948299
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_948299 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_948299
																	.hasNext()) {
														try {
															__DEC_message_message_948299 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_948299
																	.next();

															// check object __DEC_message_message_948299 is really bound
															JavaSDM.ensure(__DEC_message_message_948299 != null);
															// check isomorphic binding between objects __DEC_message_message_948299 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_948299
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_948299 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_948299
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_sendEvent is really bound
												JavaSDM.ensure(_edge_sendEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_sendEvent to message
												JavaSDM.ensure(message
														.equals(_edge_sendEvent
																.getSrc()));

												// check link trg from _edge_sendEvent to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_sendEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_69(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_774020 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_902844 = null;
		Interaction __DEC_messageSend_enclosingInteraction_565981 = null;
		Interaction __DEC_operand_enclosingInteraction_13934 = null;
		InteractionOperand __DEC_combo_fragment_484641 = null;
		InteractionOperand __DEC_messageReceive_fragment_117686 = null;
		InteractionOperand __DEC_messageSend_fragment_985509 = null;
		InteractionOperand __DEC_operand_fragment_907681 = null;
		Constraint __DEC_spec_specification_582647 = null;
		InteractionOperand __DEC_guard_guard_323705 = null;
		CombinedFragment __DEC_operand_operand_450989 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027 = null;
		Message __DEC_messageReceive_receiveEvent_136027 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709 = null;
		Message __DEC_messageSend_receiveEvent_244709 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874 = null;
		Message __DEC_messageReceive_sendEvent_373874 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543 = null;
		Message __DEC_messageSend_sendEvent_222543 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_788665 = null;
		MessageEnd __DEC_message_message_788665 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_774020 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_774020 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_774020 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_774020 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_774020
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_902844 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_902844 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_902844 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_902844 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_902844
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_565981 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_565981 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_565981 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_565981 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_565981
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_13934 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_13934 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_13934 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_13934 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_13934
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_484641 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_484641 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_484641 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_484641 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_484641
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_484641 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_484641
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_117686 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_117686 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_117686 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_117686 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_117686
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_117686 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_117686
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_985509 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_985509 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_985509 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_985509 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_985509
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_985509 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_985509
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_907681 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_907681 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_907681 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_907681 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_907681
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_907681 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_907681
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_582647 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_582647 is really bound
													JavaSDM.ensure(__DEC_spec_specification_582647 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_582647
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_582647 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_582647
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_323705 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_323705 is really bound
													JavaSDM.ensure(__DEC_guard_guard_323705 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_323705
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_323705 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_323705
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_323705 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_323705
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_450989 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_450989 is really bound
													JavaSDM.ensure(__DEC_operand_operand_450989 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_450989
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_450989 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_450989
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_450989 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_450989
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_136027
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_136027 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_136027
																	.next();

															// check object __DEC_messageReceive_receiveEvent_136027 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_136027 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_136027 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_136027
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_244709
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_244709 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_244709
																	.next();

															// check object __DEC_messageSend_receiveEvent_244709 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_244709 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_244709 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_244709
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_373874
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_373874 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_373874
																	.next();

															// check object __DEC_messageReceive_sendEvent_373874 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_373874 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_373874 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_373874
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_222543
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_222543 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_222543
																	.next();

															// check object __DEC_messageSend_sendEvent_222543 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_222543 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_222543 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_222543
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_788665
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_788665 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_788665
																	.hasNext()) {
														try {
															__DEC_message_message_788665 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_788665
																	.next();

															// check object __DEC_message_message_788665 is really bound
															JavaSDM.ensure(__DEC_message_message_788665 != null);
															// check isomorphic binding between objects __DEC_message_message_788665 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_788665
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_788665 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_788665
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_receiveEvent is really bound
												JavaSDM.ensure(_edge_receiveEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_receiveEvent to message
												JavaSDM.ensure(message
														.equals(_edge_receiveEvent
																.getSrc()));

												// check link trg from _edge_receiveEvent to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_receiveEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_70(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_311568 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_727797 = null;
		Interaction __DEC_messageSend_enclosingInteraction_743353 = null;
		Interaction __DEC_operand_enclosingInteraction_548522 = null;
		InteractionOperand __DEC_combo_fragment_358334 = null;
		InteractionOperand __DEC_messageReceive_fragment_212530 = null;
		InteractionOperand __DEC_messageSend_fragment_446525 = null;
		InteractionOperand __DEC_operand_fragment_444556 = null;
		Constraint __DEC_spec_specification_193221 = null;
		InteractionOperand __DEC_guard_guard_381981 = null;
		CombinedFragment __DEC_operand_operand_654471 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364 = null;
		Message __DEC_messageReceive_receiveEvent_625364 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793 = null;
		Message __DEC_messageSend_receiveEvent_145793 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590 = null;
		Message __DEC_messageReceive_sendEvent_298590 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261 = null;
		Message __DEC_messageSend_sendEvent_372261 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_967952 = null;
		MessageEnd __DEC_message_message_967952 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_311568 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_311568 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_311568 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_311568 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_311568
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_727797 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_727797 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_727797 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_727797 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_727797
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_743353 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_743353 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_743353 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_743353 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_743353
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_548522 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_548522 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_548522 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_548522 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_548522
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_358334 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_358334 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_358334 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_358334 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_358334
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_358334 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_358334
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_212530 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_212530 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_212530 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_212530 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_212530
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_212530 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_212530
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_446525 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_446525 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_446525 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_446525 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_446525
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_446525 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_446525
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_444556 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_444556 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_444556 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_444556 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_444556
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_444556 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_444556
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_193221 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_193221 is really bound
											JavaSDM.ensure(__DEC_spec_specification_193221 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_193221
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_193221 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_193221
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_381981 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_381981 is really bound
											JavaSDM.ensure(__DEC_guard_guard_381981 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_381981
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_381981 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_381981
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_381981 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_381981
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_654471 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_654471 is really bound
											JavaSDM.ensure(__DEC_operand_operand_654471 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_654471
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_654471 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_654471
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_654471 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_654471
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_625364
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_625364 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_625364
															.next();

													// check object __DEC_messageReceive_receiveEvent_625364 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_625364 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_625364 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_625364
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_145793
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_145793 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_145793
															.next();

													// check object __DEC_messageSend_receiveEvent_145793 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_145793 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_145793 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_145793
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_298590
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_298590 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_298590
															.next();

													// check object __DEC_messageReceive_sendEvent_298590 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_298590 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_298590 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_298590
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_372261
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_372261 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_372261
															.next();

													// check object __DEC_messageSend_sendEvent_372261 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_372261 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_372261 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_372261
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_967952
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_967952 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_967952
															.hasNext()) {
												try {
													__DEC_message_message_967952 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_967952
															.next();

													// check object __DEC_message_message_967952 is really bound
													JavaSDM.ensure(__DEC_message_message_967952 != null);
													// check isomorphic binding between objects __DEC_message_message_967952 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_967952
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_967952 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_967952
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_interaction is really bound
										JavaSDM.ensure(_edge_interaction != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_interaction to message
										JavaSDM.ensure(message
												.equals(_edge_interaction
														.getSrc()));

										// check link trg from _edge_interaction to interaction
										JavaSDM.ensure(interaction
												.equals(_edge_interaction
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_71(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_943706 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_299076 = null;
		Interaction __DEC_messageSend_enclosingInteraction_474961 = null;
		Interaction __DEC_operand_enclosingInteraction_44766 = null;
		InteractionOperand __DEC_combo_fragment_651815 = null;
		InteractionOperand __DEC_messageReceive_fragment_322200 = null;
		InteractionOperand __DEC_messageSend_fragment_248625 = null;
		InteractionOperand __DEC_operand_fragment_563836 = null;
		Constraint __DEC_spec_specification_753545 = null;
		InteractionOperand __DEC_guard_guard_156502 = null;
		CombinedFragment __DEC_operand_operand_107924 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447 = null;
		Message __DEC_messageReceive_receiveEvent_835447 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084 = null;
		Message __DEC_messageSend_receiveEvent_991084 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467 = null;
		Message __DEC_messageReceive_sendEvent_335467 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645 = null;
		Message __DEC_messageSend_sendEvent_10645 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_298331 = null;
		MessageEnd __DEC_message_message_298331 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link src from message to _edge_interaction
									fujaba__Success = false;

									fujaba__IterMessageTo_edge_interaction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterMessageTo_edge_interaction
											.hasNext()) {
										try {
											_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
													.next();

											// check object _edge_interaction is really bound
											JavaSDM.ensure(_edge_interaction != null);
											// check isomorphic binding between objects _edge_message and _edge_interaction 
											JavaSDM.ensure(!_edge_message
													.equals(_edge_interaction));

											// check link trg from _edge_interaction to interaction
											JavaSDM.ensure(interaction
													.equals(_edge_interaction
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_943706 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_943706 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_943706 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_943706 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_943706
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_299076 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_299076 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_299076 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_299076 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_299076
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_474961 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_474961 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_474961 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_474961 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_474961
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_44766 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_44766 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_44766 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_44766 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_44766
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_651815 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_651815 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_651815 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_651815 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_651815
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_651815 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_651815
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_322200 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_322200 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_322200 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_322200 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_322200
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_322200 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_322200
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_248625 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_248625 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_248625 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_248625 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_248625
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_248625 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_248625
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_563836 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_563836 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_563836 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_563836 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_563836
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_563836 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_563836
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_753545 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_753545 is really bound
													JavaSDM.ensure(__DEC_spec_specification_753545 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_753545
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_753545 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_753545
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_156502 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_156502 is really bound
													JavaSDM.ensure(__DEC_guard_guard_156502 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_156502
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_156502 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_156502
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_156502 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_156502
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_107924 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_107924 is really bound
													JavaSDM.ensure(__DEC_operand_operand_107924 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_107924
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_107924 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_107924
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_107924 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_107924
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_835447
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_835447 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_835447
																	.next();

															// check object __DEC_messageReceive_receiveEvent_835447 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_835447 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_835447 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_835447
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_991084
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_991084 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_991084
																	.next();

															// check object __DEC_messageSend_receiveEvent_991084 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_991084 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_991084 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_991084
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_335467
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_335467 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_335467
																	.next();

															// check object __DEC_messageReceive_sendEvent_335467 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_335467 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_335467 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_335467
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_10645
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_10645 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_10645
																	.next();

															// check object __DEC_messageSend_sendEvent_10645 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_10645 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_10645 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_10645
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_298331
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_298331 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_298331
																	.hasNext()) {
														try {
															__DEC_message_message_298331 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_298331
																	.next();

															// check object __DEC_message_message_298331 is really bound
															JavaSDM.ensure(__DEC_message_message_298331 != null);
															// check isomorphic binding between objects __DEC_message_message_298331 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_298331
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_298331 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_298331
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_message and _edge_interaction 
												JavaSDM.ensure(!_edge_message
														.equals(_edge_interaction));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link src from _edge_message to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_72(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_525670 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_408334 = null;
		Interaction __DEC_messageSend_enclosingInteraction_108068 = null;
		Interaction __DEC_operand_enclosingInteraction_381018 = null;
		InteractionOperand __DEC_combo_fragment_879051 = null;
		InteractionOperand __DEC_messageReceive_fragment_667085 = null;
		InteractionOperand __DEC_messageSend_fragment_279604 = null;
		InteractionOperand __DEC_operand_fragment_438848 = null;
		Constraint __DEC_spec_specification_655264 = null;
		InteractionOperand __DEC_guard_guard_298594 = null;
		CombinedFragment __DEC_operand_operand_62157 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328 = null;
		Message __DEC_messageReceive_receiveEvent_652328 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711 = null;
		Message __DEC_messageSend_receiveEvent_679711 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935 = null;
		Message __DEC_messageReceive_sendEvent_955935 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156 = null;
		Message __DEC_messageSend_sendEvent_129156 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_649186 = null;
		MessageEnd __DEC_message_message_649186 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_525670 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_525670 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_525670 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_525670 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_525670
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_408334 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_408334 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_408334 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_408334 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_408334
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_108068 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_108068 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_108068 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_108068 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_108068
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_381018 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_381018 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_381018 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_381018 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_381018
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_879051 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_879051 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_879051 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_879051 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_879051
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_879051 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_879051
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_667085 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_667085 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_667085 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_667085 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_667085
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_667085 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_667085
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_279604 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_279604 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_279604 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_279604 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_279604
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_279604 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_279604
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_438848 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_438848 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_438848 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_438848 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_438848
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_438848 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_438848
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_655264 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_655264 is really bound
													JavaSDM.ensure(__DEC_spec_specification_655264 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_655264
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_655264 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_655264
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_298594 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_298594 is really bound
													JavaSDM.ensure(__DEC_guard_guard_298594 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_298594
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_298594 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_298594
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_298594 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_298594
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_62157 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_62157 is really bound
													JavaSDM.ensure(__DEC_operand_operand_62157 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_62157
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_62157 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_62157
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_62157 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_62157
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_652328
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_652328 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_652328
																	.next();

															// check object __DEC_messageReceive_receiveEvent_652328 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_652328 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_652328 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_652328
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_679711
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_679711 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_679711
																	.next();

															// check object __DEC_messageSend_receiveEvent_679711 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_679711 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_679711 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_679711
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_955935
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_955935 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955935
																	.next();

															// check object __DEC_messageReceive_sendEvent_955935 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_955935 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_955935 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_955935
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_129156
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_129156 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_129156
																	.next();

															// check object __DEC_messageSend_sendEvent_129156 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_129156 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_129156 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_129156
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_649186
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_649186 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_649186
																	.hasNext()) {
														try {
															__DEC_message_message_649186 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_649186
																	.next();

															// check object __DEC_message_message_649186 is really bound
															JavaSDM.ensure(__DEC_message_message_649186 != null);
															// check isomorphic binding between objects __DEC_message_message_649186 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_649186
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_649186 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_649186
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_73(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_60356 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_340674 = null;
		Interaction __DEC_messageSend_enclosingInteraction_764847 = null;
		Interaction __DEC_operand_enclosingInteraction_75383 = null;
		InteractionOperand __DEC_combo_fragment_183822 = null;
		InteractionOperand __DEC_messageReceive_fragment_820173 = null;
		InteractionOperand __DEC_messageSend_fragment_833842 = null;
		InteractionOperand __DEC_operand_fragment_895687 = null;
		Constraint __DEC_spec_specification_217739 = null;
		InteractionOperand __DEC_guard_guard_439988 = null;
		CombinedFragment __DEC_operand_operand_93217 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405 = null;
		Message __DEC_messageReceive_receiveEvent_758405 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323 = null;
		Message __DEC_messageSend_receiveEvent_498323 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332 = null;
		Message __DEC_messageReceive_sendEvent_122332 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838 = null;
		Message __DEC_messageSend_sendEvent_596838 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_752705 = null;
		MessageEnd __DEC_message_message_752705 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_60356 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_60356 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_60356 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_60356 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_60356
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_340674 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_340674 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_340674 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_340674 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_340674
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_764847 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_764847 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_764847 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_764847 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_764847
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_75383 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_75383 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_75383 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_75383 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_75383
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_183822 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_183822 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_183822 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_183822 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_183822
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_183822 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_183822
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_820173 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_820173 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_820173 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_820173 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_820173
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_820173 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_820173
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_833842 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_833842 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_833842 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_833842 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_833842
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_833842 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_833842
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_895687 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_895687 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_895687 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_895687 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_895687
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_895687 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_895687
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_217739 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_217739 is really bound
													JavaSDM.ensure(__DEC_spec_specification_217739 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_217739
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_217739 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_217739
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_439988 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_439988 is really bound
													JavaSDM.ensure(__DEC_guard_guard_439988 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_439988
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_439988 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_439988
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_439988 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_439988
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_93217 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_93217 is really bound
													JavaSDM.ensure(__DEC_operand_operand_93217 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_93217
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_93217 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_93217
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_93217 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_93217
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_758405
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_758405 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_758405
																	.next();

															// check object __DEC_messageReceive_receiveEvent_758405 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_758405 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_758405 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_758405
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_498323
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_498323 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_498323
																	.next();

															// check object __DEC_messageSend_receiveEvent_498323 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_498323 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_498323 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_498323
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_122332
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_122332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_122332
																	.next();

															// check object __DEC_messageReceive_sendEvent_122332 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_122332 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_122332 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_122332
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_596838
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_596838 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_596838
																	.next();

															// check object __DEC_messageSend_sendEvent_596838 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_596838 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_596838 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_596838
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_752705
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_752705 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_752705
																	.hasNext()) {
														try {
															__DEC_message_message_752705 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_752705
																	.next();

															// check object __DEC_message_message_752705 is really bound
															JavaSDM.ensure(__DEC_message_message_752705 != null);
															// check isomorphic binding between objects __DEC_message_message_752705 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_752705
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_752705 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_752705
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, step, alt,
					altFlow, useCase, flow, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, step, alt, altFlow, useCase,
					flow, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NormalStep step, AlternativeFlowAlternative alt, Lifeline line,
			AlternativeFlow altFlow, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __combo_covered_line = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, combo, line,
					operand, guard, spec, message, interaction, messageSend,
					messageReceive));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_line
				__combo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_combo
				__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_combo
				__line_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_line
				__combo_covered_line.setName("covered");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				__combo_covered_line.setSrc(combo);

				// create link
				__line_coveredBy_combo.setTrg(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_combo.setSrc(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__combo_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, combo, line, operand, guard,
					spec, message, interaction, messageSend, messageReceive);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		match.registerObject("combo", combo);
		match.registerObject("line", line);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Actor actor,
			ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_10(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_926 = null;
		NormalStep __DEC_alt_stepAlternative_335018 = null;
		Flow __DEC_step_steps_453232 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_778368 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_778368 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_926 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_926 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_926 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_926.getFlows().contains(
							altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_926 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_926.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_335018 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_335018 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_335018 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_335018
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_335018 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_335018
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_453232 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_453232 is really bound
					JavaSDM.ensure(__DEC_step_steps_453232 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_453232.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_453232 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_453232.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_453232 and flow 
					JavaSDM.ensure(!__DEC_step_steps_453232.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_778368
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_778368 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_778368
									.hasNext()) {
						try {
							__DEC_altFlow_ref_778368 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_778368
									.next();

							// check object __DEC_altFlow_ref_778368 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_778368 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_778368 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_778368
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_11(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_699242 = null;
		NormalStep __DEC_alt_stepAlternative_438179 = null;
		Flow __DEC_step_steps_894541 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_7111 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_7111 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_ref to altFlow
			JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_699242 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_699242 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_699242 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_699242.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_699242 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_699242.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_438179 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_438179 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_438179 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_438179
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_438179 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_438179
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_894541 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_894541 is really bound
					JavaSDM.ensure(__DEC_step_steps_894541 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_894541.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_894541 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_894541.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_894541 and flow 
					JavaSDM.ensure(!__DEC_step_steps_894541.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_7111
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_7111 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_7111
									.hasNext()) {
						try {
							__DEC_altFlow_ref_7111 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_7111
									.next();

							// check object __DEC_altFlow_ref_7111 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_7111 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_7111 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_7111.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_38(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_838342 = null;
		InteractionOperand __DEC_combo_fragment_794278 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_468653 = null;
		InteractionOperand __DEC_messageReceive_fragment_156710 = null;
		Interaction __DEC_messageSend_enclosingInteraction_448832 = null;
		InteractionOperand __DEC_messageSend_fragment_827865 = null;
		Interaction __DEC_operand_enclosingInteraction_956573 = null;
		InteractionOperand __DEC_operand_fragment_738141 = null;
		InteractionOperand __DEC_guard_guard_247949 = null;
		CombinedFragment __DEC_operand_operand_1416 = null;
		Constraint __DEC_spec_specification_461854 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606 = null;
		Message __DEC_messageReceive_receiveEvent_144606 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646 = null;
		Message __DEC_messageSend_receiveEvent_241646 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079 = null;
		Message __DEC_messageReceive_sendEvent_854079 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759 = null;
		Message __DEC_messageSend_sendEvent_214759 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_122748 = null;
		MessageEnd __DEC_message_message_122748 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterComboToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from combo to line
			fujaba__Success = false;

			fujaba__IterComboToLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterComboToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_838342 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_838342 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_838342 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_838342 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_838342
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_794278 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_794278 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_794278 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_794278 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_794278
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_468653 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_468653 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_468653 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_468653 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_468653
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_156710 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_156710 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_156710 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_156710 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_156710
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_448832 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_448832 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_448832 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_448832 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_448832
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_827865 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_827865 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_827865 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_827865 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_827865
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_956573 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_956573 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_956573 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_956573 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_956573
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_738141 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_738141 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_738141 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_738141 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_738141
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_247949 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_247949 is really bound
									JavaSDM.ensure(__DEC_guard_guard_247949 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_247949
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_247949 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_247949
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_1416 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_1416 is really bound
									JavaSDM.ensure(__DEC_operand_operand_1416 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_1416
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_1416 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_1416
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_461854 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_461854 is really bound
									JavaSDM.ensure(__DEC_spec_specification_461854 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_461854
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_461854 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_461854
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_144606
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_144606 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_144606
													.next();

											// check object __DEC_messageReceive_receiveEvent_144606 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_144606 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_144606 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_144606
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_241646
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_241646 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_241646
													.next();

											// check object __DEC_messageSend_receiveEvent_241646 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_241646 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_241646 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_241646
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_854079
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_854079 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_854079
													.next();

											// check object __DEC_messageReceive_sendEvent_854079 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_854079 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_854079 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_854079
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_214759
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_214759 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_214759
													.next();

											// check object __DEC_messageSend_sendEvent_214759 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_214759 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_214759 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_214759
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_122748
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_122748 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_122748
													.hasNext()) {
										try {
											__DEC_message_message_122748 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_122748
													.next();

											// check object __DEC_message_message_122748 is really bound
											JavaSDM.ensure(__DEC_message_message_122748 != null);
											// check isomorphic binding between objects __DEC_message_message_122748 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_122748
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_122748 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_122748
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_operand is really bound
								JavaSDM.ensure(_edge_operand != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_operand to combo
								JavaSDM.ensure(combo.equals(_edge_operand
										.getSrc()));

								// check link trg from _edge_operand to operand
								JavaSDM.ensure(operand.equals(_edge_operand
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_39(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_111589 = null;
		InteractionOperand __DEC_combo_fragment_350321 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_704386 = null;
		InteractionOperand __DEC_messageReceive_fragment_269607 = null;
		Interaction __DEC_messageSend_enclosingInteraction_92519 = null;
		InteractionOperand __DEC_messageSend_fragment_5762 = null;
		Interaction __DEC_operand_enclosingInteraction_65562 = null;
		InteractionOperand __DEC_operand_fragment_552128 = null;
		InteractionOperand __DEC_guard_guard_969788 = null;
		CombinedFragment __DEC_operand_operand_806568 = null;
		Constraint __DEC_spec_specification_765204 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335 = null;
		Message __DEC_messageReceive_receiveEvent_290335 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269 = null;
		Message __DEC_messageSend_receiveEvent_55269 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023 = null;
		Message __DEC_messageReceive_sendEvent_235023 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050 = null;
		Message __DEC_messageSend_sendEvent_192050 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_847597 = null;
		MessageEnd __DEC_message_message_847597 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link operand from combo to operand
					fujaba__Success = false;

					fujaba__IterComboToOperand = new ArrayList(
							combo.getOperand()).iterator();

					while (fujaba__IterComboToOperand.hasNext()) {
						try {
							operand = (InteractionOperand) fujaba__IterComboToOperand
									.next();

							// check object operand is really bound
							JavaSDM.ensure(operand != null);
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// check link covered from operand to line
							JavaSDM.ensure(operand.getCovered().contains(line));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_111589 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_111589 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_111589 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_111589 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_111589
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_350321 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_350321 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_350321 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_350321 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_350321
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_704386 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_704386 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_704386 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_704386 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_704386
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_269607 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_269607 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_269607 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_269607 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_269607
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_92519 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_92519 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_92519 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_92519 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_92519
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_5762 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_5762 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_5762 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_5762 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_5762
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_65562 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_65562 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_65562 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_65562 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_65562
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_552128 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_552128 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_552128 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_552128 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_552128
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_969788 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_969788 is really bound
									JavaSDM.ensure(__DEC_guard_guard_969788 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_969788
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_969788 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_969788
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_806568 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_806568 is really bound
									JavaSDM.ensure(__DEC_operand_operand_806568 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_806568
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_806568 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_806568
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_765204 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_765204 is really bound
									JavaSDM.ensure(__DEC_spec_specification_765204 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_765204
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_765204 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_765204
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_290335
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_290335 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_290335
													.next();

											// check object __DEC_messageReceive_receiveEvent_290335 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_290335 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_290335 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_290335
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_55269
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_55269 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_55269
													.next();

											// check object __DEC_messageSend_receiveEvent_55269 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_55269 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_55269 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_55269
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_235023
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_235023 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_235023
													.next();

											// check object __DEC_messageReceive_sendEvent_235023 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_235023 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_235023 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_235023
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_192050
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_192050 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_192050
													.next();

											// check object __DEC_messageSend_sendEvent_192050 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_192050 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_192050 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_192050
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_847597
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_847597 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_847597
													.hasNext()) {
										try {
											__DEC_message_message_847597 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_847597
													.next();

											// check object __DEC_message_message_847597 is really bound
											JavaSDM.ensure(__DEC_message_message_847597 != null);
											// check isomorphic binding between objects __DEC_message_message_847597 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_847597
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_847597 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_847597
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to combo
								JavaSDM.ensure(combo.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_40(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_150078 = null;
		InteractionOperand __DEC_combo_fragment_538214 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_77207 = null;
		InteractionOperand __DEC_messageReceive_fragment_991304 = null;
		Interaction __DEC_messageSend_enclosingInteraction_738498 = null;
		InteractionOperand __DEC_messageSend_fragment_660388 = null;
		Interaction __DEC_operand_enclosingInteraction_214340 = null;
		InteractionOperand __DEC_operand_fragment_976852 = null;
		InteractionOperand __DEC_guard_guard_926383 = null;
		CombinedFragment __DEC_operand_operand_927668 = null;
		Constraint __DEC_spec_specification_599575 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170 = null;
		Message __DEC_messageReceive_receiveEvent_145170 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313 = null;
		Message __DEC_messageSend_receiveEvent_516313 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859 = null;
		Message __DEC_messageReceive_sendEvent_745859 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476 = null;
		Message __DEC_messageSend_sendEvent_935476 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_278681 = null;
		MessageEnd __DEC_message_message_278681 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from combo to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterComboTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(combo,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterComboTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterComboTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// iterate to-many link operand from combo to operand
							fujaba__Success = false;

							fujaba__IterComboToOperand = new ArrayList(
									combo.getOperand()).iterator();

							while (fujaba__IterComboToOperand.hasNext()) {
								try {
									operand = (InteractionOperand) fujaba__IterComboToOperand
											.next();

									// check object operand is really bound
									JavaSDM.ensure(operand != null);
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from operand to line
									JavaSDM.ensure(operand.getCovered()
											.contains(line));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_150078 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_150078 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_150078 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_150078 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_150078
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_538214 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_538214 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_538214 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_538214 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_538214
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_77207 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_77207 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_77207 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_77207 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_77207
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_991304 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_991304 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_991304 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_991304 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_991304
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_738498 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_738498 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_738498 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_738498 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_738498
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_660388 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_660388 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_660388 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_660388 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_660388
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_214340 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_214340 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_214340 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_214340 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_214340
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_976852 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_976852 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_976852 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_976852 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_976852
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_926383 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_926383 is really bound
											JavaSDM.ensure(__DEC_guard_guard_926383 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_926383
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_926383 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_926383
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_927668 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_927668 is really bound
											JavaSDM.ensure(__DEC_operand_operand_927668 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_927668
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_927668 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_927668
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_599575 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_599575 is really bound
											JavaSDM.ensure(__DEC_spec_specification_599575 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_599575
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_599575 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_599575
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_145170
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_145170 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_145170
															.next();

													// check object __DEC_messageReceive_receiveEvent_145170 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_145170 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_145170 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_145170
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_516313
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_516313 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_516313
															.next();

													// check object __DEC_messageSend_receiveEvent_516313 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_516313 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_516313 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_516313
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_745859
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_745859 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_745859
															.next();

													// check object __DEC_messageReceive_sendEvent_745859 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_745859 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_745859 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_745859
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_935476
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_935476 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_935476
															.next();

													// check object __DEC_messageSend_sendEvent_935476 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_935476 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_935476 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_935476
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_278681
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_278681 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_278681
															.hasNext()) {
												try {
													__DEC_message_message_278681 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_278681
															.next();

													// check object __DEC_message_message_278681 is really bound
													JavaSDM.ensure(__DEC_message_message_278681 != null);
													// check isomorphic binding between objects __DEC_message_message_278681 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_278681
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_278681 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_278681
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to combo
										JavaSDM.ensure(combo
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to combo
										JavaSDM.ensure(combo
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_41(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_314021 = null;
		InteractionOperand __DEC_combo_fragment_213049 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_967507 = null;
		InteractionOperand __DEC_messageReceive_fragment_229808 = null;
		Interaction __DEC_messageSend_enclosingInteraction_117528 = null;
		InteractionOperand __DEC_messageSend_fragment_297190 = null;
		Interaction __DEC_operand_enclosingInteraction_769418 = null;
		InteractionOperand __DEC_operand_fragment_2975 = null;
		InteractionOperand __DEC_guard_guard_978567 = null;
		CombinedFragment __DEC_operand_operand_253104 = null;
		Constraint __DEC_spec_specification_883789 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753 = null;
		Message __DEC_messageReceive_receiveEvent_762753 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229 = null;
		Message __DEC_messageSend_receiveEvent_104229 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439 = null;
		Message __DEC_messageReceive_sendEvent_906439 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528 = null;
		Message __DEC_messageSend_sendEvent_611528 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_537274 = null;
		MessageEnd __DEC_message_message_537274 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_enclosingInteraction_314021 = combo
									.getEnclosingInteraction();

							// check object __DEC_combo_enclosingInteraction_314021 is really bound
							JavaSDM.ensure(__DEC_combo_enclosingInteraction_314021 != null);

							// check isomorphic binding between objects __DEC_combo_enclosingInteraction_314021 and interaction 
							JavaSDM.ensure(!__DEC_combo_enclosingInteraction_314021
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_fragment_213049 = combo
									.getEnclosingOperand();

							// check object __DEC_combo_fragment_213049 is really bound
							JavaSDM.ensure(__DEC_combo_fragment_213049 != null);

							// check isomorphic binding between objects __DEC_combo_fragment_213049 and operand 
							JavaSDM.ensure(!__DEC_combo_fragment_213049
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_967507 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_967507 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_967507 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_967507 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_967507
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_fragment_229808 = messageReceive
									.getEnclosingOperand();

							// check object __DEC_messageReceive_fragment_229808 is really bound
							JavaSDM.ensure(__DEC_messageReceive_fragment_229808 != null);

							// check isomorphic binding between objects __DEC_messageReceive_fragment_229808 and operand 
							JavaSDM.ensure(!__DEC_messageReceive_fragment_229808
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_117528 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_117528 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_117528 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_117528 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_117528
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_fragment_297190 = messageSend
									.getEnclosingOperand();

							// check object __DEC_messageSend_fragment_297190 is really bound
							JavaSDM.ensure(__DEC_messageSend_fragment_297190 != null);

							// check isomorphic binding between objects __DEC_messageSend_fragment_297190 and operand 
							JavaSDM.ensure(!__DEC_messageSend_fragment_297190
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_enclosingInteraction_769418 = operand
									.getEnclosingInteraction();

							// check object __DEC_operand_enclosingInteraction_769418 is really bound
							JavaSDM.ensure(__DEC_operand_enclosingInteraction_769418 != null);

							// check isomorphic binding between objects __DEC_operand_enclosingInteraction_769418 and interaction 
							JavaSDM.ensure(!__DEC_operand_enclosingInteraction_769418
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_fragment_2975 = operand
									.getEnclosingOperand();

							// check object __DEC_operand_fragment_2975 is really bound
							JavaSDM.ensure(__DEC_operand_fragment_2975 != null);

							// check isomorphic binding between objects __DEC_operand_fragment_2975 and operand 
							JavaSDM.ensure(!__DEC_operand_fragment_2975
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// negative check for link packagedElement from guard
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(guard,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// negative check for link packagedElement from spec
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(spec,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_guard_guard_978567 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
									.eContainer() : null;

							// check object __DEC_guard_guard_978567 is really bound
							JavaSDM.ensure(__DEC_guard_guard_978567 != null);

							// check if contained via correct reference
							JavaSDM.ensure(guard
									.equals(__DEC_guard_guard_978567.getGuard()));

							// check isomorphic binding between objects __DEC_guard_guard_978567 and operand 
							JavaSDM.ensure(!__DEC_guard_guard_978567
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_operand_253104 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object __DEC_operand_operand_253104 is really bound
							JavaSDM.ensure(__DEC_operand_operand_253104 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_operand_operand_253104
									.getOperand().contains(operand));

							// check isomorphic binding between objects __DEC_operand_operand_253104 and combo 
							JavaSDM.ensure(!__DEC_operand_operand_253104
									.equals(combo));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_spec_specification_883789 = spec.eContainer() instanceof Constraint ? (Constraint) spec
									.eContainer() : null;

							// check object __DEC_spec_specification_883789 is really bound
							JavaSDM.ensure(__DEC_spec_specification_883789 != null);

							// check if contained via correct reference
							JavaSDM.ensure(spec
									.equals(__DEC_spec_specification_883789
											.getSpecification()));

							// check isomorphic binding between objects __DEC_spec_specification_883789 and guard 
							JavaSDM.ensure(!__DEC_spec_specification_883789
									.equals(guard));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_762753
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_762753 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_762753
											.next();

									// check object __DEC_messageReceive_receiveEvent_762753 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_762753 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_762753 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_762753
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_104229
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_104229 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104229
											.next();

									// check object __DEC_messageSend_receiveEvent_104229 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_104229 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_104229 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_104229
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_906439
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_906439 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_906439
											.next();

									// check object __DEC_messageReceive_sendEvent_906439 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_906439 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_906439 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_906439
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_611528
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_611528 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_611528
											.next();

									// check object __DEC_messageSend_sendEvent_611528 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_611528 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_611528 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_611528
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_537274
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_537274 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_537274
											.hasNext()) {
								try {
									__DEC_message_message_537274 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_537274
											.next();

									// check object __DEC_message_message_537274 is really bound
									JavaSDM.ensure(__DEC_message_message_537274 != null);
									// check isomorphic binding between objects __DEC_message_message_537274 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_537274
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_537274 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_537274
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object combo is really bound
						JavaSDM.ensure(combo != null);
						// check object guard is really bound
						JavaSDM.ensure(guard != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check object operand is really bound
						JavaSDM.ensure(operand != null);
						// check object spec is really bound
						JavaSDM.ensure(spec != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from combo to interaction
						JavaSDM.ensure(!(interaction.equals(combo
								.getEnclosingInteraction())));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link fragment from operand to interaction
						JavaSDM.ensure(!(interaction.equals(operand
								.getEnclosingInteraction())));

						// check link fragment from combo to operand
						JavaSDM.ensure(!(operand.equals(combo
								.getEnclosingOperand())));

						// check link fragment from messageReceive to operand
						JavaSDM.ensure(!(operand.equals(messageReceive
								.getEnclosingOperand())));

						// check link fragment from messageSend to operand
						JavaSDM.ensure(!(operand.equals(messageSend
								.getEnclosingOperand())));

						// check link guard from operand to guard
						JavaSDM.ensure(guard.equals(operand.getGuard()));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link operand from operand to combo
						JavaSDM.ensure(combo.equals(operand.eContainer()));

						// check link specification from spec to guard
						JavaSDM.ensure(guard.equals(spec.eContainer()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_coveredBy to operand
						JavaSDM.ensure(operand.equals(_edge_coveredBy.getTrg()));

						// check link covered from line to combo
						JavaSDM.ensure(line.getCoveredBy().contains(combo));

						// check link covered from messageReceive to line
						JavaSDM.ensure(messageReceive.getCovered().contains(
								line));

						// check link covered from operand to line
						JavaSDM.ensure(operand.getCovered().contains(line));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match, combo,
								line, operand, guard, spec, message,
								interaction, messageSend, messageReceive);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_42(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_186649 = null;
		InteractionOperand __DEC_combo_fragment_538323 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_477255 = null;
		InteractionOperand __DEC_messageReceive_fragment_533869 = null;
		Interaction __DEC_messageSend_enclosingInteraction_503328 = null;
		InteractionOperand __DEC_messageSend_fragment_778155 = null;
		Interaction __DEC_operand_enclosingInteraction_574310 = null;
		InteractionOperand __DEC_operand_fragment_191839 = null;
		InteractionOperand __DEC_guard_guard_492631 = null;
		CombinedFragment __DEC_operand_operand_73729 = null;
		Constraint __DEC_spec_specification_264274 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011 = null;
		Message __DEC_messageReceive_receiveEvent_888011 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521 = null;
		Message __DEC_messageSend_receiveEvent_605521 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080 = null;
		Message __DEC_messageReceive_sendEvent_770080 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335 = null;
		Message __DEC_messageSend_sendEvent_972335 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_28526 = null;
		MessageEnd __DEC_message_message_28526 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from operand to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(operand,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterOperandTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_186649 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_186649 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_186649 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_186649 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_186649
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_538323 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_538323 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_538323 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_538323 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_538323
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_477255 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_477255 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_477255 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_477255 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_477255
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_533869 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_533869 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_533869 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_533869 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_533869
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_503328 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_503328 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_503328 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_503328 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_503328
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_778155 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_778155 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_778155 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_778155 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_778155
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_574310 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_574310 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_574310 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_574310 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_574310
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_191839 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_191839 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_191839 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_191839 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_191839
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_492631 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_492631 is really bound
									JavaSDM.ensure(__DEC_guard_guard_492631 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_492631
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_492631 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_492631
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_73729 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_73729 is really bound
									JavaSDM.ensure(__DEC_operand_operand_73729 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_73729
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_73729 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_73729
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_264274 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_264274 is really bound
									JavaSDM.ensure(__DEC_spec_specification_264274 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_264274
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_264274 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_264274
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_888011
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_888011 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_888011
													.next();

											// check object __DEC_messageReceive_receiveEvent_888011 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_888011 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_888011 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_888011
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_605521
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_605521 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_605521
													.next();

											// check object __DEC_messageSend_receiveEvent_605521 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_605521 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_605521 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_605521
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_770080
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_770080 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_770080
													.next();

											// check object __DEC_messageReceive_sendEvent_770080 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_770080 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_770080 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_770080
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_972335
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_972335 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_972335
													.next();

											// check object __DEC_messageSend_sendEvent_972335 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_972335 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_972335 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_972335
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_28526
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_28526 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_28526
													.hasNext()) {
										try {
											__DEC_message_message_28526 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_28526
													.next();

											// check object __DEC_message_message_28526 is really bound
											JavaSDM.ensure(__DEC_message_message_28526 != null);
											// check isomorphic binding between objects __DEC_message_message_28526 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_28526
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_28526 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_28526
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_covered is really bound
								JavaSDM.ensure(_edge_covered != null);
								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
								JavaSDM.ensure(!_edge_coveredBy
										.equals(_edge_covered));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_covered to operand
								JavaSDM.ensure(operand.equals(_edge_covered
										.getSrc()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_covered to line
								JavaSDM.ensure(line.equals(_edge_covered
										.getTrg()));

								// check link trg from _edge_coveredBy to operand
								JavaSDM.ensure(operand.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_43(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_876788 = null;
		InteractionOperand __DEC_combo_fragment_327643 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_893459 = null;
		InteractionOperand __DEC_messageReceive_fragment_276590 = null;
		Interaction __DEC_messageSend_enclosingInteraction_255934 = null;
		InteractionOperand __DEC_messageSend_fragment_97473 = null;
		Interaction __DEC_operand_enclosingInteraction_126502 = null;
		InteractionOperand __DEC_operand_fragment_239501 = null;
		InteractionOperand __DEC_guard_guard_911007 = null;
		CombinedFragment __DEC_operand_operand_651473 = null;
		Constraint __DEC_spec_specification_379584 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756 = null;
		Message __DEC_messageReceive_receiveEvent_330756 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498 = null;
		Message __DEC_messageSend_receiveEvent_966498 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676 = null;
		Message __DEC_messageReceive_sendEvent_615676 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030 = null;
		Message __DEC_messageSend_sendEvent_53030 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_217128 = null;
		MessageEnd __DEC_message_message_217128 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_876788 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_876788 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_876788 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_876788 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_876788
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_327643 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_327643 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_327643 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_327643 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_327643
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_893459 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_893459 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_893459 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_893459 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_893459
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_276590 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_276590 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_276590 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_276590 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_276590
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_255934 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_255934 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_255934 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_255934 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_255934
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_97473 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_97473 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_97473 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_97473 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_97473
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_126502 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_126502 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_126502 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_126502 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_126502
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_239501 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_239501 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_239501 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_239501 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_239501
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_911007 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_911007 is really bound
									JavaSDM.ensure(__DEC_guard_guard_911007 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_911007
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_911007 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_911007
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_651473 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_651473 is really bound
									JavaSDM.ensure(__DEC_operand_operand_651473 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_651473
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_651473 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_651473
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_379584 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_379584 is really bound
									JavaSDM.ensure(__DEC_spec_specification_379584 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_379584
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_379584 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_379584
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_330756
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_330756 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_330756
													.next();

											// check object __DEC_messageReceive_receiveEvent_330756 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_330756 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_330756 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_330756
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_966498
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_966498 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_966498
													.next();

											// check object __DEC_messageSend_receiveEvent_966498 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_966498 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_966498 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_966498
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_615676
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_615676 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_615676
													.next();

											// check object __DEC_messageReceive_sendEvent_615676 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_615676 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_615676 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_615676
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_53030
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_53030 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_53030
													.next();

											// check object __DEC_messageSend_sendEvent_53030 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_53030 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_53030 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_53030
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_217128
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_217128 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_217128
													.hasNext()) {
										try {
											__DEC_message_message_217128 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_217128
													.next();

											// check object __DEC_message_message_217128 is really bound
											JavaSDM.ensure(__DEC_message_message_217128 != null);
											// check isomorphic binding between objects __DEC_message_message_217128 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_217128
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_217128 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_217128
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_guard is really bound
								JavaSDM.ensure(_edge_guard != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_guard to operand
								JavaSDM.ensure(operand.equals(_edge_guard
										.getSrc()));

								// check link trg from _edge_guard to guard
								JavaSDM.ensure(guard.equals(_edge_guard
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_44(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_605500 = null;
		InteractionOperand __DEC_combo_fragment_117357 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_82624 = null;
		InteractionOperand __DEC_messageReceive_fragment_823577 = null;
		Interaction __DEC_messageSend_enclosingInteraction_237515 = null;
		InteractionOperand __DEC_messageSend_fragment_667687 = null;
		Interaction __DEC_operand_enclosingInteraction_98056 = null;
		InteractionOperand __DEC_operand_fragment_660037 = null;
		InteractionOperand __DEC_guard_guard_861421 = null;
		CombinedFragment __DEC_operand_operand_781996 = null;
		Constraint __DEC_spec_specification_61011 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656 = null;
		Message __DEC_messageReceive_receiveEvent_657656 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353 = null;
		Message __DEC_messageSend_receiveEvent_468353 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911 = null;
		Message __DEC_messageReceive_sendEvent_54911 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529 = null;
		Message __DEC_messageSend_sendEvent_840529 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_829403 = null;
		MessageEnd __DEC_message_message_829403 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_605500 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_605500 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_605500 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_605500 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_605500
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_117357 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_117357 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_117357 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_117357 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_117357
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_82624 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_82624 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_82624 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_82624 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_82624
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_823577 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_823577 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_823577 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_823577 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_823577
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_237515 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_237515 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_237515 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_237515 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_237515
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_667687 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_667687 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_667687 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_667687 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_667687
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_98056 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_98056 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_98056 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_98056 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_98056
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_660037 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_660037 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_660037 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_660037 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_660037
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_861421 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_861421 is really bound
									JavaSDM.ensure(__DEC_guard_guard_861421 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_861421
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_861421 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_861421
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_781996 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_781996 is really bound
									JavaSDM.ensure(__DEC_operand_operand_781996 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_781996
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_781996 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_781996
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_61011 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_61011 is really bound
									JavaSDM.ensure(__DEC_spec_specification_61011 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_61011
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_61011 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_61011
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_657656
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_657656 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_657656
													.next();

											// check object __DEC_messageReceive_receiveEvent_657656 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_657656 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_657656 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_657656
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_468353
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_468353 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_468353
													.next();

											// check object __DEC_messageSend_receiveEvent_468353 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_468353 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_468353 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_468353
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_54911
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_54911 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54911
													.next();

											// check object __DEC_messageReceive_sendEvent_54911 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_54911 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_54911 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_54911
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_840529
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_840529 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_840529
													.next();

											// check object __DEC_messageSend_sendEvent_840529 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_840529 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_840529 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_840529
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_829403
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_829403 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_829403
													.hasNext()) {
										try {
											__DEC_message_message_829403 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_829403
													.next();

											// check object __DEC_message_message_829403 is really bound
											JavaSDM.ensure(__DEC_message_message_829403 != null);
											// check isomorphic binding between objects __DEC_message_message_829403 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_829403
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_829403 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_829403
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_specification is really bound
								JavaSDM.ensure(_edge_specification != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_specification to guard
								JavaSDM.ensure(guard.equals(_edge_specification
										.getSrc()));

								// check link trg from _edge_specification to spec
								JavaSDM.ensure(spec.equals(_edge_specification
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_12(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_766497 = null;
		NormalStep __DEC_alt_stepAlternative_226013 = null;
		Flow __DEC_step_steps_549293 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_977868 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_977868 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_766497 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_766497 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_766497 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_766497
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_766497 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_766497
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_226013 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_226013 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_226013 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_226013
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_226013 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_226013
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_549293 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_549293 is really bound
							JavaSDM.ensure(__DEC_step_steps_549293 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_549293.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_549293 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_549293
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_549293 and flow 
							JavaSDM.ensure(!__DEC_step_steps_549293
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_977868
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_977868 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_977868
											.hasNext()) {
								try {
									__DEC_altFlow_ref_977868 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_977868
											.next();

									// check object __DEC_altFlow_ref_977868 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_977868 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_977868 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_977868
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_13(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_399520 = null;
		NormalStep __DEC_alt_stepAlternative_92336 = null;
		Flow __DEC_step_steps_625154 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_404907 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_404907 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_399520 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_399520 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_399520 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_399520
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_399520 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_399520
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_92336 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_92336 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_92336 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_92336
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_92336 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_92336
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_625154 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_625154 is really bound
							JavaSDM.ensure(__DEC_step_steps_625154 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_625154.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_625154 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_625154
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_625154 and flow 
							JavaSDM.ensure(!__DEC_step_steps_625154
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_404907
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_404907 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_404907
											.hasNext()) {
								try {
									__DEC_altFlow_ref_404907 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_404907
											.next();

									// check object __DEC_altFlow_ref_404907 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_404907 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_404907 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_404907
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_45(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_673708 = null;
		InteractionOperand __DEC_combo_fragment_718771 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_188063 = null;
		InteractionOperand __DEC_messageReceive_fragment_289470 = null;
		Interaction __DEC_messageSend_enclosingInteraction_809683 = null;
		InteractionOperand __DEC_messageSend_fragment_500683 = null;
		Interaction __DEC_operand_enclosingInteraction_121105 = null;
		InteractionOperand __DEC_operand_fragment_364794 = null;
		InteractionOperand __DEC_guard_guard_758741 = null;
		CombinedFragment __DEC_operand_operand_259082 = null;
		Constraint __DEC_spec_specification_558263 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766 = null;
		Message __DEC_messageReceive_receiveEvent_125766 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534 = null;
		Message __DEC_messageSend_receiveEvent_271534 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712 = null;
		Message __DEC_messageReceive_sendEvent_431712 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712 = null;
		Message __DEC_messageSend_sendEvent_694712 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_978812 = null;
		MessageEnd __DEC_message_message_978812 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_673708 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_673708 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_673708 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_673708 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_673708
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_718771 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_718771 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_718771 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_718771 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_718771
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_188063 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_188063 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_188063 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_188063 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_188063
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_289470 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_289470 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_289470 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_289470 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_289470
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_809683 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_809683 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_809683 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_809683 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_809683
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_500683 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_500683 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_500683 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_500683 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_500683
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_121105 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_121105 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_121105 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_121105 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_121105
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_364794 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_364794 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_364794 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_364794 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_364794
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_758741 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_758741 is really bound
											JavaSDM.ensure(__DEC_guard_guard_758741 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_758741
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_758741 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_758741
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_259082 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_259082 is really bound
											JavaSDM.ensure(__DEC_operand_operand_259082 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_259082
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_259082 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_259082
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_558263 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_558263 is really bound
											JavaSDM.ensure(__DEC_spec_specification_558263 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_558263
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_558263 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_558263
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_125766
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_125766 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125766
															.next();

													// check object __DEC_messageReceive_receiveEvent_125766 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_125766 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_125766 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_125766
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_271534
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_271534 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_271534
															.next();

													// check object __DEC_messageSend_receiveEvent_271534 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_271534 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_271534 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_271534
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_431712
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_431712 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_431712
															.next();

													// check object __DEC_messageReceive_sendEvent_431712 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_431712 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_431712 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_431712
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_694712
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_694712 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_694712
															.next();

													// check object __DEC_messageSend_sendEvent_694712 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_694712 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_694712 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_694712
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_978812
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_978812 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_978812
															.hasNext()) {
												try {
													__DEC_message_message_978812 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_978812
															.next();

													// check object __DEC_message_message_978812 is really bound
													JavaSDM.ensure(__DEC_message_message_978812 != null);
													// check isomorphic binding between objects __DEC_message_message_978812 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_978812
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_978812 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_978812
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_sendEvent is really bound
										JavaSDM.ensure(_edge_sendEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_sendEvent to message
										JavaSDM.ensure(message
												.equals(_edge_sendEvent
														.getSrc()));

										// check link trg from _edge_sendEvent to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_sendEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_46(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_525423 = null;
		InteractionOperand __DEC_combo_fragment_642649 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_822357 = null;
		InteractionOperand __DEC_messageReceive_fragment_46477 = null;
		Interaction __DEC_messageSend_enclosingInteraction_294054 = null;
		InteractionOperand __DEC_messageSend_fragment_72292 = null;
		Interaction __DEC_operand_enclosingInteraction_104785 = null;
		InteractionOperand __DEC_operand_fragment_781524 = null;
		InteractionOperand __DEC_guard_guard_795765 = null;
		CombinedFragment __DEC_operand_operand_600595 = null;
		Constraint __DEC_spec_specification_404731 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495 = null;
		Message __DEC_messageReceive_receiveEvent_665495 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873 = null;
		Message __DEC_messageSend_receiveEvent_490873 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774 = null;
		Message __DEC_messageReceive_sendEvent_416774 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585 = null;
		Message __DEC_messageSend_sendEvent_996585 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_386804 = null;
		MessageEnd __DEC_message_message_386804 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_525423 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_525423 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_525423 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_525423 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_525423
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_642649 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_642649 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_642649 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_642649 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_642649
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_822357 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_822357 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_822357 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_822357 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_822357
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_46477 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_46477 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_46477 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_46477 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_46477
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_294054 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_294054 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_294054 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_294054 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_294054
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_72292 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_72292 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_72292 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_72292 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_72292
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_104785 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_104785 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_104785 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_104785 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_104785
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_781524 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_781524 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_781524 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_781524 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_781524
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_795765 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_795765 is really bound
											JavaSDM.ensure(__DEC_guard_guard_795765 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_795765
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_795765 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_795765
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_600595 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_600595 is really bound
											JavaSDM.ensure(__DEC_operand_operand_600595 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_600595
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_600595 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_600595
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_404731 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_404731 is really bound
											JavaSDM.ensure(__DEC_spec_specification_404731 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_404731
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_404731 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_404731
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_665495
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_665495 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665495
															.next();

													// check object __DEC_messageReceive_receiveEvent_665495 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_665495 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_665495 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_665495
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_490873
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_490873 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490873
															.next();

													// check object __DEC_messageSend_receiveEvent_490873 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_490873 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_490873 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_490873
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_416774
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_416774 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_416774
															.next();

													// check object __DEC_messageReceive_sendEvent_416774 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_416774 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_416774 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_416774
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_996585
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_996585 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_996585
															.next();

													// check object __DEC_messageSend_sendEvent_996585 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_996585 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_996585 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_996585
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_386804
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_386804 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_386804
															.hasNext()) {
												try {
													__DEC_message_message_386804 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_386804
															.next();

													// check object __DEC_message_message_386804 is really bound
													JavaSDM.ensure(__DEC_message_message_386804 != null);
													// check isomorphic binding between objects __DEC_message_message_386804 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_386804
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_386804 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_386804
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_receiveEvent is really bound
										JavaSDM.ensure(_edge_receiveEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_receiveEvent to message
										JavaSDM.ensure(message
												.equals(_edge_receiveEvent
														.getSrc()));

										// check link trg from _edge_receiveEvent to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_receiveEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_47(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_311330 = null;
		InteractionOperand __DEC_combo_fragment_450886 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_762417 = null;
		InteractionOperand __DEC_messageReceive_fragment_170303 = null;
		Interaction __DEC_messageSend_enclosingInteraction_910334 = null;
		InteractionOperand __DEC_messageSend_fragment_904915 = null;
		Interaction __DEC_operand_enclosingInteraction_375040 = null;
		InteractionOperand __DEC_operand_fragment_570848 = null;
		InteractionOperand __DEC_guard_guard_35641 = null;
		CombinedFragment __DEC_operand_operand_407639 = null;
		Constraint __DEC_spec_specification_930955 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663 = null;
		Message __DEC_messageReceive_receiveEvent_775663 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724 = null;
		Message __DEC_messageSend_receiveEvent_119724 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775 = null;
		Message __DEC_messageReceive_sendEvent_720775 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614 = null;
		Message __DEC_messageSend_sendEvent_136614 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_27913 = null;
		MessageEnd __DEC_message_message_27913 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getTrg();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// bind object
									_TmpObject = message.getSendEvent();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link src from _edge_interaction to message
									JavaSDM.ensure(message
											.equals(_edge_interaction.getSrc()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_311330 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_311330 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_311330 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_311330 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_311330
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_450886 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_450886 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_450886 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_450886 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_450886
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_762417 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_762417 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_762417 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_762417 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_762417
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_170303 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_170303 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_170303 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_170303 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_170303
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_910334 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_910334 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_910334 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_910334 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_910334
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_904915 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_904915 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_904915 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_904915 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_904915
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_375040 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_375040 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_375040 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_375040 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_375040
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_570848 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_570848 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_570848 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_570848 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_570848
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_35641 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_35641 is really bound
													JavaSDM.ensure(__DEC_guard_guard_35641 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_35641
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_35641 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_35641
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_407639 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_407639 is really bound
													JavaSDM.ensure(__DEC_operand_operand_407639 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_407639
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_407639 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_407639
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_930955 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_930955 is really bound
													JavaSDM.ensure(__DEC_spec_specification_930955 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_930955
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_930955 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_930955
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_775663
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_775663 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_775663
																	.next();

															// check object __DEC_messageReceive_receiveEvent_775663 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_775663 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_775663 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_775663
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_119724
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_119724 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_119724
																	.next();

															// check object __DEC_messageSend_receiveEvent_119724 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_119724 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_119724 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_119724
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_720775
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_720775 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_720775
																	.next();

															// check object __DEC_messageReceive_sendEvent_720775 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_720775 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_720775 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_720775
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_136614
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_136614 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_136614
																	.next();

															// check object __DEC_messageSend_sendEvent_136614 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_136614 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_136614 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_136614
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_27913
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_27913 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_27913
																	.hasNext()) {
														try {
															__DEC_message_message_27913 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_27913
																	.next();

															// check object __DEC_message_message_27913 is really bound
															JavaSDM.ensure(__DEC_message_message_27913 != null);
															// check isomorphic binding between objects __DEC_message_message_27913 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_27913
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_27913 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_27913
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																line, operand,
																guard, spec,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_48(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_920537 = null;
		InteractionOperand __DEC_combo_fragment_871397 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_209343 = null;
		InteractionOperand __DEC_messageReceive_fragment_358869 = null;
		Interaction __DEC_messageSend_enclosingInteraction_810785 = null;
		InteractionOperand __DEC_messageSend_fragment_618472 = null;
		Interaction __DEC_operand_enclosingInteraction_533638 = null;
		InteractionOperand __DEC_operand_fragment_623389 = null;
		InteractionOperand __DEC_guard_guard_806099 = null;
		CombinedFragment __DEC_operand_operand_788183 = null;
		Constraint __DEC_spec_specification_5119 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683 = null;
		Message __DEC_messageReceive_receiveEvent_890683 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569 = null;
		Message __DEC_messageSend_receiveEvent_874569 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064 = null;
		Message __DEC_messageReceive_sendEvent_355064 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777 = null;
		Message __DEC_messageSend_sendEvent_402777 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_480130 = null;
		MessageEnd __DEC_message_message_480130 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterInteractionTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link trg from interaction to _edge_interaction
			fujaba__Success = false;

			fujaba__IterInteractionTo_edge_interaction = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							interaction, EMoflonEdge.class, "trg")).iterator();

			while (fujaba__IterInteractionTo_edge_interaction.hasNext()) {
				try {
					_edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction
							.next();

					// check object _edge_interaction is really bound
					JavaSDM.ensure(_edge_interaction != null);
					// check isomorphic binding between objects _edge_message and _edge_interaction 
					JavaSDM.ensure(!_edge_message.equals(_edge_interaction));

					// iterate to-many link lifeline from interaction to line
					fujaba__Success = false;

					fujaba__IterInteractionToLine = new ArrayList(
							interaction.getLifeline()).iterator();

					while (fujaba__IterInteractionToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterInteractionToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// iterate to-many link covered from line to combo
							fujaba__Success = false;

							fujaba__IterLineToCombo = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToCombo.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from line to messageReceive
									fujaba__Success = false;

									fujaba__IterLineToMessageReceive = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageReceive
													.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// bind object
											_TmpObject = message.getSendEvent();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link src from _edge_interaction to message
											JavaSDM.ensure(message
													.equals(_edge_interaction
															.getSrc()));

											// check link trg from _edge_message to message
											JavaSDM.ensure(message
													.equals(_edge_message
															.getTrg()));

											// iterate to-many link covered from line to operand
											fujaba__Success = false;

											fujaba__IterLineToOperand = new ArrayList(
													line.getCoveredBy())
													.iterator();

											while (fujaba__IterLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// check link operand from operand to combo
													JavaSDM.ensure(combo.equals(operand
															.eContainer()));

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_920537 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_920537 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_920537 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_920537 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_920537
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_871397 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_871397 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_871397 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_871397 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_871397
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_209343 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_209343 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_209343 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_209343 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_209343
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_358869 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_358869 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_358869 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_358869 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_358869
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_810785 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_810785 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_810785 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_810785 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_810785
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_618472 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_618472 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_618472 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_618472 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_618472
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_533638 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_533638 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_533638 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_533638 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_533638
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_623389 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_623389 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_623389 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_623389 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_623389
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_806099 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_806099 is really bound
															JavaSDM.ensure(__DEC_guard_guard_806099 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_806099
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_806099 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_806099
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_788183 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_788183 is really bound
															JavaSDM.ensure(__DEC_operand_operand_788183 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_788183
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_788183 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_788183
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_5119 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_5119 is really bound
															JavaSDM.ensure(__DEC_spec_specification_5119 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_5119
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_5119 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_5119
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_890683
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_890683 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_890683
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_890683 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_890683 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_890683 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_890683
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_874569
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_874569 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_874569
																			.next();

																	// check object __DEC_messageSend_receiveEvent_874569 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_874569 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_874569 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_874569
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_355064
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_355064 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_355064
																			.next();

																	// check object __DEC_messageReceive_sendEvent_355064 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_355064 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_355064 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_355064
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_402777
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_402777 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_402777
																			.next();

																	// check object __DEC_messageSend_sendEvent_402777 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_402777 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_402777 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_402777
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_480130
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_480130 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_480130
																			.hasNext()) {
																try {
																	__DEC_message_message_480130 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_480130
																			.next();

																	// check object __DEC_message_message_480130 is really bound
																	JavaSDM.ensure(__DEC_message_message_480130 != null);
																	// check isomorphic binding between objects __DEC_message_message_480130 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_480130
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_480130 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_480130
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_message and _edge_interaction 
														JavaSDM.ensure(!_edge_message
																.equals(_edge_interaction));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link src from _edge_message to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from line to combo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(combo));

														// check link covered from messageReceive to line
														JavaSDM.ensure(messageReceive
																.getCovered()
																.contains(line));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		combo,
																		line,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction,
																		messageSend,
																		messageReceive);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_49(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_927900 = null;
		InteractionOperand __DEC_combo_fragment_843026 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_312758 = null;
		InteractionOperand __DEC_messageReceive_fragment_202417 = null;
		Interaction __DEC_messageSend_enclosingInteraction_58918 = null;
		InteractionOperand __DEC_messageSend_fragment_525177 = null;
		Interaction __DEC_operand_enclosingInteraction_390655 = null;
		InteractionOperand __DEC_operand_fragment_204420 = null;
		InteractionOperand __DEC_guard_guard_55872 = null;
		CombinedFragment __DEC_operand_operand_66513 = null;
		Constraint __DEC_spec_specification_517477 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057 = null;
		Message __DEC_messageReceive_receiveEvent_275057 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023 = null;
		Message __DEC_messageSend_receiveEvent_772023 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907 = null;
		Message __DEC_messageReceive_sendEvent_613907 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179 = null;
		Message __DEC_messageSend_sendEvent_756179 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_692846 = null;
		MessageEnd __DEC_message_message_692846 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_927900 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_927900 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_927900 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_927900 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_927900
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_843026 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_843026 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_843026 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_843026 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_843026
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_312758 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_312758 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_312758 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_312758 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_312758
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_202417 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_202417 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_202417 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_202417 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_202417
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_58918 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_58918 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_58918 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_58918 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_58918
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_525177 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_525177 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_525177 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_525177 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_525177
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_390655 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_390655 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_390655 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_390655 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_390655
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_204420 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_204420 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_204420 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_204420 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_204420
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_55872 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_55872 is really bound
											JavaSDM.ensure(__DEC_guard_guard_55872 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_55872
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_55872 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_55872
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_66513 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_66513 is really bound
											JavaSDM.ensure(__DEC_operand_operand_66513 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_66513
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_66513 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_66513
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_517477 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_517477 is really bound
											JavaSDM.ensure(__DEC_spec_specification_517477 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_517477
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_517477 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_517477
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_275057
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_275057 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_275057
															.next();

													// check object __DEC_messageReceive_receiveEvent_275057 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_275057 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_275057 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_275057
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_772023
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_772023 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772023
															.next();

													// check object __DEC_messageSend_receiveEvent_772023 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_772023 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_772023 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_772023
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_613907
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_613907 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_613907
															.next();

													// check object __DEC_messageReceive_sendEvent_613907 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_613907 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_613907 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_613907
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_756179
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_756179 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_756179
															.next();

													// check object __DEC_messageSend_sendEvent_756179 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_756179 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_756179 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_756179
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_692846
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_692846 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_692846
															.hasNext()) {
												try {
													__DEC_message_message_692846 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_692846
															.next();

													// check object __DEC_message_message_692846 is really bound
													JavaSDM.ensure(__DEC_message_message_692846 != null);
													// check isomorphic binding between objects __DEC_message_message_692846 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_692846
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_692846 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_692846
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_50(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_637044 = null;
		InteractionOperand __DEC_combo_fragment_537685 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_529288 = null;
		InteractionOperand __DEC_messageReceive_fragment_960759 = null;
		Interaction __DEC_messageSend_enclosingInteraction_457170 = null;
		InteractionOperand __DEC_messageSend_fragment_723868 = null;
		Interaction __DEC_operand_enclosingInteraction_138665 = null;
		InteractionOperand __DEC_operand_fragment_138289 = null;
		InteractionOperand __DEC_guard_guard_685393 = null;
		CombinedFragment __DEC_operand_operand_857076 = null;
		Constraint __DEC_spec_specification_578304 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258 = null;
		Message __DEC_messageReceive_receiveEvent_516258 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438 = null;
		Message __DEC_messageSend_receiveEvent_610438 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938 = null;
		Message __DEC_messageReceive_sendEvent_810938 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793 = null;
		Message __DEC_messageSend_sendEvent_570793 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_787516 = null;
		MessageEnd __DEC_message_message_787516 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_637044 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_637044 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_637044 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_637044 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_637044
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_537685 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_537685 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_537685 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_537685 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_537685
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_529288 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_529288 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_529288 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_529288 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_529288
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_960759 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_960759 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_960759 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_960759 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_960759
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_457170 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_457170 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_457170 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_457170 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_457170
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_723868 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_723868 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_723868 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_723868 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_723868
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_138665 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_138665 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_138665 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_138665 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_138665
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_138289 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_138289 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_138289 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_138289 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_138289
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_685393 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_685393 is really bound
											JavaSDM.ensure(__DEC_guard_guard_685393 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_685393
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_685393 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_685393
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_857076 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_857076 is really bound
											JavaSDM.ensure(__DEC_operand_operand_857076 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_857076
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_857076 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_857076
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_578304 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_578304 is really bound
											JavaSDM.ensure(__DEC_spec_specification_578304 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_578304
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_578304 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_578304
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_516258
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_516258 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_516258
															.next();

													// check object __DEC_messageReceive_receiveEvent_516258 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_516258 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_516258 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_516258
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_610438
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_610438 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_610438
															.next();

													// check object __DEC_messageSend_receiveEvent_610438 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_610438 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_610438 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_610438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_810938
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_810938 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_810938
															.next();

													// check object __DEC_messageReceive_sendEvent_810938 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_810938 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_810938 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_810938
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_570793
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_570793 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_570793
															.next();

													// check object __DEC_messageSend_sendEvent_570793 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_570793 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_570793 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_570793
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_787516
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_787516 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_787516
															.hasNext()) {
												try {
													__DEC_message_message_787516 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_787516
															.next();

													// check object __DEC_message_message_787516 is really bound
													JavaSDM.ensure(__DEC_message_message_787516 != null);
													// check isomorphic binding between objects __DEC_message_message_787516 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_787516
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_787516 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_787516
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_51(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_358478 = null;
		InteractionOperand __DEC_combo_fragment_135089 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_646278 = null;
		InteractionOperand __DEC_messageReceive_fragment_163350 = null;
		Interaction __DEC_messageSend_enclosingInteraction_858617 = null;
		InteractionOperand __DEC_messageSend_fragment_979959 = null;
		Interaction __DEC_operand_enclosingInteraction_144270 = null;
		InteractionOperand __DEC_operand_fragment_926681 = null;
		InteractionOperand __DEC_guard_guard_712467 = null;
		CombinedFragment __DEC_operand_operand_39064 = null;
		Constraint __DEC_spec_specification_89553 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156 = null;
		Message __DEC_messageReceive_receiveEvent_604156 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370 = null;
		Message __DEC_messageSend_receiveEvent_118370 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711 = null;
		Message __DEC_messageReceive_sendEvent_611711 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950 = null;
		Message __DEC_messageSend_sendEvent_31950 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_980855 = null;
		MessageEnd __DEC_message_message_980855 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_358478 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_358478 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_358478 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_358478 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_358478
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_135089 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_135089 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_135089 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_135089 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_135089
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_646278 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_646278 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_646278 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_646278 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_646278
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_163350 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_163350 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_163350 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_163350 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_163350
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_858617 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_858617 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_858617 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_858617 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_858617
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_979959 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_979959 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_979959 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_979959 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_979959
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_144270 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_144270 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_144270 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_144270 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_144270
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_926681 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_926681 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_926681 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_926681 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_926681
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_712467 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_712467 is really bound
									JavaSDM.ensure(__DEC_guard_guard_712467 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_712467
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_712467 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_712467
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_39064 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_39064 is really bound
									JavaSDM.ensure(__DEC_operand_operand_39064 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_39064
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_39064 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_39064
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_89553 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_89553 is really bound
									JavaSDM.ensure(__DEC_spec_specification_89553 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_89553
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_89553 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_89553
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_604156
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_604156 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_604156
													.next();

											// check object __DEC_messageReceive_receiveEvent_604156 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_604156 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_604156 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_604156
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_118370
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_118370 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_118370
													.next();

											// check object __DEC_messageSend_receiveEvent_118370 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_118370 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_118370 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_118370
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_611711
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_611711 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_611711
													.next();

											// check object __DEC_messageReceive_sendEvent_611711 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_611711 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_611711 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_611711
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_31950
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_31950 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_31950
													.next();

											// check object __DEC_messageSend_sendEvent_31950 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_31950 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_31950 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_31950
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_980855
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_980855 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_980855
													.hasNext()) {
										try {
											__DEC_message_message_980855 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_980855
													.next();

											// check object __DEC_message_message_980855 is really bound
											JavaSDM.ensure(__DEC_message_message_980855 != null);
											// check isomorphic binding between objects __DEC_message_message_980855 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_980855
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_980855 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_980855
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to messageReceive
								JavaSDM.ensure(messageReceive
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_52(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_509946 = null;
		InteractionOperand __DEC_combo_fragment_568860 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_425941 = null;
		InteractionOperand __DEC_messageReceive_fragment_108088 = null;
		Interaction __DEC_messageSend_enclosingInteraction_918789 = null;
		InteractionOperand __DEC_messageSend_fragment_695128 = null;
		Interaction __DEC_operand_enclosingInteraction_935623 = null;
		InteractionOperand __DEC_operand_fragment_371185 = null;
		InteractionOperand __DEC_guard_guard_187551 = null;
		CombinedFragment __DEC_operand_operand_291794 = null;
		Constraint __DEC_spec_specification_530469 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175 = null;
		Message __DEC_messageReceive_receiveEvent_678175 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328 = null;
		Message __DEC_messageSend_receiveEvent_189328 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513 = null;
		Message __DEC_messageReceive_sendEvent_857513 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535 = null;
		Message __DEC_messageSend_sendEvent_441535 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_435589 = null;
		MessageEnd __DEC_message_message_435589 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link src from line to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterLineTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link trg from _edge_coveredBy to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(_edge_coveredBy.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_509946 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_509946 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_509946 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_509946 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_509946
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_568860 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_568860 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_568860 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_568860 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_568860
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_425941 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_425941 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_425941 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_425941 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_425941
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_108088 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_108088 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_108088 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_108088 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_108088
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_918789 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_918789 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_918789 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_918789 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_918789
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_695128 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_695128 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_695128 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_695128 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_695128
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_935623 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_935623 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_935623 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_935623 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_935623
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_371185 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_371185 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_371185 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_371185 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_371185
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_187551 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_187551 is really bound
											JavaSDM.ensure(__DEC_guard_guard_187551 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_187551
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_187551 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_187551
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_291794 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_291794 is really bound
											JavaSDM.ensure(__DEC_operand_operand_291794 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_291794
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_291794 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_291794
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_530469 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_530469 is really bound
											JavaSDM.ensure(__DEC_spec_specification_530469 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_530469
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_530469 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_530469
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_678175
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_678175 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_678175
															.next();

													// check object __DEC_messageReceive_receiveEvent_678175 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_678175 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_678175 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_678175
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_189328
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_189328 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_189328
															.next();

													// check object __DEC_messageSend_receiveEvent_189328 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_189328 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_189328 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_189328
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_857513
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_857513 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_857513
															.next();

													// check object __DEC_messageReceive_sendEvent_857513 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_857513 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_857513 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_857513
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_441535
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_441535 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_441535
															.next();

													// check object __DEC_messageSend_sendEvent_441535 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_441535 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_441535 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_441535
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_435589
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_435589 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_435589
															.hasNext()) {
												try {
													__DEC_message_message_435589 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_435589
															.next();

													// check object __DEC_message_message_435589 is really bound
													JavaSDM.ensure(__DEC_message_message_435589 != null);
													// check isomorphic binding between objects __DEC_message_message_435589 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_435589
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_435589 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_435589
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, UseCase useCase, Flow flow,
			NormalStep step, Actor actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, useCase, flow,
					step, actor));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, useCase, flow, step, actor);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("actor", actor);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, NormalStep step, Interaction interaction, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, message,
					interaction, messageSend, messageReceive, line));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, message, interaction,
					messageSend, messageReceive, line);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Actor actor, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_4(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_178395 = null;
		Match match = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_178395 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_178395 is really bound
					JavaSDM.ensure(__DEC_step_steps_178395 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_178395.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_178395 and flow 
					JavaSDM.ensure(!__DEC_step_steps_178395.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_steps is really bound
				JavaSDM.ensure(_edge_steps != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_steps to flow
				JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_steps to step
				JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_5(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_126427 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_126427 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_126427 is really bound
					JavaSDM.ensure(__DEC_step_steps_126427 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_126427.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_126427 and flow 
					JavaSDM.ensure(!__DEC_step_steps_126427.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_actor is really bound
				JavaSDM.ensure(_edge_actor != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_actor to step
				JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_actor to actor
				JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_4(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_418485 = null;
		Interaction __DEC_messageSend_enclosingInteraction_994376 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642 = null;
		Message __DEC_messageReceive_receiveEvent_671642 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158 = null;
		Message __DEC_messageSend_receiveEvent_425158 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521 = null;
		Message __DEC_messageReceive_sendEvent_457521 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539 = null;
		Message __DEC_messageSend_sendEvent_335539 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_375968 = null;
		MessageEnd __DEC_message_message_375968 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_418485 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_418485 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_418485 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_418485 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_418485
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_994376 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_994376 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_994376 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_994376 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_994376
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_671642
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_671642 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_671642
											.next();

									// check object __DEC_messageReceive_receiveEvent_671642 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_671642 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_671642 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_671642
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_425158
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_425158 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_425158
											.next();

									// check object __DEC_messageSend_receiveEvent_425158 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_425158 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_425158 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_425158
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_457521
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_457521 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_457521
											.next();

									// check object __DEC_messageReceive_sendEvent_457521 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_457521 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_457521 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_457521
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_335539
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_335539 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_335539
											.next();

									// check object __DEC_messageSend_sendEvent_335539 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_335539 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_335539 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_335539
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_375968
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_375968 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_375968
											.hasNext()) {
								try {
									__DEC_message_message_375968 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_375968
											.next();

									// check object __DEC_message_message_375968 is really bound
									JavaSDM.ensure(__DEC_message_message_375968 != null);
									// check isomorphic binding between objects __DEC_message_message_375968 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_375968
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_375968 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_375968
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_sendEvent is really bound
						JavaSDM.ensure(_edge_sendEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_sendEvent to message
						JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

						// check link trg from _edge_sendEvent to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_sendEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_5(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_810553 = null;
		Interaction __DEC_messageSend_enclosingInteraction_433896 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647 = null;
		Message __DEC_messageReceive_receiveEvent_749647 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131 = null;
		Message __DEC_messageSend_receiveEvent_278131 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332 = null;
		Message __DEC_messageReceive_sendEvent_655332 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294 = null;
		Message __DEC_messageSend_sendEvent_34294 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_620675 = null;
		MessageEnd __DEC_message_message_620675 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_810553 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_810553 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_810553 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_810553 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_810553
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_433896 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_433896 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_433896 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_433896 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_433896
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_749647
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_749647 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_749647
											.next();

									// check object __DEC_messageReceive_receiveEvent_749647 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_749647 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_749647 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_749647
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_278131
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_278131 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_278131
											.next();

									// check object __DEC_messageSend_receiveEvent_278131 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_278131 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_278131 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_278131
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_655332
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_655332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_655332
											.next();

									// check object __DEC_messageReceive_sendEvent_655332 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_655332 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_655332 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_655332
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_34294
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_34294 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_34294
											.next();

									// check object __DEC_messageSend_sendEvent_34294 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_34294 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_34294 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_34294
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_620675
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_620675 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_620675
											.hasNext()) {
								try {
									__DEC_message_message_620675 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_620675
											.next();

									// check object __DEC_message_message_620675 is really bound
									JavaSDM.ensure(__DEC_message_message_620675 != null);
									// check isomorphic binding between objects __DEC_message_message_620675 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_620675
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_620675 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_620675
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_receiveEvent is really bound
						JavaSDM.ensure(_edge_receiveEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_receiveEvent to message
						JavaSDM.ensure(message.equals(_edge_receiveEvent
								.getSrc()));

						// check link trg from _edge_receiveEvent to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_6(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_17590 = null;
		Interaction __DEC_messageSend_enclosingInteraction_198678 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393 = null;
		Message __DEC_messageReceive_receiveEvent_596393 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973 = null;
		Message __DEC_messageSend_receiveEvent_626973 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503 = null;
		Message __DEC_messageReceive_sendEvent_898503 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081 = null;
		Message __DEC_messageSend_sendEvent_175081 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_435655 = null;
		MessageEnd __DEC_message_message_435655 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_17590 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_17590 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_17590 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_17590 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_17590
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_198678 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_198678 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_198678 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_198678 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_198678
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_596393
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_596393 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596393
											.next();

									// check object __DEC_messageReceive_receiveEvent_596393 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_596393 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_596393 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_596393
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_626973
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_626973 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_626973
											.next();

									// check object __DEC_messageSend_receiveEvent_626973 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_626973 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_626973 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_626973
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_898503
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_898503 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_898503
											.next();

									// check object __DEC_messageReceive_sendEvent_898503 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_898503 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_898503 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_898503
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_175081
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_175081 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_175081
											.next();

									// check object __DEC_messageSend_sendEvent_175081 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_175081 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_175081 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_175081
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_435655
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_435655 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_435655
											.hasNext()) {
								try {
									__DEC_message_message_435655 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_435655
											.next();

									// check object __DEC_message_message_435655 is really bound
									JavaSDM.ensure(__DEC_message_message_435655 != null);
									// check isomorphic binding between objects __DEC_message_message_435655 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_435655
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_435655 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_435655
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_interaction is really bound
						JavaSDM.ensure(_edge_interaction != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_interaction to message
						JavaSDM.ensure(message.equals(_edge_interaction
								.getSrc()));

						// check link trg from _edge_interaction to interaction
						JavaSDM.ensure(interaction.equals(_edge_interaction
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_7(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_593493 = null;
		Interaction __DEC_messageSend_enclosingInteraction_182504 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932 = null;
		Message __DEC_messageReceive_receiveEvent_761932 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587 = null;
		Message __DEC_messageSend_receiveEvent_602587 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347 = null;
		Message __DEC_messageReceive_sendEvent_251347 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292 = null;
		Message __DEC_messageSend_sendEvent_147292 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_17196 = null;
		MessageEnd __DEC_message_message_17196 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link src from message to _edge_interaction
					fujaba__Success = false;

					fujaba__IterMessageTo_edge_interaction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											EMoflonEdge.class, "src"))
							.iterator();

					while (fujaba__IterMessageTo_edge_interaction.hasNext()) {
						try {
							_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
									.next();

							// check object _edge_interaction is really bound
							JavaSDM.ensure(_edge_interaction != null);
							// check isomorphic binding between objects _edge_message and _edge_interaction 
							JavaSDM.ensure(!_edge_message
									.equals(_edge_interaction));

							// check link trg from _edge_interaction to interaction
							JavaSDM.ensure(interaction.equals(_edge_interaction
									.getTrg()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// negative check for link fragment from messageReceive
								JavaSDM.ensure(messageReceive
										.getEnclosingOperand() == null);
								// negative check for link fragment from messageSend
								JavaSDM.ensure(messageSend
										.getEnclosingOperand() == null);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_593493 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_593493 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_593493 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_593493 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_593493
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_182504 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_182504 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_182504 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_182504 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_182504
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_761932
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_761932 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_761932
													.next();

											// check object __DEC_messageReceive_receiveEvent_761932 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_761932 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_761932 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_761932
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_602587
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_602587 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_602587
													.next();

											// check object __DEC_messageSend_receiveEvent_602587 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_602587 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_602587 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_602587
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_251347
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_251347 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_251347
													.next();

											// check object __DEC_messageReceive_sendEvent_251347 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_251347 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_251347 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_251347
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_147292
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_147292 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147292
													.next();

											// check object __DEC_messageSend_sendEvent_147292 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_147292 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_147292 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_147292
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_17196
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_17196 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_17196
													.hasNext()) {
										try {
											__DEC_message_message_17196 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_17196
													.next();

											// check object __DEC_message_message_17196 is really bound
											JavaSDM.ensure(__DEC_message_message_17196 != null);
											// check isomorphic binding between objects __DEC_message_message_17196 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_17196
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_17196 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_17196
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_interaction is really bound
								JavaSDM.ensure(_edge_interaction != null);
								// check object _edge_message is really bound
								JavaSDM.ensure(_edge_message != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check isomorphic binding between objects _edge_message and _edge_interaction 
								JavaSDM.ensure(!_edge_message
										.equals(_edge_interaction));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link src from _edge_interaction to message
								JavaSDM.ensure(message.equals(_edge_interaction
										.getSrc()));

								// check link src from _edge_message to interaction
								JavaSDM.ensure(interaction.equals(_edge_message
										.getSrc()));

								// check link trg from _edge_interaction to interaction
								JavaSDM.ensure(interaction
										.equals(_edge_interaction.getTrg()));

								// check link trg from _edge_message to message
								JavaSDM.ensure(message.equals(_edge_message
										.getTrg()));

								// check link covered from line to messageReceive
								JavaSDM.ensure(line.getCoveredBy().contains(
										messageReceive));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										message, interaction, messageSend,
										messageReceive, line);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_8(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_567487 = null;
		Interaction __DEC_messageSend_enclosingInteraction_871348 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830 = null;
		Message __DEC_messageReceive_receiveEvent_92830 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350 = null;
		Message __DEC_messageSend_receiveEvent_104350 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021 = null;
		Message __DEC_messageReceive_sendEvent_213021 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744 = null;
		Message __DEC_messageSend_sendEvent_474744 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_766264 = null;
		MessageEnd __DEC_message_message_766264 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_567487 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_567487 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_567487 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_567487 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_567487
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_871348 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_871348 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_871348 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_871348 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_871348
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_92830
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_92830 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_92830
											.next();

									// check object __DEC_messageReceive_receiveEvent_92830 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_92830 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_92830 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_92830
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_104350
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_104350 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_104350
											.next();

									// check object __DEC_messageSend_receiveEvent_104350 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_104350 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_104350 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_104350
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_213021
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_213021 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213021
											.next();

									// check object __DEC_messageReceive_sendEvent_213021 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_213021 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_213021 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_213021
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_474744
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_474744 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474744
											.next();

									// check object __DEC_messageSend_sendEvent_474744 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_474744 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_474744 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_474744
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_766264
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_766264 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_766264
											.hasNext()) {
								try {
									__DEC_message_message_766264 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_766264
											.next();

									// check object __DEC_message_message_766264 is really bound
									JavaSDM.ensure(__DEC_message_message_766264 != null);
									// check isomorphic binding between objects __DEC_message_message_766264 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_766264
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_766264 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_766264
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_9(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_926079 = null;
		Interaction __DEC_messageSend_enclosingInteraction_226977 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631 = null;
		Message __DEC_messageReceive_receiveEvent_936631 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665 = null;
		Message __DEC_messageSend_receiveEvent_409665 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320 = null;
		Message __DEC_messageReceive_sendEvent_832320 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780 = null;
		Message __DEC_messageSend_sendEvent_125780 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_173905 = null;
		MessageEnd __DEC_message_message_173905 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_926079 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_926079 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_926079 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_926079 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_926079
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_226977 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_226977 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_226977 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_226977 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_226977
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_936631
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_936631 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_936631
											.next();

									// check object __DEC_messageReceive_receiveEvent_936631 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_936631 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_936631 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_936631
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_409665
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_409665 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_409665
											.next();

									// check object __DEC_messageSend_receiveEvent_409665 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_409665 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_409665 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_409665
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_832320
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_832320 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_832320
											.next();

									// check object __DEC_messageReceive_sendEvent_832320 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_832320 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_832320 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_832320
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_125780
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_125780 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_125780
											.next();

									// check object __DEC_messageSend_sendEvent_125780 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_125780 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_125780 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_125780
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_173905
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_173905 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_173905
											.hasNext()) {
								try {
									__DEC_message_message_173905 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_173905
											.next();

									// check object __DEC_message_message_173905 is really bound
									JavaSDM.ensure(__DEC_message_message_173905 != null);
									// check isomorphic binding between objects __DEC_message_message_173905 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_173905
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_173905 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_173905
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_10(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_186545 = null;
		Interaction __DEC_messageSend_enclosingInteraction_547043 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533 = null;
		Message __DEC_messageReceive_receiveEvent_909533 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185 = null;
		Message __DEC_messageSend_receiveEvent_36185 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910 = null;
		Message __DEC_messageReceive_sendEvent_783910 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670 = null;
		Message __DEC_messageSend_sendEvent_123670 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_498330 = null;
		MessageEnd __DEC_message_message_498330 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// negative check for link fragment from messageReceive
				JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
				// negative check for link fragment from messageSend
				JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageReceive_enclosingInteraction_186545 = messageReceive
							.getEnclosingInteraction();

					// check object __DEC_messageReceive_enclosingInteraction_186545 is really bound
					JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_186545 != null);

					// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_186545 and interaction 
					JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_186545
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageSend_enclosingInteraction_547043 = messageSend
							.getEnclosingInteraction();

					// check object __DEC_messageSend_enclosingInteraction_547043 is really bound
					JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_547043 != null);

					// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_547043 and interaction 
					JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_547043
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_909533
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533
									.hasNext()) {
						try {
							__DEC_messageReceive_receiveEvent_909533 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909533
									.next();

							// check object __DEC_messageReceive_receiveEvent_909533 is really bound
							JavaSDM.ensure(__DEC_messageReceive_receiveEvent_909533 != null);
							// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_909533 and message 
							JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_909533
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_36185
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185
									.hasNext()) {
						try {
							__DEC_messageSend_receiveEvent_36185 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_36185
									.next();

							// check object __DEC_messageSend_receiveEvent_36185 is really bound
							JavaSDM.ensure(__DEC_messageSend_receiveEvent_36185 != null);
							// check isomorphic binding between objects __DEC_messageSend_receiveEvent_36185 and message 
							JavaSDM.ensure(!__DEC_messageSend_receiveEvent_36185
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_783910
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910
									.hasNext()) {
						try {
							__DEC_messageReceive_sendEvent_783910 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_783910
									.next();

							// check object __DEC_messageReceive_sendEvent_783910 is really bound
							JavaSDM.ensure(__DEC_messageReceive_sendEvent_783910 != null);
							// check isomorphic binding between objects __DEC_messageReceive_sendEvent_783910 and message 
							JavaSDM.ensure(!__DEC_messageReceive_sendEvent_783910
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_123670
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670
									.hasNext()) {
						try {
							__DEC_messageSend_sendEvent_123670 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_123670
									.next();

							// check object __DEC_messageSend_sendEvent_123670 is really bound
							JavaSDM.ensure(__DEC_messageSend_sendEvent_123670 != null);
							// check isomorphic binding between objects __DEC_messageSend_sendEvent_123670 and message 
							JavaSDM.ensure(!__DEC_messageSend_sendEvent_123670
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link message from message to __DEC_message_message_498330
					fujaba__Success = false;

					fujaba__IterMessageTo__DEC_message_message_498330 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											MessageEnd.class, "message"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageTo__DEC_message_message_498330
									.hasNext()) {
						try {
							__DEC_message_message_498330 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_498330
									.next();

							// check object __DEC_message_message_498330 is really bound
							JavaSDM.ensure(__DEC_message_message_498330 != null);
							// check isomorphic binding between objects __DEC_message_message_498330 and messageReceive 
							JavaSDM.ensure(!__DEC_message_message_498330
									.equals(messageReceive));

							// check isomorphic binding between objects __DEC_message_message_498330 and messageSend 
							JavaSDM.ensure(!__DEC_message_message_498330
									.equals(messageSend));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_coveredBy is really bound
				JavaSDM.ensure(_edge_coveredBy != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check link fragment from messageReceive to interaction
				JavaSDM.ensure(!(interaction.equals(messageReceive
						.getEnclosingInteraction())));

				// check link fragment from messageSend to interaction
				JavaSDM.ensure(!(interaction.equals(messageSend
						.getEnclosingInteraction())));

				// check link lifeline from line to interaction
				JavaSDM.ensure(interaction.equals(line.getInteraction()));

				// check link message from message to interaction
				JavaSDM.ensure(interaction.equals(message.getInteraction()));

				// check link message from messageReceive to message
				JavaSDM.ensure(message.equals(messageReceive.getMessage()));

				// check link message from messageSend to message
				JavaSDM.ensure(message.equals(messageSend.getMessage()));

				// check link receiveEvent from message to messageReceive
				JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

				// check link receiveEvent from message to messageSend
				JavaSDM.ensure(!(messageSend.equals(message.getReceiveEvent())));

				// check link sendEvent from message to messageSend
				JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

				// check link sendEvent from message to messageReceive
				JavaSDM.ensure(!(messageReceive.equals(message.getSendEvent())));

				// check link src from _edge_coveredBy to line
				JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

				// check link trg from _edge_coveredBy to messageReceive
				JavaSDM.ensure(messageReceive.equals(_edge_coveredBy.getTrg()));

				// check link covered from line to messageReceive
				JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_BWD(match, message,
						interaction, messageSend, messageReceive, line);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_BWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_11(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_575604 = null;
		Interaction __DEC_messageSend_enclosingInteraction_520538 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993 = null;
		Message __DEC_messageReceive_receiveEvent_232993 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112 = null;
		Message __DEC_messageSend_receiveEvent_880112 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795 = null;
		Message __DEC_messageReceive_sendEvent_442795 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276 = null;
		Message __DEC_messageSend_sendEvent_216276 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_925037 = null;
		MessageEnd __DEC_message_message_925037 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// iterate to-many link trg from messageReceive to _edge_coveredBy
			fujaba__Success = false;

			fujaba__IterMessageReceiveTo_edge_coveredBy = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							messageReceive, EMoflonEdge.class, "trg"))
					.iterator();

			while (fujaba__IterMessageReceiveTo_edge_coveredBy.hasNext()) {
				try {
					_edge_coveredBy = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_coveredBy
							.next();

					// check object _edge_coveredBy is really bound
					JavaSDM.ensure(_edge_coveredBy != null);
					// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
					JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

					// check link src from _edge_coveredBy to line
					JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_575604 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_575604 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_575604 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_575604 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_575604
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_520538 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_520538 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_520538 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_520538 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_520538
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_232993
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_232993 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232993
											.next();

									// check object __DEC_messageReceive_receiveEvent_232993 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_232993 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_232993 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_232993
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_880112
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_880112 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_880112
											.next();

									// check object __DEC_messageSend_receiveEvent_880112 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_880112 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_880112 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_880112
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_442795
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_442795 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_442795
											.next();

									// check object __DEC_messageReceive_sendEvent_442795 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_442795 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_442795 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_442795
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_216276
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_216276 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_216276
											.next();

									// check object __DEC_messageSend_sendEvent_216276 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_216276 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_216276 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_216276
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_925037
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_925037 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_925037
											.hasNext()) {
								try {
									__DEC_message_message_925037 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_925037
											.next();

									// check object __DEC_message_message_925037 is really bound
									JavaSDM.ensure(__DEC_message_message_925037 != null);
									// check isomorphic binding between objects __DEC_message_message_925037 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_925037
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_925037 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_925037
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_covered is really bound
						JavaSDM.ensure(_edge_covered != null);
						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
						JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_covered to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_covered
								.getSrc()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_covered to line
						JavaSDM.ensure(line.equals(_edge_covered.getTrg()));

						// check link trg from _edge_coveredBy to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_coveredBy
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
		if (baseClass == NormalStepToMessageRule.class) {
			switch (baseOperationID) {
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepNFToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		return super.eDerivedOperationID(baseOperationID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_FWD((Match) arguments.get(0),
					(Actor) arguments.get(1), (NamedFlow) arguments.get(2),
					(NormalStep) arguments.get(3),
					(AlternativeFlowAlternative) arguments.get(4),
					(AlternativeFlow) arguments.get(5),
					(UseCase) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(Actor) arguments.get(1), (NamedFlow) arguments.get(2),
					(NormalStep) arguments.get(3),
					(AlternativeFlowAlternative) arguments.get(4),
					(AlternativeFlow) arguments.get(5),
					(UseCase) arguments.get(6));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(Actor) arguments.get(1), (NamedFlow) arguments.get(2),
					(NormalStep) arguments.get(3),
					(AlternativeFlowAlternative) arguments.get(4),
					(AlternativeFlow) arguments.get(5),
					(UseCase) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_ACTOR_LIFELINE_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(Actor) arguments.get(1), (Lifeline) arguments.get(2),
					(NamedFlow) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(FlowToInteractionFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(NormalStep) arguments.get(7),
					(AlternativeFlowAlternative) arguments.get(8),
					(AlternativeFlow) arguments.get(9),
					(UseCase) arguments.get(10),
					(UseCaseToInteraction) arguments.get(11),
					(Interaction) arguments.get(12));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_ACTOR_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(Actor) arguments.get(1), (Lifeline) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(FlowToInteractionFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(CombinedFragment) arguments.get(8),
					(CombinedFragment) arguments.get(9),
					(InteractionOperand) arguments.get(10),
					(InteractionConstraint) arguments.get(11),
					(LiteralString) arguments.get(12),
					(UseCase) arguments.get(13),
					(UseCaseToInteraction) arguments.get(14),
					(Message) arguments.get(15),
					(Interaction) arguments.get(16));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_227__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_227((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_228__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_228((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_229__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_229((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_230__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_230((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_231__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_231((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_232__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_232((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_233__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_233((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_234__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_234((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_235__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_235((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_236__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_236((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_237__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_237((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_238__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_238((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_46__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_46((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_47__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_47((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_239__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_239((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_240__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_240((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_241__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_241((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_242__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_242((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_243__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_243((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_48__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_48((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_49__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_49((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_244__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_244((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_245__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_245((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_246__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_246((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_247__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_247((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_248__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_248((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_249__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_249((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8),
					(UseCase) arguments.get(9),
					(UseCaseToInteraction) arguments.get(10),
					(Interaction) arguments.get(11), (Actor) arguments.get(12),
					(ActorToLifeline) arguments.get(13));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(MessageOccurrenceSpecification) arguments.get(5),
					(Lifeline) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(CombinedFragment) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(Message) arguments.get(14),
					(Interaction) arguments.get(15), (Actor) arguments.get(16),
					(ActorToLifeline) arguments.get(17));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_54((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_55((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_56((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_57((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_58((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_59((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_60((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_61((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_62((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_14((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_15((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_63((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_64((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_65((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_66((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_67((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_16((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_17((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_68((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_69((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_70((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_71((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_72((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_73((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(Lifeline) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5),
					(UseCaseToInteraction) arguments.get(6),
					(Flow) arguments.get(7), (Interaction) arguments.get(8),
					(Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(UseCase) arguments.get(6),
					(UseCaseToInteraction) arguments.get(7),
					(Flow) arguments.get(8), (Message) arguments.get(9),
					(Interaction) arguments.get(10),
					(MessageOccurrenceSpecification) arguments.get(11),
					(MessageOccurrenceSpecification) arguments.get(12),
					(Actor) arguments.get(13),
					(ActorToLifeline) arguments.get(14));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_38((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_39((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_40((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_41((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_42((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_43((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_44((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_12((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_13((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_45((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_46((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_47((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_48((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_49((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_50((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (NormalStep) arguments.get(4),
					(Interaction) arguments.get(5),
					(Lifeline) arguments.get(6), (Actor) arguments.get(7),
					(ActorToLifeline) arguments.get(8));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (Message) arguments.get(4),
					(Interaction) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8), (Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12));
			return null;
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_6((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_7((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_8((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_9((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_SYS_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //AltSysStepNFToComboRuleImpl
