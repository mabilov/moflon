/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;

import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltUserStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.NormalStepToMessageRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt User Step NF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class AltUserStepNFToComboRuleImpl extends AbstractRuleImpl implements
		AltUserStepNFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltUserStepNFToComboRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getAltUserStepNFToComboRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match,
					packageDeclaration, actor, sysActor, flow, step, alt,
					altFlow, useCase));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				__step_actor_actor.setTrg(actor);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor.setName("actors");
				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");
				// assign attribute __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase.setName("useCases");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_sysActor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_useCases_useCase, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysActor, "contextNodes");

				// create link
				__packageDeclaration_useCases_useCase
						.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_sysActor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_actors_sysActor.setTrg(sysActor);

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__packageDeclaration_useCases_useCase.setTrg(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, packageDeclaration, actor,
					sysActor, flow, step, alt, altFlow, useCase);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		PackageDeclaration packageDeclaration = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		NormalStep step = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment combo = null;
		Message message = null;
		NormalStepToCombinedFragment stepToCombo = null;
		InteractionConstraint guard = null;
		FlowToInteractionFragment altFlowToOperand = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		NormalStepToMessage stepToMessage = null;
		LiteralString spec = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge line__coveredBy__operand = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge operand__guard__guard = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge messageSend__message__message = null;
		EMoflonEdge combo__covered__sysLine = null;
		EMoflonEdge parentCombo__covered__sysLine = null;
		EMoflonEdge line__coveredBy__parentCombo = null;
		EMoflonEdge sysLine__coveredBy__messageSend = null;
		EMoflonEdge parentOperand__fragment__messageReceive = null;
		EMoflonEdge guard__specification__spec = null;
		EMoflonEdge message__sendEvent__messageSend = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge sysLine__coveredBy__combo = null;
		EMoflonEdge interaction__message__message = null;
		EMoflonEdge parentOperand__covered__line = null;
		EMoflonEdge sysLine__coveredBy__operand = null;
		EMoflonEdge sysLine__coveredBy__parentOperand = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge line__coveredBy__parentOperand = null;
		EMoflonEdge message__interaction__interaction = null;
		EMoflonEdge messageReceive__message__message = null;
		EMoflonEdge message__receiveEvent__messageReceive = null;
		EMoflonEdge operand__covered__sysLine = null;
		EMoflonEdge sysLine__coveredBy__parentCombo = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge messageReceive__enclosingOperand__parentOperand = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge operand__covered__line = null;
		EMoflonEdge parentOperand__covered__sysLine = null;
		EMoflonEdge messageSend__covered__sysLine = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge parentCombo__covered__line = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object operand
			operand = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionOperand();

			// create object messageSend
			messageSend = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object combo
			combo = ModalSequenceDiagramFactory.eINSTANCE
					.createCombinedFragment();

			// create object message
			message = ModalSequenceDiagramFactory.eINSTANCE.createMessage();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object guard
			guard = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionConstraint();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object messageReceive
			messageReceive = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object spec
			spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();

			// assign attribute combo
			combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
					.getValue("combo", "interactionOperator"));
			// assign attribute guard
			guard.setName((java.lang.String) csp.getValue("guard", "name"));
			// assign attribute spec
			spec.setValue((java.lang.String) csp.getValue("spec", "value"));
			// assign attribute message
			message.setName((java.lang.String) csp.getValue("message", "name"));

			// create link
			operand.getCovered().add(sysLine);

			// create link
			parentCombo.getCovered().add(sysLine);

			// create link
			messageSend.getCovered().add(sysLine);

			// create link
			combo.getCovered().add(sysLine);

			// create link
			parentOperand.getCovered().add(sysLine);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageSend,
					message, "message");

			// create link
			message.setSendEvent(messageSend);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			operand.setGuard(guard); // add link to one

			// create link
			line.getCoveredBy().add(operand);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			messageReceive.setEnclosingOperand(parentOperand);

			// create link
			line.getCoveredBy().add(parentOperand);

			// create link
			line.getCoveredBy().add(parentCombo);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(messageReceive,
					message, "message");

			// create link
			message.setReceiveEvent(messageReceive);

			// create link
			stepToMessage.setSource(step);

			// create link
			stepToCombo.setSource(step);

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			guard.setSpecification(spec); // add link to one

			// create link
			altFlowToOperand.setSource(altFlow);

			// create link
			stepToMessage.setTarget(message);

			// create link
			interaction.getMessage().add(message);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects packageDeclaration and message 
			JavaSDM.ensure(!packageDeclaration.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects sysActor and message 
			JavaSDM.ensure(!sysActor.equals(message));

			// check isomorphic binding between objects sysActorToSysLine and message 
			JavaSDM.ensure(!sysActorToSysLine.equals(message));

			// check isomorphic binding between objects sysLine and message 
			JavaSDM.ensure(!sysLine.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects stepToMessage and packageDeclaration 
			JavaSDM.ensure(!stepToMessage.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToMessage 
			JavaSDM.ensure(!sysActor.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and stepToMessage 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToMessage));

			// check isomorphic binding between objects sysLine and stepToMessage 
			JavaSDM.ensure(!sysLine.equals(stepToMessage));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object __alt_ref_altFlow
			__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object line__coveredBy__operand
			line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_stepAlternative_alt
			__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__guard__guard
			operand__guard__guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__message__message
			messageSend__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__covered__sysLine
			combo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__sysLine
			parentCombo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentCombo
			line__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object guard__specification__spec
			guard__specification__spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__sendEvent__messageSend
			message__sendEvent__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_actor_actor
			__step_actor_actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__combo
			sysLine__coveredBy__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object interaction__message__message
			interaction__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__line
			parentOperand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__operand
			sysLine__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentOperand
			line__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__interaction__interaction
			message__interaction__interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__message__message
			messageReceive__message__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__sysLine
			operand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__line
			operand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__sysLine
			parentOperand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__covered__sysLine
			messageSend__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __flow_steps_step
			__flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object parentCombo__covered__line
			parentCombo__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend.setName("coveredBy");
			// assign attribute messageSend__covered__sysLine
			messageSend__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__combo
			sysLine__coveredBy__combo.setName("coveredBy");
			// assign attribute combo__covered__sysLine
			combo__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__operand
			sysLine__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__sysLine
			operand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__sysLine
			parentOperand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__sysLine
			parentCombo__covered__sysLine.setName("covered");
			// assign attribute parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive.setName("fragment");
			// assign attribute messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand
					.setName("enclosingOperand");
			// assign attribute line__coveredBy__parentOperand
			line__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__line
			parentOperand__covered__line.setName("covered");
			// assign attribute line__coveredBy__parentCombo
			line__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__line
			parentCombo__covered__line.setName("covered");
			// assign attribute __step_stepAlternative_alt
			__step_stepAlternative_alt.setName("stepAlternative");
			// assign attribute __alt_ref_altFlow
			__alt_ref_altFlow.setName("ref");
			// assign attribute line__coveredBy__operand
			line__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__line
			operand__covered__line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute operand__guard__guard
			operand__guard__guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute guard__specification__spec
			guard__specification__spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute __flow_steps_step
			__flow_steps_step.setName("steps");
			// assign attribute __step_actor_actor
			__step_actor_actor.setName("actor");
			// assign attribute message__sendEvent__messageSend
			message__sendEvent__messageSend.setName("sendEvent");
			// assign attribute message__receiveEvent__messageReceive
			message__receiveEvent__messageReceive.setName("receiveEvent");
			// assign attribute message__interaction__interaction
			message__interaction__interaction.setName("interaction");
			// assign attribute interaction__message__message
			interaction__message__message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute messageSend__message__message
			messageSend__message__message.setName("message");
			// assign attribute messageReceive__message__message
			messageReceive__message__message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__alt_ref_altFlow, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_stepAlternative_alt, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__guard__guard, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard__specification__spec, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__sendEvent__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_actor_actor, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					interaction__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__interaction__interaction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__message__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message__receiveEvent__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__enclosingOperand__parentOperand,
					"createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__flow_steps_step, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			__step_actor_actor.setTrg(actor);

			// create link
			sysLine__coveredBy__operand.setSrc(sysLine);

			// create link
			sysLine__coveredBy__combo.setSrc(sysLine);

			// create link
			combo__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__messageSend.setSrc(sysLine);

			// create link
			parentCombo__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__parentCombo.setSrc(sysLine);

			// create link
			sysLine__coveredBy__parentOperand.setSrc(sysLine);

			// create link
			messageSend__covered__sysLine.setTrg(sysLine);

			// create link
			parentOperand__covered__sysLine.setTrg(sysLine);

			// create link
			operand__covered__sysLine.setTrg(sysLine);

			// create link
			message__sendEvent__messageSend.setTrg(messageSend);

			// create link
			messageSend__message__message.setSrc(messageSend);

			// create link
			sysLine__coveredBy__messageSend.setTrg(messageSend);

			// create link
			messageSend__covered__sysLine.setSrc(messageSend);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			combo__covered__sysLine.setSrc(combo);

			// create link
			sysLine__coveredBy__combo.setTrg(combo);

			// create link
			sysLine__coveredBy__operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			operand__covered__line.setSrc(operand);

			// create link
			line__coveredBy__operand.setTrg(operand);

			// create link
			operand__covered__sysLine.setSrc(operand);

			// create link
			operand__guard__guard.setSrc(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setTrg(parentOperand);

			// create link
			parentOperand__fragment__messageReceive.setSrc(parentOperand);

			// create link
			parentOperand__covered__sysLine.setSrc(parentOperand);

			// create link
			sysLine__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			line__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			parentOperand__covered__line.setSrc(parentOperand);

			// create link
			sysLine__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			line__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			parentCombo__covered__sysLine.setSrc(parentCombo);

			// create link
			parentCombo__covered__line.setSrc(parentCombo);

			// create link
			__flow_steps_step.setSrc(flow);

			// create link
			messageReceive__message__message.setSrc(messageReceive);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setSrc(messageReceive);

			// create link
			parentOperand__fragment__messageReceive.setTrg(messageReceive);

			// create link
			message__receiveEvent__messageReceive.setTrg(messageReceive);

			// create link
			line__coveredBy__parentCombo.setSrc(line);

			// create link
			line__coveredBy__parentOperand.setSrc(line);

			// create link
			parentCombo__covered__line.setTrg(line);

			// create link
			parentOperand__covered__line.setTrg(line);

			// create link
			operand__covered__line.setTrg(line);

			// create link
			line__coveredBy__operand.setSrc(line);

			// create link
			__flow_steps_step.setTrg(step);

			// create link
			__step_actor_actor.setSrc(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			__step_stepAlternative_alt.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			__step_stepAlternative_alt.setTrg(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			__alt_ref_altFlow.setSrc(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			operand__guard__guard.setTrg(guard);

			// create link
			guard__specification__spec.setSrc(guard);

			// create link
			guard__specification__spec.setTrg(spec);

			// create link
			__alt_ref_altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			messageReceive__message__message.setTrg(message);

			// create link
			interaction__message__message.setTrg(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			message__interaction__interaction.setSrc(message);

			// create link
			messageSend__message__message.setTrg(message);

			// create link
			message__sendEvent__messageSend.setSrc(message);

			// create link
			message__receiveEvent__messageReceive.setSrc(message);

			// create link
			message__interaction__interaction.setTrg(interaction);

			// create link
			interaction__message__message.setSrc(interaction);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_FWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		NormalStep step = null;
		Actor sysActor = null;
		UseCase useCase = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		CSP csp = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Lifeline line = null;
		Iterator fujaba__IterActorToActorToLine = null;
		ActorToLifeline actorToLine = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterSysActorToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterFlowToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (match.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (match.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (match.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (match.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (match.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link source from flow to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterFlowToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(flow,
							FlowToInteractionFragment.class, "source"))
					.iterator();

			while (fujaba__IterFlowToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterFlowToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getTarget();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;

					// iterate to-many link source from sysActor to sysActorToSysLine
					fujaba__Success = false;

					fujaba__IterSysActorToSysActorToSysLine = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(sysActor,
											ActorToLifeline.class, "source"))
							.iterator();

					while (fujaba__IterSysActorToSysActorToSysLine.hasNext()) {
						try {
							sysActorToSysLine = (ActorToLifeline) fujaba__IterSysActorToSysActorToSysLine
									.next();

							// check object sysActorToSysLine is really bound
							JavaSDM.ensure(sysActorToSysLine != null);
							// bind object
							sysLine = sysActorToSysLine.getTarget();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);

							// iterate to-many link source from actor to actorToLine
							fujaba__Success = false;

							fujaba__IterActorToActorToLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(actor,
													ActorToLifeline.class,
													"source")).iterator();

							while (fujaba__IterActorToActorToLine.hasNext()) {
								try {
									actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine
											.next();

									// check object actorToLine is really bound
									JavaSDM.ensure(actorToLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									line = actorToLine.getTarget();

									// check object line is really bound
									JavaSDM.ensure(line != null);

									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// iterate to-many link source from useCase to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															useCase,
															UseCaseToInteraction.class,
															"source"))
											.iterator();

									while (fujaba__IterUseCaseToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											interaction = useCaseToInteraction
													.getTarget();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object alt is really bound
												JavaSDM.ensure(alt != null);
												// check object altFlow is really bound
												JavaSDM.ensure(altFlow != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object step is really bound
												JavaSDM.ensure(step != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects flow and altFlow 
												JavaSDM.ensure(!flow
														.equals(altFlow));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check link actor from step to actor
												JavaSDM.ensure(actor
														.equals(step.getActor()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link ref from alt to altFlow
												JavaSDM.ensure(altFlow
														.equals(alt.getRef()));

												// check link actors from actor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(actor
																.eContainer()));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// bind object
												parentCombo = parentOperand
														.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
														.eContainer() : null;

												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);

												// check if contained via correct reference
												JavaSDM.ensure(parentCombo
														.getOperand().contains(
																parentOperand));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link stepAlternative from alt to step
												JavaSDM.ensure(step.equals(alt
														.eContainer()));

												// check link steps from step to flow
												JavaSDM.ensure(flow.equals(step
														.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// check link useCases from useCase to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(useCase
																.eContainer()));

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __step_actor_actor
												__step_actor_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flow_steps_step
												__flow_steps_step = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __step_stepAlternative_alt
												__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __alt_ref_altFlow
												__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand
														.setName("operand");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __step_stepAlternative_alt
												__step_stepAlternative_alt
														.setName("stepAlternative");
												// assign attribute __alt_ref_altFlow
												__alt_ref_altFlow
														.setName("ref");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __flow_steps_step
												__flow_steps_step
														.setName("steps");
												// assign attribute __step_actor_actor
												__step_actor_actor
														.setName("actor");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");
												// assign attribute __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase
														.setName("useCases");

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_useCases_useCase
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												__step_actor_actor
														.setTrg(actor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setTrg(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setSrc(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												__flow_steps_step.setSrc(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(step);

												// create link
												__step_actor_actor.setSrc(step);

												// create link
												__step_stepAlternative_alt
														.setSrc(step);

												// create link
												__flow_steps_step.setTrg(step);

												// create link
												__alt_ref_altFlow.setSrc(alt);

												// create link
												__step_stepAlternative_alt
														.setTrg(alt);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(alt);

												// create link
												__alt_ref_altFlow
														.setTrg(altFlow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(altFlow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												__packageDeclaration_useCases_useCase
														.setTrg(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_actor_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flow_steps_step,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_useCases_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__alt_ref_altFlow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_operand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_stepAlternative_alt,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_FWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	line,
																	step,
																	alt,
																	altFlow,
																	useCase,
																	useCaseToInteraction,
																	interaction,
																	actorToLine));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_FWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		match.registerObject("packageDeclaration", packageDeclaration);
		match.registerObject("actor", actor);
		match.registerObject("sysActor", sysActor);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Interaction interaction,
			ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject step, EObject alt,
			EObject stepToCombo, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject message,
			EObject interaction, EObject stepToMessage, EObject actorToLine) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, sysLine,
					messageSend, combo, operand, parentOperand, parentCombo,
					messageReceive, line, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_sysLine
				__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_covered_sysLine
				__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_sysLine
				__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_sysLine
				__messageSend_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_sysLine
				__combo_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_sysLine
				__operand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine.setName("covered");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				__combo_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_combo.setSrc(sysLine);

				// create link
				__messageSend_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_messageSend.setSrc(sysLine);

				// create link
				__parentCombo_covered_sysLine.setTrg(sysLine);

				// create link
				__operand_covered_sysLine.setTrg(sysLine);

				// create link
				__parentOperand_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_parentCombo.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_operand.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_parentOperand.setSrc(sysLine);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__sysLine_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__messageSend_covered_sysLine.setSrc(messageSend);

				// create link
				__combo_covered_sysLine.setSrc(combo);

				// create link
				__sysLine_coveredBy_combo.setTrg(combo);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__operand_covered_sysLine.setSrc(operand);

				// create link
				__sysLine_coveredBy_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_covered_sysLine.setSrc(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__parentCombo_covered_sysLine.setSrc(parentCombo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysLine, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, sysLine, messageSend, combo,
					operand, parentOperand, parentCombo, messageReceive, line,
					guard, spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		CombinedFragment combo = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		PackageDeclaration packageDeclaration = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStep step = null;
		NormalStepToCombinedFragment stepToCombo = null;
		FlowToInteractionFragment altFlowToOperand = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		AlternativeFlowAlternative alt = null;
		NormalStepToMessage stepToMessage = null;
		AlternativeFlow altFlow = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge step__stepAlternative__alt = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge alt__ref__altFlow = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge stepToMessage__source__step = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge stepToMessage__target__message = null;
		EMoflonEdge step__actor__actor = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge flow__steps__step = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object step
			step = UseCaseDSLFactory.eINSTANCE.createNormalStep();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object alt
			alt = UseCaseDSLFactory.eINSTANCE
					.createAlternativeFlowAlternative();

			// create object stepToMessage
			stepToMessage = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToMessage();

			// create object altFlow
			altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();

			// assign attribute step
			step.setName((java.lang.String) csp.getValue("step", "name"));
			// assign attribute alt
			alt.setCondition((java.lang.String) csp
					.getValue("alt", "condition"));
			// assign attribute altFlow
			altFlow.setName((java.lang.String) csp.getValue("altFlow", "name"));

			// create link
			stepToMessage.setTarget(message);

			// create link
			step.setActor(actor);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			flow.getSteps().add(step); // add link

			// create link
			step.getStepAlternative().add(alt); // add link

			// create link
			stepToCombo.setSource(step);

			// create link
			stepToMessage.setSource(step);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt, altFlow,
					"ref");

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			altFlowToOperand.setSource(altFlow);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					message, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object stepToMessage is really bound
			JavaSDM.ensure(stepToMessage != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects message and actor 
			JavaSDM.ensure(!message.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects stepToMessage and actor 
			JavaSDM.ensure(!stepToMessage.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects message and actorToLine 
			JavaSDM.ensure(!message.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects stepToMessage and actorToLine 
			JavaSDM.ensure(!stepToMessage.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects message and alt 
			JavaSDM.ensure(!message.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects stepToMessage and alt 
			JavaSDM.ensure(!stepToMessage.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects message and altFlow 
			JavaSDM.ensure(!message.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects stepToMessage and altFlow 
			JavaSDM.ensure(!stepToMessage.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects message and altFlowToOperand 
			JavaSDM.ensure(!message.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToMessage and altFlowToOperand 
			JavaSDM.ensure(!stepToMessage.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects message and alternative1ToOperand 
			JavaSDM.ensure(!message.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToMessage and alternative1ToOperand 
			JavaSDM.ensure(!stepToMessage.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects message and combo 
			JavaSDM.ensure(!message.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects stepToMessage and combo 
			JavaSDM.ensure(!stepToMessage.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects message and flow 
			JavaSDM.ensure(!message.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects stepToMessage and flow 
			JavaSDM.ensure(!stepToMessage.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects message and flowToParentOperand 
			JavaSDM.ensure(!message.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToMessage and flowToParentOperand 
			JavaSDM.ensure(!stepToMessage.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects message and guard 
			JavaSDM.ensure(!message.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects stepToMessage and guard 
			JavaSDM.ensure(!stepToMessage.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects message and interaction 
			JavaSDM.ensure(!message.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects stepToMessage and interaction 
			JavaSDM.ensure(!stepToMessage.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects message and line 
			JavaSDM.ensure(!message.equals(line));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects stepToMessage and line 
			JavaSDM.ensure(!stepToMessage.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageReceive and message 
			JavaSDM.ensure(!messageReceive.equals(message));

			// check isomorphic binding between objects messageSend and message 
			JavaSDM.ensure(!messageSend.equals(message));

			// check isomorphic binding between objects operand and message 
			JavaSDM.ensure(!operand.equals(message));

			// check isomorphic binding between objects packageDeclaration and message 
			JavaSDM.ensure(!packageDeclaration.equals(message));

			// check isomorphic binding between objects parentCombo and message 
			JavaSDM.ensure(!parentCombo.equals(message));

			// check isomorphic binding between objects parentOperand and message 
			JavaSDM.ensure(!parentOperand.equals(message));

			// check isomorphic binding between objects spec and message 
			JavaSDM.ensure(!spec.equals(message));

			// check isomorphic binding between objects step and message 
			JavaSDM.ensure(!step.equals(message));

			// check isomorphic binding between objects stepToCombo and message 
			JavaSDM.ensure(!stepToCombo.equals(message));

			// check isomorphic binding between objects stepToMessage and message 
			JavaSDM.ensure(!stepToMessage.equals(message));

			// check isomorphic binding between objects sysActor and message 
			JavaSDM.ensure(!sysActor.equals(message));

			// check isomorphic binding between objects sysActorToSysLine and message 
			JavaSDM.ensure(!sysActorToSysLine.equals(message));

			// check isomorphic binding between objects sysLine and message 
			JavaSDM.ensure(!sysLine.equals(message));

			// check isomorphic binding between objects useCase and message 
			JavaSDM.ensure(!useCase.equals(message));

			// check isomorphic binding between objects useCaseToInteraction and message 
			JavaSDM.ensure(!useCaseToInteraction.equals(message));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects stepToMessage and messageReceive 
			JavaSDM.ensure(!stepToMessage.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects stepToMessage and messageSend 
			JavaSDM.ensure(!stepToMessage.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects stepToMessage and operand 
			JavaSDM.ensure(!stepToMessage.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects stepToMessage and packageDeclaration 
			JavaSDM.ensure(!stepToMessage.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects stepToMessage and parentCombo 
			JavaSDM.ensure(!stepToMessage.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects stepToMessage and parentOperand 
			JavaSDM.ensure(!stepToMessage.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects stepToMessage and spec 
			JavaSDM.ensure(!stepToMessage.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects stepToMessage and step 
			JavaSDM.ensure(!stepToMessage.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects stepToMessage and stepToCombo 
			JavaSDM.ensure(!stepToMessage.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActor and stepToMessage 
			JavaSDM.ensure(!sysActor.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and stepToMessage 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToMessage));

			// check isomorphic binding between objects sysLine and stepToMessage 
			JavaSDM.ensure(!sysLine.equals(stepToMessage));

			// check isomorphic binding between objects useCase and stepToMessage 
			JavaSDM.ensure(!useCase.equals(stepToMessage));

			// check isomorphic binding between objects useCaseToInteraction and stepToMessage 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToMessage));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__stepAlternative__alt
			step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_message_message
			__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_sysLine
			__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_sendEvent_messageSend
			__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __guard_specification_spec
			__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_line
			__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_message_message
			__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_interaction_interaction
			__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __interaction_message_message
			__interaction_message_message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_guard_guard
			__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_line
			__operand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alt__ref__altFlow
			alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_covered_sysLine
			__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_operand
			__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__source__step
			stepToMessage__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToMessage__target__message
			stepToMessage__target__message = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__actor__actor
			step__actor__actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageSend_covered_sysLine
			__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_line
			__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object flow__steps__step
			flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend.setName("coveredBy");
			// assign attribute __messageSend_covered_sysLine
			__messageSend_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo.setName("coveredBy");
			// assign attribute __combo_covered_sysLine
			__combo_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_sysLine
			__operand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine.setName("covered");
			// assign attribute __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive.setName("fragment");
			// assign attribute __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand
					.setName("enclosingOperand");
			// assign attribute __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_line
			__parentOperand_covered_line.setName("covered");
			// assign attribute __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_line
			__parentCombo_covered_line.setName("covered");
			// assign attribute step__stepAlternative__alt
			step__stepAlternative__alt.setName("stepAlternative");
			// assign attribute alt__ref__altFlow
			alt__ref__altFlow.setName("ref");
			// assign attribute __line_coveredBy_operand
			__line_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_line
			__operand_covered_line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute __operand_guard_guard
			__operand_guard_guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute __guard_specification_spec
			__guard_specification_spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");
			// assign attribute flow__steps__step
			flow__steps__step.setName("steps");
			// assign attribute step__actor__actor
			step__actor__actor.setName("actor");
			// assign attribute __message_sendEvent_messageSend
			__message_sendEvent_messageSend.setName("sendEvent");
			// assign attribute __message_receiveEvent_messageReceive
			__message_receiveEvent_messageReceive.setName("receiveEvent");
			// assign attribute __message_interaction_interaction
			__message_interaction_interaction.setName("interaction");
			// assign attribute __interaction_message_message
			__interaction_message_message.setName("message");
			// assign attribute stepToMessage__source__step
			stepToMessage__source__step.setName("source");
			// assign attribute stepToMessage__target__message
			stepToMessage__target__message.setName("target");
			// assign attribute __messageSend_message_message
			__messageSend_message_message.setName("message");
			// assign attribute __messageReceive_message_message
			__messageReceive_message_message.setName("message");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__stepAlternative__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_sendEvent_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__guard_specification_spec, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_interaction_interaction, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__interaction_message_message, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_guard_guard, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt__ref__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_enclosingOperand_parentOperand,
					"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__message_receiveEvent_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToMessage__target__message, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__actor__actor, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					flow__steps__step, "createdEdges");

			// create link
			step__actor__actor.setTrg(actor);

			// create link
			__messageSend_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_messageSend.setSrc(sysLine);

			// create link
			__parentOperand_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_operand.setSrc(sysLine);

			// create link
			__sysLine_coveredBy_parentOperand.setSrc(sysLine);

			// create link
			__operand_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_parentCombo.setSrc(sysLine);

			// create link
			__sysLine_coveredBy_combo.setSrc(sysLine);

			// create link
			__combo_covered_sysLine.setTrg(sysLine);

			// create link
			__parentCombo_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_messageSend.setTrg(messageSend);

			// create link
			__messageSend_covered_sysLine.setSrc(messageSend);

			// create link
			__messageSend_message_message.setSrc(messageSend);

			// create link
			__message_sendEvent_messageSend.setTrg(messageSend);

			// create link
			__combo_covered_sysLine.setSrc(combo);

			// create link
			__sysLine_coveredBy_combo.setTrg(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			__operand_covered_sysLine.setSrc(operand);

			// create link
			__operand_guard_guard.setSrc(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			__sysLine_coveredBy_operand.setTrg(operand);

			// create link
			__line_coveredBy_operand.setTrg(operand);

			// create link
			__operand_covered_line.setSrc(operand);

			// create link
			__parentOperand_covered_line.setSrc(parentOperand);

			// create link
			__line_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setTrg(parentOperand);

			// create link
			__parentOperand_covered_sysLine.setSrc(parentOperand);

			// create link
			__parentOperand_fragment_messageReceive.setSrc(parentOperand);

			// create link
			__parentCombo_covered_line.setSrc(parentCombo);

			// create link
			__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			__line_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			__parentCombo_covered_sysLine.setSrc(parentCombo);

			// create link
			flow__steps__step.setSrc(flow);

			// create link
			__messageReceive_message_message.setSrc(messageReceive);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setSrc(messageReceive);

			// create link
			__parentOperand_fragment_messageReceive.setTrg(messageReceive);

			// create link
			__message_receiveEvent_messageReceive.setTrg(messageReceive);

			// create link
			__line_coveredBy_parentCombo.setSrc(line);

			// create link
			__parentCombo_covered_line.setTrg(line);

			// create link
			__operand_covered_line.setTrg(line);

			// create link
			__parentOperand_covered_line.setTrg(line);

			// create link
			__line_coveredBy_operand.setSrc(line);

			// create link
			__line_coveredBy_parentOperand.setSrc(line);

			// create link
			step__actor__actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			stepToMessage__source__step.setTrg(step);

			// create link
			flow__steps__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setSrc(step);

			// create link
			step__stepAlternative__alt.setTrg(alt);

			// create link
			alt__ref__altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			__operand_guard_guard.setTrg(guard);

			// create link
			__guard_specification_spec.setSrc(guard);

			// create link
			__guard_specification_spec.setTrg(spec);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			alt__ref__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			__interaction_message_message.setTrg(message);

			// create link
			__message_interaction_interaction.setSrc(message);

			// create link
			stepToMessage__target__message.setTrg(message);

			// create link
			__message_receiveEvent_messageReceive.setSrc(message);

			// create link
			__messageSend_message_message.setTrg(message);

			// create link
			__messageReceive_message_message.setTrg(message);

			// create link
			__message_sendEvent_messageSend.setSrc(message);

			// create link
			__message_interaction_interaction.setTrg(interaction);

			// create link
			__interaction_message_message.setSrc(interaction);

			// create link
			stepToMessage__target__message.setSrc(stepToMessage);

			// create link
			stepToMessage__source__step.setSrc(stepToMessage);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_BWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand,
				useCase, useCaseToInteraction, message, interaction,
				stepToMessage, actorToLine);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Lifeline sysLine = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __interaction_message_message = null;
		CSP csp = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Iterator fujaba__IterInteractionToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Actor actor = null;
		Iterator fujaba__IterLineToActorToLine = null;
		ActorToLifeline actorToLine = null;
		Actor sysActor = null;
		Iterator fujaba__IterSysLineToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		NamedFlow flow = null;
		Iterator fujaba__IterParentOperandToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (match.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (match.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (match.getObject("message"));

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;
			_TmpObject = (match.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (match.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link target from parentOperand to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterParentOperandToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							parentOperand, FlowToInteractionFragment.class,
							"target")).iterator();

			while (fujaba__IterParentOperandToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterParentOperandToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getSource();

					// ensure correct type and really bound of object flow
					JavaSDM.ensure(_TmpObject instanceof NamedFlow);
					flow = (NamedFlow) _TmpObject;

					// iterate to-many link target from sysLine to sysActorToSysLine
					fujaba__Success = false;

					fujaba__IterSysLineToSysActorToSysLine = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(sysLine,
											ActorToLifeline.class, "target"))
							.iterator();

					while (fujaba__IterSysLineToSysActorToSysLine.hasNext()) {
						try {
							sysActorToSysLine = (ActorToLifeline) fujaba__IterSysLineToSysActorToSysLine
									.next();

							// check object sysActorToSysLine is really bound
							JavaSDM.ensure(sysActorToSysLine != null);
							// bind object
							sysActor = sysActorToSysLine.getSource();

							// check object sysActor is really bound
							JavaSDM.ensure(sysActor != null);

							// iterate to-many link target from line to actorToLine
							fujaba__Success = false;

							fujaba__IterLineToActorToLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													ActorToLifeline.class,
													"target")).iterator();

							while (fujaba__IterLineToActorToLine.hasNext()) {
								try {
									actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine
											.next();

									// check object actorToLine is really bound
									JavaSDM.ensure(actorToLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									actor = actorToLine.getSource();

									// check object actor is really bound
									JavaSDM.ensure(actor != null);

									// check isomorphic binding between objects sysActor and actor 
									JavaSDM.ensure(!sysActor.equals(actor));

									// iterate to-many link target from interaction to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															interaction,
															UseCaseToInteraction.class,
															"target"))
											.iterator();

									while (fujaba__IterInteractionToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											useCase = useCaseToInteraction
													.getSource();

											// check object useCase is really bound
											JavaSDM.ensure(useCase != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// bind object
												packageDeclaration = actor
														.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
														.eContainer() : null;

												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);

												// check if contained via correct reference
												JavaSDM.ensure(packageDeclaration
														.getActors().contains(
																actor));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// check link useCases from useCase to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(useCase
																.eContainer()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_sysLine
												__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageSend_covered_sysLine
												__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __combo_covered_sysLine
												__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageSend_message_message
												__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_sendEvent_messageSend
												__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_operand
												__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_guard_guard
												__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_line
												__operand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_line
												__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_line
												__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageReceive_message_message
												__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_receiveEvent_messageReceive
												__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __guard_specification_spec
												__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __message_interaction_interaction
												__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_message_message
												__interaction_message_message = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend
														.setName("coveredBy");
												// assign attribute __messageSend_covered_sysLine
												__messageSend_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo
														.setName("coveredBy");
												// assign attribute __combo_covered_sysLine
												__combo_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_sysLine
												__operand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine
														.setName("covered");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand
														.setName("operand");
												// assign attribute __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive
														.setName("fragment");
												// assign attribute __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand
														.setName("enclosingOperand");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_line
												__parentOperand_covered_line
														.setName("covered");
												// assign attribute __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_line
												__parentCombo_covered_line
														.setName("covered");
												// assign attribute __line_coveredBy_operand
												__line_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_line
												__operand_covered_line
														.setName("covered");
												// assign attribute __operand_guard_guard
												__operand_guard_guard
														.setName("guard");
												// assign attribute __guard_specification_spec
												__guard_specification_spec
														.setName("specification");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __message_sendEvent_messageSend
												__message_sendEvent_messageSend
														.setName("sendEvent");
												// assign attribute __message_receiveEvent_messageReceive
												__message_receiveEvent_messageReceive
														.setName("receiveEvent");
												// assign attribute __message_interaction_interaction
												__message_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_message_message
												__interaction_message_message
														.setName("message");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __messageSend_message_message
												__messageSend_message_message
														.setName("message");
												// assign attribute __messageReceive_message_message
												__messageReceive_message_message
														.setName("message");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");
												// assign attribute __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase
														.setName("useCases");

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												__packageDeclaration_useCases_useCase
														.setSrc(packageDeclaration);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												__operand_covered_sysLine
														.setTrg(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												__sysLine_coveredBy_combo
														.setSrc(sysLine);

												// create link
												__parentOperand_covered_sysLine
														.setTrg(sysLine);

												// create link
												__messageSend_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_parentCombo
														.setSrc(sysLine);

												// create link
												__sysLine_coveredBy_messageSend
														.setSrc(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												__combo_covered_sysLine
														.setTrg(sysLine);

												// create link
												__parentCombo_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_parentOperand
														.setSrc(sysLine);

												// create link
												__sysLine_coveredBy_operand
														.setSrc(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageSend);

												// create link
												__messageSend_covered_sysLine
														.setSrc(messageSend);

												// create link
												__sysLine_coveredBy_messageSend
														.setTrg(messageSend);

												// create link
												__messageSend_message_message
														.setSrc(messageSend);

												// create link
												__message_sendEvent_messageSend
														.setTrg(messageSend);

												// create link
												__sysLine_coveredBy_combo
														.setTrg(combo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(combo);

												// create link
												__combo_covered_sysLine
														.setSrc(combo);

												// create link
												__line_coveredBy_operand
														.setTrg(operand);

												// create link
												__operand_guard_guard
														.setSrc(operand);

												// create link
												__operand_covered_sysLine
														.setSrc(operand);

												// create link
												__operand_covered_line
														.setSrc(operand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(operand);

												// create link
												__sysLine_coveredBy_operand
														.setTrg(operand);

												// create link
												__parentOperand_covered_line
														.setSrc(parentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__parentOperand_covered_sysLine
														.setSrc(parentOperand);

												// create link
												__line_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setTrg(parentOperand);

												// create link
												__sysLine_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentOperand_fragment_messageReceive
														.setSrc(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setSrc(parentCombo);

												// create link
												__line_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												__sysLine_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												__parentCombo_covered_line
														.setSrc(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												__parentCombo_covered_sysLine
														.setSrc(parentCombo);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												__messageReceive_message_message
														.setSrc(messageReceive);

												// create link
												__parentOperand_fragment_messageReceive
														.setTrg(messageReceive);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageReceive);

												// create link
												__message_receiveEvent_messageReceive
														.setTrg(messageReceive);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setSrc(messageReceive);

												// create link
												__parentCombo_covered_line
														.setTrg(line);

												// create link
												__line_coveredBy_parentOperand
														.setSrc(line);

												// create link
												__parentOperand_covered_line
														.setTrg(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__line_coveredBy_parentCombo
														.setSrc(line);

												// create link
												__operand_covered_line
														.setTrg(line);

												// create link
												__line_coveredBy_operand
														.setSrc(line);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												__guard_specification_spec
														.setSrc(guard);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(guard);

												// create link
												__operand_guard_guard
														.setTrg(guard);

												// create link
												__guard_specification_spec
														.setTrg(spec);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(spec);

												// create link
												__packageDeclaration_useCases_useCase
														.setTrg(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												__message_interaction_interaction
														.setSrc(message);

												// create link
												__message_receiveEvent_messageReceive
														.setSrc(message);

												// create link
												__interaction_message_message
														.setTrg(message);

												// create link
												__messageSend_message_message
														.setTrg(message);

												// create link
												__messageReceive_message_message
														.setTrg(message);

												// create link
												__message_sendEvent_messageSend
														.setSrc(message);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(message);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__interaction_message_message
														.setSrc(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__message_interaction_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_sendEvent_messageSend,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageReceive_enclosingOperand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_receiveEvent_messageReceive,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__combo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_guard_guard,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__message_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__guard_specification_spec,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageReceive_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageSend_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_operand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_combo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_useCases_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_fragment_messageReceive,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_messageSend,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_message_message,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageSend_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_line,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_BWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	messageSend,
																	combo,
																	operand,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	messageReceive,
																	line,
																	guard,
																	spec,
																	useCase,
																	useCaseToInteraction,
																	message,
																	interaction,
																	actorToLine));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_BWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		match.registerObject("sysLine", sysLine);
		match.registerObject("messageSend", messageSend);
		match.registerObject("combo", combo);
		match.registerObject("operand", operand);
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			InteractionConstraint guard, LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction, ActorToLifeline actorToLine) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject step, EObject alt,
			EObject stepToCombo, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject message,
			EObject interaction, EObject stepToMessage, EObject actorToLine) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actorToLine", actorToLine);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString())
				&& match.getObject("message")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessage());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_250(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_364086 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_469316 = null;
		Interaction __DEC_messageSend_enclosingInteraction_218206 = null;
		Interaction __DEC_operand_enclosingInteraction_584485 = null;
		InteractionOperand __DEC_combo_fragment_407204 = null;
		InteractionOperand __DEC_messageReceive_fragment_910517 = null;
		InteractionOperand __DEC_messageSend_fragment_484017 = null;
		InteractionOperand __DEC_operand_fragment_454562 = null;
		Constraint __DEC_spec_specification_973617 = null;
		InteractionOperand __DEC_guard_guard_690396 = null;
		CombinedFragment __DEC_operand_operand_102457 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_487511 = null;
		Message __DEC_messageReceive_receiveEvent_487511 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781970 = null;
		Message __DEC_messageSend_receiveEvent_781970 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_229154 = null;
		Message __DEC_messageReceive_sendEvent_229154 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911835 = null;
		Message __DEC_messageSend_sendEvent_911835 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_453605 = null;
		MessageEnd __DEC_message_message_453605 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to sysLine
			JavaSDM.ensure(messageSend.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link covered from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// iterate to-many link covered from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_364086 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_364086 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_364086 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_364086 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_364086
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_469316 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_469316 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_469316 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_469316 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_469316
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_218206 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_218206 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_218206 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_218206 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_218206
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_584485 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_584485 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_584485 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_584485 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_584485
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_407204 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_407204 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_407204 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_407204 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_407204
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_407204 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_407204
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_910517 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_910517 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_910517 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_910517 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_910517
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_910517 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_910517
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_484017 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_484017 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_484017 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_484017 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_484017
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_484017 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_484017
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_454562 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_454562 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_454562 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_454562 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_454562
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_454562 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_454562
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_973617 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_973617 is really bound
													JavaSDM.ensure(__DEC_spec_specification_973617 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_973617
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_973617 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_973617
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_690396 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_690396 is really bound
													JavaSDM.ensure(__DEC_guard_guard_690396 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_690396
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_690396 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_690396
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_690396 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_690396
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_102457 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_102457 is really bound
													JavaSDM.ensure(__DEC_operand_operand_102457 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_102457
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_102457 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_102457
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_102457 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_102457
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_487511
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_487511 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_487511
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_487511 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_487511
																	.next();

															// check object __DEC_messageReceive_receiveEvent_487511 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_487511 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_487511 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_487511
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_781970
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781970 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781970
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_781970 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781970
																	.next();

															// check object __DEC_messageSend_receiveEvent_781970 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_781970 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_781970 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_781970
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_229154
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_229154 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_229154
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_229154 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_229154
																	.next();

															// check object __DEC_messageReceive_sendEvent_229154 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_229154 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_229154 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_229154
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_911835
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911835 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911835
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_911835 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911835
																	.next();

															// check object __DEC_messageSend_sendEvent_911835 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_911835 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_911835 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_911835
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_453605
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_453605 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_453605
																	.hasNext()) {
														try {
															__DEC_message_message_453605 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_453605
																	.next();

															// check object __DEC_message_message_453605 is really bound
															JavaSDM.ensure(__DEC_message_message_453605 != null);
															// check isomorphic binding between objects __DEC_message_message_453605 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_453605
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_453605 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_453605
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to combo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(combo)));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to sysLine
												JavaSDM.ensure(sysLine
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, sysLine,
																messageSend,
																combo, operand,
																parentOperand,
																parentCombo,
																messageReceive,
																line, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_251(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_512 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_982347 = null;
		Interaction __DEC_messageSend_enclosingInteraction_23450 = null;
		Interaction __DEC_operand_enclosingInteraction_680187 = null;
		InteractionOperand __DEC_combo_fragment_998886 = null;
		InteractionOperand __DEC_messageReceive_fragment_208564 = null;
		InteractionOperand __DEC_messageSend_fragment_871087 = null;
		InteractionOperand __DEC_operand_fragment_775472 = null;
		Constraint __DEC_spec_specification_317414 = null;
		InteractionOperand __DEC_guard_guard_392079 = null;
		CombinedFragment __DEC_operand_operand_39697 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954538 = null;
		Message __DEC_messageReceive_receiveEvent_954538 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147962 = null;
		Message __DEC_messageSend_receiveEvent_147962 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_889131 = null;
		Message __DEC_messageReceive_sendEvent_889131 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_291631 = null;
		Message __DEC_messageSend_sendEvent_291631 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_838729 = null;
		MessageEnd __DEC_message_message_838729 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link covered from messageSend to sysLine
			JavaSDM.ensure(messageSend.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to operand
			fujaba__Success = false;

			fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link covered from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// iterate to-many link covered from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link src from sysLine to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	sysLine,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterSysLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to messageSend
													JavaSDM.ensure(messageSend
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_512 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_512 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_512 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_512 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_512
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_982347 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_982347 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_982347 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_982347 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_982347
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_23450 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_23450 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_23450 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_23450 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_23450
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_680187 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_680187 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_680187 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_680187 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_680187
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_998886 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_998886 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_998886 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_998886 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_998886
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_998886 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_998886
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_208564 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_208564 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_208564 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_208564 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_208564
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_208564 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_208564
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_871087 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_871087 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_871087 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_871087 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_871087
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_871087 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_871087
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_775472 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_775472 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_775472 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_775472 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_775472
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_775472 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_775472
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_317414 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_317414 is really bound
															JavaSDM.ensure(__DEC_spec_specification_317414 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_317414
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_317414 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_317414
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_392079 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_392079 is really bound
															JavaSDM.ensure(__DEC_guard_guard_392079 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_392079
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_392079 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_392079
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_392079 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_392079
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_39697 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_39697 is really bound
															JavaSDM.ensure(__DEC_operand_operand_39697 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_39697
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_39697 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_39697
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_39697 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_39697
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_954538
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954538 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954538
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_954538 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_954538
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_954538 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_954538 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_954538 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_954538
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_147962
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147962 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147962
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_147962 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_147962
																			.next();

																	// check object __DEC_messageSend_receiveEvent_147962 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_147962 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_147962 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_147962
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_889131
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_889131 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_889131
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_889131 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_889131
																			.next();

																	// check object __DEC_messageReceive_sendEvent_889131 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_889131 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_889131 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_889131
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_291631
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_291631 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_291631
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_291631 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_291631
																			.next();

																	// check object __DEC_messageSend_sendEvent_291631 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_291631 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_291631 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_291631
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_838729
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_838729 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_838729
																			.hasNext()) {
																try {
																	__DEC_message_message_838729 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_838729
																			.next();

																	// check object __DEC_message_message_838729 is really bound
																	JavaSDM.ensure(__DEC_message_message_838729 != null);
																	// check isomorphic binding between objects __DEC_message_message_838729 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_838729
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_838729 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_838729
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_252(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_59506 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_897749 = null;
		Interaction __DEC_messageSend_enclosingInteraction_362628 = null;
		Interaction __DEC_operand_enclosingInteraction_489636 = null;
		InteractionOperand __DEC_combo_fragment_255520 = null;
		InteractionOperand __DEC_messageReceive_fragment_407364 = null;
		InteractionOperand __DEC_messageSend_fragment_852192 = null;
		InteractionOperand __DEC_operand_fragment_451892 = null;
		Constraint __DEC_spec_specification_183511 = null;
		InteractionOperand __DEC_guard_guard_694786 = null;
		CombinedFragment __DEC_operand_operand_947308 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_444402 = null;
		Message __DEC_messageReceive_receiveEvent_444402 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_400545 = null;
		Message __DEC_messageSend_receiveEvent_400545 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_464210 = null;
		Message __DEC_messageReceive_sendEvent_464210 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_160875 = null;
		Message __DEC_messageSend_sendEvent_160875 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_342572 = null;
		MessageEnd __DEC_message_message_342572 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link covered from sysLine to messageSend
			fujaba__Success = false;

			fujaba__IterSysLineToMessageSend = new ArrayList(
					sysLine.getCoveredBy()).iterator();

			while (fujaba__IterSysLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageSend.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// bind object
					_TmpObject = message.getReceiveEvent();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageReceive to message
					JavaSDM.ensure(message.equals(messageReceive.getMessage()));

					// check link sendEvent from message to messageSend
					JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = _edge_coveredBy.getTrg();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;

									// check link covered from combo to sysLine
									JavaSDM.ensure(combo.getCovered().contains(
											sysLine));

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// check link covered from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// check link covered from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_59506 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_59506 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_59506 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_59506 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_59506
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_897749 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_897749 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_897749 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_897749 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_897749
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_362628 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_362628 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_362628 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_362628 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_362628
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_489636 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_489636 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_489636 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_489636 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_489636
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_255520 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_255520 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_255520 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_255520 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_255520
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_255520 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_255520
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_407364 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_407364 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_407364 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_407364 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_407364
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_407364 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_407364
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_852192 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_852192 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_852192 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_852192 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_852192
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_852192 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_852192
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_451892 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_451892 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_451892 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_451892 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_451892
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_451892 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_451892
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_183511 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_183511 is really bound
													JavaSDM.ensure(__DEC_spec_specification_183511 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_183511
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_183511 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_183511
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_694786 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_694786 is really bound
													JavaSDM.ensure(__DEC_guard_guard_694786 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_694786
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_694786 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_694786
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_694786 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_694786
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_947308 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_947308 is really bound
													JavaSDM.ensure(__DEC_operand_operand_947308 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_947308
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_947308 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_947308
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_947308 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_947308
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_444402
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_444402 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_444402
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_444402 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_444402
																	.next();

															// check object __DEC_messageReceive_receiveEvent_444402 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_444402 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_444402 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_444402
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_400545
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_400545 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_400545
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_400545 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_400545
																	.next();

															// check object __DEC_messageSend_receiveEvent_400545 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_400545 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_400545 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_400545
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_464210
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_464210 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_464210
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_464210 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_464210
																	.next();

															// check object __DEC_messageReceive_sendEvent_464210 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_464210 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_464210 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_464210
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_160875
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_160875 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_160875
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_160875 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_160875
																	.next();

															// check object __DEC_messageSend_sendEvent_160875 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_160875 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_160875 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_160875
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_342572
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_342572 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_342572
																	.hasNext()) {
														try {
															__DEC_message_message_342572 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_342572
																	.next();

															// check object __DEC_message_message_342572 is really bound
															JavaSDM.ensure(__DEC_message_message_342572 != null);
															// check isomorphic binding between objects __DEC_message_message_342572 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_342572
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_342572 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_342572
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to combo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(combo)));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to sysLine
												JavaSDM.ensure(sysLine
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to combo
												JavaSDM.ensure(combo
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, sysLine,
																messageSend,
																combo, operand,
																parentOperand,
																parentCombo,
																messageReceive,
																line, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_253(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_601125 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_633755 = null;
		Interaction __DEC_messageSend_enclosingInteraction_717389 = null;
		Interaction __DEC_operand_enclosingInteraction_634096 = null;
		InteractionOperand __DEC_combo_fragment_930887 = null;
		InteractionOperand __DEC_messageReceive_fragment_838167 = null;
		InteractionOperand __DEC_messageSend_fragment_207846 = null;
		InteractionOperand __DEC_operand_fragment_665101 = null;
		Constraint __DEC_spec_specification_709040 = null;
		InteractionOperand __DEC_guard_guard_938237 = null;
		CombinedFragment __DEC_operand_operand_659672 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_662489 = null;
		Message __DEC_messageReceive_receiveEvent_662489 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_136224 = null;
		Message __DEC_messageSend_receiveEvent_136224 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_553455 = null;
		Message __DEC_messageReceive_sendEvent_553455 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_8474 = null;
		Message __DEC_messageSend_sendEvent_8474 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_635627 = null;
		MessageEnd __DEC_message_message_635627 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from combo to sysLine
			JavaSDM.ensure(combo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to operand
			fujaba__Success = false;

			fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from operand to line
					fujaba__Success = false;

					fujaba__IterOperandToLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterOperandToLine.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link covered from line to parentCombo
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentCombo));

									// check link covered from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from sysLine to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	sysLine,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterSysLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to combo
													JavaSDM.ensure(combo
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_601125 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_601125 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_601125 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_601125 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_601125
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_633755 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_633755 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_633755 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_633755 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_633755
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_717389 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_717389 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_717389 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_717389 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_717389
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_634096 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_634096 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_634096 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_634096 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_634096
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_930887 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_930887 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_930887 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_930887 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_930887
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_930887 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_930887
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_838167 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_838167 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_838167 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_838167 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_838167
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_838167 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_838167
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_207846 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_207846 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_207846 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_207846 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_207846
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_207846 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_207846
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_665101 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_665101 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_665101 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_665101 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_665101
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_665101 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_665101
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_709040 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_709040 is really bound
															JavaSDM.ensure(__DEC_spec_specification_709040 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_709040
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_709040 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_709040
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_938237 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_938237 is really bound
															JavaSDM.ensure(__DEC_guard_guard_938237 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_938237
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_938237 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_938237
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_938237 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_938237
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_659672 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_659672 is really bound
															JavaSDM.ensure(__DEC_operand_operand_659672 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_659672
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_659672 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_659672
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_659672 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_659672
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_662489
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_662489 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_662489
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_662489 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_662489
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_662489 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_662489 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_662489 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_662489
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_136224
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_136224 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_136224
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_136224 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_136224
																			.next();

																	// check object __DEC_messageSend_receiveEvent_136224 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_136224 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_136224 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_136224
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_553455
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_553455 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_553455
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_553455 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_553455
																			.next();

																	// check object __DEC_messageReceive_sendEvent_553455 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_553455 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_553455 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_553455
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_8474
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_8474 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_8474
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_8474 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_8474
																			.next();

																	// check object __DEC_messageSend_sendEvent_8474 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_8474 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_8474 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_8474
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_635627
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_635627 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_635627
																			.hasNext()) {
																try {
																	__DEC_message_message_635627 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_635627
																			.next();

																	// check object __DEC_message_message_635627 is really bound
																	JavaSDM.ensure(__DEC_message_message_635627 != null);
																	// check isomorphic binding between objects __DEC_message_message_635627 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_635627
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_635627 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_635627
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to combo
														JavaSDM.ensure(combo
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to combo
														JavaSDM.ensure(combo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_254(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_662056 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_605694 = null;
		Interaction __DEC_messageSend_enclosingInteraction_711901 = null;
		Interaction __DEC_operand_enclosingInteraction_473543 = null;
		InteractionOperand __DEC_combo_fragment_438105 = null;
		InteractionOperand __DEC_messageReceive_fragment_887318 = null;
		InteractionOperand __DEC_messageSend_fragment_426771 = null;
		InteractionOperand __DEC_operand_fragment_423204 = null;
		Constraint __DEC_spec_specification_169389 = null;
		InteractionOperand __DEC_guard_guard_752538 = null;
		CombinedFragment __DEC_operand_operand_221537 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_471388 = null;
		Message __DEC_messageReceive_receiveEvent_471388 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_494825 = null;
		Message __DEC_messageSend_receiveEvent_494825 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_11793 = null;
		Message __DEC_messageReceive_sendEvent_11793 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_970440 = null;
		Message __DEC_messageSend_sendEvent_970440 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_622358 = null;
		MessageEnd __DEC_message_message_622358 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// bind object
									_TmpObject = _edge_coveredBy.getTrg();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from operand to sysLine
									JavaSDM.ensure(operand.getCovered()
											.contains(sysLine));

									// iterate to-many link covered from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_662056 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_662056 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_662056 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_662056 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_662056
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_605694 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_605694 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_605694 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_605694 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_605694
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_711901 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_711901 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_711901 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_711901 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_711901
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_473543 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_473543 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_473543 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_473543 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_473543
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_438105 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_438105 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_438105 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_438105 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_438105
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_438105 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_438105
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_887318 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_887318 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_887318 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_887318 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_887318
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_887318 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_887318
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_426771 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_426771 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_426771 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_426771 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_426771
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_426771 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_426771
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_423204 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_423204 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_423204 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_423204 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_423204
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_423204 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_423204
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_169389 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_169389 is really bound
															JavaSDM.ensure(__DEC_spec_specification_169389 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_169389
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_169389 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_169389
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_752538 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_752538 is really bound
															JavaSDM.ensure(__DEC_guard_guard_752538 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_752538
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_752538 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_752538
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_752538 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_752538
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_221537 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_221537 is really bound
															JavaSDM.ensure(__DEC_operand_operand_221537 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_221537
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_221537 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_221537
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_221537 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_221537
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_471388
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_471388 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_471388
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_471388 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_471388
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_471388 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_471388 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_471388 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_471388
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_494825
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_494825 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_494825
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_494825 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_494825
																			.next();

																	// check object __DEC_messageSend_receiveEvent_494825 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_494825 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_494825 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_494825
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_11793
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_11793 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_11793
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_11793 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_11793
																			.next();

																	// check object __DEC_messageReceive_sendEvent_11793 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_11793 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_11793 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_11793
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_970440
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_970440 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_970440
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_970440 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_970440
																			.next();

																	// check object __DEC_messageSend_sendEvent_970440 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_970440 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_970440 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_970440
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_622358
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_622358 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_622358
																			.hasNext()) {
																try {
																	__DEC_message_message_622358 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_622358
																			.next();

																	// check object __DEC_message_message_622358 is really bound
																	JavaSDM.ensure(__DEC_message_message_622358 != null);
																	// check isomorphic binding between objects __DEC_message_message_622358 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_622358
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_622358 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_622358
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_255(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_58316 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_548794 = null;
		Interaction __DEC_messageSend_enclosingInteraction_120437 = null;
		Interaction __DEC_operand_enclosingInteraction_980179 = null;
		InteractionOperand __DEC_combo_fragment_947230 = null;
		InteractionOperand __DEC_messageReceive_fragment_772352 = null;
		InteractionOperand __DEC_messageSend_fragment_717670 = null;
		InteractionOperand __DEC_operand_fragment_770781 = null;
		Constraint __DEC_spec_specification_606962 = null;
		InteractionOperand __DEC_guard_guard_635883 = null;
		CombinedFragment __DEC_operand_operand_814314 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125702 = null;
		Message __DEC_messageReceive_receiveEvent_125702 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_606487 = null;
		Message __DEC_messageSend_receiveEvent_606487 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_423922 = null;
		Message __DEC_messageReceive_sendEvent_423922 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_633910 = null;
		Message __DEC_messageSend_sendEvent_633910 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_64303 = null;
		MessageEnd __DEC_message_message_64303 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from operand to sysLine
			JavaSDM.ensure(operand.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from parentCombo to line
							fujaba__Success = false;

							fujaba__IterParentComboToLine = new ArrayList(
									parentCombo.getCovered()).iterator();

							while (fujaba__IterParentComboToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentComboToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link covered from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to operand
															JavaSDM.ensure(operand
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_58316 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_58316 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_58316 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_58316 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_58316
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_548794 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_548794 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_548794 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_548794 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_548794
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_120437 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_120437 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_120437 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_120437 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_120437
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_980179 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_980179 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_980179 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_980179 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_980179
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_947230 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_947230 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_947230 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_947230 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_947230
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_947230 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_947230
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_772352 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_772352 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_772352 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_772352 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_772352
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_772352 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_772352
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_717670 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_717670 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_717670 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_717670 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_717670
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_717670 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_717670
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_770781 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_770781 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_770781 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_770781 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_770781
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_770781 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_770781
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_606962 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_606962 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_606962 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_606962
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_606962 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_606962
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_635883 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_635883 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_635883 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_635883
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_635883 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_635883
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_635883 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_635883
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_814314 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_814314 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_814314 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_814314
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_814314 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_814314
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_814314 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_814314
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_125702
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125702 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125702
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_125702 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_125702
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_125702 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_125702 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_125702 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_125702
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_606487
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_606487 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_606487
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_606487 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_606487
																					.next();

																			// check object __DEC_messageSend_receiveEvent_606487 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_606487 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_606487 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_606487
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_423922
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_423922 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_423922
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_423922 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_423922
																					.next();

																			// check object __DEC_messageReceive_sendEvent_423922 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_423922 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_423922 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_423922
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_633910
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_633910 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_633910
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_633910 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_633910
																					.next();

																			// check object __DEC_messageSend_sendEvent_633910 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_633910 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_633910 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_633910
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_64303
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_64303 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_64303
																					.hasNext()) {
																		try {
																			__DEC_message_message_64303 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_64303
																					.next();

																			// check object __DEC_message_message_64303 is really bound
																			JavaSDM.ensure(__DEC_message_message_64303 != null);
																			// check isomorphic binding between objects __DEC_message_message_64303 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_64303
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_64303 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_64303
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to operand
																JavaSDM.ensure(operand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to operand
																JavaSDM.ensure(operand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_256(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_854935 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_475863 = null;
		Interaction __DEC_messageSend_enclosingInteraction_753025 = null;
		Interaction __DEC_operand_enclosingInteraction_21166 = null;
		InteractionOperand __DEC_combo_fragment_853515 = null;
		InteractionOperand __DEC_messageReceive_fragment_440541 = null;
		InteractionOperand __DEC_messageSend_fragment_65870 = null;
		InteractionOperand __DEC_operand_fragment_285895 = null;
		Constraint __DEC_spec_specification_156154 = null;
		InteractionOperand __DEC_guard_guard_705302 = null;
		CombinedFragment __DEC_operand_operand_600282 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36338 = null;
		Message __DEC_messageReceive_receiveEvent_36338 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922458 = null;
		Message __DEC_messageSend_receiveEvent_922458 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955345 = null;
		Message __DEC_messageReceive_sendEvent_955345 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_791883 = null;
		Message __DEC_messageSend_sendEvent_791883 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_450485 = null;
		MessageEnd __DEC_message_message_450485 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link covered from sysLine to operand
			fujaba__Success = false;

			fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// bind object
					_TmpObject = _edge_coveredBy.getTrg();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;

					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// check link covered from parentOperand to sysLine
					JavaSDM.ensure(parentOperand.getCovered().contains(sysLine));

					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check link covered from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link covered from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_854935 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_854935 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_854935 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_854935 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_854935
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_475863 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_475863 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_475863 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_475863 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_475863
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_753025 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_753025 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_753025 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_753025 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_753025
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_21166 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_21166 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_21166 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_21166 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_21166
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_853515 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_853515 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_853515 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_853515 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_853515
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_853515 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_853515
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_440541 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_440541 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_440541 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_440541 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_440541
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_440541 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_440541
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_65870 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_65870 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_65870 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_65870 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_65870
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_65870 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_65870
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_285895 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_285895 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_285895 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_285895 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_285895
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_285895 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_285895
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_156154 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_156154 is really bound
													JavaSDM.ensure(__DEC_spec_specification_156154 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_156154
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_156154 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_156154
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_705302 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_705302 is really bound
													JavaSDM.ensure(__DEC_guard_guard_705302 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_705302
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_705302 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_705302
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_705302 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_705302
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_600282 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_600282 is really bound
													JavaSDM.ensure(__DEC_operand_operand_600282 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_600282
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_600282 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_600282
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_600282 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_600282
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_36338
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36338 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36338
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_36338 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_36338
																	.next();

															// check object __DEC_messageReceive_receiveEvent_36338 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_36338 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_36338 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_36338
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_922458
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922458 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922458
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_922458 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922458
																	.next();

															// check object __DEC_messageSend_receiveEvent_922458 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_922458 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_922458 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_922458
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_955345
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955345 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955345
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_955345 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_955345
																	.next();

															// check object __DEC_messageReceive_sendEvent_955345 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_955345 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_955345 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_955345
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_791883
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_791883 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_791883
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_791883 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_791883
																	.next();

															// check object __DEC_messageSend_sendEvent_791883 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_791883 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_791883 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_791883
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_450485
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_450485 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_450485
																	.hasNext()) {
														try {
															__DEC_message_message_450485 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_450485
																	.next();

															// check object __DEC_message_message_450485 is really bound
															JavaSDM.ensure(__DEC_message_message_450485 != null);
															// check isomorphic binding between objects __DEC_message_message_450485 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_450485
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_450485 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_450485
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to combo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(combo)));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to sysLine
												JavaSDM.ensure(sysLine
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, sysLine,
																messageSend,
																combo, operand,
																parentOperand,
																parentCombo,
																messageReceive,
																line, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_257(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_60661 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_283219 = null;
		Interaction __DEC_messageSend_enclosingInteraction_51419 = null;
		Interaction __DEC_operand_enclosingInteraction_499919 = null;
		InteractionOperand __DEC_combo_fragment_264719 = null;
		InteractionOperand __DEC_messageReceive_fragment_385353 = null;
		InteractionOperand __DEC_messageSend_fragment_675564 = null;
		InteractionOperand __DEC_operand_fragment_886773 = null;
		Constraint __DEC_spec_specification_762296 = null;
		InteractionOperand __DEC_guard_guard_51774 = null;
		CombinedFragment __DEC_operand_operand_448101 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232888 = null;
		Message __DEC_messageReceive_receiveEvent_232888 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_883260 = null;
		Message __DEC_messageSend_receiveEvent_883260 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_496957 = null;
		Message __DEC_messageReceive_sendEvent_496957 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_371158 = null;
		Message __DEC_messageSend_sendEvent_371158 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_150292 = null;
		MessageEnd __DEC_message_message_150292 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// check link covered from parentOperand to sysLine
			JavaSDM.ensure(parentOperand.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link covered from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link src from sysLine to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	sysLine,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterSysLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_60661 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_60661 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_60661 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_60661 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_60661
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_283219 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_283219 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_283219 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_283219 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_283219
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_51419 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_51419 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_51419 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_51419 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_51419
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_499919 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_499919 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_499919 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_499919 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_499919
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_264719 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_264719 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_264719 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_264719 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_264719
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_264719 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_264719
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_385353 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_385353 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_385353 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_385353 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_385353
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_385353 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_385353
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_675564 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_675564 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_675564 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_675564 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_675564
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_675564 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_675564
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_886773 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_886773 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_886773 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_886773 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_886773
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_886773 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_886773
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_762296 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_762296 is really bound
															JavaSDM.ensure(__DEC_spec_specification_762296 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_762296
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_762296 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_762296
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_51774 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_51774 is really bound
															JavaSDM.ensure(__DEC_guard_guard_51774 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_51774
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_51774 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_51774
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_51774 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_51774
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_448101 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_448101 is really bound
															JavaSDM.ensure(__DEC_operand_operand_448101 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_448101
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_448101 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_448101
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_448101 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_448101
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_232888
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232888 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232888
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_232888 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_232888
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_232888 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_232888 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_232888 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_232888
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_883260
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_883260 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_883260
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_883260 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_883260
																			.next();

																	// check object __DEC_messageSend_receiveEvent_883260 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_883260 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_883260 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_883260
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_496957
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_496957 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_496957
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_496957 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_496957
																			.next();

																	// check object __DEC_messageReceive_sendEvent_496957 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_496957 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_496957 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_496957
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_371158
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_371158 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_371158
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_371158 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_371158
																			.next();

																	// check object __DEC_messageSend_sendEvent_371158 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_371158 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_371158 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_371158
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_150292
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_150292 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_150292
																			.hasNext()) {
																try {
																	__DEC_message_message_150292 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_150292
																			.next();

																	// check object __DEC_message_message_150292 is really bound
																	JavaSDM.ensure(__DEC_message_message_150292 != null);
																	// check isomorphic binding between objects __DEC_message_message_150292 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_150292
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_150292 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_150292
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_258(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_31958 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_942834 = null;
		Interaction __DEC_messageSend_enclosingInteraction_511182 = null;
		Interaction __DEC_operand_enclosingInteraction_776983 = null;
		InteractionOperand __DEC_combo_fragment_592997 = null;
		InteractionOperand __DEC_messageReceive_fragment_618431 = null;
		InteractionOperand __DEC_messageSend_fragment_5157 = null;
		InteractionOperand __DEC_operand_fragment_574610 = null;
		Constraint __DEC_spec_specification_557613 = null;
		InteractionOperand __DEC_guard_guard_359499 = null;
		CombinedFragment __DEC_operand_operand_120935 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656783 = null;
		Message __DEC_messageReceive_receiveEvent_656783 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_18887 = null;
		Message __DEC_messageSend_receiveEvent_18887 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_142490 = null;
		Message __DEC_messageReceive_sendEvent_142490 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_332962 = null;
		Message __DEC_messageSend_sendEvent_332962 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_357556 = null;
		MessageEnd __DEC_message_message_357556 = null;
		Match match = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link operand from parentOperand to parentCombo
									JavaSDM.ensure(parentCombo
											.equals(parentOperand.eContainer()));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_31958 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_31958 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_31958 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_31958 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_31958
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_942834 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_942834 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_942834 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_942834 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_942834
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_511182 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_511182 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_511182 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_511182 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_511182
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_776983 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_776983 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_776983 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_776983 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_776983
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_592997 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_592997 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_592997 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_592997 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_592997
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_592997 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_592997
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_618431 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_618431 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_618431 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_618431 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_618431
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_618431 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_618431
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_5157 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_5157 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_5157 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_5157 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_5157
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_5157 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_5157
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_574610 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_574610 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_574610 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_574610 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_574610
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_574610 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_574610
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_557613 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_557613 is really bound
															JavaSDM.ensure(__DEC_spec_specification_557613 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_557613
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_557613 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_557613
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_359499 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_359499 is really bound
															JavaSDM.ensure(__DEC_guard_guard_359499 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_359499
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_359499 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_359499
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_359499 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_359499
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_120935 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_120935 is really bound
															JavaSDM.ensure(__DEC_operand_operand_120935 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_120935
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_120935 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_120935
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_120935 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_120935
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_656783
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656783 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656783
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_656783 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_656783
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_656783 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_656783 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_656783 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_656783
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_18887
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_18887 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_18887
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_18887 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_18887
																			.next();

																	// check object __DEC_messageSend_receiveEvent_18887 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_18887 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_18887 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_18887
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_142490
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_142490 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_142490
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_142490 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_142490
																			.next();

																	// check object __DEC_messageReceive_sendEvent_142490 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_142490 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_142490 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_142490
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_332962
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_332962 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_332962
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_332962 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_332962
																			.next();

																	// check object __DEC_messageSend_sendEvent_332962 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_332962 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_332962 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_332962
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_357556
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_357556 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_357556
																			.hasNext()) {
																try {
																	__DEC_message_message_357556 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_357556
																			.next();

																	// check object __DEC_message_message_357556 is really bound
																	JavaSDM.ensure(__DEC_message_message_357556 != null);
																	// check isomorphic binding between objects __DEC_message_message_357556 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_357556
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_357556 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_357556
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_259(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_847453 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_400578 = null;
		Interaction __DEC_messageSend_enclosingInteraction_287277 = null;
		Interaction __DEC_operand_enclosingInteraction_958645 = null;
		InteractionOperand __DEC_combo_fragment_748190 = null;
		InteractionOperand __DEC_messageReceive_fragment_300058 = null;
		InteractionOperand __DEC_messageSend_fragment_388494 = null;
		InteractionOperand __DEC_operand_fragment_148735 = null;
		Constraint __DEC_spec_specification_625912 = null;
		InteractionOperand __DEC_guard_guard_780539 = null;
		CombinedFragment __DEC_operand_operand_796799 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_313602 = null;
		Message __DEC_messageReceive_receiveEvent_313602 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_470313 = null;
		Message __DEC_messageSend_receiveEvent_470313 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_145906 = null;
		Message __DEC_messageReceive_sendEvent_145906 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_444408 = null;
		Message __DEC_messageSend_sendEvent_444408 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_319552 = null;
		MessageEnd __DEC_message_message_319552 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link covered from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// iterate to-many link covered from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from parentCombo to line
									fujaba__Success = false;

									fujaba__IterParentComboToLine = new ArrayList(
											parentCombo.getCovered())
											.iterator();

									while (fujaba__IterParentComboToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentComboToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_847453 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_847453 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_847453 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_847453 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_847453
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_400578 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_400578 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_400578 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_400578 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_400578
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_287277 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_287277 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_287277 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_287277 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_287277
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_958645 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_958645 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_958645 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_958645 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_958645
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_748190 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_748190 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_748190 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_748190 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_748190
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_748190 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_748190
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_300058 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_300058 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_300058 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_300058 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_300058
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_300058 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_300058
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_388494 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_388494 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_388494 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_388494 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_388494
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_388494 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_388494
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_148735 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_148735 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_148735 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_148735 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_148735
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_148735 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_148735
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_625912 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_625912 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_625912 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_625912
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_625912 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_625912
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_780539 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_780539 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_780539 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_780539
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_780539 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_780539
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_780539 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_780539
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_796799 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_796799 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_796799 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_796799
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_796799 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_796799
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_796799 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_796799
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_313602
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_313602 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_313602
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_313602 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_313602
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_313602 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_313602 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_313602 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_313602
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_470313
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_470313 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_470313
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_470313 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_470313
																					.next();

																			// check object __DEC_messageSend_receiveEvent_470313 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_470313 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_470313 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_470313
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_145906
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_145906 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_145906
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_145906 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_145906
																					.next();

																			// check object __DEC_messageReceive_sendEvent_145906 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_145906 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_145906 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_145906
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_444408
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_444408 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_444408
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_444408 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_444408
																					.next();

																			// check object __DEC_messageSend_sendEvent_444408 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_444408 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_444408 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_444408
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_319552
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_319552 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_319552
																					.hasNext()) {
																		try {
																			__DEC_message_message_319552 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_319552
																					.next();

																			// check object __DEC_message_message_319552 is really bound
																			JavaSDM.ensure(__DEC_message_message_319552 != null);
																			// check isomorphic binding between objects __DEC_message_message_319552 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_319552
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_319552 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_319552
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_260(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_206574 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_350145 = null;
		Interaction __DEC_messageSend_enclosingInteraction_174071 = null;
		Interaction __DEC_operand_enclosingInteraction_59523 = null;
		InteractionOperand __DEC_combo_fragment_143994 = null;
		InteractionOperand __DEC_messageReceive_fragment_347396 = null;
		InteractionOperand __DEC_messageSend_fragment_502025 = null;
		InteractionOperand __DEC_operand_fragment_842244 = null;
		Constraint __DEC_spec_specification_18522 = null;
		InteractionOperand __DEC_guard_guard_382282 = null;
		CombinedFragment __DEC_operand_operand_94283 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_727246 = null;
		Message __DEC_messageReceive_receiveEvent_727246 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_117499 = null;
		Message __DEC_messageSend_receiveEvent_117499 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_724522 = null;
		Message __DEC_messageReceive_sendEvent_724522 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_963456 = null;
		Message __DEC_messageSend_sendEvent_963456 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_13664 = null;
		MessageEnd __DEC_message_message_13664 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to parentCombo
					JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

					// iterate to-many link covered from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link covered from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link trg from _edge_fragment to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_fragment
															.getTrg()));

											// iterate to-many link covered from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_206574 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_206574 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_206574 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_206574 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_206574
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_350145 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_350145 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_350145 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_350145 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_350145
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_174071 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_174071 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_174071 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_174071 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_174071
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_59523 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_59523 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_59523 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_59523 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_59523
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_143994 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_143994 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_143994 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_143994 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_143994
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_143994 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_143994
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_347396 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_347396 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_347396 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_347396 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_347396
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_347396 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_347396
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_502025 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_502025 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_502025 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_502025 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_502025
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_502025 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_502025
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_842244 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_842244 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_842244 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_842244 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_842244
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_842244 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_842244
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_18522 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_18522 is really bound
															JavaSDM.ensure(__DEC_spec_specification_18522 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_18522
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_18522 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_18522
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_382282 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_382282 is really bound
															JavaSDM.ensure(__DEC_guard_guard_382282 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_382282
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_382282 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_382282
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_382282 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_382282
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_94283 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_94283 is really bound
															JavaSDM.ensure(__DEC_operand_operand_94283 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_94283
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_94283 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_94283
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_94283 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_94283
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_727246
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_727246 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_727246
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_727246 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_727246
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_727246 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_727246 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_727246 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_727246
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_117499
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_117499 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_117499
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_117499 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_117499
																			.next();

																	// check object __DEC_messageSend_receiveEvent_117499 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_117499 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_117499 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_117499
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_724522
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_724522 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_724522
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_724522 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_724522
																			.next();

																	// check object __DEC_messageReceive_sendEvent_724522 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_724522 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_724522 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_724522
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_963456
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_963456 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_963456
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_963456 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_963456
																			.next();

																	// check object __DEC_messageSend_sendEvent_963456 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_963456 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_963456 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_963456
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_13664
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_13664 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_13664
																			.hasNext()) {
																try {
																	__DEC_message_message_13664 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_13664
																			.next();

																	// check object __DEC_message_message_13664 is really bound
																	JavaSDM.ensure(__DEC_message_message_13664 != null);
																	// check isomorphic binding between objects __DEC_message_message_13664 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_13664
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_13664 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_13664
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_fragment to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_261(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_395049 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_220662 = null;
		Interaction __DEC_messageSend_enclosingInteraction_225335 = null;
		Interaction __DEC_operand_enclosingInteraction_535841 = null;
		InteractionOperand __DEC_combo_fragment_216044 = null;
		InteractionOperand __DEC_messageReceive_fragment_949998 = null;
		InteractionOperand __DEC_messageSend_fragment_141348 = null;
		InteractionOperand __DEC_operand_fragment_951949 = null;
		Constraint __DEC_spec_specification_451445 = null;
		InteractionOperand __DEC_guard_guard_838206 = null;
		CombinedFragment __DEC_operand_operand_830881 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_924220 = null;
		Message __DEC_messageReceive_receiveEvent_924220 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_684817 = null;
		Message __DEC_messageSend_receiveEvent_684817 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_419859 = null;
		Message __DEC_messageReceive_sendEvent_419859 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_260641 = null;
		Message __DEC_messageSend_sendEvent_260641 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_601177 = null;
		MessageEnd __DEC_message_message_601177 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from line to parentCombo
					JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

					// iterate to-many link covered from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link covered from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// check link src from _edge_enclosingOperand to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(_edge_enclosingOperand
															.getSrc()));

											// iterate to-many link covered from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link src from parentOperand to _edge_fragment
													fujaba__Success = false;

													fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentOperand,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterParentOperandTo_edge_fragment
															.hasNext()) {
														try {
															_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
																	.next();

															// check object _edge_fragment is really bound
															JavaSDM.ensure(_edge_fragment != null);
															// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
															JavaSDM.ensure(!_edge_fragment
																	.equals(_edge_enclosingOperand));

															// check link trg from _edge_fragment to messageReceive
															JavaSDM.ensure(messageReceive
																	.equals(_edge_fragment
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_395049 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_395049 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_395049 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_395049 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_395049
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_220662 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_220662 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_220662 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_220662 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_220662
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_225335 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_225335 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_225335 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_225335 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_225335
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_535841 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_535841 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_535841 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_535841 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_535841
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_216044 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_216044 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_216044 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_216044 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_216044
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_216044 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_216044
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_949998 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_949998 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_949998 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_949998 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_949998
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_949998 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_949998
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_141348 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_141348 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_141348 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_141348 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_141348
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_141348 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_141348
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_951949 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_951949 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_951949 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_951949 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_951949
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_951949 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_951949
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_451445 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_451445 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_451445 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_451445
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_451445 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_451445
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_838206 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_838206 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_838206 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_838206
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_838206 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_838206
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_838206 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_838206
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_830881 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_830881 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_830881 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_830881
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_830881 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_830881
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_830881 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_830881
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_924220
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_924220 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_924220
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_924220 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_924220
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_924220 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_924220 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_924220 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_924220
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_684817
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_684817 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_684817
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_684817 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_684817
																					.next();

																			// check object __DEC_messageSend_receiveEvent_684817 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_684817 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_684817 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_684817
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_419859
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_419859 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_419859
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_419859 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_419859
																					.next();

																			// check object __DEC_messageReceive_sendEvent_419859 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_419859 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_419859 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_419859
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_260641
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_260641 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_260641
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_260641 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_260641
																					.next();

																			// check object __DEC_messageSend_sendEvent_260641 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_260641 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_260641 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_260641
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_601177
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_601177 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_601177
																					.hasNext()) {
																		try {
																			__DEC_message_message_601177 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_601177
																					.next();

																			// check object __DEC_message_message_601177 is really bound
																			JavaSDM.ensure(__DEC_message_message_601177 != null);
																			// check isomorphic binding between objects __DEC_message_message_601177 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_601177
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_601177 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_601177
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_enclosingOperand is really bound
																JavaSDM.ensure(_edge_enclosingOperand != null);
																// check object _edge_fragment is really bound
																JavaSDM.ensure(_edge_fragment != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
																JavaSDM.ensure(!_edge_fragment
																		.equals(_edge_enclosingOperand));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_enclosingOperand to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_enclosingOperand
																				.getSrc()));

																// check link src from _edge_fragment to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_fragment
																				.getSrc()));

																// check link trg from _edge_enclosingOperand to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_enclosingOperand
																				.getTrg()));

																// check link trg from _edge_fragment to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_fragment
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_262(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_491480 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_144659 = null;
		Interaction __DEC_messageSend_enclosingInteraction_510935 = null;
		Interaction __DEC_operand_enclosingInteraction_85806 = null;
		InteractionOperand __DEC_combo_fragment_271957 = null;
		InteractionOperand __DEC_messageReceive_fragment_335176 = null;
		InteractionOperand __DEC_messageSend_fragment_504742 = null;
		InteractionOperand __DEC_operand_fragment_853754 = null;
		Constraint __DEC_spec_specification_157724 = null;
		InteractionOperand __DEC_guard_guard_835346 = null;
		CombinedFragment __DEC_operand_operand_921774 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701050 = null;
		Message __DEC_messageReceive_receiveEvent_701050 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_949488 = null;
		Message __DEC_messageSend_receiveEvent_949488 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_359108 = null;
		Message __DEC_messageReceive_sendEvent_359108 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_523034 = null;
		Message __DEC_messageSend_sendEvent_523034 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_356066 = null;
		MessageEnd __DEC_message_message_356066 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from parentOperand to sysLine
			fujaba__Success = false;

			fujaba__IterParentOperandToSysLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// check link covered from parentCombo to sysLine
					JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_491480 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_491480 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_491480 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_491480 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_491480
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_144659 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_144659 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_144659 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_144659 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_144659
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_510935 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_510935 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_510935 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_510935 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_510935
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_85806 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_85806 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_85806 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_85806 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_85806
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_271957 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_271957 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_271957 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_271957 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_271957
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_271957 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_271957
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_335176 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_335176 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_335176 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_335176 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_335176
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_335176 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_335176
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_504742 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_504742 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_504742 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_504742 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_504742
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_504742 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_504742
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_853754 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_853754 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_853754 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_853754 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_853754
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_853754 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_853754
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_157724 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_157724 is really bound
													JavaSDM.ensure(__DEC_spec_specification_157724 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_157724
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_157724 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_157724
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_835346 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_835346 is really bound
													JavaSDM.ensure(__DEC_guard_guard_835346 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_835346
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_835346 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_835346
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_835346 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_835346
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_921774 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_921774 is really bound
													JavaSDM.ensure(__DEC_operand_operand_921774 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_921774
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_921774 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_921774
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_921774 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_921774
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_701050
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701050 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701050
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_701050 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_701050
																	.next();

															// check object __DEC_messageReceive_receiveEvent_701050 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_701050 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_701050 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_701050
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_949488
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_949488 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_949488
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_949488 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_949488
																	.next();

															// check object __DEC_messageSend_receiveEvent_949488 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_949488 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_949488 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_949488
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_359108
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_359108 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_359108
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_359108 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_359108
																	.next();

															// check object __DEC_messageReceive_sendEvent_359108 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_359108 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_359108 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_359108
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_523034
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_523034 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_523034
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_523034 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_523034
																	.next();

															// check object __DEC_messageSend_sendEvent_523034 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_523034 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_523034 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_523034
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_356066
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_356066 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_356066
																	.hasNext()) {
														try {
															__DEC_message_message_356066 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_356066
																	.next();

															// check object __DEC_message_message_356066 is really bound
															JavaSDM.ensure(__DEC_message_message_356066 != null);
															// check isomorphic binding between objects __DEC_message_message_356066 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_356066
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_356066 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_356066
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to combo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(combo)));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link covered from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link covered from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link covered from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link covered from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link covered from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, sysLine,
																messageSend,
																combo, operand,
																parentOperand,
																parentCombo,
																messageReceive,
																line, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_263(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_225357 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_644373 = null;
		Interaction __DEC_messageSend_enclosingInteraction_324905 = null;
		Interaction __DEC_operand_enclosingInteraction_24936 = null;
		InteractionOperand __DEC_combo_fragment_748694 = null;
		InteractionOperand __DEC_messageReceive_fragment_366082 = null;
		InteractionOperand __DEC_messageSend_fragment_431695 = null;
		InteractionOperand __DEC_operand_fragment_796397 = null;
		Constraint __DEC_spec_specification_445334 = null;
		InteractionOperand __DEC_guard_guard_987914 = null;
		CombinedFragment __DEC_operand_operand_400621 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_325790 = null;
		Message __DEC_messageReceive_receiveEvent_325790 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_221852 = null;
		Message __DEC_messageSend_receiveEvent_221852 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_223621 = null;
		Message __DEC_messageReceive_sendEvent_223621 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_21097 = null;
		Message __DEC_messageSend_sendEvent_21097 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_181504 = null;
		MessageEnd __DEC_message_message_181504 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from parentOperand to sysLine
			fujaba__Success = false;

			fujaba__IterParentOperandToSysLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// check link covered from parentCombo to sysLine
					JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link trg from parentOperand to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"trg"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link src from _edge_coveredBy to line
													JavaSDM.ensure(line
															.equals(_edge_coveredBy
																	.getSrc()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_225357 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_225357 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_225357 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_225357 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_225357
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_644373 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_644373 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_644373 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_644373 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_644373
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_324905 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_324905 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_324905 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_324905 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_324905
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_24936 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_24936 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_24936 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_24936 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_24936
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_748694 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_748694 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_748694 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_748694 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_748694
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_748694 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_748694
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_366082 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_366082 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_366082 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_366082 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_366082
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_366082 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_366082
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_431695 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_431695 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_431695 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_431695 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_431695
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_431695 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_431695
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_796397 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_796397 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_796397 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_796397 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_796397
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_796397 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_796397
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_445334 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_445334 is really bound
															JavaSDM.ensure(__DEC_spec_specification_445334 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_445334
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_445334 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_445334
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_987914 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_987914 is really bound
															JavaSDM.ensure(__DEC_guard_guard_987914 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_987914
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_987914 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_987914
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_987914 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_987914
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_400621 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_400621 is really bound
															JavaSDM.ensure(__DEC_operand_operand_400621 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_400621
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_400621 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_400621
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_400621 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_400621
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_325790
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_325790 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_325790
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_325790 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_325790
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_325790 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_325790 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_325790 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_325790
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_221852
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_221852 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_221852
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_221852 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_221852
																			.next();

																	// check object __DEC_messageSend_receiveEvent_221852 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_221852 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_221852 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_221852
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_223621
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_223621 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_223621
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_223621 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_223621
																			.next();

																	// check object __DEC_messageReceive_sendEvent_223621 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_223621 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_223621 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_223621
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_21097
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_21097 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_21097
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_21097 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_21097
																			.next();

																	// check object __DEC_messageSend_sendEvent_21097 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_21097 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_21097 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_21097
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_181504
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_181504 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_181504
																			.hasNext()) {
																try {
																	__DEC_message_message_181504 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_181504
																			.next();

																	// check object __DEC_message_message_181504 is really bound
																	JavaSDM.ensure(__DEC_message_message_181504 != null);
																	// check isomorphic binding between objects __DEC_message_message_181504 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_181504
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_181504 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_181504
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_264(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_965053 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_960981 = null;
		Interaction __DEC_messageSend_enclosingInteraction_760882 = null;
		Interaction __DEC_operand_enclosingInteraction_585650 = null;
		InteractionOperand __DEC_combo_fragment_733826 = null;
		InteractionOperand __DEC_messageReceive_fragment_912855 = null;
		InteractionOperand __DEC_messageSend_fragment_436949 = null;
		InteractionOperand __DEC_operand_fragment_811824 = null;
		Constraint __DEC_spec_specification_940845 = null;
		InteractionOperand __DEC_guard_guard_830018 = null;
		CombinedFragment __DEC_operand_operand_918047 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_245034 = null;
		Message __DEC_messageReceive_receiveEvent_245034 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_708600 = null;
		Message __DEC_messageSend_receiveEvent_708600 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_215419 = null;
		Message __DEC_messageReceive_sendEvent_215419 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_54130 = null;
		Message __DEC_messageSend_sendEvent_54130 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_523471 = null;
		MessageEnd __DEC_message_message_523471 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link covered from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_965053 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_965053 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_965053 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_965053 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_965053
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_960981 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_960981 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_960981 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_960981 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_960981
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_760882 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_760882 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_760882 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_760882 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_760882
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_585650 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_585650 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_585650 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_585650 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_585650
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_733826 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_733826 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_733826 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_733826 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_733826
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_733826 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_733826
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_912855 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_912855 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_912855 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_912855 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_912855
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_912855 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_912855
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_436949 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_436949 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_436949 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_436949 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_436949
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_436949 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_436949
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_811824 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_811824 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_811824 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_811824 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_811824
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_811824 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_811824
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_940845 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_940845 is really bound
															JavaSDM.ensure(__DEC_spec_specification_940845 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_940845
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_940845 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_940845
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_830018 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_830018 is really bound
															JavaSDM.ensure(__DEC_guard_guard_830018 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_830018
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_830018 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_830018
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_830018 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_830018
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_918047 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_918047 is really bound
															JavaSDM.ensure(__DEC_operand_operand_918047 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_918047
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_918047 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_918047
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_918047 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_918047
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_245034
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_245034 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_245034
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_245034 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_245034
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_245034 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_245034 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_245034 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_245034
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_708600
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_708600 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_708600
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_708600 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_708600
																			.next();

																	// check object __DEC_messageSend_receiveEvent_708600 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_708600 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_708600 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_708600
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_215419
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_215419 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_215419
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_215419 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_215419
																			.next();

																	// check object __DEC_messageReceive_sendEvent_215419 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_215419 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_215419 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_215419
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_54130
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_54130 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_54130
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_54130 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_54130
																			.next();

																	// check object __DEC_messageSend_sendEvent_54130 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_54130 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_54130 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_54130
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_523471
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_523471 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_523471
																			.hasNext()) {
																try {
																	__DEC_message_message_523471 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_523471
																			.next();

																	// check object __DEC_message_message_523471 is really bound
																	JavaSDM.ensure(__DEC_message_message_523471 != null);
																	// check isomorphic binding between objects __DEC_message_message_523471 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_523471
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_523471 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_523471
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_265(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_957836 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_666882 = null;
		Interaction __DEC_messageSend_enclosingInteraction_167375 = null;
		Interaction __DEC_operand_enclosingInteraction_545547 = null;
		InteractionOperand __DEC_combo_fragment_446740 = null;
		InteractionOperand __DEC_messageReceive_fragment_217638 = null;
		InteractionOperand __DEC_messageSend_fragment_431833 = null;
		InteractionOperand __DEC_operand_fragment_243544 = null;
		Constraint __DEC_spec_specification_619455 = null;
		InteractionOperand __DEC_guard_guard_805927 = null;
		CombinedFragment __DEC_operand_operand_45757 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_225833 = null;
		Message __DEC_messageReceive_receiveEvent_225833 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_962314 = null;
		Message __DEC_messageSend_receiveEvent_962314 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_897385 = null;
		Message __DEC_messageReceive_sendEvent_897385 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_977469 = null;
		Message __DEC_messageSend_sendEvent_977469 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_345296 = null;
		MessageEnd __DEC_message_message_345296 = null;
		Match match = null;
		Iterator fujaba__IterParentComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link covered from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link covered from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link trg from parentCombo to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterParentComboTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentCombo,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterParentComboTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterParentComboTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_957836 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_957836 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_957836 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_957836 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_957836
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_666882 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_666882 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_666882 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_666882 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_666882
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_167375 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_167375 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_167375 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_167375 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_167375
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_545547 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_545547 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_545547 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_545547 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_545547
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_446740 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_446740 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_446740 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_446740 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_446740
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_446740 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_446740
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_217638 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_217638 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_217638 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_217638 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_217638
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_217638 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_217638
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_431833 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_431833 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_431833 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_431833 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_431833
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_431833 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_431833
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_243544 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_243544 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_243544 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_243544 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_243544
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_243544 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_243544
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_619455 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_619455 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_619455 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_619455
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_619455 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_619455
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_805927 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_805927 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_805927 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_805927
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_805927 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_805927
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_805927 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_805927
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_45757 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_45757 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_45757 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_45757
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_45757 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_45757
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_45757 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_45757
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_225833
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_225833 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_225833
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_225833 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_225833
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_225833 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_225833 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_225833 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_225833
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_962314
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_962314 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_962314
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_962314 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_962314
																					.next();

																			// check object __DEC_messageSend_receiveEvent_962314 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_962314 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_962314 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_962314
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_897385
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_897385 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_897385
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_897385 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_897385
																					.next();

																			// check object __DEC_messageReceive_sendEvent_897385 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_897385 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_897385 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_897385
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_977469
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_977469 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_977469
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_977469 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_977469
																					.next();

																			// check object __DEC_messageSend_sendEvent_977469 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_977469 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_977469 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_977469
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_345296
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_345296 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_345296
																					.hasNext()) {
																		try {
																			__DEC_message_message_345296 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_345296
																					.next();

																			// check object __DEC_message_message_345296 is really bound
																			JavaSDM.ensure(__DEC_message_message_345296 != null);
																			// check isomorphic binding between objects __DEC_message_message_345296 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_345296
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_345296 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_345296
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_51(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_522578 = null;
		NormalStep __DEC_alt_stepAlternative_4425 = null;
		Flow __DEC_step_steps_64505 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_391960 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_391960 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link useCases from packageDeclaration to useCase
					fujaba__Success = false;

					fujaba__IterPackageDeclarationToUseCase = new ArrayList(
							packageDeclaration.getUseCases()).iterator();

					while (fujaba__IterPackageDeclarationToUseCase.hasNext()) {
						try {
							useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
									.next();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);
							// check link flows from flow to useCase
							JavaSDM.ensure(useCase.equals(flow.eContainer()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_522578 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_522578 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_522578 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_522578
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_522578 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_522578
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_4425 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_4425 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_4425 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_4425
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_4425 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_4425
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_64505 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_64505 is really bound
									JavaSDM.ensure(__DEC_step_steps_64505 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_64505
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_64505 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_64505
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_64505 and flow 
									JavaSDM.ensure(!__DEC_step_steps_64505
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_391960
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_391960 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_391960
													.hasNext()) {
										try {
											__DEC_altFlow_ref_391960 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_391960
													.next();

											// check object __DEC_altFlow_ref_391960 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_391960 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_391960 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_391960
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_stepAlternative is really bound
								JavaSDM.ensure(_edge_stepAlternative != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_stepAlternative to step
								JavaSDM.ensure(step
										.equals(_edge_stepAlternative.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_stepAlternative to alt
								JavaSDM.ensure(alt.equals(_edge_stepAlternative
										.getTrg()));

								// check link useCases from useCase to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(useCase.eContainer()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, step, alt, altFlow, useCase);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_52(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_57106 = null;
		NormalStep __DEC_alt_stepAlternative_196254 = null;
		Flow __DEC_step_steps_671434 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_723227 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_723227 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link useCases from packageDeclaration to useCase
					fujaba__Success = false;

					fujaba__IterPackageDeclarationToUseCase = new ArrayList(
							packageDeclaration.getUseCases()).iterator();

					while (fujaba__IterPackageDeclarationToUseCase.hasNext()) {
						try {
							useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
									.next();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);
							// check link flows from flow to useCase
							JavaSDM.ensure(useCase.equals(flow.eContainer()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_57106 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_57106 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_57106 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_57106
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_57106 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_57106
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_196254 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_196254 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_196254 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_196254
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_196254 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_196254
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_671434 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_671434 is really bound
									JavaSDM.ensure(__DEC_step_steps_671434 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_671434
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_671434 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_671434
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_671434 and flow 
									JavaSDM.ensure(!__DEC_step_steps_671434
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_723227
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_723227 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_723227
													.hasNext()) {
										try {
											__DEC_altFlow_ref_723227 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_723227
													.next();

											// check object __DEC_altFlow_ref_723227 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_723227 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_723227 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_723227
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_ref is really bound
								JavaSDM.ensure(_edge_ref != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_ref to alt
								JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_ref to altFlow
								JavaSDM.ensure(altFlow.equals(_edge_ref
										.getTrg()));

								// check link useCases from useCase to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(useCase.eContainer()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, step, alt, altFlow, useCase);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_266(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_248881 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_605753 = null;
		Interaction __DEC_messageSend_enclosingInteraction_315340 = null;
		Interaction __DEC_operand_enclosingInteraction_193904 = null;
		InteractionOperand __DEC_combo_fragment_569274 = null;
		InteractionOperand __DEC_messageReceive_fragment_583610 = null;
		InteractionOperand __DEC_messageSend_fragment_687457 = null;
		InteractionOperand __DEC_operand_fragment_135478 = null;
		Constraint __DEC_spec_specification_98033 = null;
		InteractionOperand __DEC_guard_guard_961370 = null;
		CombinedFragment __DEC_operand_operand_334507 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_638940 = null;
		Message __DEC_messageReceive_receiveEvent_638940 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_649661 = null;
		Message __DEC_messageSend_receiveEvent_649661 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_666337 = null;
		Message __DEC_messageReceive_sendEvent_666337 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_588159 = null;
		Message __DEC_messageSend_sendEvent_588159 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_558648 = null;
		MessageEnd __DEC_message_message_558648 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// bind object
							_TmpObject = message.getReceiveEvent();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link fragment from messageReceive to parentOperand
									JavaSDM.ensure(parentOperand
											.equals(messageReceive
													.getEnclosingOperand()));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from sysLine to combo
									fujaba__Success = false;

									fujaba__IterSysLineToCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToCombo.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
													parentCombo = (CombinedFragment) _TmpObject;
													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_248881 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_248881 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_248881 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_248881 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_248881
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_605753 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_605753 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_605753 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_605753 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_605753
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_315340 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_315340 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_315340 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_315340 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_315340
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_193904 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_193904 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_193904 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_193904 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_193904
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_569274 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_569274 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_569274 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_569274 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_569274
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_569274 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_569274
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_583610 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_583610 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_583610 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_583610 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_583610
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_583610 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_583610
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_687457 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_687457 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_687457 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_687457 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_687457
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_687457 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_687457
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_135478 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_135478 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_135478 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_135478 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_135478
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_135478 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_135478
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_98033 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_98033 is really bound
															JavaSDM.ensure(__DEC_spec_specification_98033 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_98033
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_98033 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_98033
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_961370 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_961370 is really bound
															JavaSDM.ensure(__DEC_guard_guard_961370 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_961370
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_961370 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_961370
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_961370 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_961370
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_334507 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_334507 is really bound
															JavaSDM.ensure(__DEC_operand_operand_334507 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_334507
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_334507 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_334507
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_334507 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_334507
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_638940
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_638940 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_638940
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_638940 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_638940
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_638940 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_638940 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_638940 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_638940
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_649661
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_649661 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_649661
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_649661 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_649661
																			.next();

																	// check object __DEC_messageSend_receiveEvent_649661 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_649661 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_649661 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_649661
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_666337
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_666337 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_666337
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_666337 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_666337
																			.next();

																	// check object __DEC_messageReceive_sendEvent_666337 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_666337 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_666337 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_666337
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_588159
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_588159 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_588159
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_588159 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_588159
																			.next();

																	// check object __DEC_messageSend_sendEvent_588159 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_588159 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_588159 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_588159
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_558648
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_558648 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_558648
																			.hasNext()) {
																try {
																	__DEC_message_message_558648 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_558648
																			.next();

																	// check object __DEC_message_message_558648 is really bound
																	JavaSDM.ensure(__DEC_message_message_558648 != null);
																	// check isomorphic binding between objects __DEC_message_message_558648 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_558648
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_558648 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_558648
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_267(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_896125 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_293768 = null;
		Interaction __DEC_messageSend_enclosingInteraction_897209 = null;
		Interaction __DEC_operand_enclosingInteraction_999895 = null;
		InteractionOperand __DEC_combo_fragment_468956 = null;
		InteractionOperand __DEC_messageReceive_fragment_410090 = null;
		InteractionOperand __DEC_messageSend_fragment_621953 = null;
		InteractionOperand __DEC_operand_fragment_791916 = null;
		Constraint __DEC_spec_specification_766798 = null;
		InteractionOperand __DEC_guard_guard_766685 = null;
		CombinedFragment __DEC_operand_operand_897897 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_693466 = null;
		Message __DEC_messageReceive_receiveEvent_693466 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_82507 = null;
		Message __DEC_messageSend_receiveEvent_82507 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_397637 = null;
		Message __DEC_messageReceive_sendEvent_397637 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474301 = null;
		Message __DEC_messageSend_sendEvent_474301 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_906097 = null;
		MessageEnd __DEC_message_message_906097 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link covered from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link covered from line to parentCombo
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentCombo));

									// iterate to-many link covered from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// bind object
											_TmpObject = message
													.getReceiveEvent();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;

											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link trg from operand to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			operand,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterOperandTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_896125 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_896125 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_896125 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_896125 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_896125
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_293768 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_293768 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_293768 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_293768 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_293768
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_897209 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_897209 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_897209 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_897209 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_897209
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_999895 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_999895 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_999895 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_999895 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_999895
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_468956 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_468956 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_468956 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_468956 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_468956
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_468956 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_468956
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_410090 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_410090 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_410090 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_410090 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_410090
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_410090 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_410090
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_621953 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_621953 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_621953 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_621953 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_621953
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_621953 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_621953
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_791916 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_791916 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_791916 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_791916 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_791916
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_791916 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_791916
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_766798 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_766798 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_766798 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_766798
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_766798 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_766798
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_766685 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_766685 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_766685 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_766685
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_766685 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_766685
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_766685 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_766685
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_897897 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_897897 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_897897 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_897897
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_897897 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_897897
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_897897 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_897897
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_693466
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_693466 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_693466
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_693466 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_693466
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_693466 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_693466 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_693466 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_693466
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_82507
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_82507 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_82507
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_82507 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_82507
																					.next();

																			// check object __DEC_messageSend_receiveEvent_82507 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_82507 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_82507 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_82507
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_397637
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_397637 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_397637
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_397637 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_397637
																					.next();

																			// check object __DEC_messageReceive_sendEvent_397637 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_397637 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_397637 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_397637
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_474301
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474301 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474301
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_474301 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_474301
																					.next();

																			// check object __DEC_messageSend_sendEvent_474301 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_474301 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_474301 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_474301
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_906097
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_906097 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_906097
																					.hasNext()) {
																		try {
																			__DEC_message_message_906097 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_906097
																					.next();

																			// check object __DEC_message_message_906097 is really bound
																			JavaSDM.ensure(__DEC_message_message_906097 != null);
																			// check isomorphic binding between objects __DEC_message_message_906097 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_906097
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_906097 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_906097
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to operand
																JavaSDM.ensure(operand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to operand
																JavaSDM.ensure(operand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_268(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_645806 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_812651 = null;
		Interaction __DEC_messageSend_enclosingInteraction_994803 = null;
		Interaction __DEC_operand_enclosingInteraction_816586 = null;
		InteractionOperand __DEC_combo_fragment_855826 = null;
		InteractionOperand __DEC_messageReceive_fragment_630409 = null;
		InteractionOperand __DEC_messageSend_fragment_19235 = null;
		InteractionOperand __DEC_operand_fragment_607424 = null;
		Constraint __DEC_spec_specification_658377 = null;
		InteractionOperand __DEC_guard_guard_629542 = null;
		CombinedFragment __DEC_operand_operand_773455 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686483 = null;
		Message __DEC_messageReceive_receiveEvent_686483 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_335154 = null;
		Message __DEC_messageSend_receiveEvent_335154 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54698 = null;
		Message __DEC_messageReceive_sendEvent_54698 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_168757 = null;
		Message __DEC_messageSend_sendEvent_168757 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_547020 = null;
		MessageEnd __DEC_message_message_547020 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from sysLine to combo
									fujaba__Success = false;

									fujaba__IterSysLineToCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToCombo.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// iterate to-many link covered from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// bind object
													_TmpObject = message
															.getReceiveEvent();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;

													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link covered from sysLine to parentCombo
													fujaba__Success = false;

													fujaba__IterSysLineToParentCombo = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentCombo
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentCombo
																	.next();

															// ensure correct type and really bound of object parentCombo
															JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
															parentCombo = (CombinedFragment) _TmpObject;
															// check isomorphic binding between objects parentCombo and combo 
															JavaSDM.ensure(!parentCombo
																	.equals(combo));

															// check link operand from parentOperand to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(parentOperand
																			.eContainer()));

															// check link covered from line to parentCombo
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentCombo));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_645806 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_645806 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_645806 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_645806 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_645806
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_812651 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_812651 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_812651 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_812651 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_812651
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_994803 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_994803 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_994803 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_994803 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_994803
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_816586 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_816586 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_816586 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_816586 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_816586
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_855826 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_855826 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_855826 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_855826 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_855826
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_855826 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_855826
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_630409 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_630409 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_630409 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_630409 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_630409
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_630409 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_630409
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_19235 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_19235 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_19235 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19235 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19235
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19235 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19235
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_607424 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_607424 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_607424 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_607424 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_607424
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_607424 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_607424
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_658377 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_658377 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_658377 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_658377
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_658377 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_658377
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_629542 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_629542 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_629542 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_629542
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_629542 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_629542
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_629542 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_629542
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_773455 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_773455 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_773455 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_773455
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_773455 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_773455
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_773455 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_773455
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_686483
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686483 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686483
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_686483 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_686483
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_686483 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_686483 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_686483 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_686483
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_335154
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_335154 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_335154
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_335154 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_335154
																					.next();

																			// check object __DEC_messageSend_receiveEvent_335154 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_335154 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_335154 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_335154
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_54698
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54698 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54698
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_54698 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_54698
																					.next();

																			// check object __DEC_messageReceive_sendEvent_54698 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_54698 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_54698 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_54698
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_168757
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_168757 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_168757
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_168757 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_168757
																					.next();

																			// check object __DEC_messageSend_sendEvent_168757 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_168757 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_168757 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_168757
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_547020
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_547020 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_547020
																					.hasNext()) {
																		try {
																			__DEC_message_message_547020 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_547020
																					.next();

																			// check object __DEC_message_message_547020 is really bound
																			JavaSDM.ensure(__DEC_message_message_547020 != null);
																			// check isomorphic binding between objects __DEC_message_message_547020 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_547020
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_547020 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_547020
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_guard is really bound
																JavaSDM.ensure(_edge_guard != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_guard to operand
																JavaSDM.ensure(operand
																		.equals(_edge_guard
																				.getSrc()));

																// check link trg from _edge_guard to guard
																JavaSDM.ensure(guard
																		.equals(_edge_guard
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_269(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_469923 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_314590 = null;
		Interaction __DEC_messageSend_enclosingInteraction_329694 = null;
		Interaction __DEC_operand_enclosingInteraction_214852 = null;
		InteractionOperand __DEC_combo_fragment_947860 = null;
		InteractionOperand __DEC_messageReceive_fragment_165168 = null;
		InteractionOperand __DEC_messageSend_fragment_13766 = null;
		InteractionOperand __DEC_operand_fragment_252907 = null;
		Constraint __DEC_spec_specification_732759 = null;
		InteractionOperand __DEC_guard_guard_631593 = null;
		CombinedFragment __DEC_operand_operand_74925 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_294639 = null;
		Message __DEC_messageReceive_receiveEvent_294639 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307624 = null;
		Message __DEC_messageSend_receiveEvent_307624 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_711534 = null;
		Message __DEC_messageReceive_sendEvent_711534 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_303309 = null;
		Message __DEC_messageSend_sendEvent_303309 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_907093 = null;
		MessageEnd __DEC_message_message_907093 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link covered from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link covered from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// bind object
									_TmpObject = message.getReceiveEvent();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// iterate to-many link covered from sysLine to combo
									fujaba__Success = false;

									fujaba__IterSysLineToCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToCombo.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link covered from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_469923 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_469923 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_469923 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_469923 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_469923
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_314590 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_314590 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_314590 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_314590 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_314590
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_329694 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_329694 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_329694 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_329694 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_329694
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_214852 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_214852 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_214852 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_214852 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_214852
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_947860 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_947860 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_947860 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_947860 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_947860
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_947860 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_947860
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_165168 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_165168 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_165168 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_165168 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_165168
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_165168 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_165168
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_13766 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_13766 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_13766 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_13766 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_13766
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_13766 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_13766
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_252907 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_252907 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_252907 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_252907 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_252907
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_252907 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_252907
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_732759 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_732759 is really bound
															JavaSDM.ensure(__DEC_spec_specification_732759 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_732759
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_732759 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_732759
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_631593 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_631593 is really bound
															JavaSDM.ensure(__DEC_guard_guard_631593 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_631593
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_631593 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_631593
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_631593 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_631593
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_74925 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_74925 is really bound
															JavaSDM.ensure(__DEC_operand_operand_74925 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_74925
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_74925 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_74925
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_74925 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_74925
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_294639
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_294639 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_294639
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_294639 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_294639
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_294639 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_294639 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_294639 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_294639
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_307624
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307624 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307624
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_307624 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_307624
																			.next();

																	// check object __DEC_messageSend_receiveEvent_307624 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_307624 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_307624 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_307624
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_711534
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_711534 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_711534
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_711534 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_711534
																			.next();

																	// check object __DEC_messageReceive_sendEvent_711534 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_711534 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_711534 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_711534
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_303309
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_303309 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_303309
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_303309 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_303309
																			.next();

																	// check object __DEC_messageSend_sendEvent_303309 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_303309 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_303309 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_303309
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_907093
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_907093 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_907093
																			.hasNext()) {
																try {
																	__DEC_message_message_907093 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_907093
																			.next();

																	// check object __DEC_message_message_907093 is really bound
																	JavaSDM.ensure(__DEC_message_message_907093 != null);
																	// check isomorphic binding between objects __DEC_message_message_907093 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_907093
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_907093 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_907093
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_specification is really bound
														JavaSDM.ensure(_edge_specification != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_specification to guard
														JavaSDM.ensure(guard
																.equals(_edge_specification
																		.getSrc()));

														// check link trg from _edge_specification to spec
														JavaSDM.ensure(spec
																.equals(_edge_specification
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_53(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_850254 = null;
		NormalStep __DEC_alt_stepAlternative_652977 = null;
		Flow __DEC_step_steps_793212 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_874558 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_874558 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// iterate to-many link useCases from packageDeclaration to useCase
							fujaba__Success = false;

							fujaba__IterPackageDeclarationToUseCase = new ArrayList(
									packageDeclaration.getUseCases())
									.iterator();

							while (fujaba__IterPackageDeclarationToUseCase
									.hasNext()) {
								try {
									useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
											.next();

									// check object useCase is really bound
									JavaSDM.ensure(useCase != null);
									// check link flows from flow to useCase
									JavaSDM.ensure(useCase.equals(flow
											.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_altFlow_flows_850254 = altFlow
													.eContainer() instanceof UseCase ? (UseCase) altFlow
													.eContainer() : null;

											// check object __DEC_altFlow_flows_850254 is really bound
											JavaSDM.ensure(__DEC_altFlow_flows_850254 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_altFlow_flows_850254
													.getFlows().contains(
															altFlow));

											// check isomorphic binding between objects __DEC_altFlow_flows_850254 and useCase 
											JavaSDM.ensure(!__DEC_altFlow_flows_850254
													.equals(useCase));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_alt_stepAlternative_652977 = alt
													.eContainer() instanceof NormalStep ? (NormalStep) alt
													.eContainer() : null;

											// check object __DEC_alt_stepAlternative_652977 is really bound
											JavaSDM.ensure(__DEC_alt_stepAlternative_652977 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_alt_stepAlternative_652977
													.getStepAlternative()
													.contains(alt));

											// check isomorphic binding between objects __DEC_alt_stepAlternative_652977 and step 
											JavaSDM.ensure(!__DEC_alt_stepAlternative_652977
													.equals(step));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_step_steps_793212 = step
													.eContainer() instanceof Flow ? (Flow) step
													.eContainer() : null;

											// check object __DEC_step_steps_793212 is really bound
											JavaSDM.ensure(__DEC_step_steps_793212 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_step_steps_793212
													.getSteps().contains(step));

											// check isomorphic binding between objects __DEC_step_steps_793212 and altFlow 
											JavaSDM.ensure(!__DEC_step_steps_793212
													.equals(altFlow));

											// check isomorphic binding between objects __DEC_step_steps_793212 and flow 
											JavaSDM.ensure(!__DEC_step_steps_793212
													.equals(flow));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link ref from altFlow to __DEC_altFlow_ref_874558
											fujaba__Success = false;

											fujaba__IterAltFlowTo__DEC_altFlow_ref_874558 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	altFlow,
																	AlternativeFlowAlternative.class,
																	"ref"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterAltFlowTo__DEC_altFlow_ref_874558
															.hasNext()) {
												try {
													__DEC_altFlow_ref_874558 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_874558
															.next();

													// check object __DEC_altFlow_ref_874558 is really bound
													JavaSDM.ensure(__DEC_altFlow_ref_874558 != null);
													// check isomorphic binding between objects __DEC_altFlow_ref_874558 and alt 
													JavaSDM.ensure(!__DEC_altFlow_ref_874558
															.equals(alt));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check object _edge_steps is really bound
										JavaSDM.ensure(_edge_steps != null);
										// check object actor is really bound
										JavaSDM.ensure(actor != null);
										// check object alt is really bound
										JavaSDM.ensure(alt != null);
										// check object altFlow is really bound
										JavaSDM.ensure(altFlow != null);
										// check object flow is really bound
										JavaSDM.ensure(flow != null);
										// check object packageDeclaration is really bound
										JavaSDM.ensure(packageDeclaration != null);
										// check object step is really bound
										JavaSDM.ensure(step != null);
										// check object sysActor is really bound
										JavaSDM.ensure(sysActor != null);
										// check object useCase is really bound
										JavaSDM.ensure(useCase != null);
										// check isomorphic binding between objects sysActor and actor 
										JavaSDM.ensure(!sysActor.equals(actor));

										// check isomorphic binding between objects flow and altFlow 
										JavaSDM.ensure(!flow.equals(altFlow));

										// check link actor from step to actor
										JavaSDM.ensure(actor.equals(step
												.getActor()));

										// check link ref from alt to altFlow
										JavaSDM.ensure(altFlow.equals(alt
												.getRef()));

										// check link actors from actor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(actor.eContainer()));

										// check link actors from sysActor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(sysActor.eContainer()));

										// check link flows from flow to useCase
										JavaSDM.ensure(useCase.equals(flow
												.eContainer()));

										// check link flows from altFlow to useCase
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(altFlow,
														UseCase.class,
														"$eContainer")
												.contains(useCase)));

										// check link src from _edge_steps to flow
										JavaSDM.ensure(flow.equals(_edge_steps
												.getSrc()));

										// check link stepAlternative from alt to step
										JavaSDM.ensure(step.equals(alt
												.eContainer()));

										// check link steps from step to flow
										JavaSDM.ensure(flow.equals(step
												.eContainer()));

										// check link steps from step to altFlow
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(step,
														AlternativeFlow.class,
														"$eContainer")
												.contains(altFlow)));

										// check link trg from _edge_steps to step
										JavaSDM.ensure(step.equals(_edge_steps
												.getTrg()));

										// check link useCases from useCase to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(useCase.eContainer()));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_FWD(match,
														packageDeclaration,
														actor, sysActor, flow,
														step, alt, altFlow,
														useCase);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_FWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_54(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_153953 = null;
		NormalStep __DEC_alt_stepAlternative_990135 = null;
		Flow __DEC_step_steps_186145 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_761930 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_761930 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			_TmpObject = _edge_actor.getTrg();

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;

			// check link actor from step to actor
			JavaSDM.ensure(actor.equals(step.getActor()));

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// iterate to-many link useCases from packageDeclaration to useCase
							fujaba__Success = false;

							fujaba__IterPackageDeclarationToUseCase = new ArrayList(
									packageDeclaration.getUseCases())
									.iterator();

							while (fujaba__IterPackageDeclarationToUseCase
									.hasNext()) {
								try {
									useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
											.next();

									// check object useCase is really bound
									JavaSDM.ensure(useCase != null);
									// check link flows from flow to useCase
									JavaSDM.ensure(useCase.equals(flow
											.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_altFlow_flows_153953 = altFlow
													.eContainer() instanceof UseCase ? (UseCase) altFlow
													.eContainer() : null;

											// check object __DEC_altFlow_flows_153953 is really bound
											JavaSDM.ensure(__DEC_altFlow_flows_153953 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_altFlow_flows_153953
													.getFlows().contains(
															altFlow));

											// check isomorphic binding between objects __DEC_altFlow_flows_153953 and useCase 
											JavaSDM.ensure(!__DEC_altFlow_flows_153953
													.equals(useCase));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_alt_stepAlternative_990135 = alt
													.eContainer() instanceof NormalStep ? (NormalStep) alt
													.eContainer() : null;

											// check object __DEC_alt_stepAlternative_990135 is really bound
											JavaSDM.ensure(__DEC_alt_stepAlternative_990135 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_alt_stepAlternative_990135
													.getStepAlternative()
													.contains(alt));

											// check isomorphic binding between objects __DEC_alt_stepAlternative_990135 and step 
											JavaSDM.ensure(!__DEC_alt_stepAlternative_990135
													.equals(step));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_step_steps_186145 = step
													.eContainer() instanceof Flow ? (Flow) step
													.eContainer() : null;

											// check object __DEC_step_steps_186145 is really bound
											JavaSDM.ensure(__DEC_step_steps_186145 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_step_steps_186145
													.getSteps().contains(step));

											// check isomorphic binding between objects __DEC_step_steps_186145 and altFlow 
											JavaSDM.ensure(!__DEC_step_steps_186145
													.equals(altFlow));

											// check isomorphic binding between objects __DEC_step_steps_186145 and flow 
											JavaSDM.ensure(!__DEC_step_steps_186145
													.equals(flow));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link ref from altFlow to __DEC_altFlow_ref_761930
											fujaba__Success = false;

											fujaba__IterAltFlowTo__DEC_altFlow_ref_761930 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	altFlow,
																	AlternativeFlowAlternative.class,
																	"ref"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterAltFlowTo__DEC_altFlow_ref_761930
															.hasNext()) {
												try {
													__DEC_altFlow_ref_761930 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_761930
															.next();

													// check object __DEC_altFlow_ref_761930 is really bound
													JavaSDM.ensure(__DEC_altFlow_ref_761930 != null);
													// check isomorphic binding between objects __DEC_altFlow_ref_761930 and alt 
													JavaSDM.ensure(!__DEC_altFlow_ref_761930
															.equals(alt));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check object _edge_actor is really bound
										JavaSDM.ensure(_edge_actor != null);
										// check object actor is really bound
										JavaSDM.ensure(actor != null);
										// check object alt is really bound
										JavaSDM.ensure(alt != null);
										// check object altFlow is really bound
										JavaSDM.ensure(altFlow != null);
										// check object flow is really bound
										JavaSDM.ensure(flow != null);
										// check object packageDeclaration is really bound
										JavaSDM.ensure(packageDeclaration != null);
										// check object step is really bound
										JavaSDM.ensure(step != null);
										// check object sysActor is really bound
										JavaSDM.ensure(sysActor != null);
										// check object useCase is really bound
										JavaSDM.ensure(useCase != null);
										// check isomorphic binding between objects sysActor and actor 
										JavaSDM.ensure(!sysActor.equals(actor));

										// check isomorphic binding between objects flow and altFlow 
										JavaSDM.ensure(!flow.equals(altFlow));

										// check link actor from step to actor
										JavaSDM.ensure(actor.equals(step
												.getActor()));

										// check link ref from alt to altFlow
										JavaSDM.ensure(altFlow.equals(alt
												.getRef()));

										// check link actors from actor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(actor.eContainer()));

										// check link actors from sysActor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(sysActor.eContainer()));

										// check link flows from flow to useCase
										JavaSDM.ensure(useCase.equals(flow
												.eContainer()));

										// check link flows from altFlow to useCase
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(altFlow,
														UseCase.class,
														"$eContainer")
												.contains(useCase)));

										// check link src from _edge_actor to step
										JavaSDM.ensure(step.equals(_edge_actor
												.getSrc()));

										// check link stepAlternative from alt to step
										JavaSDM.ensure(step.equals(alt
												.eContainer()));

										// check link steps from step to flow
										JavaSDM.ensure(flow.equals(step
												.eContainer()));

										// check link steps from step to altFlow
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(step,
														AlternativeFlow.class,
														"$eContainer")
												.contains(altFlow)));

										// check link trg from _edge_actor to actor
										JavaSDM.ensure(actor.equals(_edge_actor
												.getTrg()));

										// check link useCases from useCase to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(useCase.eContainer()));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_FWD(match,
														packageDeclaration,
														actor, sysActor, flow,
														step, alt, altFlow,
														useCase);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_FWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_270(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_69693 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_430930 = null;
		Interaction __DEC_messageSend_enclosingInteraction_303480 = null;
		Interaction __DEC_operand_enclosingInteraction_151033 = null;
		InteractionOperand __DEC_combo_fragment_213711 = null;
		InteractionOperand __DEC_messageReceive_fragment_380963 = null;
		InteractionOperand __DEC_messageSend_fragment_172279 = null;
		InteractionOperand __DEC_operand_fragment_660856 = null;
		Constraint __DEC_spec_specification_121802 = null;
		InteractionOperand __DEC_guard_guard_243778 = null;
		CombinedFragment __DEC_operand_operand_219215 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_164386 = null;
		Message __DEC_messageReceive_receiveEvent_164386 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290955 = null;
		Message __DEC_messageSend_receiveEvent_290955 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_202003 = null;
		Message __DEC_messageReceive_sendEvent_202003 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_324575 = null;
		Message __DEC_messageSend_sendEvent_324575 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_317736 = null;
		MessageEnd __DEC_message_message_317736 = null;
		Match match = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentCombo
									fujaba__Success = false;

									fujaba__IterSysLineToParentCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentCombo
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentCombo
													.next();

											// ensure correct type and really bound of object parentCombo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											parentCombo = (CombinedFragment) _TmpObject;
											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// iterate to-many link covered from parentCombo to line
											fujaba__Success = false;

											fujaba__IterParentComboToLine = new ArrayList(
													parentCombo.getCovered())
													.iterator();

											while (fujaba__IterParentComboToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentComboToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// bind object
													interaction = line
															.getInteraction();

													// check object interaction is really bound
													JavaSDM.ensure(interaction != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link covered from sysLine to parentOperand
													fujaba__Success = false;

													fujaba__IterSysLineToParentOperand = new ArrayList(
															sysLine.getCoveredBy())
															.iterator();

													while (fujaba__IterSysLineToParentOperand
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterSysLineToParentOperand
																	.next();

															// ensure correct type and really bound of object parentOperand
															JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
															parentOperand = (InteractionOperand) _TmpObject;
															// check isomorphic binding between objects parentOperand and operand 
															JavaSDM.ensure(!parentOperand
																	.equals(operand));

															// check link fragment from messageReceive to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(messageReceive
																			.getEnclosingOperand()));

															// check link operand from parentOperand to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(parentOperand
																			.eContainer()));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_69693 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_69693 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_69693 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_69693 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_69693
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_430930 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_430930 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_430930 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_430930 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_430930
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_303480 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_303480 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_303480 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_303480 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_303480
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_151033 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_151033 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_151033 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_151033 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_151033
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_213711 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_213711 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_213711 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_213711 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_213711
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_213711 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_213711
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_380963 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_380963 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_380963 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_380963 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_380963
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_380963 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_380963
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_172279 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_172279 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_172279 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_172279 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_172279
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_172279 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_172279
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_660856 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_660856 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_660856 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_660856 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_660856
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_660856 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_660856
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_121802 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_121802 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_121802 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_121802
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_121802 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_121802
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_243778 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_243778 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_243778 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_243778
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_243778 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_243778
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_243778 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_243778
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_219215 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_219215 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_219215 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_219215
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_219215 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_219215
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_219215 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_219215
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_164386
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_164386 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_164386
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_164386 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_164386
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_164386 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_164386 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_164386 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_164386
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_290955
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290955 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290955
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_290955 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_290955
																					.next();

																			// check object __DEC_messageSend_receiveEvent_290955 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_290955 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_290955 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_290955
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_202003
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_202003 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_202003
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_202003 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_202003
																					.next();

																			// check object __DEC_messageReceive_sendEvent_202003 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_202003 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_202003 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_202003
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_324575
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_324575 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_324575
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_324575 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_324575
																					.next();

																			// check object __DEC_messageSend_sendEvent_324575 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_324575 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_324575 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_324575
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_317736
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_317736 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_317736
																					.hasNext()) {
																		try {
																			__DEC_message_message_317736 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_317736
																					.next();

																			// check object __DEC_message_message_317736 is really bound
																			JavaSDM.ensure(__DEC_message_message_317736 != null);
																			// check isomorphic binding between objects __DEC_message_message_317736 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_317736
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_317736 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_317736
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_sendEvent is really bound
																JavaSDM.ensure(_edge_sendEvent != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_sendEvent to message
																JavaSDM.ensure(message
																		.equals(_edge_sendEvent
																				.getSrc()));

																// check link trg from _edge_sendEvent to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_sendEvent
																				.getTrg()));

																// check link covered from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link covered from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link covered from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link covered from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_271(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_882847 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_549196 = null;
		Interaction __DEC_messageSend_enclosingInteraction_965010 = null;
		Interaction __DEC_operand_enclosingInteraction_595090 = null;
		InteractionOperand __DEC_combo_fragment_930980 = null;
		InteractionOperand __DEC_messageReceive_fragment_421436 = null;
		InteractionOperand __DEC_messageSend_fragment_846486 = null;
		InteractionOperand __DEC_operand_fragment_342377 = null;
		Constraint __DEC_spec_specification_72812 = null;
		InteractionOperand __DEC_guard_guard_244494 = null;
		CombinedFragment __DEC_operand_operand_951899 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_666611 = null;
		Message __DEC_messageReceive_receiveEvent_666611 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_295591 = null;
		Message __DEC_messageSend_receiveEvent_295591 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_410239 = null;
		Message __DEC_messageReceive_sendEvent_410239 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_108535 = null;
		Message __DEC_messageSend_sendEvent_108535 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_354868 = null;
		MessageEnd __DEC_message_message_354868 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link covered from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_882847 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_882847 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_882847 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_882847 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_882847
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_549196 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_549196 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_549196 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_549196 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_549196
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_965010 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_965010 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_965010 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_965010 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_965010
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_595090 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_595090 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_595090 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_595090 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_595090
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_930980 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_930980 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_930980 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_930980 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_930980
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_930980 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_930980
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_421436 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_421436 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_421436 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_421436 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_421436
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_421436 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_421436
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_846486 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_846486 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_846486 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_846486 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_846486
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_846486 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_846486
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_342377 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_342377 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_342377 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_342377 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_342377
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_342377 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_342377
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_72812 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_72812 is really bound
															JavaSDM.ensure(__DEC_spec_specification_72812 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_72812
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_72812 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_72812
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_244494 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_244494 is really bound
															JavaSDM.ensure(__DEC_guard_guard_244494 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_244494
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_244494 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_244494
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_244494 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_244494
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_951899 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_951899 is really bound
															JavaSDM.ensure(__DEC_operand_operand_951899 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_951899
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_951899 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_951899
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_951899 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_951899
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_666611
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_666611 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_666611
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_666611 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_666611
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_666611 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_666611 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_666611 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_666611
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_295591
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_295591 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_295591
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_295591 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_295591
																			.next();

																	// check object __DEC_messageSend_receiveEvent_295591 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_295591 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_295591 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_295591
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_410239
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_410239 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_410239
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_410239 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_410239
																			.next();

																	// check object __DEC_messageReceive_sendEvent_410239 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_410239 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_410239 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_410239
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_108535
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_108535 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_108535
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_108535 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_108535
																			.next();

																	// check object __DEC_messageSend_sendEvent_108535 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_108535 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_108535 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_108535
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_354868
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_354868 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_354868
																			.hasNext()) {
																try {
																	__DEC_message_message_354868 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_354868
																			.next();

																	// check object __DEC_message_message_354868 is really bound
																	JavaSDM.ensure(__DEC_message_message_354868 != null);
																	// check isomorphic binding between objects __DEC_message_message_354868 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_354868
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_354868 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_354868
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_receiveEvent is really bound
														JavaSDM.ensure(_edge_receiveEvent != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_receiveEvent to message
														JavaSDM.ensure(message
																.equals(_edge_receiveEvent
																		.getSrc()));

														// check link trg from _edge_receiveEvent to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_receiveEvent
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_272(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_632401 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_528256 = null;
		Interaction __DEC_messageSend_enclosingInteraction_634426 = null;
		Interaction __DEC_operand_enclosingInteraction_999973 = null;
		InteractionOperand __DEC_combo_fragment_778951 = null;
		InteractionOperand __DEC_messageReceive_fragment_411465 = null;
		InteractionOperand __DEC_messageSend_fragment_850526 = null;
		InteractionOperand __DEC_operand_fragment_646596 = null;
		Constraint __DEC_spec_specification_375818 = null;
		InteractionOperand __DEC_guard_guard_15149 = null;
		CombinedFragment __DEC_operand_operand_389260 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_97331 = null;
		Message __DEC_messageReceive_receiveEvent_97331 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476952 = null;
		Message __DEC_messageSend_receiveEvent_476952 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_254332 = null;
		Message __DEC_messageReceive_sendEvent_254332 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_80422 = null;
		Message __DEC_messageSend_sendEvent_80422 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_874299 = null;
		MessageEnd __DEC_message_message_874299 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link covered from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_632401 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_632401 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_632401 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_632401 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_632401
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_528256 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_528256 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_528256 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_528256 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_528256
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_634426 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_634426 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_634426 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_634426 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_634426
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_999973 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_999973 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_999973 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_999973 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_999973
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_778951 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_778951 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_778951 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_778951 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_778951
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_778951 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_778951
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_411465 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_411465 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_411465 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_411465 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_411465
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_411465 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_411465
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_850526 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_850526 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_850526 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_850526 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_850526
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_850526 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_850526
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_646596 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_646596 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_646596 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_646596 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_646596
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_646596 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_646596
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_375818 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_375818 is really bound
															JavaSDM.ensure(__DEC_spec_specification_375818 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_375818
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_375818 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_375818
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_15149 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_15149 is really bound
															JavaSDM.ensure(__DEC_guard_guard_15149 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_15149
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_15149 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_15149
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_15149 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_15149
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_389260 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_389260 is really bound
															JavaSDM.ensure(__DEC_operand_operand_389260 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_389260
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_389260 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_389260
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_389260 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_389260
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_97331
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_97331 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_97331
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_97331 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_97331
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_97331 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_97331 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_97331 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_97331
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_476952
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476952 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476952
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_476952 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_476952
																			.next();

																	// check object __DEC_messageSend_receiveEvent_476952 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_476952 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_476952 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_476952
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_254332
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_254332 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_254332
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_254332 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_254332
																			.next();

																	// check object __DEC_messageReceive_sendEvent_254332 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_254332 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_254332 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_254332
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_80422
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_80422 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_80422
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_80422 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_80422
																			.next();

																	// check object __DEC_messageSend_sendEvent_80422 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_80422 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_80422 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_80422
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_874299
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_874299 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_874299
																			.hasNext()) {
																try {
																	__DEC_message_message_874299 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_874299
																			.next();

																	// check object __DEC_message_message_874299 is really bound
																	JavaSDM.ensure(__DEC_message_message_874299 != null);
																	// check isomorphic binding between objects __DEC_message_message_874299 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_874299
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_874299 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_874299
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_273(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_248695 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_955112 = null;
		Interaction __DEC_messageSend_enclosingInteraction_801174 = null;
		Interaction __DEC_operand_enclosingInteraction_799320 = null;
		InteractionOperand __DEC_combo_fragment_936921 = null;
		InteractionOperand __DEC_messageReceive_fragment_824908 = null;
		InteractionOperand __DEC_messageSend_fragment_387345 = null;
		InteractionOperand __DEC_operand_fragment_954358 = null;
		Constraint __DEC_spec_specification_281662 = null;
		InteractionOperand __DEC_guard_guard_977234 = null;
		CombinedFragment __DEC_operand_operand_742802 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_65436 = null;
		Message __DEC_messageReceive_receiveEvent_65436 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_621760 = null;
		Message __DEC_messageSend_receiveEvent_621760 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_39691 = null;
		Message __DEC_messageReceive_sendEvent_39691 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_646203 = null;
		Message __DEC_messageSend_sendEvent_646203 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_817902 = null;
		MessageEnd __DEC_message_message_817902 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to parentOperand
					fujaba__Success = false;

					fujaba__IterSysLineToParentOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentOperand
									.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check link fragment from messageReceive to parentOperand
							JavaSDM.ensure(parentOperand.equals(messageReceive
									.getEnclosingOperand()));

							// iterate to-many link covered from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// iterate to-many link covered from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link covered from sysLine to parentCombo
											fujaba__Success = false;

											fujaba__IterSysLineToParentCombo = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentCombo
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentCombo
															.next();

													// ensure correct type and really bound of object parentCombo
													JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
													parentCombo = (CombinedFragment) _TmpObject;
													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// iterate to-many link covered from parentCombo to line
													fujaba__Success = false;

													fujaba__IterParentComboToLine = new ArrayList(
															parentCombo
																	.getCovered())
															.iterator();

													while (fujaba__IterParentComboToLine
															.hasNext()) {
														try {
															line = (Lifeline) fujaba__IterParentComboToLine
																	.next();

															// check object line is really bound
															JavaSDM.ensure(line != null);
															// check isomorphic binding between objects sysLine and line 
															JavaSDM.ensure(!sysLine
																	.equals(line));

															// check link lifeline from line to interaction
															JavaSDM.ensure(interaction
																	.equals(line
																			.getInteraction()));

															// check link covered from line to operand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			operand));

															// check link covered from line to parentOperand
															JavaSDM.ensure(line
																	.getCoveredBy()
																	.contains(
																			parentOperand));

															// iterate to-many link src from message to _edge_interaction
															fujaba__Success = false;

															fujaba__IterMessageTo_edge_interaction = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterMessageTo_edge_interaction
																	.hasNext()) {
																try {
																	_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
																			.next();

																	// check object _edge_interaction is really bound
																	JavaSDM.ensure(_edge_interaction != null);
																	// check isomorphic binding between objects _edge_message and _edge_interaction 
																	JavaSDM.ensure(!_edge_message
																			.equals(_edge_interaction));

																	// check link trg from _edge_interaction to interaction
																	JavaSDM.ensure(interaction
																			.equals(_edge_interaction
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_enclosingInteraction_248695 = combo
																					.getEnclosingInteraction();

																			// check object __DEC_combo_enclosingInteraction_248695 is really bound
																			JavaSDM.ensure(__DEC_combo_enclosingInteraction_248695 != null);

																			// check isomorphic binding between objects __DEC_combo_enclosingInteraction_248695 and interaction 
																			JavaSDM.ensure(!__DEC_combo_enclosingInteraction_248695
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_955112 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_955112 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_955112 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_955112 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_955112
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_801174 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_801174 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_801174 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_801174 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_801174
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_799320 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_799320 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_799320 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_799320 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_799320
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_936921 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_936921 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_936921 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_936921 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_936921
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_936921 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_936921
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_824908 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_824908 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_824908 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_824908 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_824908
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_824908 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_824908
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_387345 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_387345 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_387345 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_387345 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_387345
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_387345 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_387345
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_954358 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_954358 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_954358 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_954358 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_954358
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_954358 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_954358
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_281662 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_281662 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_281662 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_281662
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_281662 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_281662
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_977234 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_977234 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_977234 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_977234
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_977234 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_977234
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_977234 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_977234
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_742802 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_742802 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_742802 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_742802
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_742802 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_742802
																					.equals(combo));

																			// check isomorphic binding between objects __DEC_operand_operand_742802 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_operand_742802
																					.equals(parentCombo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_65436
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_65436 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_65436
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_receiveEvent_65436 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_65436
																							.next();

																					// check object __DEC_messageReceive_receiveEvent_65436 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_receiveEvent_65436 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_65436 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_65436
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_621760
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_621760 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"receiveEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_621760
																							.hasNext()) {
																				try {
																					__DEC_messageSend_receiveEvent_621760 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_621760
																							.next();

																					// check object __DEC_messageSend_receiveEvent_621760 is really bound
																					JavaSDM.ensure(__DEC_messageSend_receiveEvent_621760 != null);
																					// check isomorphic binding between objects __DEC_messageSend_receiveEvent_621760 and message 
																					JavaSDM.ensure(!__DEC_messageSend_receiveEvent_621760
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_39691
																			fujaba__Success = false;

																			fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_39691 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageReceive,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_39691
																							.hasNext()) {
																				try {
																					__DEC_messageReceive_sendEvent_39691 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_39691
																							.next();

																					// check object __DEC_messageReceive_sendEvent_39691 is really bound
																					JavaSDM.ensure(__DEC_messageReceive_sendEvent_39691 != null);
																					// check isomorphic binding between objects __DEC_messageReceive_sendEvent_39691 and message 
																					JavaSDM.ensure(!__DEC_messageReceive_sendEvent_39691
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_646203
																			fujaba__Success = false;

																			fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_646203 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									messageSend,
																									Message.class,
																									"sendEvent"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_646203
																							.hasNext()) {
																				try {
																					__DEC_messageSend_sendEvent_646203 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_646203
																							.next();

																					// check object __DEC_messageSend_sendEvent_646203 is really bound
																					JavaSDM.ensure(__DEC_messageSend_sendEvent_646203 != null);
																					// check isomorphic binding between objects __DEC_messageSend_sendEvent_646203 and message 
																					JavaSDM.ensure(!__DEC_messageSend_sendEvent_646203
																							.equals(message));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// iterate to-many link message from message to __DEC_message_message_817902
																			fujaba__Success = false;

																			fujaba__IterMessageTo__DEC_message_message_817902 = new ArrayList(
																					org.moflon.util.eMoflonEMFUtil
																							.getOppositeReference(
																									message,
																									MessageEnd.class,
																									"message"))
																					.iterator();

																			while (!(fujaba__Success)
																					&& fujaba__IterMessageTo__DEC_message_message_817902
																							.hasNext()) {
																				try {
																					__DEC_message_message_817902 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_817902
																							.next();

																					// check object __DEC_message_message_817902 is really bound
																					JavaSDM.ensure(__DEC_message_message_817902 != null);
																					// check isomorphic binding between objects __DEC_message_message_817902 and messageReceive 
																					JavaSDM.ensure(!__DEC_message_message_817902
																							.equals(messageReceive));

																					// check isomorphic binding between objects __DEC_message_message_817902 and messageSend 
																					JavaSDM.ensure(!__DEC_message_message_817902
																							.equals(messageSend));

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}
																			}
																			JavaSDM.ensure(fujaba__Success);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_interaction is really bound
																		JavaSDM.ensure(_edge_interaction != null);
																		// check object _edge_message is really bound
																		JavaSDM.ensure(_edge_message != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object message is really bound
																		JavaSDM.ensure(message != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_message and _edge_interaction 
																		JavaSDM.ensure(!_edge_message
																				.equals(_edge_interaction));

																		// check isomorphic binding between objects parentCombo and combo 
																		JavaSDM.ensure(!parentCombo
																				.equals(combo));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(combo
																						.getEnclosingInteraction())));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link message from message to interaction
																		JavaSDM.ensure(interaction
																				.equals(message
																						.getInteraction()));

																		// check link message from messageReceive to message
																		JavaSDM.ensure(message
																				.equals(messageReceive
																						.getMessage()));

																		// check link message from messageSend to message
																		JavaSDM.ensure(message
																				.equals(messageSend
																						.getMessage()));

																		// check link receiveEvent from message to messageReceive
																		JavaSDM.ensure(messageReceive
																				.equals(message
																						.getReceiveEvent()));

																		// check link receiveEvent from message to messageSend
																		JavaSDM.ensure(!(messageSend
																				.equals(message
																						.getReceiveEvent())));

																		// check link sendEvent from message to messageSend
																		JavaSDM.ensure(messageSend
																				.equals(message
																						.getSendEvent()));

																		// check link sendEvent from message to messageReceive
																		JavaSDM.ensure(!(messageReceive
																				.equals(message
																						.getSendEvent())));

																		// check link operand from parentOperand to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(parentOperand
																						.eContainer()));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link operand from operand to parentCombo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(parentCombo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_interaction to message
																		JavaSDM.ensure(message
																				.equals(_edge_interaction
																						.getSrc()));

																		// check link src from _edge_message to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_message
																						.getSrc()));

																		// check link trg from _edge_interaction to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_interaction
																						.getTrg()));

																		// check link trg from _edge_message to message
																		JavaSDM.ensure(message
																				.equals(_edge_message
																						.getTrg()));

																		// check link covered from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link covered from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link covered from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link covered from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link covered from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						guard,
																						spec,
																						message,
																						interaction);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_274(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_526944 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_134023 = null;
		Interaction __DEC_messageSend_enclosingInteraction_621285 = null;
		Interaction __DEC_operand_enclosingInteraction_940188 = null;
		InteractionOperand __DEC_combo_fragment_513362 = null;
		InteractionOperand __DEC_messageReceive_fragment_256884 = null;
		InteractionOperand __DEC_messageSend_fragment_539901 = null;
		InteractionOperand __DEC_operand_fragment_568033 = null;
		Constraint __DEC_spec_specification_213406 = null;
		InteractionOperand __DEC_guard_guard_766988 = null;
		CombinedFragment __DEC_operand_operand_768659 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_492823 = null;
		Message __DEC_messageReceive_receiveEvent_492823 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_559341 = null;
		Message __DEC_messageSend_receiveEvent_559341 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_514273 = null;
		Message __DEC_messageReceive_sendEvent_514273 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_853584 = null;
		Message __DEC_messageSend_sendEvent_853584 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_720411 = null;
		MessageEnd __DEC_message_message_720411 = null;
		Match match = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageReceive = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// bind object
											interaction = line.getInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// iterate to-many link covered from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link fragment from messageReceive to parentOperand
													JavaSDM.ensure(parentOperand
															.equals(messageReceive
																	.getEnclosingOperand()));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link covered from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// check link covered from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_526944 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_526944 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_526944 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_526944 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_526944
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_134023 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_134023 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_134023 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_134023 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_134023
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_621285 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_621285 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_621285 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_621285 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_621285
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_940188 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_940188 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_940188 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_940188 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_940188
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_513362 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_513362 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_513362 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_513362 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_513362
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_513362 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_513362
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_256884 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_256884 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_256884 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_256884 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_256884
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_256884 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_256884
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_539901 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_539901 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_539901 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_539901 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_539901
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_539901 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_539901
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_568033 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_568033 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_568033 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_568033 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_568033
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_568033 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_568033
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_213406 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_213406 is really bound
															JavaSDM.ensure(__DEC_spec_specification_213406 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_213406
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_213406 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_213406
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_766988 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_766988 is really bound
															JavaSDM.ensure(__DEC_guard_guard_766988 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_766988
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_766988 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_766988
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_766988 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_766988
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_768659 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_768659 is really bound
															JavaSDM.ensure(__DEC_operand_operand_768659 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_768659
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_768659 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_768659
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_768659 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_768659
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_492823
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_492823 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_492823
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_492823 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_492823
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_492823 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_492823 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_492823 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_492823
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_559341
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_559341 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_559341
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_559341 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_559341
																			.next();

																	// check object __DEC_messageSend_receiveEvent_559341 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_559341 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_559341 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_559341
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_514273
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_514273 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_514273
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_514273 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_514273
																			.next();

																	// check object __DEC_messageReceive_sendEvent_514273 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_514273 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_514273 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_514273
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_853584
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_853584 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_853584
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_853584 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_853584
																			.next();

																	// check object __DEC_messageSend_sendEvent_853584 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_853584 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_853584 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_853584
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_720411
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_720411 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_720411
																			.hasNext()) {
																try {
																	__DEC_message_message_720411 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_720411
																			.next();

																	// check object __DEC_message_message_720411 is really bound
																	JavaSDM.ensure(__DEC_message_message_720411 != null);
																	// check isomorphic binding between objects __DEC_message_message_720411 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_720411
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_720411 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_720411
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_message to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_275(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_728800 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_850764 = null;
		Interaction __DEC_messageSend_enclosingInteraction_238604 = null;
		Interaction __DEC_operand_enclosingInteraction_658685 = null;
		InteractionOperand __DEC_combo_fragment_240616 = null;
		InteractionOperand __DEC_messageReceive_fragment_566166 = null;
		InteractionOperand __DEC_messageSend_fragment_888625 = null;
		InteractionOperand __DEC_operand_fragment_811151 = null;
		Constraint __DEC_spec_specification_839700 = null;
		InteractionOperand __DEC_guard_guard_637901 = null;
		CombinedFragment __DEC_operand_operand_445961 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_925907 = null;
		Message __DEC_messageReceive_receiveEvent_925907 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_74202 = null;
		Message __DEC_messageSend_receiveEvent_74202 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374669 = null;
		Message __DEC_messageReceive_sendEvent_374669 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_614404 = null;
		Message __DEC_messageSend_sendEvent_614404 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_843319 = null;
		MessageEnd __DEC_message_message_843319 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageSendToSysLine = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageSend to sysLine
			fujaba__Success = false;

			fujaba__IterMessageSendToSysLine = new ArrayList(
					messageSend.getCovered()).iterator();

			while (fujaba__IterMessageSendToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterMessageSendToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link covered from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link covered from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link fragment from messageReceive to parentOperand
											JavaSDM.ensure(parentOperand.equals(messageReceive
													.getEnclosingOperand()));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link covered from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link covered from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// check link lifeline from line to interaction
													JavaSDM.ensure(interaction.equals(line
															.getInteraction()));

													// check link covered from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link covered from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_728800 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_728800 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_728800 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_728800 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_728800
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_850764 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_850764 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_850764 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_850764 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_850764
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_238604 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_238604 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_238604 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_238604 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_238604
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_658685 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_658685 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_658685 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_658685 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_658685
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_240616 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_240616 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_240616 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_240616 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_240616
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_240616 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_240616
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_566166 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_566166 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_566166 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_566166 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_566166
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_566166 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_566166
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_888625 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_888625 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_888625 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_888625 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_888625
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_888625 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_888625
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_811151 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_811151 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_811151 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_811151 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_811151
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_811151 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_811151
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_839700 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_839700 is really bound
															JavaSDM.ensure(__DEC_spec_specification_839700 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_839700
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_839700 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_839700
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_637901 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_637901 is really bound
															JavaSDM.ensure(__DEC_guard_guard_637901 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_637901
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_637901 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_637901
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_637901 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_637901
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_445961 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_445961 is really bound
															JavaSDM.ensure(__DEC_operand_operand_445961 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_445961
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_445961 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_445961
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_445961 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_445961
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_925907
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_925907 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_925907
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_925907 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_925907
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_925907 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_925907 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_925907 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_925907
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_74202
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_74202 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_74202
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_74202 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_74202
																			.next();

																	// check object __DEC_messageSend_receiveEvent_74202 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_74202 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_74202 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_74202
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_374669
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374669 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374669
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_374669 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_374669
																			.next();

																	// check object __DEC_messageReceive_sendEvent_374669 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_374669 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_374669 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_374669
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_614404
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_614404 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_614404
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_614404 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_614404
																			.next();

																	// check object __DEC_messageSend_sendEvent_614404 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_614404 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_614404 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_614404
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_843319
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_843319 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_843319
																			.hasNext()) {
																try {
																	__DEC_message_message_843319 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_843319
																			.next();

																	// check object __DEC_message_message_843319 is really bound
																	JavaSDM.ensure(__DEC_message_message_843319 != null);
																	// check isomorphic binding between objects __DEC_message_message_843319 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_843319
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_843319 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_843319
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_message to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link covered from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link covered from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link covered from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, flow, step,
					alt, altFlow, useCase, actor, packageDeclaration));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");
				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase.setName("useCases");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_useCases_useCase, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__packageDeclaration_useCases_useCase.setTrg(useCase);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_useCases_useCase
						.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, flow, step, alt, altFlow,
					useCase, actor, packageDeclaration);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration) {
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("actor", actor);
		match.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NamedFlow flow,
			NormalStep step, AlternativeFlowAlternative alt,
			AlternativeFlow altFlow, UseCase useCase, Actor actor,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand, Lifeline line,
			CombinedFragment parentCombo, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine,
			EObject packageDeclaration) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __parentOperand_fragment_combo = null;
		EMoflonEdge __messageSend_enclosingOperand_parentOperand = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __combo_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __parentOperand_fragment_messageSend = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, parentOperand,
					messageSend, messageReceive, line, combo, parentCombo,
					operand, guard, spec, message, interaction));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_combo
				__parentOperand_fragment_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentOperand_fragment_messageSend
				__parentOperand_fragment_messageSend.setName("fragment");
				// assign attribute __messageSend_enclosingOperand_parentOperand
				__messageSend_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __parentOperand_fragment_combo
				__parentOperand_fragment_combo.setName("fragment");
				// assign attribute __combo_enclosingOperand_parentOperand
				__combo_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageSend,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__parentOperand_fragment_combo.setSrc(parentOperand);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_messageSend.setSrc(parentOperand);

				// create link
				__combo_enclosingOperand_parentOperand.setTrg(parentOperand);

				// create link
				__messageSend_enclosingOperand_parentOperand
						.setSrc(messageSend);

				// create link
				__parentOperand_fragment_messageSend.setTrg(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__combo_enclosingOperand_parentOperand.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__parentOperand_fragment_combo.setTrg(combo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_message_message.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, parentOperand, messageSend,
					messageReceive, line, combo, parentCombo, operand, guard,
					spec, message, interaction);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("combo", combo);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match,
			InteractionOperand parentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, Message message, Interaction interaction) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			NamedFlow flow, InteractionOperand parentOperand,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			CombinedFragment combo, CombinedFragment parentCombo,
			InteractionOperand operand, InteractionConstraint guard,
			LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Message message,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject flow,
			EObject parentOperand, EObject flowToParentOperand,
			EObject messageSend, EObject messageReceive, EObject line,
			EObject combo, EObject parentCombo, EObject step, EObject alt,
			EObject stepToCombo, EObject operand,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand, EObject useCase,
			EObject useCaseToInteraction, EObject message, EObject interaction,
			EObject stepToMessage, EObject actor, EObject actorToLine,
			EObject packageDeclaration) {
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_53(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_191541 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_994245 = null;
		Interaction __DEC_messageSend_enclosingInteraction_504797 = null;
		Interaction __DEC_operand_enclosingInteraction_621096 = null;
		InteractionOperand __DEC_combo_fragment_800489 = null;
		InteractionOperand __DEC_messageReceive_fragment_349415 = null;
		InteractionOperand __DEC_messageSend_fragment_528686 = null;
		InteractionOperand __DEC_operand_fragment_810326 = null;
		Constraint __DEC_spec_specification_53480 = null;
		InteractionOperand __DEC_guard_guard_937967 = null;
		CombinedFragment __DEC_operand_operand_228821 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513368 = null;
		Message __DEC_messageReceive_receiveEvent_513368 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_90572 = null;
		Message __DEC_messageSend_receiveEvent_90572 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_736056 = null;
		Message __DEC_messageReceive_sendEvent_736056 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_659122 = null;
		Message __DEC_messageSend_sendEvent_659122 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_680725 = null;
		MessageEnd __DEC_message_message_680725 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_191541 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_191541 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_191541 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_191541 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_191541
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_994245 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_994245 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_994245 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_994245 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_994245
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_504797 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_504797 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_504797 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_504797 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_504797
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_621096 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_621096 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_621096 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_621096 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_621096
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_800489 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_800489 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_800489 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_800489 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_800489
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_800489 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_800489
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_349415 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_349415 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_349415 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_349415 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_349415
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_349415 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_349415
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_528686 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_528686 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_528686 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_528686 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_528686
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_528686 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_528686
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_810326 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_810326 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_810326 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_810326 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_810326
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_810326 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_810326
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_53480 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_53480 is really bound
													JavaSDM.ensure(__DEC_spec_specification_53480 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_53480
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_53480 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_53480
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_937967 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_937967 is really bound
													JavaSDM.ensure(__DEC_guard_guard_937967 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_937967
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_937967 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_937967
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_937967 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_937967
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_228821 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_228821 is really bound
													JavaSDM.ensure(__DEC_operand_operand_228821 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_228821
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_228821 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_228821
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_228821 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_228821
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_513368
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513368 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513368
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_513368 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_513368
																	.next();

															// check object __DEC_messageReceive_receiveEvent_513368 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_513368 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_513368 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_513368
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_90572
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_90572 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_90572
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_90572 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_90572
																	.next();

															// check object __DEC_messageSend_receiveEvent_90572 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_90572 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_90572 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_90572
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_736056
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_736056 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_736056
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_736056 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_736056
																	.next();

															// check object __DEC_messageReceive_sendEvent_736056 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_736056 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_736056 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_736056
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_659122
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_659122 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_659122
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_659122 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_659122
																	.next();

															// check object __DEC_messageSend_sendEvent_659122 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_659122 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_659122 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_659122
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_680725
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_680725 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_680725
																	.hasNext()) {
														try {
															__DEC_message_message_680725 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_680725
																	.next();

															// check object __DEC_message_message_680725 is really bound
															JavaSDM.ensure(__DEC_message_message_680725 != null);
															// check isomorphic binding between objects __DEC_message_message_680725 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_680725
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_680725 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_680725
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_54(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_911403 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_739183 = null;
		Interaction __DEC_messageSend_enclosingInteraction_243162 = null;
		Interaction __DEC_operand_enclosingInteraction_997072 = null;
		InteractionOperand __DEC_combo_fragment_573354 = null;
		InteractionOperand __DEC_messageReceive_fragment_241708 = null;
		InteractionOperand __DEC_messageSend_fragment_436816 = null;
		InteractionOperand __DEC_operand_fragment_383440 = null;
		Constraint __DEC_spec_specification_611613 = null;
		InteractionOperand __DEC_guard_guard_592701 = null;
		CombinedFragment __DEC_operand_operand_940335 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_753416 = null;
		Message __DEC_messageReceive_receiveEvent_753416 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_22966 = null;
		Message __DEC_messageSend_receiveEvent_22966 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_549889 = null;
		Message __DEC_messageReceive_sendEvent_549889 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_446966 = null;
		Message __DEC_messageSend_sendEvent_446966 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_359947 = null;
		MessageEnd __DEC_message_message_359947 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageSend
													JavaSDM.ensure(messageSend
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_911403 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_911403 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_911403 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_911403 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_911403
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_739183 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_739183 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_739183 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_739183 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_739183
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_243162 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_243162 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_243162 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_243162 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_243162
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_997072 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_997072 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_997072 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_997072 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_997072
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_573354 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_573354 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_573354 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_573354 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_573354
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_573354 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_573354
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_241708 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_241708 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_241708 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_241708 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_241708
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_241708 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_241708
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_436816 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_436816 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_436816 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_436816 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_436816
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_436816 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_436816
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_383440 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_383440 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_383440 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_383440 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_383440
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_383440 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_383440
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_611613 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_611613 is really bound
															JavaSDM.ensure(__DEC_spec_specification_611613 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_611613
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_611613 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_611613
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_592701 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_592701 is really bound
															JavaSDM.ensure(__DEC_guard_guard_592701 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_592701
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_592701 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_592701
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_592701 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_592701
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_940335 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_940335 is really bound
															JavaSDM.ensure(__DEC_operand_operand_940335 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_940335
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_940335 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_940335
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_940335 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_940335
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_753416
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_753416 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_753416
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_753416 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_753416
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_753416 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_753416 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_753416 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_753416
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_22966
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_22966 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_22966
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_22966 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_22966
																			.next();

																	// check object __DEC_messageSend_receiveEvent_22966 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_22966 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_22966 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_22966
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_549889
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_549889 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_549889
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_549889 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_549889
																			.next();

																	// check object __DEC_messageReceive_sendEvent_549889 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_549889 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_549889 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_549889
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_446966
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_446966 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_446966
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_446966 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_446966
																			.next();

																	// check object __DEC_messageSend_sendEvent_446966 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_446966 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_446966 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_446966
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_359947
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_359947 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_359947
																			.hasNext()) {
																try {
																	__DEC_message_message_359947 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_359947
																			.next();

																	// check object __DEC_message_message_359947 is really bound
																	JavaSDM.ensure(__DEC_message_message_359947 != null);
																	// check isomorphic binding between objects __DEC_message_message_359947 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_359947
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_359947 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_359947
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageSend
														JavaSDM.ensure(messageSend
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_55(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_938789 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_784180 = null;
		Interaction __DEC_messageSend_enclosingInteraction_147339 = null;
		Interaction __DEC_operand_enclosingInteraction_582819 = null;
		InteractionOperand __DEC_combo_fragment_216918 = null;
		InteractionOperand __DEC_messageReceive_fragment_899858 = null;
		InteractionOperand __DEC_messageSend_fragment_998288 = null;
		InteractionOperand __DEC_operand_fragment_530766 = null;
		Constraint __DEC_spec_specification_846702 = null;
		InteractionOperand __DEC_guard_guard_834987 = null;
		CombinedFragment __DEC_operand_operand_881384 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_950493 = null;
		Message __DEC_messageReceive_receiveEvent_950493 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_919415 = null;
		Message __DEC_messageSend_receiveEvent_919415 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_287350 = null;
		Message __DEC_messageReceive_sendEvent_287350 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_104249 = null;
		Message __DEC_messageSend_sendEvent_104249 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_72107 = null;
		MessageEnd __DEC_message_message_72107 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_938789 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_938789 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_938789 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_938789 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_938789
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_784180 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_784180 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_784180 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_784180 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_784180
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_147339 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_147339 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_147339 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_147339 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_147339
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_582819 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_582819 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_582819 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_582819 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_582819
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_216918 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_216918 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_216918 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_216918 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_216918
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_216918 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_216918
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_899858 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_899858 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_899858 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_899858 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_899858
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_899858 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_899858
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_998288 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_998288 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_998288 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_998288 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_998288
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_998288 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_998288
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_530766 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_530766 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_530766 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_530766 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_530766
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_530766 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_530766
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_846702 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_846702 is really bound
													JavaSDM.ensure(__DEC_spec_specification_846702 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_846702
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_846702 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_846702
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_834987 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_834987 is really bound
													JavaSDM.ensure(__DEC_guard_guard_834987 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_834987
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_834987 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_834987
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_834987 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_834987
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_881384 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_881384 is really bound
													JavaSDM.ensure(__DEC_operand_operand_881384 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_881384
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_881384 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_881384
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_881384 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_881384
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_950493
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_950493 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_950493
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_950493 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_950493
																	.next();

															// check object __DEC_messageReceive_receiveEvent_950493 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_950493 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_950493 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_950493
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_919415
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_919415 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_919415
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_919415 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_919415
																	.next();

															// check object __DEC_messageSend_receiveEvent_919415 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_919415 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_919415 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_919415
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_287350
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_287350 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_287350
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_287350 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_287350
																	.next();

															// check object __DEC_messageReceive_sendEvent_287350 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_287350 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_287350 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_287350
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_104249
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_104249 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_104249
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_104249 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_104249
																	.next();

															// check object __DEC_messageSend_sendEvent_104249 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_104249 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_104249 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_104249
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_72107
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_72107 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_72107
																	.hasNext()) {
														try {
															__DEC_message_message_72107 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_72107
																	.next();

															// check object __DEC_message_message_72107 is really bound
															JavaSDM.ensure(__DEC_message_message_72107 != null);
															// check isomorphic binding between objects __DEC_message_message_72107 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_72107
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_72107 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_72107
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_56(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_600614 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_119019 = null;
		Interaction __DEC_messageSend_enclosingInteraction_751676 = null;
		Interaction __DEC_operand_enclosingInteraction_892504 = null;
		InteractionOperand __DEC_combo_fragment_304027 = null;
		InteractionOperand __DEC_messageReceive_fragment_466913 = null;
		InteractionOperand __DEC_messageSend_fragment_454699 = null;
		InteractionOperand __DEC_operand_fragment_748471 = null;
		Constraint __DEC_spec_specification_467103 = null;
		InteractionOperand __DEC_guard_guard_561 = null;
		CombinedFragment __DEC_operand_operand_36966 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_337675 = null;
		Message __DEC_messageReceive_receiveEvent_337675 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490969 = null;
		Message __DEC_messageSend_receiveEvent_490969 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_152608 = null;
		Message __DEC_messageReceive_sendEvent_152608 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_832262 = null;
		Message __DEC_messageSend_sendEvent_832262 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_937809 = null;
		MessageEnd __DEC_message_message_937809 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to messageReceive
													JavaSDM.ensure(messageReceive
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_600614 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_600614 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_600614 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_600614 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_600614
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_119019 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_119019 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_119019 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_119019 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_119019
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_751676 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_751676 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_751676 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_751676 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_751676
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_892504 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_892504 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_892504 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_892504 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_892504
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_304027 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_304027 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_304027 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_304027 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_304027
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_304027 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_304027
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_466913 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_466913 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_466913 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_466913 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_466913
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_466913 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_466913
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_454699 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_454699 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_454699 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_454699 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_454699
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_454699 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_454699
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_748471 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_748471 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_748471 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_748471 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_748471
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_748471 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_748471
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_467103 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_467103 is really bound
															JavaSDM.ensure(__DEC_spec_specification_467103 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_467103
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_467103 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_467103
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_561 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_561 is really bound
															JavaSDM.ensure(__DEC_guard_guard_561 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_561
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_561 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_561
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_561 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_561
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_36966 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_36966 is really bound
															JavaSDM.ensure(__DEC_operand_operand_36966 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_36966
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_36966 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_36966
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_36966 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_36966
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_337675
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_337675 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_337675
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_337675 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_337675
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_337675 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_337675 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_337675 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_337675
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_490969
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490969 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490969
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_490969 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_490969
																			.next();

																	// check object __DEC_messageSend_receiveEvent_490969 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_490969 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_490969 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_490969
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_152608
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_152608 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_152608
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_152608 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_152608
																			.next();

																	// check object __DEC_messageReceive_sendEvent_152608 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_152608 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_152608 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_152608
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_832262
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_832262 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_832262
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_832262 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_832262
																			.next();

																	// check object __DEC_messageSend_sendEvent_832262 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_832262 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_832262 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_832262
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_937809
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_937809 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_937809
																			.hasNext()) {
																try {
																	__DEC_message_message_937809 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_937809
																			.next();

																	// check object __DEC_message_message_937809 is really bound
																	JavaSDM.ensure(__DEC_message_message_937809 != null);
																	// check isomorphic binding between objects __DEC_message_message_937809 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_937809
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_937809 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_937809
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_57(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_376425 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_423292 = null;
		Interaction __DEC_messageSend_enclosingInteraction_70076 = null;
		Interaction __DEC_operand_enclosingInteraction_912853 = null;
		InteractionOperand __DEC_combo_fragment_964528 = null;
		InteractionOperand __DEC_messageReceive_fragment_775537 = null;
		InteractionOperand __DEC_messageSend_fragment_694106 = null;
		InteractionOperand __DEC_operand_fragment_622121 = null;
		Constraint __DEC_spec_specification_139081 = null;
		InteractionOperand __DEC_guard_guard_22128 = null;
		CombinedFragment __DEC_operand_operand_291121 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_128179 = null;
		Message __DEC_messageReceive_receiveEvent_128179 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_306238 = null;
		Message __DEC_messageSend_receiveEvent_306238 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846274 = null;
		Message __DEC_messageReceive_sendEvent_846274 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_390071 = null;
		Message __DEC_messageSend_sendEvent_390071 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_163630 = null;
		MessageEnd __DEC_message_message_163630 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// check link covered from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// bind object
											message = messageSend.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_376425 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_376425 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_376425 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_376425 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_376425
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_423292 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_423292 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_423292 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_423292 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_423292
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_70076 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_70076 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_70076 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_70076 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_70076
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_912853 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_912853 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_912853 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_912853 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_912853
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_964528 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_964528 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_964528 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_964528 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_964528
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_964528 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_964528
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_775537 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_775537 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_775537 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_775537 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_775537
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_775537 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_775537
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_694106 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_694106 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_694106 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_694106 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_694106
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_694106 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_694106
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_622121 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_622121 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_622121 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_622121 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_622121
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_622121 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_622121
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_139081 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_139081 is really bound
													JavaSDM.ensure(__DEC_spec_specification_139081 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_139081
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_139081 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_139081
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_22128 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_22128 is really bound
													JavaSDM.ensure(__DEC_guard_guard_22128 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_22128
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_22128 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_22128
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_22128 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_22128
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_291121 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_291121 is really bound
													JavaSDM.ensure(__DEC_operand_operand_291121 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_291121
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_291121 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_291121
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_291121 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_291121
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_128179
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_128179 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_128179
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_128179 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_128179
																	.next();

															// check object __DEC_messageReceive_receiveEvent_128179 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_128179 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_128179 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_128179
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_306238
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_306238 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_306238
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_306238 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_306238
																	.next();

															// check object __DEC_messageSend_receiveEvent_306238 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_306238 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_306238 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_306238
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_846274
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846274 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846274
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_846274 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846274
																	.next();

															// check object __DEC_messageReceive_sendEvent_846274 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_846274 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_846274 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_846274
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_390071
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_390071 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_390071
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_390071 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_390071
																	.next();

															// check object __DEC_messageSend_sendEvent_390071 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_390071 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_390071 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_390071
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_163630
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_163630 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_163630
																	.hasNext()) {
														try {
															__DEC_message_message_163630 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_163630
																	.next();

															// check object __DEC_message_message_163630 is really bound
															JavaSDM.ensure(__DEC_message_message_163630 != null);
															// check isomorphic binding between objects __DEC_message_message_163630 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_163630
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_163630 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_163630
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_58(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_770359 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_939848 = null;
		Interaction __DEC_messageSend_enclosingInteraction_693621 = null;
		Interaction __DEC_operand_enclosingInteraction_870968 = null;
		InteractionOperand __DEC_combo_fragment_564311 = null;
		InteractionOperand __DEC_messageReceive_fragment_223001 = null;
		InteractionOperand __DEC_messageSend_fragment_218580 = null;
		InteractionOperand __DEC_operand_fragment_450165 = null;
		Constraint __DEC_spec_specification_607024 = null;
		InteractionOperand __DEC_guard_guard_90847 = null;
		CombinedFragment __DEC_operand_operand_394622 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_955106 = null;
		Message __DEC_messageReceive_receiveEvent_955106 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_474953 = null;
		Message __DEC_messageSend_receiveEvent_474953 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_927627 = null;
		Message __DEC_messageReceive_sendEvent_927627 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_537887 = null;
		Message __DEC_messageSend_sendEvent_537887 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_690213 = null;
		MessageEnd __DEC_message_message_690213 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageSend
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageSend = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									_TmpObject = _edge_covered.getTrg();

									// ensure correct type and really bound of object line
									JavaSDM.ensure(_TmpObject instanceof Lifeline);
									line = (Lifeline) _TmpObject;

									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// check link covered from line to parentOperand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentOperand));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link trg from parentOperand to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"trg"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link src from _edge_coveredBy to line
													JavaSDM.ensure(line
															.equals(_edge_coveredBy
																	.getSrc()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_770359 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_770359 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_770359 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_770359 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_770359
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_939848 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_939848 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_939848 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_939848 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_939848
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_693621 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_693621 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_693621 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_693621 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_693621
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_870968 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_870968 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_870968 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_870968 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_870968
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_564311 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_564311 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_564311 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_564311 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_564311
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_564311 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_564311
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_223001 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_223001 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_223001 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_223001 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_223001
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_223001 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_223001
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_218580 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_218580 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_218580 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_218580 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_218580
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_218580 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_218580
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_450165 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_450165 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_450165 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_450165 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_450165
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_450165 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_450165
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_607024 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_607024 is really bound
															JavaSDM.ensure(__DEC_spec_specification_607024 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_607024
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_607024 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_607024
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_90847 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_90847 is really bound
															JavaSDM.ensure(__DEC_guard_guard_90847 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_90847
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_90847 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_90847
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_90847 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_90847
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_394622 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_394622 is really bound
															JavaSDM.ensure(__DEC_operand_operand_394622 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_394622
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_394622 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_394622
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_394622 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_394622
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_955106
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_955106 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_955106
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_955106 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_955106
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_955106 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_955106 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_955106 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_955106
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_474953
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_474953 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_474953
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_474953 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_474953
																			.next();

																	// check object __DEC_messageSend_receiveEvent_474953 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_474953 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_474953 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_474953
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_927627
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_927627 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_927627
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_927627 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_927627
																			.next();

																	// check object __DEC_messageReceive_sendEvent_927627 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_927627 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_927627 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_927627
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_537887
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_537887 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_537887
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_537887 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_537887
																			.next();

																	// check object __DEC_messageSend_sendEvent_537887 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_537887 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_537887 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_537887
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_690213
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_690213 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_690213
																			.hasNext()) {
																try {
																	__DEC_message_message_690213 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_690213
																			.next();

																	// check object __DEC_message_message_690213 is really bound
																	JavaSDM.ensure(__DEC_message_message_690213 != null);
																	// check isomorphic binding between objects __DEC_message_message_690213 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_690213
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_690213 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_690213
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_59(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_941500 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_497373 = null;
		Interaction __DEC_messageSend_enclosingInteraction_461776 = null;
		Interaction __DEC_operand_enclosingInteraction_323193 = null;
		InteractionOperand __DEC_combo_fragment_90530 = null;
		InteractionOperand __DEC_messageReceive_fragment_141440 = null;
		InteractionOperand __DEC_messageSend_fragment_826319 = null;
		InteractionOperand __DEC_operand_fragment_343479 = null;
		Constraint __DEC_spec_specification_456139 = null;
		InteractionOperand __DEC_guard_guard_616989 = null;
		CombinedFragment __DEC_operand_operand_628967 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_346878 = null;
		Message __DEC_messageReceive_receiveEvent_346878 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_524981 = null;
		Message __DEC_messageSend_receiveEvent_524981 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_629886 = null;
		Message __DEC_messageReceive_sendEvent_629886 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384621 = null;
		Message __DEC_messageSend_sendEvent_384621 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_639895 = null;
		MessageEnd __DEC_message_message_639895 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageSend
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageSend = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// bind object
							_TmpObject = _edge_fragment.getTrg();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link fragment from combo to parentOperand
							JavaSDM.ensure(parentOperand.equals(combo
									.getEnclosingOperand()));

							// iterate to-many link covered from parentOperand to line
							fujaba__Success = false;

							fujaba__IterParentOperandToLine = new ArrayList(
									parentOperand.getCovered()).iterator();

							while (fujaba__IterParentOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_941500 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_941500 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_941500 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_941500 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_941500
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_497373 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_497373 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_497373 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_497373 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_497373
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_461776 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_461776 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_461776 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_461776 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_461776
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_323193 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_323193 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_323193 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_323193 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_323193
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_90530 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_90530 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_90530 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_90530 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_90530
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_90530 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_90530
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_141440 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_141440 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_141440 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_141440 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_141440
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_141440 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_141440
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_826319 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_826319 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_826319 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_826319 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_826319
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_826319 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_826319
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_343479 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_343479 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_343479 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_343479 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_343479
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_343479 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_343479
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_456139 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_456139 is really bound
													JavaSDM.ensure(__DEC_spec_specification_456139 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_456139
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_456139 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_456139
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_616989 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_616989 is really bound
													JavaSDM.ensure(__DEC_guard_guard_616989 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_616989
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_616989 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_616989
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_616989 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_616989
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_628967 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_628967 is really bound
													JavaSDM.ensure(__DEC_operand_operand_628967 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_628967
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_628967 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_628967
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_628967 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_628967
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_346878
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_346878 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_346878
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_346878 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_346878
																	.next();

															// check object __DEC_messageReceive_receiveEvent_346878 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_346878 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_346878 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_346878
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_524981
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_524981 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_524981
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_524981 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_524981
																	.next();

															// check object __DEC_messageSend_receiveEvent_524981 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_524981 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_524981 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_524981
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_629886
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_629886 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_629886
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_629886 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_629886
																	.next();

															// check object __DEC_messageReceive_sendEvent_629886 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_629886 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_629886 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_629886
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_384621
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384621 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384621
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_384621 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_384621
																	.next();

															// check object __DEC_messageSend_sendEvent_384621 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_384621 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_384621 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_384621
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_639895
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_639895 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_639895
																	.hasNext()) {
														try {
															__DEC_message_message_639895 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_639895
																	.next();

															// check object __DEC_message_message_639895 is really bound
															JavaSDM.ensure(__DEC_message_message_639895 != null);
															// check isomorphic binding between objects __DEC_message_message_639895 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_639895
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_639895 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_639895
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_fragment is really bound
												JavaSDM.ensure(_edge_fragment != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_fragment to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(_edge_fragment
																.getSrc()));

												// check link trg from _edge_fragment to combo
												JavaSDM.ensure(combo
														.equals(_edge_fragment
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_60(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_953094 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_900955 = null;
		Interaction __DEC_messageSend_enclosingInteraction_243656 = null;
		Interaction __DEC_operand_enclosingInteraction_965880 = null;
		InteractionOperand __DEC_combo_fragment_890622 = null;
		InteractionOperand __DEC_messageReceive_fragment_83047 = null;
		InteractionOperand __DEC_messageSend_fragment_876505 = null;
		InteractionOperand __DEC_operand_fragment_395086 = null;
		Constraint __DEC_spec_specification_320251 = null;
		InteractionOperand __DEC_guard_guard_315192 = null;
		CombinedFragment __DEC_operand_operand_923172 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_997473 = null;
		Message __DEC_messageReceive_receiveEvent_997473 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_687416 = null;
		Message __DEC_messageSend_receiveEvent_687416 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_686505 = null;
		Message __DEC_messageReceive_sendEvent_686505 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_99029 = null;
		Message __DEC_messageSend_sendEvent_99029 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_51720 = null;
		MessageEnd __DEC_message_message_51720 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from combo to parentOperand
			JavaSDM.ensure(parentOperand.equals(combo.getEnclosingOperand()));

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link fragment from parentOperand to messageSend
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageSend = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// bind object
							message = messageSend.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from messageReceive to message
							JavaSDM.ensure(message.equals(messageReceive
									.getMessage()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// check link sendEvent from message to messageSend
							JavaSDM.ensure(messageSend.equals(message
									.getSendEvent()));

							// bind object
							parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
									.eContainer() : null;

							// check object parentCombo is really bound
							JavaSDM.ensure(parentCombo != null);

							// check if contained via correct reference
							JavaSDM.ensure(parentCombo.getOperand().contains(
									parentOperand));

							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link covered from parentOperand to line
							fujaba__Success = false;

							fujaba__IterParentOperandToLine = new ArrayList(
									parentOperand.getCovered()).iterator();

							while (fujaba__IterParentOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// bind object
									interaction = line.getInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link covered from parentCombo to line
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(line));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link src from parentOperand to _edge_fragment
											fujaba__Success = false;

											fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	parentOperand,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterParentOperandTo_edge_fragment
													.hasNext()) {
												try {
													_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
															.next();

													// check object _edge_fragment is really bound
													JavaSDM.ensure(_edge_fragment != null);
													// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
													JavaSDM.ensure(!_edge_fragment
															.equals(_edge_enclosingOperand));

													// check link trg from _edge_fragment to combo
													JavaSDM.ensure(combo
															.equals(_edge_fragment
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_953094 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_953094 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_953094 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_953094 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_953094
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_900955 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_900955 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_900955 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_900955 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_900955
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_243656 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_243656 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_243656 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_243656 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_243656
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_965880 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_965880 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_965880 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_965880 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_965880
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_890622 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_890622 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_890622 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_890622 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_890622
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_890622 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_890622
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_83047 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_83047 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_83047 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_83047 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_83047
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_83047 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_83047
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_876505 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_876505 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_876505 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_876505 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_876505
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_876505 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_876505
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_395086 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_395086 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_395086 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_395086 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_395086
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_395086 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_395086
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_320251 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_320251 is really bound
															JavaSDM.ensure(__DEC_spec_specification_320251 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_320251
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_320251 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_320251
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_315192 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_315192 is really bound
															JavaSDM.ensure(__DEC_guard_guard_315192 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_315192
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_315192 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_315192
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_315192 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_315192
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_923172 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_923172 is really bound
															JavaSDM.ensure(__DEC_operand_operand_923172 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_923172
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_923172 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_923172
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_923172 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_923172
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_997473
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_997473 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_997473
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_997473 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_997473
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_997473 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_997473 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_997473 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_997473
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_687416
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_687416 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_687416
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_687416 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_687416
																			.next();

																	// check object __DEC_messageSend_receiveEvent_687416 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_687416 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_687416 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_687416
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_686505
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_686505 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_686505
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_686505 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_686505
																			.next();

																	// check object __DEC_messageReceive_sendEvent_686505 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_686505 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_686505 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_686505
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_99029
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_99029 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_99029
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_99029 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_99029
																			.next();

																	// check object __DEC_messageSend_sendEvent_99029 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_99029 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_99029 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_99029
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_51720
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_51720 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_51720
																			.hasNext()) {
																try {
																	__DEC_message_message_51720 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_51720
																			.next();

																	// check object __DEC_message_message_51720 is really bound
																	JavaSDM.ensure(__DEC_message_message_51720 != null);
																	// check isomorphic binding between objects __DEC_message_message_51720 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_51720
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_51720 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_51720
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_enclosingOperand is really bound
														JavaSDM.ensure(_edge_enclosingOperand != null);
														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
														JavaSDM.ensure(!_edge_fragment
																.equals(_edge_enclosingOperand));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_enclosingOperand to combo
														JavaSDM.ensure(combo
																.equals(_edge_enclosingOperand
																		.getSrc()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_enclosingOperand to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_enclosingOperand
																		.getTrg()));

														// check link trg from _edge_fragment to combo
														JavaSDM.ensure(combo
																.equals(_edge_fragment
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_61(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_763177 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_914650 = null;
		Interaction __DEC_messageSend_enclosingInteraction_430413 = null;
		Interaction __DEC_operand_enclosingInteraction_23431 = null;
		InteractionOperand __DEC_combo_fragment_879335 = null;
		InteractionOperand __DEC_messageReceive_fragment_317970 = null;
		InteractionOperand __DEC_messageSend_fragment_217113 = null;
		InteractionOperand __DEC_operand_fragment_474633 = null;
		Constraint __DEC_spec_specification_562537 = null;
		InteractionOperand __DEC_guard_guard_847082 = null;
		CombinedFragment __DEC_operand_operand_509317 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_264102 = null;
		Message __DEC_messageReceive_receiveEvent_264102 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_907429 = null;
		Message __DEC_messageSend_receiveEvent_907429 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_593887 = null;
		Message __DEC_messageReceive_sendEvent_593887 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_103258 = null;
		Message __DEC_messageSend_sendEvent_103258 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_612402 = null;
		MessageEnd __DEC_message_message_612402 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// bind object
													message = messageSend
															.getMessage();

													// check object message is really bound
													JavaSDM.ensure(message != null);

													// check link message from message to interaction
													JavaSDM.ensure(interaction.equals(message
															.getInteraction()));

													// check link message from messageReceive to message
													JavaSDM.ensure(message
															.equals(messageReceive
																	.getMessage()));

													// check link receiveEvent from message to messageReceive
													JavaSDM.ensure(messageReceive.equals(message
															.getReceiveEvent()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_763177 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_763177 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_763177 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_763177 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_763177
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_914650 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_914650 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_914650 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_914650 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_914650
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_430413 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_430413 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_430413 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_430413 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_430413
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_23431 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_23431 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_23431 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_23431 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_23431
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_879335 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_879335 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_879335 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_879335 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_879335
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_879335 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_879335
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_317970 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_317970 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_317970 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_317970 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_317970
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_317970 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_317970
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_217113 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_217113 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_217113 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_217113 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_217113
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_217113 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_217113
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_474633 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_474633 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_474633 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_474633 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_474633
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_474633 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_474633
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_562537 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_562537 is really bound
															JavaSDM.ensure(__DEC_spec_specification_562537 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_562537
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_562537 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_562537
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_847082 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_847082 is really bound
															JavaSDM.ensure(__DEC_guard_guard_847082 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_847082
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_847082 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_847082
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_847082 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_847082
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_509317 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_509317 is really bound
															JavaSDM.ensure(__DEC_operand_operand_509317 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_509317
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_509317 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_509317
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_509317 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_509317
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_264102
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_264102 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_264102
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_264102 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_264102
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_264102 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_264102 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_264102 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_264102
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_907429
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_907429 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_907429
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_907429 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_907429
																			.next();

																	// check object __DEC_messageSend_receiveEvent_907429 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_907429 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_907429 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_907429
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_593887
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_593887 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_593887
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_593887 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_593887
																			.next();

																	// check object __DEC_messageReceive_sendEvent_593887 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_593887 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_593887 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_593887
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_103258
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_103258 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_103258
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_103258 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_103258
																			.next();

																	// check object __DEC_messageSend_sendEvent_103258 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_103258 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_103258 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_103258
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_612402
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_612402 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_612402
																			.hasNext()) {
																try {
																	__DEC_message_message_612402 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_612402
																			.next();

																	// check object __DEC_message_message_612402 is really bound
																	JavaSDM.ensure(__DEC_message_message_612402 != null);
																	// check isomorphic binding between objects __DEC_message_message_612402 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_612402
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_612402 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_612402
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_62(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_170918 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_799073 = null;
		Interaction __DEC_messageSend_enclosingInteraction_5117 = null;
		Interaction __DEC_operand_enclosingInteraction_736971 = null;
		InteractionOperand __DEC_combo_fragment_814146 = null;
		InteractionOperand __DEC_messageReceive_fragment_208258 = null;
		InteractionOperand __DEC_messageSend_fragment_287652 = null;
		InteractionOperand __DEC_operand_fragment_650498 = null;
		Constraint __DEC_spec_specification_390851 = null;
		InteractionOperand __DEC_guard_guard_192237 = null;
		CombinedFragment __DEC_operand_operand_349690 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969177 = null;
		Message __DEC_messageReceive_receiveEvent_969177 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986043 = null;
		Message __DEC_messageSend_receiveEvent_986043 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_689986 = null;
		Message __DEC_messageReceive_sendEvent_689986 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_48960 = null;
		Message __DEC_messageSend_sendEvent_48960 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_617327 = null;
		MessageEnd __DEC_message_message_617327 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from parentCombo to line
			JavaSDM.ensure(parentCombo.getCovered().contains(line));

			// iterate to-many link covered from line to operand
			fujaba__Success = false;

			fujaba__IterLineToOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link covered from line to parentOperand
					fujaba__Success = false;

					fujaba__IterLineToParentOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToParentOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToParentOperand.next();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// check link operand from parentOperand to parentCombo
							JavaSDM.ensure(parentCombo.equals(parentOperand
									.eContainer()));

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// bind object
											message = messageReceive
													.getMessage();

											// check object message is really bound
											JavaSDM.ensure(message != null);

											// check link message from message to interaction
											JavaSDM.ensure(interaction
													.equals(message
															.getInteraction()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// iterate to-many link fragment from parentOperand to messageSend
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageSend = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// check link message from messageSend to message
													JavaSDM.ensure(message.equals(messageSend
															.getMessage()));

													// check link sendEvent from message to messageSend
													JavaSDM.ensure(messageSend.equals(message
															.getSendEvent()));

													// iterate to-many link src from line to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			line,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentCombo
															JavaSDM.ensure(parentCombo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_enclosingInteraction_170918 = combo
																			.getEnclosingInteraction();

																	// check object __DEC_combo_enclosingInteraction_170918 is really bound
																	JavaSDM.ensure(__DEC_combo_enclosingInteraction_170918 != null);

																	// check isomorphic binding between objects __DEC_combo_enclosingInteraction_170918 and interaction 
																	JavaSDM.ensure(!__DEC_combo_enclosingInteraction_170918
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_799073 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_799073 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_799073 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_799073 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_799073
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_5117 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_5117 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_5117 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_5117 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_5117
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_736971 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_736971 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_736971 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_736971 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_736971
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_814146 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_814146 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_814146 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_814146 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_814146
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_814146 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_814146
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_208258 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_208258 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_208258 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_208258 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_208258
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_208258 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_208258
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_287652 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_287652 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_287652 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_287652 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_287652
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_287652 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_287652
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_650498 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_650498 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_650498 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_650498 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_650498
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_650498 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_650498
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_390851 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_390851 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_390851 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_390851
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_390851 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_390851
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_192237 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_192237 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_192237 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_192237
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_192237 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_192237
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_192237 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_192237
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_349690 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_349690 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_349690 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_349690
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_349690 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_349690
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_349690 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_349690
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_969177
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969177 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969177
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_receiveEvent_969177 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969177
																					.next();

																			// check object __DEC_messageReceive_receiveEvent_969177 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_receiveEvent_969177 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_969177 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_969177
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_986043
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986043 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"receiveEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986043
																					.hasNext()) {
																		try {
																			__DEC_messageSend_receiveEvent_986043 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_986043
																					.next();

																			// check object __DEC_messageSend_receiveEvent_986043 is really bound
																			JavaSDM.ensure(__DEC_messageSend_receiveEvent_986043 != null);
																			// check isomorphic binding between objects __DEC_messageSend_receiveEvent_986043 and message 
																			JavaSDM.ensure(!__DEC_messageSend_receiveEvent_986043
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_689986
																	fujaba__Success = false;

																	fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_689986 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageReceive,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_689986
																					.hasNext()) {
																		try {
																			__DEC_messageReceive_sendEvent_689986 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_689986
																					.next();

																			// check object __DEC_messageReceive_sendEvent_689986 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_sendEvent_689986 != null);
																			// check isomorphic binding between objects __DEC_messageReceive_sendEvent_689986 and message 
																			JavaSDM.ensure(!__DEC_messageReceive_sendEvent_689986
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_48960
																	fujaba__Success = false;

																	fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_48960 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							messageSend,
																							Message.class,
																							"sendEvent"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_48960
																					.hasNext()) {
																		try {
																			__DEC_messageSend_sendEvent_48960 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_48960
																					.next();

																			// check object __DEC_messageSend_sendEvent_48960 is really bound
																			JavaSDM.ensure(__DEC_messageSend_sendEvent_48960 != null);
																			// check isomorphic binding between objects __DEC_messageSend_sendEvent_48960 and message 
																			JavaSDM.ensure(!__DEC_messageSend_sendEvent_48960
																					.equals(message));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// iterate to-many link message from message to __DEC_message_message_617327
																	fujaba__Success = false;

																	fujaba__IterMessageTo__DEC_message_message_617327 = new ArrayList(
																			org.moflon.util.eMoflonEMFUtil
																					.getOppositeReference(
																							message,
																							MessageEnd.class,
																							"message"))
																			.iterator();

																	while (!(fujaba__Success)
																			&& fujaba__IterMessageTo__DEC_message_message_617327
																					.hasNext()) {
																		try {
																			__DEC_message_message_617327 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_617327
																					.next();

																			// check object __DEC_message_message_617327 is really bound
																			JavaSDM.ensure(__DEC_message_message_617327 != null);
																			// check isomorphic binding between objects __DEC_message_message_617327 and messageReceive 
																			JavaSDM.ensure(!__DEC_message_message_617327
																					.equals(messageReceive));

																			// check isomorphic binding between objects __DEC_message_message_617327 and messageSend 
																			JavaSDM.ensure(!__DEC_message_message_617327
																					.equals(messageSend));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}
																	}
																	JavaSDM.ensure(fujaba__Success);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object message is really bound
																JavaSDM.ensure(message != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(combo
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand()));

																// check link fragment from combo to interaction
																JavaSDM.ensure(!(interaction
																		.equals(combo
																				.getEnclosingInteraction())));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from operand to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link message from message to interaction
																JavaSDM.ensure(interaction
																		.equals(message
																				.getInteraction()));

																// check link message from messageReceive to message
																JavaSDM.ensure(message
																		.equals(messageReceive
																				.getMessage()));

																// check link message from messageSend to message
																JavaSDM.ensure(message
																		.equals(messageSend
																				.getMessage()));

																// check link receiveEvent from message to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(message
																				.getReceiveEvent()));

																// check link receiveEvent from message to messageSend
																JavaSDM.ensure(!(messageSend
																		.equals(message
																				.getReceiveEvent())));

																// check link sendEvent from message to messageSend
																JavaSDM.ensure(messageSend
																		.equals(message
																				.getSendEvent()));

																// check link sendEvent from message to messageReceive
																JavaSDM.ensure(!(messageReceive
																		.equals(message
																				.getSendEvent())));

																// check link operand from operand to combo
																JavaSDM.ensure(combo
																		.equals(operand
																				.eContainer()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link covered from operand to line
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				line));

																// check link covered from parentCombo to line
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				line));

																// check link covered from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				parentOperand,
																				messageSend,
																				messageReceive,
																				line,
																				combo,
																				parentCombo,
																				operand,
																				guard,
																				spec,
																				message,
																				interaction);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_14(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_549349 = null;
		NormalStep __DEC_alt_stepAlternative_10627 = null;
		Flow __DEC_step_steps_476701 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_881719 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_881719 = null;
		Match match = null;
		PackageDeclaration packageDeclaration = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_549349 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_549349 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_549349 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_549349.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_549349 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_549349.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_10627 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_10627 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_10627 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_10627
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_10627 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_10627
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_476701 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_476701 is really bound
					JavaSDM.ensure(__DEC_step_steps_476701 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_476701.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_476701 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_476701.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_476701 and flow 
					JavaSDM.ensure(!__DEC_step_steps_476701.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_881719
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_881719 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_881719
									.hasNext()) {
						try {
							__DEC_altFlow_ref_881719 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_881719
									.next();

							// check object __DEC_altFlow_ref_881719 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_881719 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_881719 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_881719
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_15(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_219627 = null;
		NormalStep __DEC_alt_stepAlternative_410407 = null;
		Flow __DEC_step_steps_75515 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_326537 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_326537 = null;
		Match match = null;
		PackageDeclaration packageDeclaration = null;
		AlternativeFlow altFlow = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_219627 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_219627 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_219627 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_219627.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_219627 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_219627.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_410407 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_410407 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_410407 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_410407
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_410407 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_410407
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_75515 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_75515 is really bound
					JavaSDM.ensure(__DEC_step_steps_75515 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_75515.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_75515 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_75515.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_75515 and flow 
					JavaSDM.ensure(!__DEC_step_steps_75515.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_326537
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_326537 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_326537
									.hasNext()) {
						try {
							__DEC_altFlow_ref_326537 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_326537
									.next();

							// check object __DEC_altFlow_ref_326537 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_326537 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_326537 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_326537
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, flow, step,
						alt, altFlow, useCase, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_63(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_90670 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_976419 = null;
		Interaction __DEC_messageSend_enclosingInteraction_370967 = null;
		Interaction __DEC_operand_enclosingInteraction_634230 = null;
		InteractionOperand __DEC_combo_fragment_31536 = null;
		InteractionOperand __DEC_messageReceive_fragment_112961 = null;
		InteractionOperand __DEC_messageSend_fragment_916462 = null;
		InteractionOperand __DEC_operand_fragment_165822 = null;
		Constraint __DEC_spec_specification_827954 = null;
		InteractionOperand __DEC_guard_guard_905083 = null;
		CombinedFragment __DEC_operand_operand_95859 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_62130 = null;
		Message __DEC_messageReceive_receiveEvent_62130 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_488381 = null;
		Message __DEC_messageSend_receiveEvent_488381 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_957043 = null;
		Message __DEC_messageReceive_sendEvent_957043 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_890639 = null;
		Message __DEC_messageSend_sendEvent_890639 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_101667 = null;
		MessageEnd __DEC_message_message_101667 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_90670 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_90670 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_90670 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_90670 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_90670
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_976419 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_976419 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_976419 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_976419 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_976419
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_370967 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_370967 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_370967 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_370967 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_370967
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_634230 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_634230 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_634230 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_634230 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_634230
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_31536 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_31536 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_31536 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_31536 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_31536
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_31536 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_31536
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_112961 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_112961 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_112961 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_112961 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_112961
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_112961 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_112961
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_916462 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_916462 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_916462 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_916462 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_916462
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_916462 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_916462
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_165822 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_165822 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_165822 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_165822 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_165822
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_165822 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_165822
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_827954 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_827954 is really bound
											JavaSDM.ensure(__DEC_spec_specification_827954 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_827954
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_827954 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_827954
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_905083 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_905083 is really bound
											JavaSDM.ensure(__DEC_guard_guard_905083 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_905083
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_905083 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_905083
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_905083 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_905083
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_95859 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_95859 is really bound
											JavaSDM.ensure(__DEC_operand_operand_95859 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_95859
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_95859 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_95859
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_95859 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_95859
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_62130
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_62130 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_62130
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_62130 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_62130
															.next();

													// check object __DEC_messageReceive_receiveEvent_62130 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_62130 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_62130 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_62130
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_488381
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_488381 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_488381
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_488381 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_488381
															.next();

													// check object __DEC_messageSend_receiveEvent_488381 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_488381 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_488381 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_488381
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_957043
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_957043 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_957043
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_957043 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_957043
															.next();

													// check object __DEC_messageReceive_sendEvent_957043 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_957043 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_957043 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_957043
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_890639
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_890639 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_890639
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_890639 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_890639
															.next();

													// check object __DEC_messageSend_sendEvent_890639 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_890639 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_890639 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_890639
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_101667
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_101667 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_101667
															.hasNext()) {
												try {
													__DEC_message_message_101667 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_101667
															.next();

													// check object __DEC_message_message_101667 is really bound
													JavaSDM.ensure(__DEC_message_message_101667 != null);
													// check isomorphic binding between objects __DEC_message_message_101667 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_101667
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_101667 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_101667
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_operand is really bound
										JavaSDM.ensure(_edge_operand != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_operand to combo
										JavaSDM.ensure(combo
												.equals(_edge_operand.getSrc()));

										// check link trg from _edge_operand to operand
										JavaSDM.ensure(operand
												.equals(_edge_operand.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_64(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_787580 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_837721 = null;
		Interaction __DEC_messageSend_enclosingInteraction_209556 = null;
		Interaction __DEC_operand_enclosingInteraction_482497 = null;
		InteractionOperand __DEC_combo_fragment_838266 = null;
		InteractionOperand __DEC_messageReceive_fragment_826728 = null;
		InteractionOperand __DEC_messageSend_fragment_853623 = null;
		InteractionOperand __DEC_operand_fragment_526113 = null;
		Constraint __DEC_spec_specification_455175 = null;
		InteractionOperand __DEC_guard_guard_796436 = null;
		CombinedFragment __DEC_operand_operand_894218 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_760584 = null;
		Message __DEC_messageReceive_receiveEvent_760584 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211852 = null;
		Message __DEC_messageSend_receiveEvent_211852 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_521894 = null;
		Message __DEC_messageReceive_sendEvent_521894 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_394653 = null;
		Message __DEC_messageSend_sendEvent_394653 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_28905 = null;
		MessageEnd __DEC_message_message_28905 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_787580 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_787580 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_787580 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_787580 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_787580
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_837721 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_837721 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_837721 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_837721 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_837721
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_209556 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_209556 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_209556 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_209556 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_209556
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_482497 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_482497 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_482497 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_482497 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_482497
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_838266 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_838266 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_838266 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_838266 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_838266
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_838266 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_838266
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_826728 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_826728 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_826728 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_826728 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_826728
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_826728 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_826728
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_853623 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_853623 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_853623 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_853623 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_853623
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_853623 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_853623
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_526113 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_526113 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_526113 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_526113 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_526113
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_526113 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_526113
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_455175 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_455175 is really bound
													JavaSDM.ensure(__DEC_spec_specification_455175 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_455175
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_455175 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_455175
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_796436 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_796436 is really bound
													JavaSDM.ensure(__DEC_guard_guard_796436 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_796436
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_796436 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_796436
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_796436 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_796436
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_894218 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_894218 is really bound
													JavaSDM.ensure(__DEC_operand_operand_894218 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_894218
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_894218 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_894218
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_894218 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_894218
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_760584
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_760584 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_760584
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_760584 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_760584
																	.next();

															// check object __DEC_messageReceive_receiveEvent_760584 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_760584 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_760584 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_760584
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_211852
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211852 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211852
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_211852 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211852
																	.next();

															// check object __DEC_messageSend_receiveEvent_211852 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_211852 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_211852 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_211852
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_521894
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_521894 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_521894
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_521894 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_521894
																	.next();

															// check object __DEC_messageReceive_sendEvent_521894 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_521894 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_521894 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_521894
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_394653
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_394653 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_394653
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_394653 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_394653
																	.next();

															// check object __DEC_messageSend_sendEvent_394653 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_394653 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_394653 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_394653
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_28905
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_28905 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_28905
																	.hasNext()) {
														try {
															__DEC_message_message_28905 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_28905
																	.next();

															// check object __DEC_message_message_28905 is really bound
															JavaSDM.ensure(__DEC_message_message_28905 != null);
															// check isomorphic binding between objects __DEC_message_message_28905 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_28905
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_28905 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_28905
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_coveredBy is really bound
												JavaSDM.ensure(_edge_coveredBy != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_coveredBy to line
												JavaSDM.ensure(line
														.equals(_edge_coveredBy
																.getSrc()));

												// check link trg from _edge_coveredBy to operand
												JavaSDM.ensure(operand
														.equals(_edge_coveredBy
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_65(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_497737 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_563729 = null;
		Interaction __DEC_messageSend_enclosingInteraction_728928 = null;
		Interaction __DEC_operand_enclosingInteraction_985432 = null;
		InteractionOperand __DEC_combo_fragment_448836 = null;
		InteractionOperand __DEC_messageReceive_fragment_365796 = null;
		InteractionOperand __DEC_messageSend_fragment_265343 = null;
		InteractionOperand __DEC_operand_fragment_574041 = null;
		Constraint __DEC_spec_specification_571744 = null;
		InteractionOperand __DEC_guard_guard_208026 = null;
		CombinedFragment __DEC_operand_operand_73182 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_984312 = null;
		Message __DEC_messageReceive_receiveEvent_984312 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265241 = null;
		Message __DEC_messageSend_receiveEvent_265241 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_77045 = null;
		Message __DEC_messageReceive_sendEvent_77045 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_258437 = null;
		Message __DEC_messageSend_sendEvent_258437 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_728771 = null;
		MessageEnd __DEC_message_message_728771 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to parentOperand
			fujaba__Success = false;

			fujaba__IterLineToParentOperand = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToParentOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToParentOperand.next();

					// ensure correct type and really bound of object parentOperand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					parentOperand = (InteractionOperand) _TmpObject;
					// check isomorphic binding between objects parentOperand and operand 
					JavaSDM.ensure(!parentOperand.equals(operand));

					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link fragment from parentOperand to combo
					fujaba__Success = false;

					fujaba__IterParentOperandToCombo = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToCombo
									.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// iterate to-many link fragment from parentOperand to messageReceive
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageReceive = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageReceive
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// iterate to-many link src from line to _edge_coveredBy
											fujaba__Success = false;

											fujaba__IterLineTo_edge_coveredBy = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	line,
																	EMoflonEdge.class,
																	"src"))
													.iterator();

											while (fujaba__IterLineTo_edge_coveredBy
													.hasNext()) {
												try {
													_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
															.next();

													// check object _edge_coveredBy is really bound
													JavaSDM.ensure(_edge_coveredBy != null);
													// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
													JavaSDM.ensure(!_edge_coveredBy
															.equals(_edge_covered));

													// check link trg from _edge_coveredBy to operand
													JavaSDM.ensure(operand
															.equals(_edge_coveredBy
																	.getTrg()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_497737 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_497737 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_497737 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_497737 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_497737
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_563729 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_563729 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_563729 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_563729 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_563729
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_728928 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_728928 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_728928 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_728928 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_728928
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_985432 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_985432 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_985432 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_985432 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_985432
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_448836 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_448836 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_448836 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_448836 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_448836
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_448836 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_448836
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_365796 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_365796 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_365796 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_365796 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_365796
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_365796 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_365796
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_265343 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_265343 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_265343 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_265343 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_265343
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_265343 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_265343
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_574041 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_574041 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_574041 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_574041 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_574041
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_574041 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_574041
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_571744 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_571744 is really bound
															JavaSDM.ensure(__DEC_spec_specification_571744 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_571744
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_571744 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_571744
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_208026 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_208026 is really bound
															JavaSDM.ensure(__DEC_guard_guard_208026 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_208026
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_208026 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_208026
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_208026 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_208026
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_73182 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_73182 is really bound
															JavaSDM.ensure(__DEC_operand_operand_73182 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_73182
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_73182 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_73182
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_73182 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_73182
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_984312
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_984312 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_984312
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_984312 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_984312
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_984312 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_984312 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_984312 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_984312
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_265241
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265241 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265241
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_265241 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_265241
																			.next();

																	// check object __DEC_messageSend_receiveEvent_265241 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_265241 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_265241 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_265241
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_77045
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_77045 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_77045
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_77045 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_77045
																			.next();

																	// check object __DEC_messageReceive_sendEvent_77045 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_77045 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_77045 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_77045
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_258437
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_258437 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_258437
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_258437 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_258437
																			.next();

																	// check object __DEC_messageSend_sendEvent_258437 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_258437 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_258437 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_258437
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_728771
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_728771 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_728771
																			.hasNext()) {
																try {
																	__DEC_message_message_728771 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_728771
																			.next();

																	// check object __DEC_message_message_728771 is really bound
																	JavaSDM.ensure(__DEC_message_message_728771 != null);
																	// check isomorphic binding between objects __DEC_message_message_728771 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_728771
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_728771 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_728771
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_covered is really bound
														JavaSDM.ensure(_edge_covered != null);
														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
														JavaSDM.ensure(!_edge_coveredBy
																.equals(_edge_covered));

														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(parentOperand.equals(combo
																.getEnclosingOperand()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageSend
																		.getEnclosingOperand()));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from operand to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(operand
																.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_covered to operand
														JavaSDM.ensure(operand
																.equals(_edge_covered
																		.getSrc()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_covered to line
														JavaSDM.ensure(line
																.equals(_edge_covered
																		.getTrg()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// check link covered from parentCombo to line
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(line));

														// check link covered from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		parentOperand,
																		messageSend,
																		messageReceive,
																		line,
																		combo,
																		parentCombo,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_66(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_440034 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_47394 = null;
		Interaction __DEC_messageSend_enclosingInteraction_819262 = null;
		Interaction __DEC_operand_enclosingInteraction_386951 = null;
		InteractionOperand __DEC_combo_fragment_655014 = null;
		InteractionOperand __DEC_messageReceive_fragment_318162 = null;
		InteractionOperand __DEC_messageSend_fragment_35725 = null;
		InteractionOperand __DEC_operand_fragment_850835 = null;
		Constraint __DEC_spec_specification_906675 = null;
		InteractionOperand __DEC_guard_guard_955945 = null;
		CombinedFragment __DEC_operand_operand_238472 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969430 = null;
		Message __DEC_messageReceive_receiveEvent_969430 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_916917 = null;
		Message __DEC_messageSend_receiveEvent_916917 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_125830 = null;
		Message __DEC_messageReceive_sendEvent_125830 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_287371 = null;
		Message __DEC_messageSend_sendEvent_287371 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_291699 = null;
		MessageEnd __DEC_message_message_291699 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from line to parentOperand
					JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_440034 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_440034 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_440034 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_440034 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_440034
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_47394 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_47394 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_47394 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_47394 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_47394
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_819262 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_819262 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_819262 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_819262 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_819262
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_386951 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_386951 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_386951 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_386951 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_386951
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_655014 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_655014 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_655014 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_655014 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_655014
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_655014 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_655014
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_318162 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_318162 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_318162 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_318162 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_318162
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_318162 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_318162
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_35725 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_35725 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_35725 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_35725 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_35725
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_35725 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_35725
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_850835 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_850835 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_850835 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_850835 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_850835
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_850835 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_850835
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_906675 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_906675 is really bound
											JavaSDM.ensure(__DEC_spec_specification_906675 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_906675
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_906675 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_906675
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_955945 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_955945 is really bound
											JavaSDM.ensure(__DEC_guard_guard_955945 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_955945
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_955945 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_955945
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_955945 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_955945
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_238472 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_238472 is really bound
											JavaSDM.ensure(__DEC_operand_operand_238472 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_238472
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_238472 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_238472
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_238472 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_238472
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_969430
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969430 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969430
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_969430 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_969430
															.next();

													// check object __DEC_messageReceive_receiveEvent_969430 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_969430 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_969430 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_969430
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_916917
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_916917 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_916917
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_916917 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_916917
															.next();

													// check object __DEC_messageSend_receiveEvent_916917 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_916917 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_916917 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_916917
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_125830
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_125830 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_125830
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_125830 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_125830
															.next();

													// check object __DEC_messageReceive_sendEvent_125830 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_125830 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_125830 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_125830
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_287371
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_287371 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_287371
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_287371 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_287371
															.next();

													// check object __DEC_messageSend_sendEvent_287371 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_287371 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_287371 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_287371
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_291699
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_291699 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_291699
															.hasNext()) {
												try {
													__DEC_message_message_291699 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_291699
															.next();

													// check object __DEC_message_message_291699 is really bound
													JavaSDM.ensure(__DEC_message_message_291699 != null);
													// check isomorphic binding between objects __DEC_message_message_291699 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_291699
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_291699 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_291699
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_guard is really bound
										JavaSDM.ensure(_edge_guard != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_guard to operand
										JavaSDM.ensure(operand
												.equals(_edge_guard.getSrc()));

										// check link trg from _edge_guard to guard
										JavaSDM.ensure(guard.equals(_edge_guard
												.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_67(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_809299 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_531050 = null;
		Interaction __DEC_messageSend_enclosingInteraction_348772 = null;
		Interaction __DEC_operand_enclosingInteraction_56633 = null;
		InteractionOperand __DEC_combo_fragment_801714 = null;
		InteractionOperand __DEC_messageReceive_fragment_141449 = null;
		InteractionOperand __DEC_messageSend_fragment_638367 = null;
		InteractionOperand __DEC_operand_fragment_807791 = null;
		Constraint __DEC_spec_specification_986960 = null;
		InteractionOperand __DEC_guard_guard_44335 = null;
		CombinedFragment __DEC_operand_operand_617580 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_961390 = null;
		Message __DEC_messageReceive_receiveEvent_961390 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_384967 = null;
		Message __DEC_messageSend_receiveEvent_384967 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782320 = null;
		Message __DEC_messageReceive_sendEvent_782320 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_117768 = null;
		Message __DEC_messageSend_sendEvent_117768 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_835483 = null;
		MessageEnd __DEC_message_message_835483 = null;
		Match match = null;
		Message message = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			parentOperand = combo.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// check link covered from line to parentOperand
					JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

					// iterate to-many link fragment from parentOperand to messageReceive
					fujaba__Success = false;

					fujaba__IterParentOperandToMessageReceive = new ArrayList(
							parentOperand.getFragment()).iterator();

					while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterParentOperandToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link fragment from parentOperand to messageSend
							fujaba__Success = false;

							fujaba__IterParentOperandToMessageSend = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToMessageSend
									.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// bind object
									message = messageSend.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link message from messageReceive to message
									JavaSDM.ensure(message
											.equals(messageReceive.getMessage()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// check link sendEvent from message to messageSend
									JavaSDM.ensure(messageSend.equals(message
											.getSendEvent()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_809299 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_809299 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_809299 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_809299 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_809299
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_531050 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_531050 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_531050 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_531050 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_531050
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_348772 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_348772 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_348772 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_348772 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_348772
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_56633 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_56633 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_56633 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_56633 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_56633
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_801714 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_801714 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_801714 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_801714 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_801714
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_801714 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_801714
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_141449 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_141449 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_141449 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_141449 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_141449
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_141449 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_141449
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_638367 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_638367 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_638367 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_638367 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_638367
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_638367 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_638367
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_807791 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_807791 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_807791 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_807791 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_807791
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_807791 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_807791
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_986960 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_986960 is really bound
											JavaSDM.ensure(__DEC_spec_specification_986960 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_986960
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_986960 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_986960
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_44335 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_44335 is really bound
											JavaSDM.ensure(__DEC_guard_guard_44335 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_44335
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_44335 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_44335
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_44335 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_44335
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_617580 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_617580 is really bound
											JavaSDM.ensure(__DEC_operand_operand_617580 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_617580
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_617580 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_617580
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_617580 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_617580
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_961390
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_961390 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_961390
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_961390 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_961390
															.next();

													// check object __DEC_messageReceive_receiveEvent_961390 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_961390 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_961390 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_961390
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_384967
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_384967 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_384967
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_384967 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_384967
															.next();

													// check object __DEC_messageSend_receiveEvent_384967 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_384967 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_384967 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_384967
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_782320
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782320 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782320
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_782320 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782320
															.next();

													// check object __DEC_messageReceive_sendEvent_782320 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_782320 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_782320 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_782320
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_117768
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_117768 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_117768
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_117768 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_117768
															.next();

													// check object __DEC_messageSend_sendEvent_117768 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_117768 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_117768 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_117768
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_835483
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_835483 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_835483
															.hasNext()) {
												try {
													__DEC_message_message_835483 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_835483
															.next();

													// check object __DEC_message_message_835483 is really bound
													JavaSDM.ensure(__DEC_message_message_835483 != null);
													// check isomorphic binding between objects __DEC_message_message_835483 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_835483
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_835483 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_835483
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_specification is really bound
										JavaSDM.ensure(_edge_specification != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_specification to guard
										JavaSDM.ensure(guard
												.equals(_edge_specification
														.getSrc()));

										// check link trg from _edge_specification to spec
										JavaSDM.ensure(spec
												.equals(_edge_specification
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_16(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_751956 = null;
		NormalStep __DEC_alt_stepAlternative_884273 = null;
		Flow __DEC_step_steps_732830 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_302113 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_302113 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Actor actor = null;
		NormalStep step = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_751956 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_751956 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_751956 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_751956
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_751956 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_751956
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_884273 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_884273 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_884273 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_884273
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_884273 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_884273
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_732830 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_732830 is really bound
							JavaSDM.ensure(__DEC_step_steps_732830 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_732830.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_732830 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_732830
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_732830 and flow 
							JavaSDM.ensure(!__DEC_step_steps_732830
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_302113
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_302113 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_302113
											.hasNext()) {
								try {
									__DEC_altFlow_ref_302113 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_302113
											.next();

									// check object __DEC_altFlow_ref_302113 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_302113 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_302113 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_302113
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// check link useCases from useCase to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(useCase
								.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor,
								packageDeclaration);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_17(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_130057 = null;
		NormalStep __DEC_alt_stepAlternative_319154 = null;
		Flow __DEC_step_steps_19391 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_546992 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_546992 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		NamedFlow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_130057 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_130057 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_130057 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_130057
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_130057 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_130057
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_319154 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_319154 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_319154 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_319154
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_319154 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_319154
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_19391 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_19391 is really bound
							JavaSDM.ensure(__DEC_step_steps_19391 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_19391.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_19391 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_19391
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_19391 and flow 
							JavaSDM.ensure(!__DEC_step_steps_19391.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_546992
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_546992 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_546992
											.hasNext()) {
								try {
									__DEC_altFlow_ref_546992 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_546992
											.next();

									// check object __DEC_altFlow_ref_546992 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_546992 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_546992 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_546992
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// check link useCases from useCase to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(useCase
								.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, flow,
								step, alt, altFlow, useCase, actor,
								packageDeclaration);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_68(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_767831 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_512966 = null;
		Interaction __DEC_messageSend_enclosingInteraction_727953 = null;
		Interaction __DEC_operand_enclosingInteraction_642093 = null;
		InteractionOperand __DEC_combo_fragment_225687 = null;
		InteractionOperand __DEC_messageReceive_fragment_214708 = null;
		InteractionOperand __DEC_messageSend_fragment_230009 = null;
		InteractionOperand __DEC_operand_fragment_194719 = null;
		Constraint __DEC_spec_specification_354547 = null;
		InteractionOperand __DEC_guard_guard_389511 = null;
		CombinedFragment __DEC_operand_operand_705397 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909170 = null;
		Message __DEC_messageReceive_receiveEvent_909170 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_677672 = null;
		Message __DEC_messageSend_receiveEvent_677672 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213768 = null;
		Message __DEC_messageReceive_sendEvent_213768 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_567999 = null;
		Message __DEC_messageSend_sendEvent_567999 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_57866 = null;
		MessageEnd __DEC_message_message_57866 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getTrg();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_sendEvent to message
			JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_767831 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_767831 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_767831 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_767831 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_767831
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_512966 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_512966 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_512966 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_512966 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_512966
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_727953 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_727953 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_727953 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_727953 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_727953
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_642093 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_642093 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_642093 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_642093 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_642093
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_225687 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_225687 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_225687 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_225687 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_225687
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_225687 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_225687
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_214708 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_214708 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_214708 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_214708 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_214708
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_214708 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_214708
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_230009 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_230009 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_230009 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_230009 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_230009
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_230009 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_230009
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_194719 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_194719 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_194719 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_194719 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_194719
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_194719 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_194719
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_354547 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_354547 is really bound
													JavaSDM.ensure(__DEC_spec_specification_354547 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_354547
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_354547 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_354547
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_389511 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_389511 is really bound
													JavaSDM.ensure(__DEC_guard_guard_389511 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_389511
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_389511 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_389511
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_389511 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_389511
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_705397 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_705397 is really bound
													JavaSDM.ensure(__DEC_operand_operand_705397 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_705397
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_705397 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_705397
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_705397 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_705397
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_909170
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909170 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909170
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_909170 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909170
																	.next();

															// check object __DEC_messageReceive_receiveEvent_909170 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_909170 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_909170 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_909170
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_677672
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_677672 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_677672
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_677672 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_677672
																	.next();

															// check object __DEC_messageSend_receiveEvent_677672 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_677672 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_677672 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_677672
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_213768
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213768 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213768
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_213768 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_213768
																	.next();

															// check object __DEC_messageReceive_sendEvent_213768 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_213768 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_213768 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_213768
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_567999
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_567999 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_567999
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_567999 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_567999
																	.next();

															// check object __DEC_messageSend_sendEvent_567999 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_567999 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_567999 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_567999
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_57866
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_57866 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_57866
																	.hasNext()) {
														try {
															__DEC_message_message_57866 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_57866
																	.next();

															// check object __DEC_message_message_57866 is really bound
															JavaSDM.ensure(__DEC_message_message_57866 != null);
															// check isomorphic binding between objects __DEC_message_message_57866 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_57866
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_57866 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_57866
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_sendEvent is really bound
												JavaSDM.ensure(_edge_sendEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_sendEvent to message
												JavaSDM.ensure(message
														.equals(_edge_sendEvent
																.getSrc()));

												// check link trg from _edge_sendEvent to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_sendEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_69(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_627102 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_694967 = null;
		Interaction __DEC_messageSend_enclosingInteraction_577114 = null;
		Interaction __DEC_operand_enclosingInteraction_188706 = null;
		InteractionOperand __DEC_combo_fragment_677526 = null;
		InteractionOperand __DEC_messageReceive_fragment_832580 = null;
		InteractionOperand __DEC_messageSend_fragment_549993 = null;
		InteractionOperand __DEC_operand_fragment_640495 = null;
		Constraint __DEC_spec_specification_628841 = null;
		InteractionOperand __DEC_guard_guard_159786 = null;
		CombinedFragment __DEC_operand_operand_481347 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596265 = null;
		Message __DEC_messageReceive_receiveEvent_596265 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_214038 = null;
		Message __DEC_messageSend_receiveEvent_214038 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_687568 = null;
		Message __DEC_messageReceive_sendEvent_687568 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_248612 = null;
		Message __DEC_messageSend_sendEvent_248612 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_135763 = null;
		MessageEnd __DEC_message_message_135763 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// bind object
							interaction = line.getInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_627102 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_627102 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_627102 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_627102 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_627102
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_694967 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_694967 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_694967 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_694967 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_694967
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_577114 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_577114 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_577114 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_577114 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_577114
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_188706 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_188706 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_188706 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_188706 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_188706
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_677526 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_677526 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_677526 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_677526 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_677526
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_677526 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_677526
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_832580 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_832580 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_832580 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_832580 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_832580
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_832580 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_832580
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_549993 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_549993 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_549993 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_549993 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_549993
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_549993 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_549993
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_640495 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_640495 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_640495 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_640495 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_640495
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_640495 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_640495
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_628841 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_628841 is really bound
													JavaSDM.ensure(__DEC_spec_specification_628841 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_628841
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_628841 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_628841
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_159786 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_159786 is really bound
													JavaSDM.ensure(__DEC_guard_guard_159786 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_159786
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_159786 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_159786
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_159786 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_159786
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_481347 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_481347 is really bound
													JavaSDM.ensure(__DEC_operand_operand_481347 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_481347
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_481347 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_481347
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_481347 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_481347
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_596265
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596265 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596265
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_596265 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_596265
																	.next();

															// check object __DEC_messageReceive_receiveEvent_596265 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_596265 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_596265 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_596265
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_214038
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_214038 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_214038
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_214038 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_214038
																	.next();

															// check object __DEC_messageSend_receiveEvent_214038 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_214038 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_214038 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_214038
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_687568
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_687568 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_687568
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_687568 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_687568
																	.next();

															// check object __DEC_messageReceive_sendEvent_687568 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_687568 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_687568 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_687568
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_248612
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_248612 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_248612
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_248612 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_248612
																	.next();

															// check object __DEC_messageSend_sendEvent_248612 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_248612 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_248612 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_248612
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_135763
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_135763 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_135763
																	.hasNext()) {
														try {
															__DEC_message_message_135763 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_135763
																	.next();

															// check object __DEC_message_message_135763 is really bound
															JavaSDM.ensure(__DEC_message_message_135763 != null);
															// check isomorphic binding between objects __DEC_message_message_135763 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_135763
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_135763 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_135763
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_receiveEvent is really bound
												JavaSDM.ensure(_edge_receiveEvent != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_receiveEvent to message
												JavaSDM.ensure(message
														.equals(_edge_receiveEvent
																.getSrc()));

												// check link trg from _edge_receiveEvent to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_receiveEvent
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_70(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_898161 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_959264 = null;
		Interaction __DEC_messageSend_enclosingInteraction_670519 = null;
		Interaction __DEC_operand_enclosingInteraction_110351 = null;
		InteractionOperand __DEC_combo_fragment_948811 = null;
		InteractionOperand __DEC_messageReceive_fragment_788391 = null;
		InteractionOperand __DEC_messageSend_fragment_619816 = null;
		InteractionOperand __DEC_operand_fragment_574885 = null;
		Constraint __DEC_spec_specification_787379 = null;
		InteractionOperand __DEC_guard_guard_237546 = null;
		CombinedFragment __DEC_operand_operand_278196 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_831077 = null;
		Message __DEC_messageReceive_receiveEvent_831077 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_860745 = null;
		Message __DEC_messageSend_receiveEvent_860745 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_778242 = null;
		Message __DEC_messageReceive_sendEvent_778242 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_822808 = null;
		Message __DEC_messageSend_sendEvent_822808 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_114524 = null;
		MessageEnd __DEC_message_message_114524 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link fragment from parentOperand to combo
			fujaba__Success = false;

			fujaba__IterParentOperandToCombo = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// iterate to-many link covered from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// check link covered from parentCombo to line
							JavaSDM.ensure(parentCombo.getCovered().contains(
									line));

							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_898161 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_898161 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_898161 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_898161 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_898161
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_959264 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_959264 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_959264 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_959264 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_959264
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_670519 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_670519 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_670519 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_670519 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_670519
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_110351 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_110351 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_110351 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_110351 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_110351
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_948811 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_948811 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_948811 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_948811 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_948811
													.equals(operand));

											// check isomorphic binding between objects __DEC_combo_fragment_948811 and parentOperand 
											JavaSDM.ensure(!__DEC_combo_fragment_948811
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_788391 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_788391 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_788391 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_788391 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_788391
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageReceive_fragment_788391 and parentOperand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_788391
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_619816 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_619816 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_619816 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_619816 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_619816
													.equals(operand));

											// check isomorphic binding between objects __DEC_messageSend_fragment_619816 and parentOperand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_619816
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_574885 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_574885 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_574885 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_574885 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_574885
													.equals(operand));

											// check isomorphic binding between objects __DEC_operand_fragment_574885 and parentOperand 
											JavaSDM.ensure(!__DEC_operand_fragment_574885
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_787379 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_787379 is really bound
											JavaSDM.ensure(__DEC_spec_specification_787379 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_787379
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_787379 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_787379
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_237546 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_237546 is really bound
											JavaSDM.ensure(__DEC_guard_guard_237546 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_237546
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_237546 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_237546
													.equals(operand));

											// check isomorphic binding between objects __DEC_guard_guard_237546 and parentOperand 
											JavaSDM.ensure(!__DEC_guard_guard_237546
													.equals(parentOperand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_278196 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_278196 is really bound
											JavaSDM.ensure(__DEC_operand_operand_278196 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_278196
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_278196 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_278196
													.equals(combo));

											// check isomorphic binding between objects __DEC_operand_operand_278196 and parentCombo 
											JavaSDM.ensure(!__DEC_operand_operand_278196
													.equals(parentCombo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_831077
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_831077 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_831077
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_831077 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_831077
															.next();

													// check object __DEC_messageReceive_receiveEvent_831077 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_831077 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_831077 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_831077
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_860745
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_860745 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_860745
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_860745 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_860745
															.next();

													// check object __DEC_messageSend_receiveEvent_860745 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_860745 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_860745 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_860745
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_778242
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_778242 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_778242
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_778242 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_778242
															.next();

													// check object __DEC_messageReceive_sendEvent_778242 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_778242 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_778242 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_778242
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_822808
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_822808 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_822808
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_822808 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_822808
															.next();

													// check object __DEC_messageSend_sendEvent_822808 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_822808 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_822808 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_822808
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_114524
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_114524 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_114524
															.hasNext()) {
												try {
													__DEC_message_message_114524 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_114524
															.next();

													// check object __DEC_message_message_114524 is really bound
													JavaSDM.ensure(__DEC_message_message_114524 != null);
													// check isomorphic binding between objects __DEC_message_message_114524 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_114524
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_114524 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_114524
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_interaction is really bound
										JavaSDM.ensure(_edge_interaction != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object parentCombo is really bound
										JavaSDM.ensure(parentCombo != null);
										// check object parentOperand is really bound
										JavaSDM.ensure(parentOperand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects parentCombo and combo 
										JavaSDM.ensure(!parentCombo
												.equals(combo));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check isomorphic binding between objects parentOperand and operand 
										JavaSDM.ensure(!parentOperand
												.equals(operand));

										// check link fragment from combo to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(combo
														.getEnclosingOperand()));

										// check link fragment from messageReceive to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageReceive
														.getEnclosingOperand()));

										// check link fragment from messageSend to parentOperand
										JavaSDM.ensure(parentOperand
												.equals(messageSend
														.getEnclosingOperand()));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link fragment from operand to parentOperand
										JavaSDM.ensure(!(parentOperand
												.equals(operand
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link guard from parentOperand to guard
										JavaSDM.ensure(!(guard
												.equals(parentOperand
														.getGuard())));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link operand from parentOperand to parentCombo
										JavaSDM.ensure(parentCombo
												.equals(parentOperand
														.eContainer()));

										// check link operand from operand to parentCombo
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(operand,
														CombinedFragment.class,
														"$eContainer")
												.contains(parentCombo)));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_interaction to message
										JavaSDM.ensure(message
												.equals(_edge_interaction
														.getSrc()));

										// check link trg from _edge_interaction to interaction
										JavaSDM.ensure(interaction
												.equals(_edge_interaction
														.getTrg()));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// check link covered from parentCombo to line
										JavaSDM.ensure(parentCombo.getCovered()
												.contains(line));

										// check link covered from line to parentOperand
										JavaSDM.ensure(line.getCoveredBy()
												.contains(parentOperand));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														parentOperand,
														messageSend,
														messageReceive, line,
														combo, parentCombo,
														operand, guard, spec,
														message, interaction);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_71(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_691858 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_702309 = null;
		Interaction __DEC_messageSend_enclosingInteraction_479966 = null;
		Interaction __DEC_operand_enclosingInteraction_976334 = null;
		InteractionOperand __DEC_combo_fragment_40451 = null;
		InteractionOperand __DEC_messageReceive_fragment_954418 = null;
		InteractionOperand __DEC_messageSend_fragment_768330 = null;
		InteractionOperand __DEC_operand_fragment_181949 = null;
		Constraint __DEC_spec_specification_994895 = null;
		InteractionOperand __DEC_guard_guard_616296 = null;
		CombinedFragment __DEC_operand_operand_529780 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316543 = null;
		Message __DEC_messageReceive_receiveEvent_316543 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_408581 = null;
		Message __DEC_messageSend_receiveEvent_408581 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_294682 = null;
		Message __DEC_messageReceive_sendEvent_294682 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219342 = null;
		Message __DEC_messageSend_sendEvent_219342 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_584497 = null;
		MessageEnd __DEC_message_message_584497 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link fragment from messageSend to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageSend
					.getEnclosingOperand()));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link src from message to _edge_interaction
									fujaba__Success = false;

									fujaba__IterMessageTo_edge_interaction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															EMoflonEdge.class,
															"src")).iterator();

									while (fujaba__IterMessageTo_edge_interaction
											.hasNext()) {
										try {
											_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
													.next();

											// check object _edge_interaction is really bound
											JavaSDM.ensure(_edge_interaction != null);
											// check isomorphic binding between objects _edge_message and _edge_interaction 
											JavaSDM.ensure(!_edge_message
													.equals(_edge_interaction));

											// check link trg from _edge_interaction to interaction
											JavaSDM.ensure(interaction
													.equals(_edge_interaction
															.getTrg()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_691858 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_691858 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_691858 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_691858 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_691858
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_702309 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_702309 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_702309 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_702309 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_702309
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_479966 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_479966 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_479966 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_479966 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_479966
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_976334 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_976334 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_976334 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_976334 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_976334
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_40451 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_40451 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_40451 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_40451 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_40451
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_40451 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_40451
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_954418 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_954418 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_954418 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_954418 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_954418
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_954418 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_954418
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_768330 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_768330 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_768330 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_768330 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_768330
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_768330 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_768330
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_181949 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_181949 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_181949 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_181949 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_181949
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_181949 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_181949
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_994895 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_994895 is really bound
													JavaSDM.ensure(__DEC_spec_specification_994895 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_994895
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_994895 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_994895
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_616296 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_616296 is really bound
													JavaSDM.ensure(__DEC_guard_guard_616296 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_616296
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_616296 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_616296
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_616296 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_616296
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_529780 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_529780 is really bound
													JavaSDM.ensure(__DEC_operand_operand_529780 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_529780
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_529780 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_529780
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_529780 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_529780
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_316543
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316543 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316543
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_316543 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_316543
																	.next();

															// check object __DEC_messageReceive_receiveEvent_316543 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_316543 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_316543 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_316543
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_408581
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_408581 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_408581
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_408581 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_408581
																	.next();

															// check object __DEC_messageSend_receiveEvent_408581 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_408581 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_408581 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_408581
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_294682
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_294682 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_294682
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_294682 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_294682
																	.next();

															// check object __DEC_messageReceive_sendEvent_294682 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_294682 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_294682 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_294682
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_219342
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219342 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219342
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_219342 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_219342
																	.next();

															// check object __DEC_messageSend_sendEvent_219342 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_219342 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_219342 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_219342
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_584497
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_584497 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_584497
																	.hasNext()) {
														try {
															__DEC_message_message_584497 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_584497
																	.next();

															// check object __DEC_message_message_584497 is really bound
															JavaSDM.ensure(__DEC_message_message_584497 != null);
															// check isomorphic binding between objects __DEC_message_message_584497 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_584497
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_584497 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_584497
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects _edge_message and _edge_interaction 
												JavaSDM.ensure(!_edge_message
														.equals(_edge_interaction));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link src from _edge_message to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_72(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_914835 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_861941 = null;
		Interaction __DEC_messageSend_enclosingInteraction_694109 = null;
		Interaction __DEC_operand_enclosingInteraction_441028 = null;
		InteractionOperand __DEC_combo_fragment_502671 = null;
		InteractionOperand __DEC_messageReceive_fragment_928274 = null;
		InteractionOperand __DEC_messageSend_fragment_116894 = null;
		InteractionOperand __DEC_operand_fragment_279058 = null;
		Constraint __DEC_spec_specification_374352 = null;
		InteractionOperand __DEC_guard_guard_682161 = null;
		CombinedFragment __DEC_operand_operand_774711 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_837239 = null;
		Message __DEC_messageReceive_receiveEvent_837239 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_737546 = null;
		Message __DEC_messageSend_receiveEvent_737546 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_334899 = null;
		Message __DEC_messageReceive_sendEvent_334899 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_747965 = null;
		Message __DEC_messageSend_sendEvent_747965 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_663177 = null;
		MessageEnd __DEC_message_message_663177 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Message message = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageSend.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			parentOperand = messageSend.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// check link sendEvent from message to messageSend
			JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageReceive
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageReceive = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageReceive
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageReceive
													.next();

											// ensure correct type and really bound of object messageReceive
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageReceive = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageReceive to message
											JavaSDM.ensure(message
													.equals(messageReceive
															.getMessage()));

											// check link receiveEvent from message to messageReceive
											JavaSDM.ensure(messageReceive
													.equals(message
															.getReceiveEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_914835 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_914835 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_914835 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_914835 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_914835
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_861941 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_861941 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_861941 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_861941 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_861941
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_694109 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_694109 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_694109 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_694109 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_694109
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_441028 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_441028 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_441028 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_441028 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_441028
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_502671 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_502671 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_502671 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_502671 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_502671
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_502671 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_502671
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_928274 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_928274 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_928274 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_928274 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_928274
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_928274 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_928274
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_116894 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_116894 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_116894 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_116894 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_116894
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_116894 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_116894
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_279058 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_279058 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_279058 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_279058 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_279058
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_279058 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_279058
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_374352 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_374352 is really bound
													JavaSDM.ensure(__DEC_spec_specification_374352 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_374352
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_374352 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_374352
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_682161 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_682161 is really bound
													JavaSDM.ensure(__DEC_guard_guard_682161 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_682161
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_682161 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_682161
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_682161 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_682161
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_774711 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_774711 is really bound
													JavaSDM.ensure(__DEC_operand_operand_774711 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_774711
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_774711 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_774711
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_774711 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_774711
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_837239
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_837239 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_837239
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_837239 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_837239
																	.next();

															// check object __DEC_messageReceive_receiveEvent_837239 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_837239 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_837239 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_837239
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_737546
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_737546 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_737546
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_737546 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_737546
																	.next();

															// check object __DEC_messageSend_receiveEvent_737546 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_737546 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_737546 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_737546
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_334899
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_334899 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_334899
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_334899 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_334899
																	.next();

															// check object __DEC_messageReceive_sendEvent_334899 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_334899 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_334899 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_334899
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_747965
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_747965 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_747965
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_747965 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_747965
																	.next();

															// check object __DEC_messageSend_sendEvent_747965 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_747965 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_747965 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_747965
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_663177
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_663177 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_663177
																	.hasNext()) {
														try {
															__DEC_message_message_663177 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_663177
																	.next();

															// check object __DEC_message_message_663177 is really bound
															JavaSDM.ensure(__DEC_message_message_663177 != null);
															// check isomorphic binding between objects __DEC_message_message_663177 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_663177
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_663177 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_663177
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageSend
												JavaSDM.ensure(messageSend
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_73(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_428584 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_195801 = null;
		Interaction __DEC_messageSend_enclosingInteraction_28477 = null;
		Interaction __DEC_operand_enclosingInteraction_881216 = null;
		InteractionOperand __DEC_combo_fragment_375761 = null;
		InteractionOperand __DEC_messageReceive_fragment_852505 = null;
		InteractionOperand __DEC_messageSend_fragment_766254 = null;
		InteractionOperand __DEC_operand_fragment_212730 = null;
		Constraint __DEC_spec_specification_760855 = null;
		InteractionOperand __DEC_guard_guard_853732 = null;
		CombinedFragment __DEC_operand_operand_560793 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_96712 = null;
		Message __DEC_messageReceive_receiveEvent_96712 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211087 = null;
		Message __DEC_messageSend_receiveEvent_211087 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_607450 = null;
		Message __DEC_messageReceive_sendEvent_607450 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911874 = null;
		Message __DEC_messageSend_sendEvent_911874 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_600510 = null;
		MessageEnd __DEC_message_message_600510 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentOperandToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Message message = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			parentOperand = messageReceive.getEnclosingOperand();

			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link covered from parentCombo to line
					JavaSDM.ensure(parentCombo.getCovered().contains(line));

					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// check isomorphic binding between objects parentOperand and operand 
							JavaSDM.ensure(!parentOperand.equals(operand));

							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link fragment from parentOperand to combo
							fujaba__Success = false;

							fujaba__IterParentOperandToCombo = new ArrayList(
									parentOperand.getFragment()).iterator();

							while (fujaba__IterParentOperandToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterParentOperandToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// iterate to-many link fragment from parentOperand to messageSend
									fujaba__Success = false;

									fujaba__IterParentOperandToMessageSend = new ArrayList(
											parentOperand.getFragment())
											.iterator();

									while (fujaba__IterParentOperandToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterParentOperandToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// check link message from messageSend to message
											JavaSDM.ensure(message
													.equals(messageSend
															.getMessage()));

											// check link sendEvent from message to messageSend
											JavaSDM.ensure(messageSend
													.equals(message
															.getSendEvent()));

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_428584 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_428584 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_428584 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_428584 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_428584
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_195801 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_195801 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_195801 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_195801 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_195801
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_28477 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_28477 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_28477 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_28477 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_28477
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_881216 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_881216 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_881216 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_881216 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_881216
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_375761 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_375761 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_375761 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_375761 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_375761
															.equals(operand));

													// check isomorphic binding between objects __DEC_combo_fragment_375761 and parentOperand 
													JavaSDM.ensure(!__DEC_combo_fragment_375761
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_852505 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_852505 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_852505 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_852505 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_852505
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageReceive_fragment_852505 and parentOperand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_852505
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_766254 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_766254 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_766254 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_766254 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_766254
															.equals(operand));

													// check isomorphic binding between objects __DEC_messageSend_fragment_766254 and parentOperand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_766254
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_212730 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_212730 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_212730 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_212730 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_212730
															.equals(operand));

													// check isomorphic binding between objects __DEC_operand_fragment_212730 and parentOperand 
													JavaSDM.ensure(!__DEC_operand_fragment_212730
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_760855 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_760855 is really bound
													JavaSDM.ensure(__DEC_spec_specification_760855 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_760855
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_760855 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_760855
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_853732 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_853732 is really bound
													JavaSDM.ensure(__DEC_guard_guard_853732 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_853732
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_853732 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_853732
															.equals(operand));

													// check isomorphic binding between objects __DEC_guard_guard_853732 and parentOperand 
													JavaSDM.ensure(!__DEC_guard_guard_853732
															.equals(parentOperand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_560793 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_560793 is really bound
													JavaSDM.ensure(__DEC_operand_operand_560793 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_560793
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_560793 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_560793
															.equals(combo));

													// check isomorphic binding between objects __DEC_operand_operand_560793 and parentCombo 
													JavaSDM.ensure(!__DEC_operand_operand_560793
															.equals(parentCombo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_96712
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_96712 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_96712
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_96712 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_96712
																	.next();

															// check object __DEC_messageReceive_receiveEvent_96712 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_96712 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_96712 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_96712
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_211087
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211087 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211087
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_211087 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_211087
																	.next();

															// check object __DEC_messageSend_receiveEvent_211087 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_211087 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_211087 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_211087
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_607450
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_607450 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_607450
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_607450 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_607450
																	.next();

															// check object __DEC_messageReceive_sendEvent_607450 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_607450 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_607450 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_607450
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_911874
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911874 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911874
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_911874 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_911874
																	.next();

															// check object __DEC_messageSend_sendEvent_911874 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_911874 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_911874 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_911874
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_600510
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_600510 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_600510
																	.hasNext()) {
														try {
															__DEC_message_message_600510 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_600510
																	.next();

															// check object __DEC_message_message_600510 is really bound
															JavaSDM.ensure(__DEC_message_message_600510 != null);
															// check isomorphic binding between objects __DEC_message_message_600510 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_600510
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_600510 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_600510
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_message is really bound
												JavaSDM.ensure(_edge_message != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to parentOperand
												JavaSDM.ensure(parentOperand.equals(combo
														.getEnclosingOperand()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link fragment from messageSend to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageSend
														.getEnclosingOperand()));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link fragment from operand to parentOperand
												JavaSDM.ensure(!(parentOperand.equals(operand
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link guard from parentOperand to guard
												JavaSDM.ensure(!(guard
														.equals(parentOperand
																.getGuard())));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link operand from operand to parentCombo
												JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																operand,
																CombinedFragment.class,
																"$eContainer")
														.contains(parentCombo)));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_message to messageReceive
												JavaSDM.ensure(messageReceive
														.equals(_edge_message
																.getSrc()));

												// check link trg from _edge_message to message
												JavaSDM.ensure(message
														.equals(_edge_message
																.getTrg()));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// check link covered from parentCombo to line
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																line));

												// check link covered from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match,
																parentOperand,
																messageSend,
																messageReceive,
																line, combo,
																parentCombo,
																operand, guard,
																spec, message,
																interaction);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor,
			PackageDeclaration packageDeclaration) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, step, alt,
					altFlow, useCase, flow, actor, packageDeclaration));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");
				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");
				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase.setName("useCases");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_useCases_useCase, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__packageDeclaration_useCases_useCase.setTrg(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_useCases_useCase
						.setSrc(packageDeclaration);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, step, alt, altFlow, useCase,
					flow, actor, packageDeclaration);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor,
			PackageDeclaration packageDeclaration) {
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("actor", actor);
		match.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow,
			UseCase useCase, Flow flow, Actor actor,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			NormalStep step, AlternativeFlowAlternative alt, Lifeline line,
			AlternativeFlow altFlow, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Interaction interaction, Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("altFlow", altFlow);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine, EObject packageDeclaration) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __combo_operand_operand = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __combo_covered_line = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __line_coveredBy_combo = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, combo, line,
					operand, guard, spec, message, interaction, messageSend,
					messageReceive));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_operand_operand
				__combo_operand_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_line
				__combo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_combo
				__line_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __combo_operand_operand
				__combo_operand_operand.setName("operand");
				// assign attribute __line_coveredBy_combo
				__line_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_line
				__combo_covered_line.setName("covered");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");
				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_operand_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				__line_coveredBy_combo.setTrg(combo);

				// create link
				__combo_covered_line.setSrc(combo);

				// create link
				__combo_operand_operand.setSrc(combo);

				// create link
				__combo_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__line_coveredBy_combo.setSrc(line);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__combo_operand_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, combo, line, operand, guard,
					spec, message, interaction, messageSend, messageReceive);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		match.registerObject("combo", combo);
		match.registerObject("line", line);
		match.registerObject("operand", operand);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, CombinedFragment combo,
			Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			CombinedFragment combo, Lifeline line, InteractionOperand operand,
			InteractionConstraint guard, LiteralString spec, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction, Flow flow,
			Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Actor actor,
			ActorToLifeline actorToLine, PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		Eq eq_1 = new Eq();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eq_1);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eq_1.setRuleName("");
		eq_1.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult, EObject step,
			EObject alt, EObject combo, EObject line, EObject stepToCombo,
			EObject operand, EObject alternative1ToOperand, EObject guard,
			EObject spec, EObject altFlow, EObject altFlowToOperand,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject message, EObject interaction, EObject stepToMessage,
			EObject messageSend, EObject messageReceive, EObject actor,
			EObject actorToLine, EObject packageDeclaration) {
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_10(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_147984 = null;
		NormalStep __DEC_alt_stepAlternative_927366 = null;
		Flow __DEC_step_steps_338414 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_470922 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_470922 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		UseCase useCase = null;
		Flow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// check link useCases from useCase to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_147984 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_147984 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_147984 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_147984.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_147984 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_147984.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_927366 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_927366 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_927366 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_927366
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_927366 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_927366
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_338414 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_338414 is really bound
					JavaSDM.ensure(__DEC_step_steps_338414 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_338414.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_338414 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_338414.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_338414 and flow 
					JavaSDM.ensure(!__DEC_step_steps_338414.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_470922
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_470922 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_470922
									.hasNext()) {
						try {
							__DEC_altFlow_ref_470922 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_470922
									.next();

							// check object __DEC_altFlow_ref_470922 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_470922 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_470922 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_470922
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_stepAlternative is really bound
				JavaSDM.ensure(_edge_stepAlternative != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_stepAlternative to step
				JavaSDM.ensure(step.equals(_edge_stepAlternative.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_stepAlternative to alt
				JavaSDM.ensure(alt.equals(_edge_stepAlternative.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_11(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_285632 = null;
		NormalStep __DEC_alt_stepAlternative_618809 = null;
		Flow __DEC_step_steps_606981 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_450064 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_450064 = null;
		Match match = null;
		UseCase useCase = null;
		Flow flow = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_ref to altFlow
			JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

			// check link useCases from useCase to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_altFlow_flows_285632 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
							.eContainer() : null;

					// check object __DEC_altFlow_flows_285632 is really bound
					JavaSDM.ensure(__DEC_altFlow_flows_285632 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_altFlow_flows_285632.getFlows()
							.contains(altFlow));

					// check isomorphic binding between objects __DEC_altFlow_flows_285632 and useCase 
					JavaSDM.ensure(!__DEC_altFlow_flows_285632.equals(useCase));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_alt_stepAlternative_618809 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
							.eContainer() : null;

					// check object __DEC_alt_stepAlternative_618809 is really bound
					JavaSDM.ensure(__DEC_alt_stepAlternative_618809 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_alt_stepAlternative_618809
							.getStepAlternative().contains(alt));

					// check isomorphic binding between objects __DEC_alt_stepAlternative_618809 and step 
					JavaSDM.ensure(!__DEC_alt_stepAlternative_618809
							.equals(step));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_606981 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_606981 is really bound
					JavaSDM.ensure(__DEC_step_steps_606981 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_606981.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_606981 and altFlow 
					JavaSDM.ensure(!__DEC_step_steps_606981.equals(altFlow));

					// check isomorphic binding between objects __DEC_step_steps_606981 and flow 
					JavaSDM.ensure(!__DEC_step_steps_606981.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link ref from altFlow to __DEC_altFlow_ref_450064
					fujaba__Success = false;

					fujaba__IterAltFlowTo__DEC_altFlow_ref_450064 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(altFlow,
											AlternativeFlowAlternative.class,
											"ref")).iterator();

					while (!(fujaba__Success)
							&& fujaba__IterAltFlowTo__DEC_altFlow_ref_450064
									.hasNext()) {
						try {
							__DEC_altFlow_ref_450064 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_450064
									.next();

							// check object __DEC_altFlow_ref_450064 is really bound
							JavaSDM.ensure(__DEC_altFlow_ref_450064 != null);
							// check isomorphic binding between objects __DEC_altFlow_ref_450064 and alt 
							JavaSDM.ensure(!__DEC_altFlow_ref_450064
									.equals(alt));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_ref is really bound
				JavaSDM.ensure(_edge_ref != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link ref from alt to altFlow
				JavaSDM.ensure(altFlow.equals(alt.getRef()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link flows from altFlow to useCase
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(altFlow, UseCase.class,
								"$eContainer").contains(useCase)));

				// check link src from _edge_ref to alt
				JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

				// check link stepAlternative from alt to step
				JavaSDM.ensure(step.equals(alt.eContainer()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link steps from step to altFlow
				JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
						.getOppositeReference(step, AlternativeFlow.class,
								"$eContainer").contains(altFlow)));

				// check link trg from _edge_ref to altFlow
				JavaSDM.ensure(altFlow.equals(_edge_ref.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, step, alt,
						altFlow, useCase, flow, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_38(
			EMoflonEdge _edge_operand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_333790 = null;
		InteractionOperand __DEC_combo_fragment_407617 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_205034 = null;
		InteractionOperand __DEC_messageReceive_fragment_434932 = null;
		Interaction __DEC_messageSend_enclosingInteraction_361155 = null;
		InteractionOperand __DEC_messageSend_fragment_796894 = null;
		Interaction __DEC_operand_enclosingInteraction_167362 = null;
		InteractionOperand __DEC_operand_fragment_223236 = null;
		InteractionOperand __DEC_guard_guard_484448 = null;
		CombinedFragment __DEC_operand_operand_643929 = null;
		Constraint __DEC_spec_specification_129327 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_44951 = null;
		Message __DEC_messageReceive_receiveEvent_44951 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348978 = null;
		Message __DEC_messageSend_receiveEvent_348978 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_616574 = null;
		Message __DEC_messageReceive_sendEvent_616574 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_381792 = null;
		Message __DEC_messageSend_sendEvent_381792 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_794707 = null;
		MessageEnd __DEC_message_message_794707 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterComboToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_operand is really bound
			JavaSDM.ensure(_edge_operand != null);
			// bind object
			_TmpObject = _edge_operand.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_operand.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// check link operand from operand to combo
			JavaSDM.ensure(combo.equals(operand.eContainer()));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// iterate to-many link covered from combo to line
			fujaba__Success = false;

			fujaba__IterComboToLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterComboToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from operand to line
					JavaSDM.ensure(operand.getCovered().contains(line));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_333790 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_333790 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_333790 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_333790 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_333790
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_407617 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_407617 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_407617 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_407617 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_407617
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_205034 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_205034 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_205034 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_205034 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_205034
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_434932 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_434932 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_434932 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_434932 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_434932
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_361155 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_361155 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_361155 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_361155 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_361155
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_796894 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_796894 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_796894 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_796894 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_796894
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_167362 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_167362 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_167362 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_167362 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_167362
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_223236 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_223236 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_223236 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_223236 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_223236
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_484448 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_484448 is really bound
									JavaSDM.ensure(__DEC_guard_guard_484448 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_484448
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_484448 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_484448
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_643929 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_643929 is really bound
									JavaSDM.ensure(__DEC_operand_operand_643929 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_643929
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_643929 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_643929
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_129327 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_129327 is really bound
									JavaSDM.ensure(__DEC_spec_specification_129327 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_129327
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_129327 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_129327
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_44951
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_44951 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_44951
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_44951 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_44951
													.next();

											// check object __DEC_messageReceive_receiveEvent_44951 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_44951 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_44951 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_44951
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_348978
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348978 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348978
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_348978 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_348978
													.next();

											// check object __DEC_messageSend_receiveEvent_348978 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_348978 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_348978 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_348978
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_616574
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_616574 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_616574
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_616574 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_616574
													.next();

											// check object __DEC_messageReceive_sendEvent_616574 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_616574 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_616574 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_616574
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_381792
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_381792 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_381792
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_381792 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_381792
													.next();

											// check object __DEC_messageSend_sendEvent_381792 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_381792 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_381792 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_381792
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_794707
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_794707 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_794707
													.hasNext()) {
										try {
											__DEC_message_message_794707 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_794707
													.next();

											// check object __DEC_message_message_794707 is really bound
											JavaSDM.ensure(__DEC_message_message_794707 != null);
											// check isomorphic binding between objects __DEC_message_message_794707 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_794707
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_794707 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_794707
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_operand is really bound
								JavaSDM.ensure(_edge_operand != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_operand to combo
								JavaSDM.ensure(combo.equals(_edge_operand
										.getSrc()));

								// check link trg from _edge_operand to operand
								JavaSDM.ensure(operand.equals(_edge_operand
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_39(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_479976 = null;
		InteractionOperand __DEC_combo_fragment_929785 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_695410 = null;
		InteractionOperand __DEC_messageReceive_fragment_812100 = null;
		Interaction __DEC_messageSend_enclosingInteraction_654133 = null;
		InteractionOperand __DEC_messageSend_fragment_10470 = null;
		Interaction __DEC_operand_enclosingInteraction_477709 = null;
		InteractionOperand __DEC_operand_fragment_720547 = null;
		InteractionOperand __DEC_guard_guard_675339 = null;
		CombinedFragment __DEC_operand_operand_309835 = null;
		Constraint __DEC_spec_specification_629149 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_793977 = null;
		Message __DEC_messageReceive_receiveEvent_793977 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19244 = null;
		Message __DEC_messageSend_receiveEvent_19244 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_320017 = null;
		Message __DEC_messageReceive_sendEvent_320017 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462528 = null;
		Message __DEC_messageSend_sendEvent_462528 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_126278 = null;
		MessageEnd __DEC_message_message_126278 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link operand from combo to operand
					fujaba__Success = false;

					fujaba__IterComboToOperand = new ArrayList(
							combo.getOperand()).iterator();

					while (fujaba__IterComboToOperand.hasNext()) {
						try {
							operand = (InteractionOperand) fujaba__IterComboToOperand
									.next();

							// check object operand is really bound
							JavaSDM.ensure(operand != null);
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// check link covered from operand to line
							JavaSDM.ensure(operand.getCovered().contains(line));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_479976 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_479976 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_479976 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_479976 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_479976
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_929785 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_929785 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_929785 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_929785 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_929785
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_695410 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_695410 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_695410 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_695410 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_695410
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_812100 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_812100 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_812100 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_812100 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_812100
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_654133 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_654133 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_654133 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_654133 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_654133
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_10470 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_10470 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_10470 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_10470 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_10470
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_477709 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_477709 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_477709 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_477709 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_477709
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_720547 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_720547 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_720547 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_720547 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_720547
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_675339 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_675339 is really bound
									JavaSDM.ensure(__DEC_guard_guard_675339 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_675339
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_675339 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_675339
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_309835 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_309835 is really bound
									JavaSDM.ensure(__DEC_operand_operand_309835 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_309835
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_309835 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_309835
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_629149 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_629149 is really bound
									JavaSDM.ensure(__DEC_spec_specification_629149 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_629149
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_629149 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_629149
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_793977
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_793977 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_793977
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_793977 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_793977
													.next();

											// check object __DEC_messageReceive_receiveEvent_793977 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_793977 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_793977 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_793977
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_19244
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19244 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19244
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_19244 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_19244
													.next();

											// check object __DEC_messageSend_receiveEvent_19244 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_19244 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_19244 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_19244
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_320017
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_320017 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_320017
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_320017 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_320017
													.next();

											// check object __DEC_messageReceive_sendEvent_320017 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_320017 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_320017 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_320017
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_462528
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462528 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462528
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_462528 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_462528
													.next();

											// check object __DEC_messageSend_sendEvent_462528 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_462528 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_462528 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_462528
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_126278
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_126278 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_126278
													.hasNext()) {
										try {
											__DEC_message_message_126278 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_126278
													.next();

											// check object __DEC_message_message_126278 is really bound
											JavaSDM.ensure(__DEC_message_message_126278 != null);
											// check isomorphic binding between objects __DEC_message_message_126278 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_126278
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_126278 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_126278
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to combo
								JavaSDM.ensure(combo.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_40(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_250469 = null;
		InteractionOperand __DEC_combo_fragment_548352 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_309211 = null;
		InteractionOperand __DEC_messageReceive_fragment_186340 = null;
		Interaction __DEC_messageSend_enclosingInteraction_396470 = null;
		InteractionOperand __DEC_messageSend_fragment_344715 = null;
		Interaction __DEC_operand_enclosingInteraction_318186 = null;
		InteractionOperand __DEC_operand_fragment_372242 = null;
		InteractionOperand __DEC_guard_guard_399037 = null;
		CombinedFragment __DEC_operand_operand_898836 = null;
		Constraint __DEC_spec_specification_649057 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_734965 = null;
		Message __DEC_messageReceive_receiveEvent_734965 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229371 = null;
		Message __DEC_messageSend_receiveEvent_229371 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_55497 = null;
		Message __DEC_messageReceive_sendEvent_55497 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_738403 = null;
		Message __DEC_messageSend_sendEvent_738403 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_531223 = null;
		MessageEnd __DEC_message_message_531223 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterComboToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from combo to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterComboTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(combo,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterComboTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterComboTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// iterate to-many link operand from combo to operand
							fujaba__Success = false;

							fujaba__IterComboToOperand = new ArrayList(
									combo.getOperand()).iterator();

							while (fujaba__IterComboToOperand.hasNext()) {
								try {
									operand = (InteractionOperand) fujaba__IterComboToOperand
											.next();

									// check object operand is really bound
									JavaSDM.ensure(operand != null);
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link covered from operand to line
									JavaSDM.ensure(operand.getCovered()
											.contains(line));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_250469 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_250469 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_250469 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_250469 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_250469
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_548352 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_548352 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_548352 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_548352 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_548352
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_309211 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_309211 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_309211 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_309211 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_309211
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_186340 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_186340 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_186340 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_186340 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_186340
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_396470 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_396470 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_396470 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_396470 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_396470
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_344715 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_344715 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_344715 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_344715 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_344715
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_318186 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_318186 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_318186 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_318186 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_318186
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_372242 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_372242 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_372242 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_372242 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_372242
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_399037 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_399037 is really bound
											JavaSDM.ensure(__DEC_guard_guard_399037 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_399037
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_399037 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_399037
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_898836 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_898836 is really bound
											JavaSDM.ensure(__DEC_operand_operand_898836 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_898836
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_898836 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_898836
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_649057 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_649057 is really bound
											JavaSDM.ensure(__DEC_spec_specification_649057 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_649057
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_649057 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_649057
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_734965
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_734965 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_734965
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_734965 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_734965
															.next();

													// check object __DEC_messageReceive_receiveEvent_734965 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_734965 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_734965 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_734965
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_229371
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229371 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229371
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_229371 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_229371
															.next();

													// check object __DEC_messageSend_receiveEvent_229371 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_229371 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_229371 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_229371
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_55497
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_55497 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_55497
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_55497 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_55497
															.next();

													// check object __DEC_messageReceive_sendEvent_55497 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_55497 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_55497 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_55497
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_738403
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_738403 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_738403
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_738403 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_738403
															.next();

													// check object __DEC_messageSend_sendEvent_738403 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_738403 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_738403 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_738403
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_531223
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_531223 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_531223
															.hasNext()) {
												try {
													__DEC_message_message_531223 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_531223
															.next();

													// check object __DEC_message_message_531223 is really bound
													JavaSDM.ensure(__DEC_message_message_531223 != null);
													// check isomorphic binding between objects __DEC_message_message_531223 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_531223
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_531223 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_531223
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to combo
										JavaSDM.ensure(combo
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to combo
										JavaSDM.ensure(combo
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_41(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_615668 = null;
		InteractionOperand __DEC_combo_fragment_869545 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_579435 = null;
		InteractionOperand __DEC_messageReceive_fragment_977110 = null;
		Interaction __DEC_messageSend_enclosingInteraction_394364 = null;
		InteractionOperand __DEC_messageSend_fragment_186250 = null;
		Interaction __DEC_operand_enclosingInteraction_539308 = null;
		InteractionOperand __DEC_operand_fragment_460839 = null;
		InteractionOperand __DEC_guard_guard_781147 = null;
		CombinedFragment __DEC_operand_operand_498780 = null;
		Constraint __DEC_spec_specification_995162 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_862052 = null;
		Message __DEC_messageReceive_receiveEvent_862052 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_517097 = null;
		Message __DEC_messageSend_receiveEvent_517097 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_249005 = null;
		Message __DEC_messageReceive_sendEvent_249005 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_593691 = null;
		Message __DEC_messageSend_sendEvent_593691 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_196782 = null;
		MessageEnd __DEC_message_message_196782 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_enclosingInteraction_615668 = combo
									.getEnclosingInteraction();

							// check object __DEC_combo_enclosingInteraction_615668 is really bound
							JavaSDM.ensure(__DEC_combo_enclosingInteraction_615668 != null);

							// check isomorphic binding between objects __DEC_combo_enclosingInteraction_615668 and interaction 
							JavaSDM.ensure(!__DEC_combo_enclosingInteraction_615668
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_combo_fragment_869545 = combo
									.getEnclosingOperand();

							// check object __DEC_combo_fragment_869545 is really bound
							JavaSDM.ensure(__DEC_combo_fragment_869545 != null);

							// check isomorphic binding between objects __DEC_combo_fragment_869545 and operand 
							JavaSDM.ensure(!__DEC_combo_fragment_869545
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_579435 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_579435 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_579435 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_579435 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_579435
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_fragment_977110 = messageReceive
									.getEnclosingOperand();

							// check object __DEC_messageReceive_fragment_977110 is really bound
							JavaSDM.ensure(__DEC_messageReceive_fragment_977110 != null);

							// check isomorphic binding between objects __DEC_messageReceive_fragment_977110 and operand 
							JavaSDM.ensure(!__DEC_messageReceive_fragment_977110
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_394364 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_394364 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_394364 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_394364 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_394364
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_fragment_186250 = messageSend
									.getEnclosingOperand();

							// check object __DEC_messageSend_fragment_186250 is really bound
							JavaSDM.ensure(__DEC_messageSend_fragment_186250 != null);

							// check isomorphic binding between objects __DEC_messageSend_fragment_186250 and operand 
							JavaSDM.ensure(!__DEC_messageSend_fragment_186250
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_enclosingInteraction_539308 = operand
									.getEnclosingInteraction();

							// check object __DEC_operand_enclosingInteraction_539308 is really bound
							JavaSDM.ensure(__DEC_operand_enclosingInteraction_539308 != null);

							// check isomorphic binding between objects __DEC_operand_enclosingInteraction_539308 and interaction 
							JavaSDM.ensure(!__DEC_operand_enclosingInteraction_539308
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_fragment_460839 = operand
									.getEnclosingOperand();

							// check object __DEC_operand_fragment_460839 is really bound
							JavaSDM.ensure(__DEC_operand_fragment_460839 != null);

							// check isomorphic binding between objects __DEC_operand_fragment_460839 and operand 
							JavaSDM.ensure(!__DEC_operand_fragment_460839
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// negative check for link packagedElement from guard
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(guard,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// negative check for link packagedElement from spec
						JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(spec,
										ModalSequenceDiagram.Package.class,
										"packagedElement").size() == 0);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_guard_guard_781147 = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
									.eContainer() : null;

							// check object __DEC_guard_guard_781147 is really bound
							JavaSDM.ensure(__DEC_guard_guard_781147 != null);

							// check if contained via correct reference
							JavaSDM.ensure(guard
									.equals(__DEC_guard_guard_781147.getGuard()));

							// check isomorphic binding between objects __DEC_guard_guard_781147 and operand 
							JavaSDM.ensure(!__DEC_guard_guard_781147
									.equals(operand));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_operand_operand_498780 = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
									.eContainer() : null;

							// check object __DEC_operand_operand_498780 is really bound
							JavaSDM.ensure(__DEC_operand_operand_498780 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_operand_operand_498780
									.getOperand().contains(operand));

							// check isomorphic binding between objects __DEC_operand_operand_498780 and combo 
							JavaSDM.ensure(!__DEC_operand_operand_498780
									.equals(combo));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_spec_specification_995162 = spec.eContainer() instanceof Constraint ? (Constraint) spec
									.eContainer() : null;

							// check object __DEC_spec_specification_995162 is really bound
							JavaSDM.ensure(__DEC_spec_specification_995162 != null);

							// check if contained via correct reference
							JavaSDM.ensure(spec
									.equals(__DEC_spec_specification_995162
											.getSpecification()));

							// check isomorphic binding between objects __DEC_spec_specification_995162 and guard 
							JavaSDM.ensure(!__DEC_spec_specification_995162
									.equals(guard));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_862052
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_862052 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_862052
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_862052 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_862052
											.next();

									// check object __DEC_messageReceive_receiveEvent_862052 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_862052 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_862052 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_862052
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_517097
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_517097 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_517097
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_517097 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_517097
											.next();

									// check object __DEC_messageSend_receiveEvent_517097 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_517097 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_517097 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_517097
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_249005
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_249005 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_249005
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_249005 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_249005
											.next();

									// check object __DEC_messageReceive_sendEvent_249005 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_249005 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_249005 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_249005
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_593691
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_593691 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_593691
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_593691 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_593691
											.next();

									// check object __DEC_messageSend_sendEvent_593691 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_593691 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_593691 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_593691
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_196782
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_196782 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_196782
											.hasNext()) {
								try {
									__DEC_message_message_196782 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_196782
											.next();

									// check object __DEC_message_message_196782 is really bound
									JavaSDM.ensure(__DEC_message_message_196782 != null);
									// check isomorphic binding between objects __DEC_message_message_196782 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_196782
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_196782 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_196782
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check link fragment from operand to operand
						JavaSDM.ensure(!(operand.equals(operand
								.getEnclosingOperand())));

						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object combo is really bound
						JavaSDM.ensure(combo != null);
						// check object guard is really bound
						JavaSDM.ensure(guard != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check object operand is really bound
						JavaSDM.ensure(operand != null);
						// check object spec is really bound
						JavaSDM.ensure(spec != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from combo to interaction
						JavaSDM.ensure(!(interaction.equals(combo
								.getEnclosingInteraction())));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link fragment from operand to interaction
						JavaSDM.ensure(!(interaction.equals(operand
								.getEnclosingInteraction())));

						// check link fragment from combo to operand
						JavaSDM.ensure(!(operand.equals(combo
								.getEnclosingOperand())));

						// check link fragment from messageReceive to operand
						JavaSDM.ensure(!(operand.equals(messageReceive
								.getEnclosingOperand())));

						// check link fragment from messageSend to operand
						JavaSDM.ensure(!(operand.equals(messageSend
								.getEnclosingOperand())));

						// check link guard from operand to guard
						JavaSDM.ensure(guard.equals(operand.getGuard()));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link operand from operand to combo
						JavaSDM.ensure(combo.equals(operand.eContainer()));

						// check link specification from spec to guard
						JavaSDM.ensure(guard.equals(spec.eContainer()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_coveredBy to operand
						JavaSDM.ensure(operand.equals(_edge_coveredBy.getTrg()));

						// check link covered from line to combo
						JavaSDM.ensure(line.getCoveredBy().contains(combo));

						// check link covered from messageReceive to line
						JavaSDM.ensure(messageReceive.getCovered().contains(
								line));

						// check link covered from operand to line
						JavaSDM.ensure(operand.getCovered().contains(line));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match, combo,
								line, operand, guard, spec, message,
								interaction, messageSend, messageReceive);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_42(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_393370 = null;
		InteractionOperand __DEC_combo_fragment_245242 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_414723 = null;
		InteractionOperand __DEC_messageReceive_fragment_938678 = null;
		Interaction __DEC_messageSend_enclosingInteraction_133335 = null;
		InteractionOperand __DEC_messageSend_fragment_652784 = null;
		Interaction __DEC_operand_enclosingInteraction_443822 = null;
		InteractionOperand __DEC_operand_fragment_771682 = null;
		InteractionOperand __DEC_guard_guard_642052 = null;
		CombinedFragment __DEC_operand_operand_147525 = null;
		Constraint __DEC_spec_specification_468369 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_887902 = null;
		Message __DEC_messageReceive_receiveEvent_887902 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781132 = null;
		Message __DEC_messageSend_receiveEvent_781132 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201103 = null;
		Message __DEC_messageReceive_sendEvent_201103 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280014 = null;
		Message __DEC_messageSend_sendEvent_280014 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_698790 = null;
		MessageEnd __DEC_message_message_698790 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link covered from line to combo
			JavaSDM.ensure(line.getCoveredBy().contains(combo));

			// check link covered from operand to line
			JavaSDM.ensure(operand.getCovered().contains(line));

			// iterate to-many link covered from line to messageReceive
			fujaba__Success = false;

			fujaba__IterLineToMessageReceive = new ArrayList(
					line.getCoveredBy()).iterator();

			while (fujaba__IterLineToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToMessageReceive.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					message = messageReceive.getMessage();

					// check object message is really bound
					JavaSDM.ensure(message != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// check link receiveEvent from message to messageReceive
					JavaSDM.ensure(messageReceive.equals(message
							.getReceiveEvent()));

					// bind object
					_TmpObject = message.getSendEvent();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;

					// check isomorphic binding between objects messageSend and messageReceive 
					JavaSDM.ensure(!messageSend.equals(messageReceive));

					// check link message from messageSend to message
					JavaSDM.ensure(message.equals(messageSend.getMessage()));

					// iterate to-many link trg from operand to _edge_coveredBy
					fujaba__Success = false;

					fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(operand,
											EMoflonEdge.class, "trg"))
							.iterator();

					while (fujaba__IterOperandTo_edge_coveredBy.hasNext()) {
						try {
							_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
									.next();

							// check object _edge_coveredBy is really bound
							JavaSDM.ensure(_edge_coveredBy != null);
							// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
							JavaSDM.ensure(!_edge_coveredBy
									.equals(_edge_covered));

							// check link src from _edge_coveredBy to line
							JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_393370 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_393370 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_393370 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_393370 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_393370
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_245242 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_245242 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_245242 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_245242 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_245242
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_414723 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_414723 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_414723 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_414723 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_414723
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_938678 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_938678 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_938678 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_938678 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_938678
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_133335 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_133335 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_133335 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_133335 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_133335
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_652784 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_652784 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_652784 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_652784 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_652784
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_443822 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_443822 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_443822 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_443822 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_443822
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_771682 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_771682 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_771682 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_771682 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_771682
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_642052 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_642052 is really bound
									JavaSDM.ensure(__DEC_guard_guard_642052 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_642052
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_642052 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_642052
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_147525 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_147525 is really bound
									JavaSDM.ensure(__DEC_operand_operand_147525 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_147525
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_147525 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_147525
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_468369 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_468369 is really bound
									JavaSDM.ensure(__DEC_spec_specification_468369 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_468369
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_468369 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_468369
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_887902
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_887902 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_887902
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_887902 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_887902
													.next();

											// check object __DEC_messageReceive_receiveEvent_887902 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_887902 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_887902 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_887902
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_781132
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781132 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781132
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_781132 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_781132
													.next();

											// check object __DEC_messageSend_receiveEvent_781132 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_781132 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_781132 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_781132
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_201103
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201103 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201103
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_201103 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_201103
													.next();

											// check object __DEC_messageReceive_sendEvent_201103 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_201103 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_201103 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_201103
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_280014
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280014 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280014
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_280014 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_280014
													.next();

											// check object __DEC_messageSend_sendEvent_280014 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_280014 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_280014 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_280014
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_698790
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_698790 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_698790
													.hasNext()) {
										try {
											__DEC_message_message_698790 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_698790
													.next();

											// check object __DEC_message_message_698790 is really bound
											JavaSDM.ensure(__DEC_message_message_698790 != null);
											// check isomorphic binding between objects __DEC_message_message_698790 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_698790
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_698790 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_698790
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_covered is really bound
								JavaSDM.ensure(_edge_covered != null);
								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
								JavaSDM.ensure(!_edge_coveredBy
										.equals(_edge_covered));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_covered to operand
								JavaSDM.ensure(operand.equals(_edge_covered
										.getSrc()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_covered to line
								JavaSDM.ensure(line.equals(_edge_covered
										.getTrg()));

								// check link trg from _edge_coveredBy to operand
								JavaSDM.ensure(operand.equals(_edge_coveredBy
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_43(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_23878 = null;
		InteractionOperand __DEC_combo_fragment_682822 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_640506 = null;
		InteractionOperand __DEC_messageReceive_fragment_747001 = null;
		Interaction __DEC_messageSend_enclosingInteraction_488371 = null;
		InteractionOperand __DEC_messageSend_fragment_641243 = null;
		Interaction __DEC_operand_enclosingInteraction_770109 = null;
		InteractionOperand __DEC_operand_fragment_498821 = null;
		InteractionOperand __DEC_guard_guard_90598 = null;
		CombinedFragment __DEC_operand_operand_187009 = null;
		Constraint __DEC_spec_specification_432506 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_547064 = null;
		Message __DEC_messageReceive_receiveEvent_547064 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772177 = null;
		Message __DEC_messageSend_receiveEvent_772177 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_932554 = null;
		Message __DEC_messageReceive_sendEvent_932554 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_164090 = null;
		Message __DEC_messageSend_sendEvent_164090 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_693277 = null;
		MessageEnd __DEC_message_message_693277 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_23878 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_23878 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_23878 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_23878 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_23878
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_682822 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_682822 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_682822 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_682822 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_682822
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_640506 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_640506 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_640506 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_640506 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_640506
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_747001 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_747001 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_747001 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_747001 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_747001
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_488371 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_488371 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_488371 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_488371 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_488371
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_641243 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_641243 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_641243 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_641243 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_641243
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_770109 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_770109 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_770109 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_770109 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_770109
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_498821 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_498821 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_498821 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_498821 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_498821
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_90598 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_90598 is really bound
									JavaSDM.ensure(__DEC_guard_guard_90598 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_90598
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_90598 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_90598
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_187009 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_187009 is really bound
									JavaSDM.ensure(__DEC_operand_operand_187009 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_187009
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_187009 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_187009
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_432506 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_432506 is really bound
									JavaSDM.ensure(__DEC_spec_specification_432506 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_432506
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_432506 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_432506
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_547064
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_547064 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_547064
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_547064 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_547064
													.next();

											// check object __DEC_messageReceive_receiveEvent_547064 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_547064 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_547064 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_547064
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_772177
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772177 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772177
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_772177 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_772177
													.next();

											// check object __DEC_messageSend_receiveEvent_772177 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_772177 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_772177 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_772177
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_932554
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_932554 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_932554
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_932554 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_932554
													.next();

											// check object __DEC_messageReceive_sendEvent_932554 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_932554 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_932554 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_932554
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_164090
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_164090 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_164090
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_164090 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_164090
													.next();

											// check object __DEC_messageSend_sendEvent_164090 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_164090 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_164090 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_164090
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_693277
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_693277 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_693277
													.hasNext()) {
										try {
											__DEC_message_message_693277 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_693277
													.next();

											// check object __DEC_message_message_693277 is really bound
											JavaSDM.ensure(__DEC_message_message_693277 != null);
											// check isomorphic binding between objects __DEC_message_message_693277 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_693277
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_693277 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_693277
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_guard is really bound
								JavaSDM.ensure(_edge_guard != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_guard to operand
								JavaSDM.ensure(operand.equals(_edge_guard
										.getSrc()));

								// check link trg from _edge_guard to guard
								JavaSDM.ensure(guard.equals(_edge_guard
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_44(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_562221 = null;
		InteractionOperand __DEC_combo_fragment_433398 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_713382 = null;
		InteractionOperand __DEC_messageReceive_fragment_640741 = null;
		Interaction __DEC_messageSend_enclosingInteraction_763732 = null;
		InteractionOperand __DEC_messageSend_fragment_994216 = null;
		Interaction __DEC_operand_enclosingInteraction_401161 = null;
		InteractionOperand __DEC_operand_fragment_77919 = null;
		InteractionOperand __DEC_guard_guard_751816 = null;
		CombinedFragment __DEC_operand_operand_855051 = null;
		Constraint __DEC_spec_specification_515286 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_150898 = null;
		Message __DEC_messageReceive_receiveEvent_150898 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718282 = null;
		Message __DEC_messageSend_receiveEvent_718282 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782647 = null;
		Message __DEC_messageReceive_sendEvent_782647 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_361228 = null;
		Message __DEC_messageSend_sendEvent_361228 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_677666 = null;
		MessageEnd __DEC_message_message_677666 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		CombinedFragment combo = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			combo = operand.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
					.eContainer() : null;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);

			// check if contained via correct reference
			JavaSDM.ensure(combo.getOperand().contains(operand));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link covered from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link covered from line to combo
					JavaSDM.ensure(line.getCoveredBy().contains(combo));

					// iterate to-many link covered from line to messageReceive
					fujaba__Success = false;

					fujaba__IterLineToMessageReceive = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToMessageReceive.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToMessageReceive
									.next();

							// ensure correct type and really bound of object messageReceive
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageReceive = (MessageOccurrenceSpecification) _TmpObject;
							// bind object
							message = messageReceive.getMessage();

							// check object message is really bound
							JavaSDM.ensure(message != null);

							// check link message from message to interaction
							JavaSDM.ensure(interaction.equals(message
									.getInteraction()));

							// check link receiveEvent from message to messageReceive
							JavaSDM.ensure(messageReceive.equals(message
									.getReceiveEvent()));

							// bind object
							_TmpObject = message.getSendEvent();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;

							// check isomorphic binding between objects messageSend and messageReceive 
							JavaSDM.ensure(!messageSend.equals(messageReceive));

							// check link message from messageSend to message
							JavaSDM.ensure(message.equals(messageSend
									.getMessage()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_562221 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_562221 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_562221 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_562221 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_562221
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_433398 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_433398 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_433398 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_433398 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_433398
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_713382 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_713382 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_713382 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_713382 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_713382
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_640741 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_640741 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_640741 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_640741 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_640741
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_763732 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_763732 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_763732 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_763732 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_763732
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_994216 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_994216 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_994216 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_994216 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_994216
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_401161 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_401161 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_401161 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_401161 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_401161
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_77919 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_77919 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_77919 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_77919 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_77919
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_751816 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_751816 is really bound
									JavaSDM.ensure(__DEC_guard_guard_751816 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_751816
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_751816 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_751816
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_855051 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_855051 is really bound
									JavaSDM.ensure(__DEC_operand_operand_855051 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_855051
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_855051 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_855051
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_515286 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_515286 is really bound
									JavaSDM.ensure(__DEC_spec_specification_515286 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_515286
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_515286 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_515286
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_150898
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_150898 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_150898
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_150898 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_150898
													.next();

											// check object __DEC_messageReceive_receiveEvent_150898 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_150898 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_150898 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_150898
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_718282
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718282 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718282
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_718282 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718282
													.next();

											// check object __DEC_messageSend_receiveEvent_718282 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_718282 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_718282 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_718282
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_782647
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782647 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782647
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_782647 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_782647
													.next();

											// check object __DEC_messageReceive_sendEvent_782647 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_782647 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_782647 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_782647
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_361228
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_361228 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_361228
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_361228 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_361228
													.next();

											// check object __DEC_messageSend_sendEvent_361228 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_361228 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_361228 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_361228
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_677666
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_677666 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_677666
													.hasNext()) {
										try {
											__DEC_message_message_677666 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_677666
													.next();

											// check object __DEC_message_message_677666 is really bound
											JavaSDM.ensure(__DEC_message_message_677666 != null);
											// check isomorphic binding between objects __DEC_message_message_677666 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_677666
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_677666 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_677666
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_specification is really bound
								JavaSDM.ensure(_edge_specification != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_specification to guard
								JavaSDM.ensure(guard.equals(_edge_specification
										.getSrc()));

								// check link trg from _edge_specification to spec
								JavaSDM.ensure(spec.equals(_edge_specification
										.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_12(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_389762 = null;
		NormalStep __DEC_alt_stepAlternative_306871 = null;
		Flow __DEC_step_steps_809252 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_668786 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_668786 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		UseCase useCase = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// check link useCases from useCase to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_389762 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_389762 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_389762 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_389762
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_389762 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_389762
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_306871 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_306871 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_306871 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_306871
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_306871 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_306871
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_809252 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_809252 is really bound
							JavaSDM.ensure(__DEC_step_steps_809252 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_809252.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_809252 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_809252
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_809252 and flow 
							JavaSDM.ensure(!__DEC_step_steps_809252
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_668786
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_668786 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_668786
											.hasNext()) {
								try {
									__DEC_altFlow_ref_668786 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_668786
											.next();

									// check object __DEC_altFlow_ref_668786 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_668786 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_668786 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_668786
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_steps is really bound
						JavaSDM.ensure(_edge_steps != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_steps to flow
						JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_steps to step
						JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

						// check link useCases from useCase to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(useCase
								.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor,
								packageDeclaration);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_13(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_261316 = null;
		NormalStep __DEC_alt_stepAlternative_977155 = null;
		Flow __DEC_step_steps_523628 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_88093 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_88093 = null;
		Match match = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		UseCase useCase = null;
		Flow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// check link useCases from useCase to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

			// iterate to-many link stepAlternative from step to alt
			fujaba__Success = false;

			fujaba__IterStepToAlt = new ArrayList(step.getStepAlternative())
					.iterator();

			while (fujaba__IterStepToAlt.hasNext()) {
				try {
					_TmpObject = fujaba__IterStepToAlt.next();

					// ensure correct type and really bound of object alt
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
					alt = (AlternativeFlowAlternative) _TmpObject;
					// bind object
					_TmpObject = alt.getRef();

					// ensure correct type and really bound of object altFlow
					JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
					altFlow = (AlternativeFlow) _TmpObject;

					// check isomorphic binding between objects flow and altFlow 
					JavaSDM.ensure(!flow.equals(altFlow));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_altFlow_flows_261316 = altFlow.eContainer() instanceof UseCase ? (UseCase) altFlow
									.eContainer() : null;

							// check object __DEC_altFlow_flows_261316 is really bound
							JavaSDM.ensure(__DEC_altFlow_flows_261316 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_altFlow_flows_261316
									.getFlows().contains(altFlow));

							// check isomorphic binding between objects __DEC_altFlow_flows_261316 and useCase 
							JavaSDM.ensure(!__DEC_altFlow_flows_261316
									.equals(useCase));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_alt_stepAlternative_977155 = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
									.eContainer() : null;

							// check object __DEC_alt_stepAlternative_977155 is really bound
							JavaSDM.ensure(__DEC_alt_stepAlternative_977155 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_alt_stepAlternative_977155
									.getStepAlternative().contains(alt));

							// check isomorphic binding between objects __DEC_alt_stepAlternative_977155 and step 
							JavaSDM.ensure(!__DEC_alt_stepAlternative_977155
									.equals(step));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_step_steps_523628 = step.eContainer() instanceof Flow ? (Flow) step
									.eContainer() : null;

							// check object __DEC_step_steps_523628 is really bound
							JavaSDM.ensure(__DEC_step_steps_523628 != null);

							// check if contained via correct reference
							JavaSDM.ensure(__DEC_step_steps_523628.getSteps()
									.contains(step));

							// check isomorphic binding between objects __DEC_step_steps_523628 and altFlow 
							JavaSDM.ensure(!__DEC_step_steps_523628
									.equals(altFlow));

							// check isomorphic binding between objects __DEC_step_steps_523628 and flow 
							JavaSDM.ensure(!__DEC_step_steps_523628
									.equals(flow));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link ref from altFlow to __DEC_altFlow_ref_88093
							fujaba__Success = false;

							fujaba__IterAltFlowTo__DEC_altFlow_ref_88093 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													altFlow,
													AlternativeFlowAlternative.class,
													"ref")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterAltFlowTo__DEC_altFlow_ref_88093
											.hasNext()) {
								try {
									__DEC_altFlow_ref_88093 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_88093
											.next();

									// check object __DEC_altFlow_ref_88093 is really bound
									JavaSDM.ensure(__DEC_altFlow_ref_88093 != null);
									// check isomorphic binding between objects __DEC_altFlow_ref_88093 and alt 
									JavaSDM.ensure(!__DEC_altFlow_ref_88093
											.equals(alt));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_actor is really bound
						JavaSDM.ensure(_edge_actor != null);
						// check object actor is really bound
						JavaSDM.ensure(actor != null);
						// check object alt is really bound
						JavaSDM.ensure(alt != null);
						// check object altFlow is really bound
						JavaSDM.ensure(altFlow != null);
						// check object flow is really bound
						JavaSDM.ensure(flow != null);
						// check object packageDeclaration is really bound
						JavaSDM.ensure(packageDeclaration != null);
						// check object step is really bound
						JavaSDM.ensure(step != null);
						// check object useCase is really bound
						JavaSDM.ensure(useCase != null);
						// check isomorphic binding between objects flow and altFlow 
						JavaSDM.ensure(!flow.equals(altFlow));

						// check link actor from step to actor
						JavaSDM.ensure(actor.equals(step.getActor()));

						// check link ref from alt to altFlow
						JavaSDM.ensure(altFlow.equals(alt.getRef()));

						// check link actors from actor to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(actor
								.eContainer()));

						// check link flows from flow to useCase
						JavaSDM.ensure(useCase.equals(flow.eContainer()));

						// check link flows from altFlow to useCase
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(altFlow, UseCase.class,
										"$eContainer").contains(useCase)));

						// check link src from _edge_actor to step
						JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

						// check link stepAlternative from alt to step
						JavaSDM.ensure(step.equals(alt.eContainer()));

						// check link steps from step to flow
						JavaSDM.ensure(flow.equals(step.eContainer()));

						// check link steps from step to altFlow
						JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
								.getOppositeReference(step,
										AlternativeFlow.class, "$eContainer")
								.contains(altFlow)));

						// check link trg from _edge_actor to actor
						JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

						// check link useCases from useCase to packageDeclaration
						JavaSDM.ensure(packageDeclaration.equals(useCase
								.eContainer()));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_FWD(match, step,
								alt, altFlow, useCase, flow, actor,
								packageDeclaration);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_FWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_45(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_622672 = null;
		InteractionOperand __DEC_combo_fragment_583531 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_830845 = null;
		InteractionOperand __DEC_messageReceive_fragment_199054 = null;
		Interaction __DEC_messageSend_enclosingInteraction_175725 = null;
		InteractionOperand __DEC_messageSend_fragment_236499 = null;
		Interaction __DEC_operand_enclosingInteraction_173813 = null;
		InteractionOperand __DEC_operand_fragment_243644 = null;
		InteractionOperand __DEC_guard_guard_644038 = null;
		CombinedFragment __DEC_operand_operand_483061 = null;
		Constraint __DEC_spec_specification_270923 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_411466 = null;
		Message __DEC_messageReceive_receiveEvent_411466 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_457889 = null;
		Message __DEC_messageSend_receiveEvent_457889 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_285769 = null;
		Message __DEC_messageReceive_sendEvent_285769 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_803121 = null;
		Message __DEC_messageSend_sendEvent_803121 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_577247 = null;
		MessageEnd __DEC_message_message_577247 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_622672 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_622672 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_622672 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_622672 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_622672
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_583531 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_583531 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_583531 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_583531 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_583531
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_830845 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_830845 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_830845 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_830845 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_830845
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_199054 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_199054 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_199054 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_199054 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_199054
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_175725 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_175725 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_175725 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_175725 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_175725
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_236499 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_236499 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_236499 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_236499 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_236499
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_173813 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_173813 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_173813 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_173813 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_173813
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_243644 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_243644 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_243644 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_243644 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_243644
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_644038 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_644038 is really bound
											JavaSDM.ensure(__DEC_guard_guard_644038 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_644038
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_644038 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_644038
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_483061 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_483061 is really bound
											JavaSDM.ensure(__DEC_operand_operand_483061 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_483061
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_483061 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_483061
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_270923 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_270923 is really bound
											JavaSDM.ensure(__DEC_spec_specification_270923 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_270923
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_270923 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_270923
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_411466
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_411466 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_411466
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_411466 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_411466
															.next();

													// check object __DEC_messageReceive_receiveEvent_411466 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_411466 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_411466 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_411466
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_457889
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_457889 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_457889
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_457889 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_457889
															.next();

													// check object __DEC_messageSend_receiveEvent_457889 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_457889 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_457889 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_457889
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_285769
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_285769 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_285769
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_285769 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_285769
															.next();

													// check object __DEC_messageReceive_sendEvent_285769 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_285769 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_285769 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_285769
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_803121
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_803121 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_803121
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_803121 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_803121
															.next();

													// check object __DEC_messageSend_sendEvent_803121 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_803121 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_803121 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_803121
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_577247
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_577247 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_577247
															.hasNext()) {
												try {
													__DEC_message_message_577247 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_577247
															.next();

													// check object __DEC_message_message_577247 is really bound
													JavaSDM.ensure(__DEC_message_message_577247 != null);
													// check isomorphic binding between objects __DEC_message_message_577247 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_577247
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_577247 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_577247
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_sendEvent is really bound
										JavaSDM.ensure(_edge_sendEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_sendEvent to message
										JavaSDM.ensure(message
												.equals(_edge_sendEvent
														.getSrc()));

										// check link trg from _edge_sendEvent to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_sendEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_46(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_367842 = null;
		InteractionOperand __DEC_combo_fragment_354070 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_993557 = null;
		InteractionOperand __DEC_messageReceive_fragment_978836 = null;
		Interaction __DEC_messageSend_enclosingInteraction_368559 = null;
		InteractionOperand __DEC_messageSend_fragment_82887 = null;
		Interaction __DEC_operand_enclosingInteraction_447536 = null;
		InteractionOperand __DEC_operand_fragment_925753 = null;
		InteractionOperand __DEC_guard_guard_510551 = null;
		CombinedFragment __DEC_operand_operand_500120 = null;
		Constraint __DEC_spec_specification_917466 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_11317 = null;
		Message __DEC_messageReceive_receiveEvent_11317 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884285 = null;
		Message __DEC_messageSend_receiveEvent_884285 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_658988 = null;
		Message __DEC_messageReceive_sendEvent_658988 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_650027 = null;
		Message __DEC_messageSend_sendEvent_650027 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_91729 = null;
		MessageEnd __DEC_message_message_91729 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_receiveEvent to message
			JavaSDM.ensure(message.equals(_edge_receiveEvent.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_367842 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_367842 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_367842 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_367842 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_367842
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_354070 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_354070 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_354070 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_354070 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_354070
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_993557 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_993557 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_993557 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_993557 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_993557
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_978836 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_978836 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_978836 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_978836 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_978836
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_368559 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_368559 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_368559 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_368559 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_368559
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_82887 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_82887 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_82887 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_82887 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_82887
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_447536 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_447536 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_447536 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_447536 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_447536
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_925753 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_925753 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_925753 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_925753 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_925753
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_510551 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_510551 is really bound
											JavaSDM.ensure(__DEC_guard_guard_510551 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_510551
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_510551 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_510551
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_500120 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_500120 is really bound
											JavaSDM.ensure(__DEC_operand_operand_500120 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_500120
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_500120 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_500120
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_917466 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_917466 is really bound
											JavaSDM.ensure(__DEC_spec_specification_917466 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_917466
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_917466 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_917466
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_11317
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_11317 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_11317
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_11317 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_11317
															.next();

													// check object __DEC_messageReceive_receiveEvent_11317 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_11317 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_11317 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_11317
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_884285
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884285 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884285
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_884285 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884285
															.next();

													// check object __DEC_messageSend_receiveEvent_884285 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_884285 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_884285 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_884285
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_658988
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_658988 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_658988
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_658988 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_658988
															.next();

													// check object __DEC_messageReceive_sendEvent_658988 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_658988 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_658988 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_658988
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_650027
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_650027 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_650027
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_650027 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_650027
															.next();

													// check object __DEC_messageSend_sendEvent_650027 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_650027 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_650027 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_650027
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_91729
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_91729 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_91729
															.hasNext()) {
												try {
													__DEC_message_message_91729 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_91729
															.next();

													// check object __DEC_message_message_91729 is really bound
													JavaSDM.ensure(__DEC_message_message_91729 != null);
													// check isomorphic binding between objects __DEC_message_message_91729 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_91729
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_91729 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_91729
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_receiveEvent is really bound
										JavaSDM.ensure(_edge_receiveEvent != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_receiveEvent to message
										JavaSDM.ensure(message
												.equals(_edge_receiveEvent
														.getSrc()));

										// check link trg from _edge_receiveEvent to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_receiveEvent
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_47(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_700739 = null;
		InteractionOperand __DEC_combo_fragment_700151 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_264971 = null;
		InteractionOperand __DEC_messageReceive_fragment_213237 = null;
		Interaction __DEC_messageSend_enclosingInteraction_588648 = null;
		InteractionOperand __DEC_messageSend_fragment_910687 = null;
		Interaction __DEC_operand_enclosingInteraction_660896 = null;
		InteractionOperand __DEC_operand_fragment_520394 = null;
		InteractionOperand __DEC_guard_guard_512338 = null;
		CombinedFragment __DEC_operand_operand_847425 = null;
		Constraint __DEC_spec_specification_857111 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_188823 = null;
		Message __DEC_messageReceive_receiveEvent_188823 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312622 = null;
		Message __DEC_messageSend_receiveEvent_312622 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426394 = null;
		Message __DEC_messageReceive_sendEvent_426394 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_308503 = null;
		Message __DEC_messageSend_sendEvent_308503 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_522337 = null;
		MessageEnd __DEC_message_message_522337 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getTrg();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// bind object
									_TmpObject = message.getSendEvent();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link src from _edge_interaction to message
									JavaSDM.ensure(message
											.equals(_edge_interaction.getSrc()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// story node 'test core match and DECs'
											try {
												fujaba__Success = false;

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_enclosingInteraction_700739 = combo
															.getEnclosingInteraction();

													// check object __DEC_combo_enclosingInteraction_700739 is really bound
													JavaSDM.ensure(__DEC_combo_enclosingInteraction_700739 != null);

													// check isomorphic binding between objects __DEC_combo_enclosingInteraction_700739 and interaction 
													JavaSDM.ensure(!__DEC_combo_enclosingInteraction_700739
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_combo_fragment_700151 = combo
															.getEnclosingOperand();

													// check object __DEC_combo_fragment_700151 is really bound
													JavaSDM.ensure(__DEC_combo_fragment_700151 != null);

													// check isomorphic binding between objects __DEC_combo_fragment_700151 and operand 
													JavaSDM.ensure(!__DEC_combo_fragment_700151
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_enclosingInteraction_264971 = messageReceive
															.getEnclosingInteraction();

													// check object __DEC_messageReceive_enclosingInteraction_264971 is really bound
													JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_264971 != null);

													// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_264971 and interaction 
													JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_264971
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageReceive_fragment_213237 = messageReceive
															.getEnclosingOperand();

													// check object __DEC_messageReceive_fragment_213237 is really bound
													JavaSDM.ensure(__DEC_messageReceive_fragment_213237 != null);

													// check isomorphic binding between objects __DEC_messageReceive_fragment_213237 and operand 
													JavaSDM.ensure(!__DEC_messageReceive_fragment_213237
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_enclosingInteraction_588648 = messageSend
															.getEnclosingInteraction();

													// check object __DEC_messageSend_enclosingInteraction_588648 is really bound
													JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_588648 != null);

													// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_588648 and interaction 
													JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_588648
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_messageSend_fragment_910687 = messageSend
															.getEnclosingOperand();

													// check object __DEC_messageSend_fragment_910687 is really bound
													JavaSDM.ensure(__DEC_messageSend_fragment_910687 != null);

													// check isomorphic binding between objects __DEC_messageSend_fragment_910687 and operand 
													JavaSDM.ensure(!__DEC_messageSend_fragment_910687
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_enclosingInteraction_660896 = operand
															.getEnclosingInteraction();

													// check object __DEC_operand_enclosingInteraction_660896 is really bound
													JavaSDM.ensure(__DEC_operand_enclosingInteraction_660896 != null);

													// check isomorphic binding between objects __DEC_operand_enclosingInteraction_660896 and interaction 
													JavaSDM.ensure(!__DEC_operand_enclosingInteraction_660896
															.equals(interaction));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_fragment_520394 = operand
															.getEnclosingOperand();

													// check object __DEC_operand_fragment_520394 is really bound
													JavaSDM.ensure(__DEC_operand_fragment_520394 != null);

													// check isomorphic binding between objects __DEC_operand_fragment_520394 and operand 
													JavaSDM.ensure(!__DEC_operand_fragment_520394
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// negative check for link packagedElement from guard
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																guard,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// negative check for link packagedElement from spec
												JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
														.getOppositeReference(
																spec,
																ModalSequenceDiagram.Package.class,
																"packagedElement")
														.size() == 0);
												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_guard_guard_512338 = guard
															.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
															.eContainer()
															: null;

													// check object __DEC_guard_guard_512338 is really bound
													JavaSDM.ensure(__DEC_guard_guard_512338 != null);

													// check if contained via correct reference
													JavaSDM.ensure(guard
															.equals(__DEC_guard_guard_512338
																	.getGuard()));

													// check isomorphic binding between objects __DEC_guard_guard_512338 and operand 
													JavaSDM.ensure(!__DEC_guard_guard_512338
															.equals(operand));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_operand_operand_847425 = operand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
															.eContainer()
															: null;

													// check object __DEC_operand_operand_847425 is really bound
													JavaSDM.ensure(__DEC_operand_operand_847425 != null);

													// check if contained via correct reference
													JavaSDM.ensure(__DEC_operand_operand_847425
															.getOperand()
															.contains(operand));

													// check isomorphic binding between objects __DEC_operand_operand_847425 and combo 
													JavaSDM.ensure(!__DEC_operand_operand_847425
															.equals(combo));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// bind object
													__DEC_spec_specification_857111 = spec
															.eContainer() instanceof Constraint ? (Constraint) spec
															.eContainer()
															: null;

													// check object __DEC_spec_specification_857111 is really bound
													JavaSDM.ensure(__DEC_spec_specification_857111 != null);

													// check if contained via correct reference
													JavaSDM.ensure(spec
															.equals(__DEC_spec_specification_857111
																	.getSpecification()));

													// check isomorphic binding between objects __DEC_spec_specification_857111 and guard 
													JavaSDM.ensure(!__DEC_spec_specification_857111
															.equals(guard));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_188823
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_188823 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_188823
																	.hasNext()) {
														try {
															__DEC_messageReceive_receiveEvent_188823 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_188823
																	.next();

															// check object __DEC_messageReceive_receiveEvent_188823 is really bound
															JavaSDM.ensure(__DEC_messageReceive_receiveEvent_188823 != null);
															// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_188823 and message 
															JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_188823
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_312622
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312622 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"receiveEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312622
																	.hasNext()) {
														try {
															__DEC_messageSend_receiveEvent_312622 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_312622
																	.next();

															// check object __DEC_messageSend_receiveEvent_312622 is really bound
															JavaSDM.ensure(__DEC_messageSend_receiveEvent_312622 != null);
															// check isomorphic binding between objects __DEC_messageSend_receiveEvent_312622 and message 
															JavaSDM.ensure(!__DEC_messageSend_receiveEvent_312622
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_426394
													fujaba__Success = false;

													fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426394 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageReceive,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426394
																	.hasNext()) {
														try {
															__DEC_messageReceive_sendEvent_426394 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_426394
																	.next();

															// check object __DEC_messageReceive_sendEvent_426394 is really bound
															JavaSDM.ensure(__DEC_messageReceive_sendEvent_426394 != null);
															// check isomorphic binding between objects __DEC_messageReceive_sendEvent_426394 and message 
															JavaSDM.ensure(!__DEC_messageReceive_sendEvent_426394
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_308503
													fujaba__Success = false;

													fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_308503 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			messageSend,
																			Message.class,
																			"sendEvent"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_308503
																	.hasNext()) {
														try {
															__DEC_messageSend_sendEvent_308503 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_308503
																	.next();

															// check object __DEC_messageSend_sendEvent_308503 is really bound
															JavaSDM.ensure(__DEC_messageSend_sendEvent_308503 != null);
															// check isomorphic binding between objects __DEC_messageSend_sendEvent_308503 and message 
															JavaSDM.ensure(!__DEC_messageSend_sendEvent_308503
																	.equals(message));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check negative bindings
												try {
													fujaba__Success = false;

													// iterate to-many link message from message to __DEC_message_message_522337
													fujaba__Success = false;

													fujaba__IterMessageTo__DEC_message_message_522337 = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			message,
																			MessageEnd.class,
																			"message"))
															.iterator();

													while (!(fujaba__Success)
															&& fujaba__IterMessageTo__DEC_message_message_522337
																	.hasNext()) {
														try {
															__DEC_message_message_522337 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_522337
																	.next();

															// check object __DEC_message_message_522337 is really bound
															JavaSDM.ensure(__DEC_message_message_522337 != null);
															// check isomorphic binding between objects __DEC_message_message_522337 and messageReceive 
															JavaSDM.ensure(!__DEC_message_message_522337
																	.equals(messageReceive));

															// check isomorphic binding between objects __DEC_message_message_522337 and messageSend 
															JavaSDM.ensure(!__DEC_message_message_522337
																	.equals(messageSend));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												fujaba__Success = !(fujaba__Success);

												JavaSDM.ensure(fujaba__Success);

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check link fragment from operand to operand
												JavaSDM.ensure(!(operand.equals(operand
														.getEnclosingOperand())));

												// check object _edge_interaction is really bound
												JavaSDM.ensure(_edge_interaction != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object message is really bound
												JavaSDM.ensure(message != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check link fragment from combo to interaction
												JavaSDM.ensure(!(interaction.equals(combo
														.getEnclosingInteraction())));

												// check link fragment from messageReceive to interaction
												JavaSDM.ensure(!(interaction.equals(messageReceive
														.getEnclosingInteraction())));

												// check link fragment from messageSend to interaction
												JavaSDM.ensure(!(interaction.equals(messageSend
														.getEnclosingInteraction())));

												// check link fragment from operand to interaction
												JavaSDM.ensure(!(interaction.equals(operand
														.getEnclosingInteraction())));

												// check link fragment from combo to operand
												JavaSDM.ensure(!(operand.equals(combo
														.getEnclosingOperand())));

												// check link fragment from messageReceive to operand
												JavaSDM.ensure(!(operand.equals(messageReceive
														.getEnclosingOperand())));

												// check link fragment from messageSend to operand
												JavaSDM.ensure(!(operand.equals(messageSend
														.getEnclosingOperand())));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link message from message to interaction
												JavaSDM.ensure(interaction.equals(message
														.getInteraction()));

												// check link message from messageReceive to message
												JavaSDM.ensure(message
														.equals(messageReceive
																.getMessage()));

												// check link message from messageSend to message
												JavaSDM.ensure(message
														.equals(messageSend
																.getMessage()));

												// check link receiveEvent from message to messageReceive
												JavaSDM.ensure(messageReceive.equals(message
														.getReceiveEvent()));

												// check link receiveEvent from message to messageSend
												JavaSDM.ensure(!(messageSend.equals(message
														.getReceiveEvent())));

												// check link sendEvent from message to messageSend
												JavaSDM.ensure(messageSend.equals(message
														.getSendEvent()));

												// check link sendEvent from message to messageReceive
												JavaSDM.ensure(!(messageReceive.equals(message
														.getSendEvent())));

												// check link operand from operand to combo
												JavaSDM.ensure(combo
														.equals(operand
																.eContainer()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link src from _edge_interaction to message
												JavaSDM.ensure(message
														.equals(_edge_interaction
																.getSrc()));

												// check link trg from _edge_interaction to interaction
												JavaSDM.ensure(interaction
														.equals(_edge_interaction
																.getTrg()));

												// check link covered from line to combo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(combo));

												// check link covered from messageReceive to line
												JavaSDM.ensure(messageReceive
														.getCovered().contains(
																line));

												// check link covered from operand to line
												JavaSDM.ensure(operand
														.getCovered().contains(
																line));

												// create object match
												match = TGGRuntimeFactory.eINSTANCE
														.createMatch();

												// assign attribute match
												match.setRuleName(__eClass
														.getName());
												// statement node 'bookkeeping with generic isAppropriate method'
												fujaba__Success = this
														.isAppropriate_BWD(
																match, combo,
																line, operand,
																guard, spec,
																message,
																interaction,
																messageSend,
																messageReceive);
												if (fujaba__Success) {
													// statement node 'Ensure that the correct types of elements are matched'
													fujaba__Success = this
															.checkTypes_BWD(match);
													if (fujaba__Success) {
														// story node 'Add match to rule result'
														try {
															fujaba__Success = false;

															// check object __performOperation is really bound
															JavaSDM.ensure(__performOperation != null);
															// check object __result is really bound
															JavaSDM.ensure(__result != null);
															// check object match is really bound
															JavaSDM.ensure(match != null);

															// create link
															org.moflon.util.eMoflonEMFUtil
																	.addOppositeReference(
																			match,
																			__performOperation,
																			"isApplicableOperation");

															// create link
															__result.getContents()
																	.add(match);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

													} else {

													}

												} else {

												}
												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_48(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_817991 = null;
		InteractionOperand __DEC_combo_fragment_115221 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_382493 = null;
		InteractionOperand __DEC_messageReceive_fragment_592288 = null;
		Interaction __DEC_messageSend_enclosingInteraction_307660 = null;
		InteractionOperand __DEC_messageSend_fragment_739260 = null;
		Interaction __DEC_operand_enclosingInteraction_785979 = null;
		InteractionOperand __DEC_operand_fragment_356351 = null;
		InteractionOperand __DEC_guard_guard_529627 = null;
		CombinedFragment __DEC_operand_operand_308017 = null;
		Constraint __DEC_spec_specification_585888 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_875034 = null;
		Message __DEC_messageReceive_receiveEvent_875034 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_663595 = null;
		Message __DEC_messageSend_receiveEvent_663595 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_681014 = null;
		Message __DEC_messageReceive_sendEvent_681014 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_610425 = null;
		Message __DEC_messageSend_sendEvent_610425 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_744340 = null;
		MessageEnd __DEC_message_message_744340 = null;
		Match match = null;
		Iterator fujaba__IterInteractionTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		Iterator fujaba__IterLineToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterInteractionToLine = null;
		Lifeline line = null;
		Interaction interaction = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;

			// iterate to-many link lifeline from interaction to line
			fujaba__Success = false;

			fujaba__IterInteractionToLine = new ArrayList(
					interaction.getLifeline()).iterator();

			while (fujaba__IterInteractionToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterInteractionToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to messageReceive
							fujaba__Success = false;

							fujaba__IterLineToMessageReceive = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToMessageReceive.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToMessageReceive
											.next();

									// ensure correct type and really bound of object messageReceive
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageReceive = (MessageOccurrenceSpecification) _TmpObject;
									// bind object
									message = messageReceive.getMessage();

									// check object message is really bound
									JavaSDM.ensure(message != null);

									// check link message from message to interaction
									JavaSDM.ensure(interaction.equals(message
											.getInteraction()));

									// check link receiveEvent from message to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(message.getReceiveEvent()));

									// bind object
									_TmpObject = message.getSendEvent();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;

									// check isomorphic binding between objects messageSend and messageReceive 
									JavaSDM.ensure(!messageSend
											.equals(messageReceive));

									// check link message from messageSend to message
									JavaSDM.ensure(message.equals(messageSend
											.getMessage()));

									// check link trg from _edge_message to message
									JavaSDM.ensure(message.equals(_edge_message
											.getTrg()));

									// iterate to-many link covered from line to operand
									fujaba__Success = false;

									fujaba__IterLineToOperand = new ArrayList(
											line.getCoveredBy()).iterator();

									while (fujaba__IterLineToOperand.hasNext()) {
										try {
											_TmpObject = fujaba__IterLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// check link operand from operand to combo
											JavaSDM.ensure(combo.equals(operand
													.eContainer()));

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// iterate to-many link trg from interaction to _edge_interaction
											fujaba__Success = false;

											fujaba__IterInteractionTo_edge_interaction = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	interaction,
																	EMoflonEdge.class,
																	"trg"))
													.iterator();

											while (fujaba__IterInteractionTo_edge_interaction
													.hasNext()) {
												try {
													_edge_interaction = (EMoflonEdge) fujaba__IterInteractionTo_edge_interaction
															.next();

													// check object _edge_interaction is really bound
													JavaSDM.ensure(_edge_interaction != null);
													// check isomorphic binding between objects _edge_message and _edge_interaction 
													JavaSDM.ensure(!_edge_message
															.equals(_edge_interaction));

													// check link src from _edge_interaction to message
													JavaSDM.ensure(message
															.equals(_edge_interaction
																	.getSrc()));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_enclosingInteraction_817991 = combo
																	.getEnclosingInteraction();

															// check object __DEC_combo_enclosingInteraction_817991 is really bound
															JavaSDM.ensure(__DEC_combo_enclosingInteraction_817991 != null);

															// check isomorphic binding between objects __DEC_combo_enclosingInteraction_817991 and interaction 
															JavaSDM.ensure(!__DEC_combo_enclosingInteraction_817991
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_115221 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_115221 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_115221 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_115221 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_115221
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_382493 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_382493 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_382493 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_382493 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_382493
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_592288 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_592288 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_592288 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_592288 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_592288
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_307660 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_307660 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_307660 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_307660 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_307660
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_739260 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_739260 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_739260 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_739260 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_739260
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_785979 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_785979 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_785979 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_785979 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_785979
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_356351 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_356351 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_356351 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_356351 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_356351
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_529627 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_529627 is really bound
															JavaSDM.ensure(__DEC_guard_guard_529627 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_529627
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_529627 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_529627
																	.equals(operand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_308017 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_308017 is really bound
															JavaSDM.ensure(__DEC_operand_operand_308017 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_308017
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_308017 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_308017
																	.equals(combo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_585888 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_585888 is really bound
															JavaSDM.ensure(__DEC_spec_specification_585888 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_585888
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_585888 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_585888
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_875034
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_875034 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_875034
																			.hasNext()) {
																try {
																	__DEC_messageReceive_receiveEvent_875034 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_875034
																			.next();

																	// check object __DEC_messageReceive_receiveEvent_875034 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_receiveEvent_875034 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_875034 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_875034
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_663595
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_663595 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"receiveEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_663595
																			.hasNext()) {
																try {
																	__DEC_messageSend_receiveEvent_663595 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_663595
																			.next();

																	// check object __DEC_messageSend_receiveEvent_663595 is really bound
																	JavaSDM.ensure(__DEC_messageSend_receiveEvent_663595 != null);
																	// check isomorphic binding between objects __DEC_messageSend_receiveEvent_663595 and message 
																	JavaSDM.ensure(!__DEC_messageSend_receiveEvent_663595
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_681014
															fujaba__Success = false;

															fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_681014 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageReceive,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_681014
																			.hasNext()) {
																try {
																	__DEC_messageReceive_sendEvent_681014 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_681014
																			.next();

																	// check object __DEC_messageReceive_sendEvent_681014 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_sendEvent_681014 != null);
																	// check isomorphic binding between objects __DEC_messageReceive_sendEvent_681014 and message 
																	JavaSDM.ensure(!__DEC_messageReceive_sendEvent_681014
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_610425
															fujaba__Success = false;

															fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_610425 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					messageSend,
																					Message.class,
																					"sendEvent"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_610425
																			.hasNext()) {
																try {
																	__DEC_messageSend_sendEvent_610425 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_610425
																			.next();

																	// check object __DEC_messageSend_sendEvent_610425 is really bound
																	JavaSDM.ensure(__DEC_messageSend_sendEvent_610425 != null);
																	// check isomorphic binding between objects __DEC_messageSend_sendEvent_610425 and message 
																	JavaSDM.ensure(!__DEC_messageSend_sendEvent_610425
																			.equals(message));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// iterate to-many link message from message to __DEC_message_message_744340
															fujaba__Success = false;

															fujaba__IterMessageTo__DEC_message_message_744340 = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					message,
																					MessageEnd.class,
																					"message"))
																	.iterator();

															while (!(fujaba__Success)
																	&& fujaba__IterMessageTo__DEC_message_message_744340
																			.hasNext()) {
																try {
																	__DEC_message_message_744340 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_744340
																			.next();

																	// check object __DEC_message_message_744340 is really bound
																	JavaSDM.ensure(__DEC_message_message_744340 != null);
																	// check isomorphic binding between objects __DEC_message_message_744340 and messageReceive 
																	JavaSDM.ensure(!__DEC_message_message_744340
																			.equals(messageReceive));

																	// check isomorphic binding between objects __DEC_message_message_744340 and messageSend 
																	JavaSDM.ensure(!__DEC_message_message_744340
																			.equals(messageSend));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_interaction is really bound
														JavaSDM.ensure(_edge_interaction != null);
														// check object _edge_message is really bound
														JavaSDM.ensure(_edge_message != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object message is really bound
														JavaSDM.ensure(message != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check isomorphic binding between objects _edge_message and _edge_interaction 
														JavaSDM.ensure(!_edge_message
																.equals(_edge_interaction));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check link fragment from combo to interaction
														JavaSDM.ensure(!(interaction.equals(combo
																.getEnclosingInteraction())));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link message from message to interaction
														JavaSDM.ensure(interaction.equals(message
																.getInteraction()));

														// check link message from messageReceive to message
														JavaSDM.ensure(message
																.equals(messageReceive
																		.getMessage()));

														// check link message from messageSend to message
														JavaSDM.ensure(message
																.equals(messageSend
																		.getMessage()));

														// check link receiveEvent from message to messageReceive
														JavaSDM.ensure(messageReceive.equals(message
																.getReceiveEvent()));

														// check link receiveEvent from message to messageSend
														JavaSDM.ensure(!(messageSend.equals(message
																.getReceiveEvent())));

														// check link sendEvent from message to messageSend
														JavaSDM.ensure(messageSend.equals(message
																.getSendEvent()));

														// check link sendEvent from message to messageReceive
														JavaSDM.ensure(!(messageReceive.equals(message
																.getSendEvent())));

														// check link operand from operand to combo
														JavaSDM.ensure(combo.equals(operand
																.eContainer()));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_interaction to message
														JavaSDM.ensure(message
																.equals(_edge_interaction
																		.getSrc()));

														// check link src from _edge_message to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_message
																		.getSrc()));

														// check link trg from _edge_interaction to interaction
														JavaSDM.ensure(interaction
																.equals(_edge_interaction
																		.getTrg()));

														// check link trg from _edge_message to message
														JavaSDM.ensure(message
																.equals(_edge_message
																		.getTrg()));

														// check link covered from line to combo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(combo));

														// check link covered from messageReceive to line
														JavaSDM.ensure(messageReceive
																.getCovered()
																.contains(line));

														// check link covered from operand to line
														JavaSDM.ensure(operand
																.getCovered()
																.contains(line));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		combo,
																		line,
																		operand,
																		guard,
																		spec,
																		message,
																		interaction,
																		messageSend,
																		messageReceive);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_49(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_571027 = null;
		InteractionOperand __DEC_combo_fragment_173498 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_705555 = null;
		InteractionOperand __DEC_messageReceive_fragment_76511 = null;
		Interaction __DEC_messageSend_enclosingInteraction_160668 = null;
		InteractionOperand __DEC_messageSend_fragment_363851 = null;
		Interaction __DEC_operand_enclosingInteraction_540895 = null;
		InteractionOperand __DEC_operand_fragment_965220 = null;
		InteractionOperand __DEC_guard_guard_273145 = null;
		CombinedFragment __DEC_operand_operand_461093 = null;
		Constraint __DEC_spec_specification_841735 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_403022 = null;
		Message __DEC_messageReceive_receiveEvent_403022 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_308194 = null;
		Message __DEC_messageSend_receiveEvent_308194 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336438 = null;
		Message __DEC_messageReceive_sendEvent_336438 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140662 = null;
		Message __DEC_messageSend_sendEvent_140662 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_317351 = null;
		MessageEnd __DEC_message_message_317351 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_571027 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_571027 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_571027 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_571027 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_571027
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_173498 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_173498 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_173498 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_173498 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_173498
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_705555 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_705555 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_705555 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_705555 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_705555
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_76511 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_76511 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_76511 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_76511 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_76511
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_160668 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_160668 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_160668 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_160668 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_160668
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_363851 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_363851 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_363851 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_363851 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_363851
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_540895 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_540895 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_540895 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_540895 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_540895
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_965220 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_965220 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_965220 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_965220 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_965220
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_273145 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_273145 is really bound
											JavaSDM.ensure(__DEC_guard_guard_273145 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_273145
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_273145 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_273145
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_461093 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_461093 is really bound
											JavaSDM.ensure(__DEC_operand_operand_461093 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_461093
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_461093 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_461093
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_841735 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_841735 is really bound
											JavaSDM.ensure(__DEC_spec_specification_841735 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_841735
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_841735 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_841735
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_403022
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_403022 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_403022
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_403022 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_403022
															.next();

													// check object __DEC_messageReceive_receiveEvent_403022 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_403022 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_403022 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_403022
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_308194
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_308194 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_308194
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_308194 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_308194
															.next();

													// check object __DEC_messageSend_receiveEvent_308194 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_308194 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_308194 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_308194
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_336438
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336438 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336438
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_336438 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_336438
															.next();

													// check object __DEC_messageReceive_sendEvent_336438 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_336438 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_336438 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_336438
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_140662
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140662 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140662
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_140662 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_140662
															.next();

													// check object __DEC_messageSend_sendEvent_140662 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_140662 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_140662 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_140662
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_317351
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_317351 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_317351
															.hasNext()) {
												try {
													__DEC_message_message_317351 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_317351
															.next();

													// check object __DEC_message_message_317351 is really bound
													JavaSDM.ensure(__DEC_message_message_317351 != null);
													// check isomorphic binding between objects __DEC_message_message_317351 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_317351
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_317351 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_317351
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageSend
										JavaSDM.ensure(messageSend
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_50(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_448553 = null;
		InteractionOperand __DEC_combo_fragment_615221 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_48622 = null;
		InteractionOperand __DEC_messageReceive_fragment_516135 = null;
		Interaction __DEC_messageSend_enclosingInteraction_256360 = null;
		InteractionOperand __DEC_messageSend_fragment_138986 = null;
		Interaction __DEC_operand_enclosingInteraction_575267 = null;
		InteractionOperand __DEC_operand_fragment_141832 = null;
		InteractionOperand __DEC_guard_guard_275906 = null;
		CombinedFragment __DEC_operand_operand_628147 = null;
		Constraint __DEC_spec_specification_884380 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665366 = null;
		Message __DEC_messageReceive_receiveEvent_665366 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_774412 = null;
		Message __DEC_messageSend_receiveEvent_774412 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_462693 = null;
		Message __DEC_messageReceive_sendEvent_462693 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_591841 = null;
		Message __DEC_messageSend_sendEvent_591841 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_530703 = null;
		MessageEnd __DEC_message_message_530703 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_message to message
			JavaSDM.ensure(message.equals(_edge_message.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					interaction = line.getInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// check link message from message to interaction
					JavaSDM.ensure(interaction.equals(message.getInteraction()));

					// iterate to-many link covered from line to combo
					fujaba__Success = false;

					fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
							.iterator();

					while (fujaba__IterLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// iterate to-many link covered from line to operand
							fujaba__Success = false;

							fujaba__IterLineToOperand = new ArrayList(
									line.getCoveredBy()).iterator();

							while (fujaba__IterLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// check link operand from operand to combo
									JavaSDM.ensure(combo.equals(operand
											.eContainer()));

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_448553 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_448553 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_448553 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_448553 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_448553
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_615221 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_615221 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_615221 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_615221 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_615221
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_48622 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_48622 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_48622 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_48622 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_48622
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_516135 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_516135 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_516135 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_516135 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_516135
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_256360 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_256360 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_256360 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_256360 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_256360
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_138986 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_138986 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_138986 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_138986 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_138986
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_575267 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_575267 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_575267 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_575267 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_575267
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_141832 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_141832 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_141832 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_141832 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_141832
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_275906 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_275906 is really bound
											JavaSDM.ensure(__DEC_guard_guard_275906 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_275906
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_275906 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_275906
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_628147 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_628147 is really bound
											JavaSDM.ensure(__DEC_operand_operand_628147 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_628147
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_628147 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_628147
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_884380 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_884380 is really bound
											JavaSDM.ensure(__DEC_spec_specification_884380 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_884380
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_884380 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_884380
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_665366
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665366 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665366
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_665366 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_665366
															.next();

													// check object __DEC_messageReceive_receiveEvent_665366 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_665366 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_665366 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_665366
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_774412
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_774412 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_774412
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_774412 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_774412
															.next();

													// check object __DEC_messageSend_receiveEvent_774412 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_774412 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_774412 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_774412
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_462693
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_462693 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_462693
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_462693 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_462693
															.next();

													// check object __DEC_messageReceive_sendEvent_462693 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_462693 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_462693 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_462693
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_591841
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_591841 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_591841
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_591841 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_591841
															.next();

													// check object __DEC_messageSend_sendEvent_591841 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_591841 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_591841 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_591841
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_530703
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_530703 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_530703
															.hasNext()) {
												try {
													__DEC_message_message_530703 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_530703
															.next();

													// check object __DEC_message_message_530703 is really bound
													JavaSDM.ensure(__DEC_message_message_530703 != null);
													// check isomorphic binding between objects __DEC_message_message_530703 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_530703
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_530703 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_530703
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_message is really bound
										JavaSDM.ensure(_edge_message != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_message.getSrc()));

										// check link trg from _edge_message to message
										JavaSDM.ensure(message
												.equals(_edge_message.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_51(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_554802 = null;
		InteractionOperand __DEC_combo_fragment_730429 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_562004 = null;
		InteractionOperand __DEC_messageReceive_fragment_37980 = null;
		Interaction __DEC_messageSend_enclosingInteraction_611679 = null;
		InteractionOperand __DEC_messageSend_fragment_792910 = null;
		Interaction __DEC_operand_enclosingInteraction_612415 = null;
		InteractionOperand __DEC_operand_fragment_804938 = null;
		InteractionOperand __DEC_guard_guard_158520 = null;
		CombinedFragment __DEC_operand_operand_496388 = null;
		Constraint __DEC_spec_specification_630485 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730977 = null;
		Message __DEC_messageReceive_receiveEvent_730977 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_140194 = null;
		Message __DEC_messageSend_receiveEvent_140194 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_653323 = null;
		Message __DEC_messageReceive_sendEvent_653323 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_792076 = null;
		Message __DEC_messageSend_sendEvent_792076 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_289273 = null;
		MessageEnd __DEC_message_message_289273 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_enclosingInteraction_554802 = combo
											.getEnclosingInteraction();

									// check object __DEC_combo_enclosingInteraction_554802 is really bound
									JavaSDM.ensure(__DEC_combo_enclosingInteraction_554802 != null);

									// check isomorphic binding between objects __DEC_combo_enclosingInteraction_554802 and interaction 
									JavaSDM.ensure(!__DEC_combo_enclosingInteraction_554802
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_combo_fragment_730429 = combo
											.getEnclosingOperand();

									// check object __DEC_combo_fragment_730429 is really bound
									JavaSDM.ensure(__DEC_combo_fragment_730429 != null);

									// check isomorphic binding between objects __DEC_combo_fragment_730429 and operand 
									JavaSDM.ensure(!__DEC_combo_fragment_730429
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_562004 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_562004 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_562004 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_562004 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_562004
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_fragment_37980 = messageReceive
											.getEnclosingOperand();

									// check object __DEC_messageReceive_fragment_37980 is really bound
									JavaSDM.ensure(__DEC_messageReceive_fragment_37980 != null);

									// check isomorphic binding between objects __DEC_messageReceive_fragment_37980 and operand 
									JavaSDM.ensure(!__DEC_messageReceive_fragment_37980
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_611679 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_611679 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_611679 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_611679 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_611679
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_fragment_792910 = messageSend
											.getEnclosingOperand();

									// check object __DEC_messageSend_fragment_792910 is really bound
									JavaSDM.ensure(__DEC_messageSend_fragment_792910 != null);

									// check isomorphic binding between objects __DEC_messageSend_fragment_792910 and operand 
									JavaSDM.ensure(!__DEC_messageSend_fragment_792910
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_enclosingInteraction_612415 = operand
											.getEnclosingInteraction();

									// check object __DEC_operand_enclosingInteraction_612415 is really bound
									JavaSDM.ensure(__DEC_operand_enclosingInteraction_612415 != null);

									// check isomorphic binding between objects __DEC_operand_enclosingInteraction_612415 and interaction 
									JavaSDM.ensure(!__DEC_operand_enclosingInteraction_612415
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_fragment_804938 = operand
											.getEnclosingOperand();

									// check object __DEC_operand_fragment_804938 is really bound
									JavaSDM.ensure(__DEC_operand_fragment_804938 != null);

									// check isomorphic binding between objects __DEC_operand_fragment_804938 and operand 
									JavaSDM.ensure(!__DEC_operand_fragment_804938
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// negative check for link packagedElement from guard
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												guard,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// negative check for link packagedElement from spec
								JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(
												spec,
												ModalSequenceDiagram.Package.class,
												"packagedElement").size() == 0);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_guard_guard_158520 = guard
											.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
											.eContainer() : null;

									// check object __DEC_guard_guard_158520 is really bound
									JavaSDM.ensure(__DEC_guard_guard_158520 != null);

									// check if contained via correct reference
									JavaSDM.ensure(guard
											.equals(__DEC_guard_guard_158520
													.getGuard()));

									// check isomorphic binding between objects __DEC_guard_guard_158520 and operand 
									JavaSDM.ensure(!__DEC_guard_guard_158520
											.equals(operand));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_operand_operand_496388 = operand
											.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
											.eContainer() : null;

									// check object __DEC_operand_operand_496388 is really bound
									JavaSDM.ensure(__DEC_operand_operand_496388 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_operand_operand_496388
											.getOperand().contains(operand));

									// check isomorphic binding between objects __DEC_operand_operand_496388 and combo 
									JavaSDM.ensure(!__DEC_operand_operand_496388
											.equals(combo));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_spec_specification_630485 = spec
											.eContainer() instanceof Constraint ? (Constraint) spec
											.eContainer() : null;

									// check object __DEC_spec_specification_630485 is really bound
									JavaSDM.ensure(__DEC_spec_specification_630485 != null);

									// check if contained via correct reference
									JavaSDM.ensure(spec
											.equals(__DEC_spec_specification_630485
													.getSpecification()));

									// check isomorphic binding between objects __DEC_spec_specification_630485 and guard 
									JavaSDM.ensure(!__DEC_spec_specification_630485
											.equals(guard));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_730977
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730977 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730977
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_730977 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_730977
													.next();

											// check object __DEC_messageReceive_receiveEvent_730977 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_730977 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_730977 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_730977
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_140194
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_140194 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_140194
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_140194 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_140194
													.next();

											// check object __DEC_messageSend_receiveEvent_140194 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_140194 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_140194 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_140194
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_653323
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_653323 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_653323
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_653323 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_653323
													.next();

											// check object __DEC_messageReceive_sendEvent_653323 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_653323 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_653323 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_653323
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_792076
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_792076 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_792076
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_792076 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_792076
													.next();

											// check object __DEC_messageSend_sendEvent_792076 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_792076 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_792076 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_792076
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_289273
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_289273 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_289273
													.hasNext()) {
										try {
											__DEC_message_message_289273 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_289273
													.next();

											// check object __DEC_message_message_289273 is really bound
											JavaSDM.ensure(__DEC_message_message_289273 != null);
											// check isomorphic binding between objects __DEC_message_message_289273 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_289273
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_289273 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_289273
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check link fragment from operand to operand
								JavaSDM.ensure(!(operand.equals(operand
										.getEnclosingOperand())));

								// check object _edge_coveredBy is really bound
								JavaSDM.ensure(_edge_coveredBy != null);
								// check object combo is really bound
								JavaSDM.ensure(combo != null);
								// check object guard is really bound
								JavaSDM.ensure(guard != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check object operand is really bound
								JavaSDM.ensure(operand != null);
								// check object spec is really bound
								JavaSDM.ensure(spec != null);
								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from combo to interaction
								JavaSDM.ensure(!(interaction.equals(combo
										.getEnclosingInteraction())));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link fragment from operand to interaction
								JavaSDM.ensure(!(interaction.equals(operand
										.getEnclosingInteraction())));

								// check link fragment from combo to operand
								JavaSDM.ensure(!(operand.equals(combo
										.getEnclosingOperand())));

								// check link fragment from messageReceive to operand
								JavaSDM.ensure(!(operand.equals(messageReceive
										.getEnclosingOperand())));

								// check link fragment from messageSend to operand
								JavaSDM.ensure(!(operand.equals(messageSend
										.getEnclosingOperand())));

								// check link guard from operand to guard
								JavaSDM.ensure(guard.equals(operand.getGuard()));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link operand from operand to combo
								JavaSDM.ensure(combo.equals(operand
										.eContainer()));

								// check link specification from spec to guard
								JavaSDM.ensure(guard.equals(spec.eContainer()));

								// check link src from _edge_coveredBy to line
								JavaSDM.ensure(line.equals(_edge_coveredBy
										.getSrc()));

								// check link trg from _edge_coveredBy to messageReceive
								JavaSDM.ensure(messageReceive
										.equals(_edge_coveredBy.getTrg()));

								// check link covered from line to combo
								JavaSDM.ensure(line.getCoveredBy().contains(
										combo));

								// check link covered from messageReceive to line
								JavaSDM.ensure(messageReceive.getCovered()
										.contains(line));

								// check link covered from operand to line
								JavaSDM.ensure(operand.getCovered().contains(
										line));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										combo, line, operand, guard, spec,
										message, interaction, messageSend,
										messageReceive);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_52(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_combo_enclosingInteraction_744246 = null;
		InteractionOperand __DEC_combo_fragment_847684 = null;
		Interaction __DEC_messageReceive_enclosingInteraction_335807 = null;
		InteractionOperand __DEC_messageReceive_fragment_869444 = null;
		Interaction __DEC_messageSend_enclosingInteraction_198370 = null;
		InteractionOperand __DEC_messageSend_fragment_679497 = null;
		Interaction __DEC_operand_enclosingInteraction_64995 = null;
		InteractionOperand __DEC_operand_fragment_422135 = null;
		InteractionOperand __DEC_guard_guard_713258 = null;
		CombinedFragment __DEC_operand_operand_105472 = null;
		Constraint __DEC_spec_specification_689289 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_255601 = null;
		Message __DEC_messageReceive_receiveEvent_255601 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_763145 = null;
		Message __DEC_messageSend_receiveEvent_763145 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846635 = null;
		Message __DEC_messageReceive_sendEvent_846635 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_542946 = null;
		Message __DEC_messageSend_sendEvent_542946 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_936544 = null;
		MessageEnd __DEC_message_message_936544 = null;
		Match match = null;
		Iterator fujaba__IterLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterLineToCombo = null;
		CombinedFragment combo = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			interaction = line.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from message to interaction
			JavaSDM.ensure(interaction.equals(message.getInteraction()));

			// check link covered from messageReceive to line
			JavaSDM.ensure(messageReceive.getCovered().contains(line));

			// iterate to-many link covered from line to combo
			fujaba__Success = false;

			fujaba__IterLineToCombo = new ArrayList(line.getCoveredBy())
					.iterator();

			while (fujaba__IterLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// iterate to-many link covered from line to operand
					fujaba__Success = false;

					fujaba__IterLineToOperand = new ArrayList(
							line.getCoveredBy()).iterator();

					while (fujaba__IterLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// check link operand from operand to combo
							JavaSDM.ensure(combo.equals(operand.eContainer()));

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link src from line to _edge_coveredBy
							fujaba__Success = false;

							fujaba__IterLineTo_edge_coveredBy = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													EMoflonEdge.class, "src"))
									.iterator();

							while (fujaba__IterLineTo_edge_coveredBy.hasNext()) {
								try {
									_edge_coveredBy = (EMoflonEdge) fujaba__IterLineTo_edge_coveredBy
											.next();

									// check object _edge_coveredBy is really bound
									JavaSDM.ensure(_edge_coveredBy != null);
									// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
									JavaSDM.ensure(!_edge_coveredBy
											.equals(_edge_covered));

									// check link trg from _edge_coveredBy to messageReceive
									JavaSDM.ensure(messageReceive
											.equals(_edge_coveredBy.getTrg()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_enclosingInteraction_744246 = combo
													.getEnclosingInteraction();

											// check object __DEC_combo_enclosingInteraction_744246 is really bound
											JavaSDM.ensure(__DEC_combo_enclosingInteraction_744246 != null);

											// check isomorphic binding between objects __DEC_combo_enclosingInteraction_744246 and interaction 
											JavaSDM.ensure(!__DEC_combo_enclosingInteraction_744246
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_combo_fragment_847684 = combo
													.getEnclosingOperand();

											// check object __DEC_combo_fragment_847684 is really bound
											JavaSDM.ensure(__DEC_combo_fragment_847684 != null);

											// check isomorphic binding between objects __DEC_combo_fragment_847684 and operand 
											JavaSDM.ensure(!__DEC_combo_fragment_847684
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_enclosingInteraction_335807 = messageReceive
													.getEnclosingInteraction();

											// check object __DEC_messageReceive_enclosingInteraction_335807 is really bound
											JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_335807 != null);

											// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_335807 and interaction 
											JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_335807
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageReceive_fragment_869444 = messageReceive
													.getEnclosingOperand();

											// check object __DEC_messageReceive_fragment_869444 is really bound
											JavaSDM.ensure(__DEC_messageReceive_fragment_869444 != null);

											// check isomorphic binding between objects __DEC_messageReceive_fragment_869444 and operand 
											JavaSDM.ensure(!__DEC_messageReceive_fragment_869444
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_enclosingInteraction_198370 = messageSend
													.getEnclosingInteraction();

											// check object __DEC_messageSend_enclosingInteraction_198370 is really bound
											JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_198370 != null);

											// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_198370 and interaction 
											JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_198370
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_messageSend_fragment_679497 = messageSend
													.getEnclosingOperand();

											// check object __DEC_messageSend_fragment_679497 is really bound
											JavaSDM.ensure(__DEC_messageSend_fragment_679497 != null);

											// check isomorphic binding between objects __DEC_messageSend_fragment_679497 and operand 
											JavaSDM.ensure(!__DEC_messageSend_fragment_679497
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_enclosingInteraction_64995 = operand
													.getEnclosingInteraction();

											// check object __DEC_operand_enclosingInteraction_64995 is really bound
											JavaSDM.ensure(__DEC_operand_enclosingInteraction_64995 != null);

											// check isomorphic binding between objects __DEC_operand_enclosingInteraction_64995 and interaction 
											JavaSDM.ensure(!__DEC_operand_enclosingInteraction_64995
													.equals(interaction));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_fragment_422135 = operand
													.getEnclosingOperand();

											// check object __DEC_operand_fragment_422135 is really bound
											JavaSDM.ensure(__DEC_operand_fragment_422135 != null);

											// check isomorphic binding between objects __DEC_operand_fragment_422135 and operand 
											JavaSDM.ensure(!__DEC_operand_fragment_422135
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// negative check for link packagedElement from guard
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														guard,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// negative check for link packagedElement from spec
										JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(
														spec,
														ModalSequenceDiagram.Package.class,
														"packagedElement")
												.size() == 0);
										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_guard_guard_713258 = guard
													.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
													.eContainer() : null;

											// check object __DEC_guard_guard_713258 is really bound
											JavaSDM.ensure(__DEC_guard_guard_713258 != null);

											// check if contained via correct reference
											JavaSDM.ensure(guard
													.equals(__DEC_guard_guard_713258
															.getGuard()));

											// check isomorphic binding between objects __DEC_guard_guard_713258 and operand 
											JavaSDM.ensure(!__DEC_guard_guard_713258
													.equals(operand));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_operand_operand_105472 = operand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
													.eContainer() : null;

											// check object __DEC_operand_operand_105472 is really bound
											JavaSDM.ensure(__DEC_operand_operand_105472 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_operand_operand_105472
													.getOperand().contains(
															operand));

											// check isomorphic binding between objects __DEC_operand_operand_105472 and combo 
											JavaSDM.ensure(!__DEC_operand_operand_105472
													.equals(combo));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_spec_specification_689289 = spec
													.eContainer() instanceof Constraint ? (Constraint) spec
													.eContainer() : null;

											// check object __DEC_spec_specification_689289 is really bound
											JavaSDM.ensure(__DEC_spec_specification_689289 != null);

											// check if contained via correct reference
											JavaSDM.ensure(spec
													.equals(__DEC_spec_specification_689289
															.getSpecification()));

											// check isomorphic binding between objects __DEC_spec_specification_689289 and guard 
											JavaSDM.ensure(!__DEC_spec_specification_689289
													.equals(guard));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_255601
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_255601 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_255601
															.hasNext()) {
												try {
													__DEC_messageReceive_receiveEvent_255601 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_255601
															.next();

													// check object __DEC_messageReceive_receiveEvent_255601 is really bound
													JavaSDM.ensure(__DEC_messageReceive_receiveEvent_255601 != null);
													// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_255601 and message 
													JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_255601
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_763145
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_763145 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"receiveEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_763145
															.hasNext()) {
												try {
													__DEC_messageSend_receiveEvent_763145 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_763145
															.next();

													// check object __DEC_messageSend_receiveEvent_763145 is really bound
													JavaSDM.ensure(__DEC_messageSend_receiveEvent_763145 != null);
													// check isomorphic binding between objects __DEC_messageSend_receiveEvent_763145 and message 
													JavaSDM.ensure(!__DEC_messageSend_receiveEvent_763145
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_846635
											fujaba__Success = false;

											fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846635 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageReceive,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846635
															.hasNext()) {
												try {
													__DEC_messageReceive_sendEvent_846635 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_846635
															.next();

													// check object __DEC_messageReceive_sendEvent_846635 is really bound
													JavaSDM.ensure(__DEC_messageReceive_sendEvent_846635 != null);
													// check isomorphic binding between objects __DEC_messageReceive_sendEvent_846635 and message 
													JavaSDM.ensure(!__DEC_messageReceive_sendEvent_846635
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_542946
											fujaba__Success = false;

											fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_542946 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	messageSend,
																	Message.class,
																	"sendEvent"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_542946
															.hasNext()) {
												try {
													__DEC_messageSend_sendEvent_542946 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_542946
															.next();

													// check object __DEC_messageSend_sendEvent_542946 is really bound
													JavaSDM.ensure(__DEC_messageSend_sendEvent_542946 != null);
													// check isomorphic binding between objects __DEC_messageSend_sendEvent_542946 and message 
													JavaSDM.ensure(!__DEC_messageSend_sendEvent_542946
															.equals(message));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link message from message to __DEC_message_message_936544
											fujaba__Success = false;

											fujaba__IterMessageTo__DEC_message_message_936544 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	message,
																	MessageEnd.class,
																	"message"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterMessageTo__DEC_message_message_936544
															.hasNext()) {
												try {
													__DEC_message_message_936544 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_936544
															.next();

													// check object __DEC_message_message_936544 is really bound
													JavaSDM.ensure(__DEC_message_message_936544 != null);
													// check isomorphic binding between objects __DEC_message_message_936544 and messageReceive 
													JavaSDM.ensure(!__DEC_message_message_936544
															.equals(messageReceive));

													// check isomorphic binding between objects __DEC_message_message_936544 and messageSend 
													JavaSDM.ensure(!__DEC_message_message_936544
															.equals(messageSend));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check link fragment from operand to operand
										JavaSDM.ensure(!(operand.equals(operand
												.getEnclosingOperand())));

										// check object _edge_covered is really bound
										JavaSDM.ensure(_edge_covered != null);
										// check object _edge_coveredBy is really bound
										JavaSDM.ensure(_edge_coveredBy != null);
										// check object combo is really bound
										JavaSDM.ensure(combo != null);
										// check object guard is really bound
										JavaSDM.ensure(guard != null);
										// check object interaction is really bound
										JavaSDM.ensure(interaction != null);
										// check object line is really bound
										JavaSDM.ensure(line != null);
										// check object message is really bound
										JavaSDM.ensure(message != null);
										// check object messageReceive is really bound
										JavaSDM.ensure(messageReceive != null);
										// check object messageSend is really bound
										JavaSDM.ensure(messageSend != null);
										// check object operand is really bound
										JavaSDM.ensure(operand != null);
										// check object spec is really bound
										JavaSDM.ensure(spec != null);
										// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
										JavaSDM.ensure(!_edge_coveredBy
												.equals(_edge_covered));

										// check isomorphic binding between objects messageSend and messageReceive 
										JavaSDM.ensure(!messageSend
												.equals(messageReceive));

										// check link fragment from combo to interaction
										JavaSDM.ensure(!(interaction.equals(combo
												.getEnclosingInteraction())));

										// check link fragment from messageReceive to interaction
										JavaSDM.ensure(!(interaction.equals(messageReceive
												.getEnclosingInteraction())));

										// check link fragment from messageSend to interaction
										JavaSDM.ensure(!(interaction.equals(messageSend
												.getEnclosingInteraction())));

										// check link fragment from operand to interaction
										JavaSDM.ensure(!(interaction.equals(operand
												.getEnclosingInteraction())));

										// check link fragment from combo to operand
										JavaSDM.ensure(!(operand.equals(combo
												.getEnclosingOperand())));

										// check link fragment from messageReceive to operand
										JavaSDM.ensure(!(operand
												.equals(messageReceive
														.getEnclosingOperand())));

										// check link fragment from messageSend to operand
										JavaSDM.ensure(!(operand
												.equals(messageSend
														.getEnclosingOperand())));

										// check link guard from operand to guard
										JavaSDM.ensure(guard.equals(operand
												.getGuard()));

										// check link lifeline from line to interaction
										JavaSDM.ensure(interaction.equals(line
												.getInteraction()));

										// check link message from message to interaction
										JavaSDM.ensure(interaction
												.equals(message
														.getInteraction()));

										// check link message from messageReceive to message
										JavaSDM.ensure(message
												.equals(messageReceive
														.getMessage()));

										// check link message from messageSend to message
										JavaSDM.ensure(message
												.equals(messageSend
														.getMessage()));

										// check link receiveEvent from message to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(message
														.getReceiveEvent()));

										// check link receiveEvent from message to messageSend
										JavaSDM.ensure(!(messageSend
												.equals(message
														.getReceiveEvent())));

										// check link sendEvent from message to messageSend
										JavaSDM.ensure(messageSend
												.equals(message.getSendEvent()));

										// check link sendEvent from message to messageReceive
										JavaSDM.ensure(!(messageReceive
												.equals(message.getSendEvent())));

										// check link operand from operand to combo
										JavaSDM.ensure(combo.equals(operand
												.eContainer()));

										// check link specification from spec to guard
										JavaSDM.ensure(guard.equals(spec
												.eContainer()));

										// check link src from _edge_covered to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_covered.getSrc()));

										// check link src from _edge_coveredBy to line
										JavaSDM.ensure(line
												.equals(_edge_coveredBy
														.getSrc()));

										// check link trg from _edge_covered to line
										JavaSDM.ensure(line
												.equals(_edge_covered.getTrg()));

										// check link trg from _edge_coveredBy to messageReceive
										JavaSDM.ensure(messageReceive
												.equals(_edge_coveredBy
														.getTrg()));

										// check link covered from line to combo
										JavaSDM.ensure(line.getCoveredBy()
												.contains(combo));

										// check link covered from messageReceive to line
										JavaSDM.ensure(messageReceive
												.getCovered().contains(line));

										// check link covered from operand to line
										JavaSDM.ensure(operand.getCovered()
												.contains(line));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_BWD(match,
														combo, line, operand,
														guard, spec, message,
														interaction,
														messageSend,
														messageReceive);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_BWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match, UseCase useCase, Flow flow,
			NormalStep step, Actor actor, PackageDeclaration packageDeclaration) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match, useCase, flow,
					step, actor, packageDeclaration));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_actor_actor.setTrg(actor);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");
				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase.setName("useCases");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_useCases_useCase, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				__useCase_flows_flow.setSrc(useCase);

				// create link
				__packageDeclaration_useCases_useCase.setTrg(useCase);

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_useCases_useCase
						.setSrc(packageDeclaration);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, useCase, flow, step, actor,
					packageDeclaration);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor,
			PackageDeclaration packageDeclaration) {
		match.registerObject("useCase", useCase);
		match.registerObject("flow", flow);
		match.registerObject("step", step);
		match.registerObject("actor", actor);
		match.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match, UseCase useCase,
			Flow flow, NormalStep step, Actor actor,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, NormalStep step, Interaction interaction, Lifeline line,
			Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", true, csp);
		var_step_name.setValue(step.getName());
		var_step_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", csp);
		var_message_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine,
			EObject packageDeclaration) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __message_sendEvent_messageSend = null;
		EMoflonEdge __line_coveredBy_messageReceive = null;
		EMoflonEdge __message_receiveEvent_messageReceive = null;
		EMoflonEdge __message_interaction_interaction = null;
		EMoflonEdge __messageReceive_covered_line = null;
		EMoflonEdge __interaction_message_message = null;
		EMoflonEdge __messageReceive_message_message = null;
		EMoflonEdge __messageSend_message_message = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object message is really bound
			JavaSDM.ensure(message != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, message,
					interaction, messageSend, messageReceive, line));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __message_sendEvent_messageSend
				__message_sendEvent_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __message_interaction_interaction
				__message_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_covered_line
				__messageReceive_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_message_message
				__interaction_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_message_message
				__messageReceive_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_message_message
				__messageSend_message_message = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __message_sendEvent_messageSend
				__message_sendEvent_messageSend.setName("sendEvent");
				// assign attribute __message_receiveEvent_messageReceive
				__message_receiveEvent_messageReceive.setName("receiveEvent");
				// assign attribute __message_interaction_interaction
				__message_interaction_interaction.setName("interaction");
				// assign attribute __interaction_message_message
				__interaction_message_message.setName("message");
				// assign attribute __messageSend_message_message
				__messageSend_message_message.setName("message");
				// assign attribute __messageReceive_message_message
				__messageReceive_message_message.setName("message");
				// assign attribute __line_coveredBy_messageReceive
				__line_coveredBy_messageReceive.setName("coveredBy");
				// assign attribute __messageReceive_covered_line
				__messageReceive_covered_line.setName("covered");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_sendEvent_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						message, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_messageReceive, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_receiveEvent_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__message_interaction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_message_message, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil
						.addOppositeReference(match,
								__messageReceive_message_message,
								"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_message_message, "toBeTranslatedEdges");

				// create link
				__message_interaction_interaction.setSrc(message);

				// create link
				__message_receiveEvent_messageReceive.setSrc(message);

				// create link
				__messageSend_message_message.setTrg(message);

				// create link
				__interaction_message_message.setTrg(message);

				// create link
				__message_sendEvent_messageSend.setSrc(message);

				// create link
				__messageReceive_message_message.setTrg(message);

				// create link
				__message_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_message_message.setSrc(interaction);

				// create link
				__messageSend_message_message.setSrc(messageSend);

				// create link
				__message_sendEvent_messageSend.setTrg(messageSend);

				// create link
				__line_coveredBy_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_message_message.setSrc(messageReceive);

				// create link
				__messageReceive_covered_line.setSrc(messageReceive);

				// create link
				__message_receiveEvent_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_covered_line.setTrg(line);

				// create link
				__line_coveredBy_messageReceive.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, message, interaction,
					messageSend, messageReceive, line);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		match.registerObject("message", message);
		match.registerObject("interaction", interaction);
		match.registerObject("messageSend", messageSend);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Message message,
			Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals

		// Create attribute variables

		// Create explicit parameters

		// Create unbound variables

		// Create constraints

		// Solve CSP
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			UseCase useCase, UseCaseToInteraction useCaseToInteraction,
			Flow flow, Message message, Interaction interaction,
			MessageOccurrenceSpecification messageSend,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Actor actor, ActorToLifeline actorToLine,
			PackageDeclaration packageDeclaration) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals

		// Create attribute variables
		Variable var_message_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"message.name", true, csp);
		var_message_name.setValue(message.getName());
		var_message_name.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_step_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"step.name", csp);
		var_step_name.setType("");

		// Create constraints
		Eq eq = new Eq();

		csp.getConstraints().add(eq);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_step_name, var_message_name);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("message", message);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject useCase, EObject useCaseToInteraction, EObject flow,
			EObject step, EObject message, EObject interaction,
			EObject stepToMessage, EObject messageSend, EObject messageReceive,
			EObject line, EObject actor, EObject actorToLine,
			EObject packageDeclaration) {
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("message", message);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("stepToMessage", stepToMessage);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("packageDeclaration", packageDeclaration);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_4(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_540544 = null;
		Match match = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Actor actor = null;
		NormalStep step = null;
		Flow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof Flow);
			flow = (Flow) _TmpObject;

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_540544 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_540544 is really bound
					JavaSDM.ensure(__DEC_step_steps_540544 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_540544.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_540544 and flow 
					JavaSDM.ensure(!__DEC_step_steps_540544.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_steps is really bound
				JavaSDM.ensure(_edge_steps != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_steps to flow
				JavaSDM.ensure(flow.equals(_edge_steps.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_steps to step
				JavaSDM.ensure(step.equals(_edge_steps.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_5(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Flow __DEC_step_steps_567850 = null;
		Match match = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Flow flow = null;
		Actor actor = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			flow = step.eContainer() instanceof Flow ? (Flow) step.eContainer()
					: null;

			// check object flow is really bound
			JavaSDM.ensure(flow != null);

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			useCase = flow.eContainer() instanceof UseCase ? (UseCase) flow
					.eContainer() : null;

			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);

			// check if contained via correct reference
			JavaSDM.ensure(useCase.getFlows().contains(flow));

			// check link trg from _edge_actor to actor
			JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

			// bind object
			packageDeclaration = useCase.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) useCase
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getUseCases().contains(useCase));

			// check link actors from actor to packageDeclaration
			JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_step_steps_567850 = step.eContainer() instanceof Flow ? (Flow) step
							.eContainer() : null;

					// check object __DEC_step_steps_567850 is really bound
					JavaSDM.ensure(__DEC_step_steps_567850 != null);

					// check if contained via correct reference
					JavaSDM.ensure(__DEC_step_steps_567850.getSteps().contains(
							step));

					// check isomorphic binding between objects __DEC_step_steps_567850 and flow 
					JavaSDM.ensure(!__DEC_step_steps_567850.equals(flow));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_actor is really bound
				JavaSDM.ensure(_edge_actor != null);
				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check link actor from step to actor
				JavaSDM.ensure(actor.equals(step.getActor()));

				// check link actors from actor to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(actor.eContainer()));

				// check link flows from flow to useCase
				JavaSDM.ensure(useCase.equals(flow.eContainer()));

				// check link src from _edge_actor to step
				JavaSDM.ensure(step.equals(_edge_actor.getSrc()));

				// check link steps from step to flow
				JavaSDM.ensure(flow.equals(step.eContainer()));

				// check link trg from _edge_actor to actor
				JavaSDM.ensure(actor.equals(_edge_actor.getTrg()));

				// check link useCases from useCase to packageDeclaration
				JavaSDM.ensure(packageDeclaration.equals(useCase.eContainer()));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_FWD(match, useCase, flow,
						step, actor, packageDeclaration);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_FWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_4(
			EMoflonEdge _edge_sendEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_193255 = null;
		Interaction __DEC_messageSend_enclosingInteraction_575804 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777693 = null;
		Message __DEC_messageReceive_receiveEvent_777693 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718395 = null;
		Message __DEC_messageSend_receiveEvent_718395 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_474186 = null;
		Message __DEC_messageReceive_sendEvent_474186 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147918 = null;
		Message __DEC_messageSend_sendEvent_147918 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_764697 = null;
		MessageEnd __DEC_message_message_764697 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_sendEvent is really bound
			JavaSDM.ensure(_edge_sendEvent != null);
			// bind object
			_TmpObject = _edge_sendEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_sendEvent to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_sendEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_193255 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_193255 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_193255 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_193255 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_193255
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_575804 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_575804 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_575804 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_575804 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_575804
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_777693
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777693 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777693
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_777693 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_777693
											.next();

									// check object __DEC_messageReceive_receiveEvent_777693 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_777693 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_777693 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_777693
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_718395
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718395 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718395
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_718395 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_718395
											.next();

									// check object __DEC_messageSend_receiveEvent_718395 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_718395 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_718395 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_718395
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_474186
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_474186 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_474186
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_474186 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_474186
											.next();

									// check object __DEC_messageReceive_sendEvent_474186 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_474186 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_474186 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_474186
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_147918
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147918 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147918
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_147918 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_147918
											.next();

									// check object __DEC_messageSend_sendEvent_147918 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_147918 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_147918 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_147918
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_764697
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_764697 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_764697
											.hasNext()) {
								try {
									__DEC_message_message_764697 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_764697
											.next();

									// check object __DEC_message_message_764697 is really bound
									JavaSDM.ensure(__DEC_message_message_764697 != null);
									// check isomorphic binding between objects __DEC_message_message_764697 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_764697
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_764697 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_764697
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_sendEvent is really bound
						JavaSDM.ensure(_edge_sendEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_sendEvent to message
						JavaSDM.ensure(message.equals(_edge_sendEvent.getSrc()));

						// check link trg from _edge_sendEvent to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_sendEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_5(
			EMoflonEdge _edge_receiveEvent) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_747563 = null;
		Interaction __DEC_messageSend_enclosingInteraction_785572 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_581606 = null;
		Message __DEC_messageReceive_receiveEvent_581606 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_507298 = null;
		Message __DEC_messageSend_receiveEvent_507298 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_775672 = null;
		Message __DEC_messageReceive_sendEvent_775672 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_426344 = null;
		Message __DEC_messageSend_sendEvent_426344 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_516013 = null;
		MessageEnd __DEC_message_message_516013 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_receiveEvent is really bound
			JavaSDM.ensure(_edge_receiveEvent != null);
			// bind object
			_TmpObject = _edge_receiveEvent.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link trg from _edge_receiveEvent to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_747563 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_747563 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_747563 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_747563 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_747563
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_785572 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_785572 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_785572 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_785572 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_785572
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_581606
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_581606 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_581606
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_581606 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_581606
											.next();

									// check object __DEC_messageReceive_receiveEvent_581606 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_581606 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_581606 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_581606
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_507298
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_507298 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_507298
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_507298 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_507298
											.next();

									// check object __DEC_messageSend_receiveEvent_507298 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_507298 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_507298 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_507298
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_775672
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_775672 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_775672
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_775672 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_775672
											.next();

									// check object __DEC_messageReceive_sendEvent_775672 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_775672 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_775672 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_775672
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_426344
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_426344 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_426344
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_426344 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_426344
											.next();

									// check object __DEC_messageSend_sendEvent_426344 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_426344 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_426344 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_426344
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_516013
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_516013 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_516013
											.hasNext()) {
								try {
									__DEC_message_message_516013 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_516013
											.next();

									// check object __DEC_message_message_516013 is really bound
									JavaSDM.ensure(__DEC_message_message_516013 != null);
									// check isomorphic binding between objects __DEC_message_message_516013 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_516013
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_516013 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_516013
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_receiveEvent is really bound
						JavaSDM.ensure(_edge_receiveEvent != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_receiveEvent to message
						JavaSDM.ensure(message.equals(_edge_receiveEvent
								.getSrc()));

						// check link trg from _edge_receiveEvent to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_receiveEvent
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_6(
			EMoflonEdge _edge_interaction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_529129 = null;
		Interaction __DEC_messageSend_enclosingInteraction_537296 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_269241 = null;
		Message __DEC_messageReceive_receiveEvent_269241 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_219307 = null;
		Message __DEC_messageSend_receiveEvent_219307 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_323478 = null;
		Message __DEC_messageReceive_sendEvent_323478 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_833660 = null;
		Message __DEC_messageSend_sendEvent_833660 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_407390 = null;
		MessageEnd __DEC_message_message_407390 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_interaction is really bound
			JavaSDM.ensure(_edge_interaction != null);
			// bind object
			_TmpObject = _edge_interaction.getSrc();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link trg from _edge_interaction to interaction
			JavaSDM.ensure(interaction.equals(_edge_interaction.getTrg()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_529129 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_529129 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_529129 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_529129 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_529129
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_537296 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_537296 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_537296 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_537296 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_537296
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_269241
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_269241 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_269241
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_269241 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_269241
											.next();

									// check object __DEC_messageReceive_receiveEvent_269241 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_269241 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_269241 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_269241
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_219307
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_219307 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_219307
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_219307 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_219307
											.next();

									// check object __DEC_messageSend_receiveEvent_219307 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_219307 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_219307 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_219307
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_323478
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_323478 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_323478
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_323478 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_323478
											.next();

									// check object __DEC_messageReceive_sendEvent_323478 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_323478 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_323478 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_323478
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_833660
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_833660 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_833660
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_833660 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_833660
											.next();

									// check object __DEC_messageSend_sendEvent_833660 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_833660 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_833660 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_833660
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_407390
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_407390 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_407390
											.hasNext()) {
								try {
									__DEC_message_message_407390 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_407390
											.next();

									// check object __DEC_message_message_407390 is really bound
									JavaSDM.ensure(__DEC_message_message_407390 != null);
									// check isomorphic binding between objects __DEC_message_message_407390 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_407390
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_407390 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_407390
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_interaction is really bound
						JavaSDM.ensure(_edge_interaction != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_interaction to message
						JavaSDM.ensure(message.equals(_edge_interaction
								.getSrc()));

						// check link trg from _edge_interaction to interaction
						JavaSDM.ensure(interaction.equals(_edge_interaction
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_7(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_971747 = null;
		Interaction __DEC_messageSend_enclosingInteraction_797346 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_495804 = null;
		Message __DEC_messageReceive_receiveEvent_495804 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_270946 = null;
		Message __DEC_messageSend_receiveEvent_270946 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_905656 = null;
		Message __DEC_messageReceive_sendEvent_905656 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_463891 = null;
		Message __DEC_messageSend_sendEvent_463891 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_864359 = null;
		MessageEnd __DEC_message_message_864359 = null;
		Match match = null;
		Iterator fujaba__IterMessageTo_edge_interaction = null;
		EMoflonEdge _edge_interaction = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link src from _edge_message to interaction
			JavaSDM.ensure(interaction.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// iterate to-many link src from message to _edge_interaction
					fujaba__Success = false;

					fujaba__IterMessageTo_edge_interaction = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											EMoflonEdge.class, "src"))
							.iterator();

					while (fujaba__IterMessageTo_edge_interaction.hasNext()) {
						try {
							_edge_interaction = (EMoflonEdge) fujaba__IterMessageTo_edge_interaction
									.next();

							// check object _edge_interaction is really bound
							JavaSDM.ensure(_edge_interaction != null);
							// check isomorphic binding between objects _edge_message and _edge_interaction 
							JavaSDM.ensure(!_edge_message
									.equals(_edge_interaction));

							// check link trg from _edge_interaction to interaction
							JavaSDM.ensure(interaction.equals(_edge_interaction
									.getTrg()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// negative check for link fragment from messageReceive
								JavaSDM.ensure(messageReceive
										.getEnclosingOperand() == null);
								// negative check for link fragment from messageSend
								JavaSDM.ensure(messageSend
										.getEnclosingOperand() == null);
								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageReceive_enclosingInteraction_971747 = messageReceive
											.getEnclosingInteraction();

									// check object __DEC_messageReceive_enclosingInteraction_971747 is really bound
									JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_971747 != null);

									// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_971747 and interaction 
									JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_971747
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_messageSend_enclosingInteraction_797346 = messageSend
											.getEnclosingInteraction();

									// check object __DEC_messageSend_enclosingInteraction_797346 is really bound
									JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_797346 != null);

									// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_797346 and interaction 
									JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_797346
											.equals(interaction));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_495804
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_495804 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_495804
													.hasNext()) {
										try {
											__DEC_messageReceive_receiveEvent_495804 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_495804
													.next();

											// check object __DEC_messageReceive_receiveEvent_495804 is really bound
											JavaSDM.ensure(__DEC_messageReceive_receiveEvent_495804 != null);
											// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_495804 and message 
											JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_495804
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_270946
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_270946 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"receiveEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_270946
													.hasNext()) {
										try {
											__DEC_messageSend_receiveEvent_270946 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_270946
													.next();

											// check object __DEC_messageSend_receiveEvent_270946 is really bound
											JavaSDM.ensure(__DEC_messageSend_receiveEvent_270946 != null);
											// check isomorphic binding between objects __DEC_messageSend_receiveEvent_270946 and message 
											JavaSDM.ensure(!__DEC_messageSend_receiveEvent_270946
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_905656
									fujaba__Success = false;

									fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_905656 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageReceive,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_905656
													.hasNext()) {
										try {
											__DEC_messageReceive_sendEvent_905656 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_905656
													.next();

											// check object __DEC_messageReceive_sendEvent_905656 is really bound
											JavaSDM.ensure(__DEC_messageReceive_sendEvent_905656 != null);
											// check isomorphic binding between objects __DEC_messageReceive_sendEvent_905656 and message 
											JavaSDM.ensure(!__DEC_messageReceive_sendEvent_905656
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_463891
									fujaba__Success = false;

									fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_463891 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															messageSend,
															Message.class,
															"sendEvent"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_463891
													.hasNext()) {
										try {
											__DEC_messageSend_sendEvent_463891 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_463891
													.next();

											// check object __DEC_messageSend_sendEvent_463891 is really bound
											JavaSDM.ensure(__DEC_messageSend_sendEvent_463891 != null);
											// check isomorphic binding between objects __DEC_messageSend_sendEvent_463891 and message 
											JavaSDM.ensure(!__DEC_messageSend_sendEvent_463891
													.equals(message));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link message from message to __DEC_message_message_864359
									fujaba__Success = false;

									fujaba__IterMessageTo__DEC_message_message_864359 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															message,
															MessageEnd.class,
															"message"))
											.iterator();

									while (!(fujaba__Success)
											&& fujaba__IterMessageTo__DEC_message_message_864359
													.hasNext()) {
										try {
											__DEC_message_message_864359 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_864359
													.next();

											// check object __DEC_message_message_864359 is really bound
											JavaSDM.ensure(__DEC_message_message_864359 != null);
											// check isomorphic binding between objects __DEC_message_message_864359 and messageReceive 
											JavaSDM.ensure(!__DEC_message_message_864359
													.equals(messageReceive));

											// check isomorphic binding between objects __DEC_message_message_864359 and messageSend 
											JavaSDM.ensure(!__DEC_message_message_864359
													.equals(messageSend));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_interaction is really bound
								JavaSDM.ensure(_edge_interaction != null);
								// check object _edge_message is really bound
								JavaSDM.ensure(_edge_message != null);
								// check object interaction is really bound
								JavaSDM.ensure(interaction != null);
								// check object line is really bound
								JavaSDM.ensure(line != null);
								// check object message is really bound
								JavaSDM.ensure(message != null);
								// check object messageReceive is really bound
								JavaSDM.ensure(messageReceive != null);
								// check object messageSend is really bound
								JavaSDM.ensure(messageSend != null);
								// check isomorphic binding between objects _edge_message and _edge_interaction 
								JavaSDM.ensure(!_edge_message
										.equals(_edge_interaction));

								// check isomorphic binding between objects messageSend and messageReceive 
								JavaSDM.ensure(!messageSend
										.equals(messageReceive));

								// check link fragment from messageReceive to interaction
								JavaSDM.ensure(!(interaction
										.equals(messageReceive
												.getEnclosingInteraction())));

								// check link fragment from messageSend to interaction
								JavaSDM.ensure(!(interaction.equals(messageSend
										.getEnclosingInteraction())));

								// check link lifeline from line to interaction
								JavaSDM.ensure(interaction.equals(line
										.getInteraction()));

								// check link message from message to interaction
								JavaSDM.ensure(interaction.equals(message
										.getInteraction()));

								// check link message from messageReceive to message
								JavaSDM.ensure(message.equals(messageReceive
										.getMessage()));

								// check link message from messageSend to message
								JavaSDM.ensure(message.equals(messageSend
										.getMessage()));

								// check link receiveEvent from message to messageReceive
								JavaSDM.ensure(messageReceive.equals(message
										.getReceiveEvent()));

								// check link receiveEvent from message to messageSend
								JavaSDM.ensure(!(messageSend.equals(message
										.getReceiveEvent())));

								// check link sendEvent from message to messageSend
								JavaSDM.ensure(messageSend.equals(message
										.getSendEvent()));

								// check link sendEvent from message to messageReceive
								JavaSDM.ensure(!(messageReceive.equals(message
										.getSendEvent())));

								// check link src from _edge_interaction to message
								JavaSDM.ensure(message.equals(_edge_interaction
										.getSrc()));

								// check link src from _edge_message to interaction
								JavaSDM.ensure(interaction.equals(_edge_message
										.getSrc()));

								// check link trg from _edge_interaction to interaction
								JavaSDM.ensure(interaction
										.equals(_edge_interaction.getTrg()));

								// check link trg from _edge_message to message
								JavaSDM.ensure(message.equals(_edge_message
										.getTrg()));

								// check link covered from line to messageReceive
								JavaSDM.ensure(line.getCoveredBy().contains(
										messageReceive));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_BWD(match,
										message, interaction, messageSend,
										messageReceive, line);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_BWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_8(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_722399 = null;
		Interaction __DEC_messageSend_enclosingInteraction_68241 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_558006 = null;
		Message __DEC_messageReceive_receiveEvent_558006 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_65125 = null;
		Message __DEC_messageSend_receiveEvent_65125 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_302187 = null;
		Message __DEC_messageReceive_sendEvent_302187 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57563 = null;
		Message __DEC_messageSend_sendEvent_57563 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_884466 = null;
		MessageEnd __DEC_message_message_884466 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageSend
			JavaSDM.ensure(messageSend.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_722399 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_722399 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_722399 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_722399 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_722399
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_68241 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_68241 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_68241 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_68241 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_68241
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_558006
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_558006 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_558006
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_558006 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_558006
											.next();

									// check object __DEC_messageReceive_receiveEvent_558006 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_558006 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_558006 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_558006
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_65125
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_65125 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_65125
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_65125 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_65125
											.next();

									// check object __DEC_messageSend_receiveEvent_65125 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_65125 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_65125 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_65125
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_302187
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_302187 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_302187
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_302187 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_302187
											.next();

									// check object __DEC_messageReceive_sendEvent_302187 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_302187 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_302187 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_302187
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_57563
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57563 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57563
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_57563 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_57563
											.next();

									// check object __DEC_messageSend_sendEvent_57563 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_57563 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_57563 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_57563
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_884466
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_884466 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_884466
											.hasNext()) {
								try {
									__DEC_message_message_884466 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_884466
											.next();

									// check object __DEC_message_message_884466 is really bound
									JavaSDM.ensure(__DEC_message_message_884466 != null);
									// check isomorphic binding between objects __DEC_message_message_884466 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_884466
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_884466 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_884466
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageSend
						JavaSDM.ensure(messageSend.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_9(
			EMoflonEdge _edge_message) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_982255 = null;
		Interaction __DEC_messageSend_enclosingInteraction_962499 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_396785 = null;
		Message __DEC_messageReceive_receiveEvent_396785 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884766 = null;
		Message __DEC_messageSend_receiveEvent_884766 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_550904 = null;
		Message __DEC_messageReceive_sendEvent_550904 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819494 = null;
		Message __DEC_messageSend_sendEvent_819494 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_662373 = null;
		MessageEnd __DEC_message_message_662373 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		Interaction interaction = null;
		MessageOccurrenceSpecification messageSend = null;
		Message message = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_message is really bound
			JavaSDM.ensure(_edge_message != null);
			// bind object
			_TmpObject = _edge_message.getTrg();

			// ensure correct type and really bound of object message
			JavaSDM.ensure(_TmpObject instanceof Message);
			message = (Message) _TmpObject;

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = message.getReceiveEvent();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageReceive to message
			JavaSDM.ensure(message.equals(messageReceive.getMessage()));

			// check link src from _edge_message to messageReceive
			JavaSDM.ensure(messageReceive.equals(_edge_message.getSrc()));

			// iterate to-many link covered from messageReceive to line
			fujaba__Success = false;

			fujaba__IterMessageReceiveToLine = new ArrayList(
					messageReceive.getCovered()).iterator();

			while (fujaba__IterMessageReceiveToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterMessageReceiveToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link lifeline from line to interaction
					JavaSDM.ensure(interaction.equals(line.getInteraction()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_982255 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_982255 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_982255 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_982255 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_982255
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_962499 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_962499 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_962499 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_962499 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_962499
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_396785
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_396785 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_396785
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_396785 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_396785
											.next();

									// check object __DEC_messageReceive_receiveEvent_396785 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_396785 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_396785 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_396785
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_884766
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884766 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884766
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_884766 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_884766
											.next();

									// check object __DEC_messageSend_receiveEvent_884766 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_884766 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_884766 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_884766
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_550904
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_550904 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_550904
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_550904 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_550904
											.next();

									// check object __DEC_messageReceive_sendEvent_550904 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_550904 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_550904 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_550904
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_819494
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819494 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819494
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_819494 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_819494
											.next();

									// check object __DEC_messageSend_sendEvent_819494 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_819494 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_819494 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_819494
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_662373
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_662373 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_662373
											.hasNext()) {
								try {
									__DEC_message_message_662373 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_662373
											.next();

									// check object __DEC_message_message_662373 is really bound
									JavaSDM.ensure(__DEC_message_message_662373 != null);
									// check isomorphic binding between objects __DEC_message_message_662373 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_662373
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_662373 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_662373
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_message is really bound
						JavaSDM.ensure(_edge_message != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_message to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_message
								.getSrc()));

						// check link trg from _edge_message to message
						JavaSDM.ensure(message.equals(_edge_message.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_10(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_595591 = null;
		Interaction __DEC_messageSend_enclosingInteraction_382614 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_795810 = null;
		Message __DEC_messageReceive_receiveEvent_795810 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173515 = null;
		Message __DEC_messageSend_receiveEvent_173515 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_762564 = null;
		Message __DEC_messageReceive_sendEvent_762564 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_823759 = null;
		Message __DEC_messageSend_sendEvent_823759 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_158651 = null;
		MessageEnd __DEC_message_message_158651 = null;
		Match match = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// story node 'test core match and DECs'
			try {
				fujaba__Success = false;

				// negative check for link fragment from messageReceive
				JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
				// negative check for link fragment from messageSend
				JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageReceive_enclosingInteraction_595591 = messageReceive
							.getEnclosingInteraction();

					// check object __DEC_messageReceive_enclosingInteraction_595591 is really bound
					JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_595591 != null);

					// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_595591 and interaction 
					JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_595591
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// bind object
					__DEC_messageSend_enclosingInteraction_382614 = messageSend
							.getEnclosingInteraction();

					// check object __DEC_messageSend_enclosingInteraction_382614 is really bound
					JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_382614 != null);

					// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_382614 and interaction 
					JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_382614
							.equals(interaction));

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_795810
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_795810 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_795810
									.hasNext()) {
						try {
							__DEC_messageReceive_receiveEvent_795810 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_795810
									.next();

							// check object __DEC_messageReceive_receiveEvent_795810 is really bound
							JavaSDM.ensure(__DEC_messageReceive_receiveEvent_795810 != null);
							// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_795810 and message 
							JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_795810
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_173515
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173515 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "receiveEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173515
									.hasNext()) {
						try {
							__DEC_messageSend_receiveEvent_173515 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_173515
									.next();

							// check object __DEC_messageSend_receiveEvent_173515 is really bound
							JavaSDM.ensure(__DEC_messageSend_receiveEvent_173515 != null);
							// check isomorphic binding between objects __DEC_messageSend_receiveEvent_173515 and message 
							JavaSDM.ensure(!__DEC_messageSend_receiveEvent_173515
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_762564
					fujaba__Success = false;

					fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_762564 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageReceive,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_762564
									.hasNext()) {
						try {
							__DEC_messageReceive_sendEvent_762564 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_762564
									.next();

							// check object __DEC_messageReceive_sendEvent_762564 is really bound
							JavaSDM.ensure(__DEC_messageReceive_sendEvent_762564 != null);
							// check isomorphic binding between objects __DEC_messageReceive_sendEvent_762564 and message 
							JavaSDM.ensure(!__DEC_messageReceive_sendEvent_762564
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_823759
					fujaba__Success = false;

					fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_823759 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(messageSend,
											Message.class, "sendEvent"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_823759
									.hasNext()) {
						try {
							__DEC_messageSend_sendEvent_823759 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_823759
									.next();

							// check object __DEC_messageSend_sendEvent_823759 is really bound
							JavaSDM.ensure(__DEC_messageSend_sendEvent_823759 != null);
							// check isomorphic binding between objects __DEC_messageSend_sendEvent_823759 and message 
							JavaSDM.ensure(!__DEC_messageSend_sendEvent_823759
									.equals(message));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check negative bindings
				try {
					fujaba__Success = false;

					// iterate to-many link message from message to __DEC_message_message_158651
					fujaba__Success = false;

					fujaba__IterMessageTo__DEC_message_message_158651 = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(message,
											MessageEnd.class, "message"))
							.iterator();

					while (!(fujaba__Success)
							&& fujaba__IterMessageTo__DEC_message_message_158651
									.hasNext()) {
						try {
							__DEC_message_message_158651 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_158651
									.next();

							// check object __DEC_message_message_158651 is really bound
							JavaSDM.ensure(__DEC_message_message_158651 != null);
							// check isomorphic binding between objects __DEC_message_message_158651 and messageReceive 
							JavaSDM.ensure(!__DEC_message_message_158651
									.equals(messageReceive));

							// check isomorphic binding between objects __DEC_message_message_158651 and messageSend 
							JavaSDM.ensure(!__DEC_message_message_158651
									.equals(messageSend));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}

				fujaba__Success = !(fujaba__Success);

				JavaSDM.ensure(fujaba__Success);

				// check object _edge_coveredBy is really bound
				JavaSDM.ensure(_edge_coveredBy != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object message is really bound
				JavaSDM.ensure(message != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check link fragment from messageReceive to interaction
				JavaSDM.ensure(!(interaction.equals(messageReceive
						.getEnclosingInteraction())));

				// check link fragment from messageSend to interaction
				JavaSDM.ensure(!(interaction.equals(messageSend
						.getEnclosingInteraction())));

				// check link lifeline from line to interaction
				JavaSDM.ensure(interaction.equals(line.getInteraction()));

				// check link message from message to interaction
				JavaSDM.ensure(interaction.equals(message.getInteraction()));

				// check link message from messageReceive to message
				JavaSDM.ensure(message.equals(messageReceive.getMessage()));

				// check link message from messageSend to message
				JavaSDM.ensure(message.equals(messageSend.getMessage()));

				// check link receiveEvent from message to messageReceive
				JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

				// check link receiveEvent from message to messageSend
				JavaSDM.ensure(!(messageSend.equals(message.getReceiveEvent())));

				// check link sendEvent from message to messageSend
				JavaSDM.ensure(messageSend.equals(message.getSendEvent()));

				// check link sendEvent from message to messageReceive
				JavaSDM.ensure(!(messageReceive.equals(message.getSendEvent())));

				// check link src from _edge_coveredBy to line
				JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

				// check link trg from _edge_coveredBy to messageReceive
				JavaSDM.ensure(messageReceive.equals(_edge_coveredBy.getTrg()));

				// check link covered from line to messageReceive
				JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

				// create object match
				match = TGGRuntimeFactory.eINSTANCE.createMatch();

				// assign attribute match
				match.setRuleName(__eClass.getName());
				// statement node 'bookkeeping with generic isAppropriate method'
				fujaba__Success = this.isAppropriate_BWD(match, message,
						interaction, messageSend, messageReceive, line);
				if (fujaba__Success) {
					// statement node 'Ensure that the correct types of elements are matched'
					fujaba__Success = this.checkTypes_BWD(match);
					if (fujaba__Success) {
						// story node 'Add match to rule result'
						try {
							fujaba__Success = false;

							// check object __performOperation is really bound
							JavaSDM.ensure(__performOperation != null);
							// check object __result is really bound
							JavaSDM.ensure(__result != null);
							// check object match is really bound
							JavaSDM.ensure(match != null);

							// create link
							org.moflon.util.eMoflonEMFUtil
									.addOppositeReference(match,
											__performOperation,
											"isApplicableOperation");

							// create link
							__result.getContents().add(match);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

					} else {

					}

				} else {

				}
				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_11(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_123118 = null;
		Interaction __DEC_messageSend_enclosingInteraction_544555 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909195 = null;
		Message __DEC_messageReceive_receiveEvent_909195 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922662 = null;
		Message __DEC_messageSend_receiveEvent_922662 = null;
		Iterator fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111392 = null;
		Message __DEC_messageReceive_sendEvent_111392 = null;
		Iterator fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_618999 = null;
		Message __DEC_messageSend_sendEvent_618999 = null;
		Iterator fujaba__IterMessageTo__DEC_message_message_555051 = null;
		MessageEnd __DEC_message_message_555051 = null;
		Match match = null;
		Iterator fujaba__IterMessageReceiveTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Message message = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			message = messageReceive.getMessage();

			// check object message is really bound
			JavaSDM.ensure(message != null);

			// bind object
			interaction = message.getInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link receiveEvent from message to messageReceive
			JavaSDM.ensure(messageReceive.equals(message.getReceiveEvent()));

			// bind object
			_TmpObject = message.getSendEvent();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check link message from messageSend to message
			JavaSDM.ensure(message.equals(messageSend.getMessage()));

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// check link lifeline from line to interaction
			JavaSDM.ensure(interaction.equals(line.getInteraction()));

			// check link covered from line to messageReceive
			JavaSDM.ensure(line.getCoveredBy().contains(messageReceive));

			// iterate to-many link trg from messageReceive to _edge_coveredBy
			fujaba__Success = false;

			fujaba__IterMessageReceiveTo_edge_coveredBy = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							messageReceive, EMoflonEdge.class, "trg"))
					.iterator();

			while (fujaba__IterMessageReceiveTo_edge_coveredBy.hasNext()) {
				try {
					_edge_coveredBy = (EMoflonEdge) fujaba__IterMessageReceiveTo_edge_coveredBy
							.next();

					// check object _edge_coveredBy is really bound
					JavaSDM.ensure(_edge_coveredBy != null);
					// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
					JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

					// check link src from _edge_coveredBy to line
					JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

					// story node 'test core match and DECs'
					try {
						fujaba__Success = false;

						// negative check for link fragment from messageReceive
						JavaSDM.ensure(messageReceive.getEnclosingOperand() == null);
						// negative check for link fragment from messageSend
						JavaSDM.ensure(messageSend.getEnclosingOperand() == null);
						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageReceive_enclosingInteraction_123118 = messageReceive
									.getEnclosingInteraction();

							// check object __DEC_messageReceive_enclosingInteraction_123118 is really bound
							JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_123118 != null);

							// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_123118 and interaction 
							JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_123118
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// bind object
							__DEC_messageSend_enclosingInteraction_544555 = messageSend
									.getEnclosingInteraction();

							// check object __DEC_messageSend_enclosingInteraction_544555 is really bound
							JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_544555 != null);

							// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_544555 and interaction 
							JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_544555
									.equals(interaction));

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageReceive to __DEC_messageReceive_receiveEvent_909195
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909195 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909195
											.hasNext()) {
								try {
									__DEC_messageReceive_receiveEvent_909195 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_receiveEvent_909195
											.next();

									// check object __DEC_messageReceive_receiveEvent_909195 is really bound
									JavaSDM.ensure(__DEC_messageReceive_receiveEvent_909195 != null);
									// check isomorphic binding between objects __DEC_messageReceive_receiveEvent_909195 and message 
									JavaSDM.ensure(!__DEC_messageReceive_receiveEvent_909195
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link receiveEvent from messageSend to __DEC_messageSend_receiveEvent_922662
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922662 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class,
													"receiveEvent")).iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922662
											.hasNext()) {
								try {
									__DEC_messageSend_receiveEvent_922662 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_receiveEvent_922662
											.next();

									// check object __DEC_messageSend_receiveEvent_922662 is really bound
									JavaSDM.ensure(__DEC_messageSend_receiveEvent_922662 != null);
									// check isomorphic binding between objects __DEC_messageSend_receiveEvent_922662 and message 
									JavaSDM.ensure(!__DEC_messageSend_receiveEvent_922662
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageReceive to __DEC_messageReceive_sendEvent_111392
							fujaba__Success = false;

							fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111392 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(
													messageReceive,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111392
											.hasNext()) {
								try {
									__DEC_messageReceive_sendEvent_111392 = (Message) fujaba__IterMessageReceiveTo__DEC_messageReceive_sendEvent_111392
											.next();

									// check object __DEC_messageReceive_sendEvent_111392 is really bound
									JavaSDM.ensure(__DEC_messageReceive_sendEvent_111392 != null);
									// check isomorphic binding between objects __DEC_messageReceive_sendEvent_111392 and message 
									JavaSDM.ensure(!__DEC_messageReceive_sendEvent_111392
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link sendEvent from messageSend to __DEC_messageSend_sendEvent_618999
							fujaba__Success = false;

							fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_618999 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(messageSend,
													Message.class, "sendEvent"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_618999
											.hasNext()) {
								try {
									__DEC_messageSend_sendEvent_618999 = (Message) fujaba__IterMessageSendTo__DEC_messageSend_sendEvent_618999
											.next();

									// check object __DEC_messageSend_sendEvent_618999 is really bound
									JavaSDM.ensure(__DEC_messageSend_sendEvent_618999 != null);
									// check isomorphic binding between objects __DEC_messageSend_sendEvent_618999 and message 
									JavaSDM.ensure(!__DEC_messageSend_sendEvent_618999
											.equals(message));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check negative bindings
						try {
							fujaba__Success = false;

							// iterate to-many link message from message to __DEC_message_message_555051
							fujaba__Success = false;

							fujaba__IterMessageTo__DEC_message_message_555051 = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(message,
													MessageEnd.class, "message"))
									.iterator();

							while (!(fujaba__Success)
									&& fujaba__IterMessageTo__DEC_message_message_555051
											.hasNext()) {
								try {
									__DEC_message_message_555051 = (MessageEnd) fujaba__IterMessageTo__DEC_message_message_555051
											.next();

									// check object __DEC_message_message_555051 is really bound
									JavaSDM.ensure(__DEC_message_message_555051 != null);
									// check isomorphic binding between objects __DEC_message_message_555051 and messageReceive 
									JavaSDM.ensure(!__DEC_message_message_555051
											.equals(messageReceive));

									// check isomorphic binding between objects __DEC_message_message_555051 and messageSend 
									JavaSDM.ensure(!__DEC_message_message_555051
											.equals(messageSend));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}

						fujaba__Success = !(fujaba__Success);

						JavaSDM.ensure(fujaba__Success);

						// check object _edge_covered is really bound
						JavaSDM.ensure(_edge_covered != null);
						// check object _edge_coveredBy is really bound
						JavaSDM.ensure(_edge_coveredBy != null);
						// check object interaction is really bound
						JavaSDM.ensure(interaction != null);
						// check object line is really bound
						JavaSDM.ensure(line != null);
						// check object message is really bound
						JavaSDM.ensure(message != null);
						// check object messageReceive is really bound
						JavaSDM.ensure(messageReceive != null);
						// check object messageSend is really bound
						JavaSDM.ensure(messageSend != null);
						// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
						JavaSDM.ensure(!_edge_coveredBy.equals(_edge_covered));

						// check isomorphic binding between objects messageSend and messageReceive 
						JavaSDM.ensure(!messageSend.equals(messageReceive));

						// check link fragment from messageReceive to interaction
						JavaSDM.ensure(!(interaction.equals(messageReceive
								.getEnclosingInteraction())));

						// check link fragment from messageSend to interaction
						JavaSDM.ensure(!(interaction.equals(messageSend
								.getEnclosingInteraction())));

						// check link lifeline from line to interaction
						JavaSDM.ensure(interaction.equals(line.getInteraction()));

						// check link message from message to interaction
						JavaSDM.ensure(interaction.equals(message
								.getInteraction()));

						// check link message from messageReceive to message
						JavaSDM.ensure(message.equals(messageReceive
								.getMessage()));

						// check link message from messageSend to message
						JavaSDM.ensure(message.equals(messageSend.getMessage()));

						// check link receiveEvent from message to messageReceive
						JavaSDM.ensure(messageReceive.equals(message
								.getReceiveEvent()));

						// check link receiveEvent from message to messageSend
						JavaSDM.ensure(!(messageSend.equals(message
								.getReceiveEvent())));

						// check link sendEvent from message to messageSend
						JavaSDM.ensure(messageSend.equals(message
								.getSendEvent()));

						// check link sendEvent from message to messageReceive
						JavaSDM.ensure(!(messageReceive.equals(message
								.getSendEvent())));

						// check link src from _edge_covered to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_covered
								.getSrc()));

						// check link src from _edge_coveredBy to line
						JavaSDM.ensure(line.equals(_edge_coveredBy.getSrc()));

						// check link trg from _edge_covered to line
						JavaSDM.ensure(line.equals(_edge_covered.getTrg()));

						// check link trg from _edge_coveredBy to messageReceive
						JavaSDM.ensure(messageReceive.equals(_edge_coveredBy
								.getTrg()));

						// check link covered from line to messageReceive
						JavaSDM.ensure(line.getCoveredBy().contains(
								messageReceive));

						// create object match
						match = TGGRuntimeFactory.eINSTANCE.createMatch();

						// assign attribute match
						match.setRuleName(__eClass.getName());
						// statement node 'bookkeeping with generic isAppropriate method'
						fujaba__Success = this.isAppropriate_BWD(match,
								message, interaction, messageSend,
								messageReceive, line);
						if (fujaba__Success) {
							// statement node 'Ensure that the correct types of elements are matched'
							fujaba__Success = this.checkTypes_BWD(match);
							if (fujaba__Success) {
								// story node 'Add match to rule result'
								try {
									fujaba__Success = false;

									// check object __performOperation is really bound
									JavaSDM.ensure(__performOperation != null);
									// check object __result is really bound
									JavaSDM.ensure(__result != null);
									// check object match is really bound
									JavaSDM.ensure(match != null);

									// create link
									org.moflon.util.eMoflonEMFUtil
											.addOppositeReference(match,
													__performOperation,
													"isApplicableOperation");

									// create link
									__result.getContents().add(match);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

							} else {

							}

						} else {

						}
						fujaba__Success = true;
					} catch (JavaSDMException fujaba__InternalException) {
						fujaba__Success = false;
					}

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public int eDerivedOperationID(int baseOperationID, Class<?> baseClass) {
		if (baseClass == NormalStepToMessageRule.class) {
			switch (baseOperationID) {
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.NORMAL_STEP_TO_MESSAGE_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		if (baseClass == AltStepNFToComboRule.class) {
			switch (baseOperationID) {
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH;
			case RulesPackage.ALT_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
				return RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH;
			default:
				return -1;
			}
		}
		return super.eDerivedOperationID(baseOperationID, baseClass);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4),
					(NormalStep) arguments.get(5),
					(AlternativeFlowAlternative) arguments.get(6),
					(AlternativeFlow) arguments.get(7),
					(UseCase) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_LIFELINE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTORTOLIFELINE:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(NamedFlow) arguments.get(8),
					(FlowToInteractionFragment) arguments.get(9),
					(Lifeline) arguments.get(10),
					(NormalStep) arguments.get(11),
					(AlternativeFlowAlternative) arguments.get(12),
					(AlternativeFlow) arguments.get(13),
					(UseCase) arguments.get(14),
					(UseCaseToInteraction) arguments.get(15),
					(Interaction) arguments.get(16),
					(ActorToLifeline) arguments.get(17));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26),
					(EObject) arguments.get(27), (EObject) arguments.get(28));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(InteractionConstraint) arguments.get(9),
					(LiteralString) arguments.get(10),
					(Message) arguments.get(11),
					(Interaction) arguments.get(12));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTORTOLIFELINE:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(InteractionOperand) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(CombinedFragment) arguments.get(10),
					(NamedFlow) arguments.get(11),
					(FlowToInteractionFragment) arguments.get(12),
					(MessageOccurrenceSpecification) arguments.get(13),
					(Lifeline) arguments.get(14),
					(InteractionConstraint) arguments.get(15),
					(LiteralString) arguments.get(16),
					(UseCase) arguments.get(17),
					(UseCaseToInteraction) arguments.get(18),
					(Message) arguments.get(19),
					(Interaction) arguments.get(20),
					(ActorToLifeline) arguments.get(21));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26),
					(EObject) arguments.get(27), (EObject) arguments.get(28));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_250__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_250((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_251__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_251((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_252__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_252((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_253__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_253((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_254__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_254((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_255__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_255((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_256__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_256((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_257__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_257((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_258__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_258((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_259__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_259((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_260__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_260((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_261__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_261((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_262__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_262((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_263__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_263((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_264__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_264((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_265__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_265((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_266__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_266((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_267__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_267((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_268__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_268((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_269__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_269((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_54__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_54((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_270__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_270((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_271__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_271((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_272__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_272((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_273__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_273((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_274__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_274((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_275__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_275((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NAMEDFLOW_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(NormalStep) arguments.get(2),
					(AlternativeFlowAlternative) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5), (Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_LIFELINE_COMBINEDFRAGMENT_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8),
					(UseCase) arguments.get(9),
					(UseCaseToInteraction) arguments.get(10),
					(Interaction) arguments.get(11), (Actor) arguments.get(12),
					(ActorToLifeline) arguments.get(13),
					(PackageDeclaration) arguments.get(14));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_INTERACTIONOPERAND_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(InteractionOperand) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(Lifeline) arguments.get(4),
					(CombinedFragment) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(InteractionOperand) arguments.get(7),
					(InteractionConstraint) arguments.get(8),
					(LiteralString) arguments.get(9),
					(Message) arguments.get(10),
					(Interaction) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_NAMEDFLOW_INTERACTIONOPERAND_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_COMBINEDFRAGMENT_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_MESSAGE_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(NamedFlow) arguments.get(1),
					(InteractionOperand) arguments.get(2),
					(FlowToInteractionFragment) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(MessageOccurrenceSpecification) arguments.get(5),
					(Lifeline) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(CombinedFragment) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(Message) arguments.get(14),
					(Interaction) arguments.get(15), (Actor) arguments.get(16),
					(ActorToLifeline) arguments.get(17),
					(PackageDeclaration) arguments.get(18));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_53__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_53((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_54__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_54((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_55__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_55((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_56__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_56((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_57__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_57((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_58__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_58((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_59__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_59((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_60__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_60((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_61__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_61((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_62__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_62((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_14__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_14((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_15__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_15((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_63__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_63((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_64__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_64((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_65__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_65((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_66__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_66((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_67__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_67((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_16__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_16((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_17__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_17((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_68__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_68((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_69__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_69((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_70__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_70((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_71__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_71((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_72__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_72((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_73__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_73((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW_USECASE_FLOW_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(AlternativeFlow) arguments.get(3),
					(UseCase) arguments.get(4), (Flow) arguments.get(5),
					(Actor) arguments.get(6),
					(PackageDeclaration) arguments.get(7));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_LIFELINE_ALTERNATIVEFLOW_USECASE_USECASETOINTERACTION_FLOW_INTERACTION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(NormalStep) arguments.get(1),
					(AlternativeFlowAlternative) arguments.get(2),
					(Lifeline) arguments.get(3),
					(AlternativeFlow) arguments.get(4),
					(UseCase) arguments.get(5),
					(UseCaseToInteraction) arguments.get(6),
					(Flow) arguments.get(7), (Interaction) arguments.get(8),
					(Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10),
					(PackageDeclaration) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(Message) arguments.get(6), (Interaction) arguments.get(7),
					(MessageOccurrenceSpecification) arguments.get(8),
					(MessageOccurrenceSpecification) arguments.get(9));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_COMBINEDFRAGMENT_LIFELINE_INTERACTIONOPERAND_INTERACTIONCONSTRAINT_LITERALSTRING_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(CombinedFragment) arguments.get(1),
					(Lifeline) arguments.get(2),
					(InteractionOperand) arguments.get(3),
					(InteractionConstraint) arguments.get(4),
					(LiteralString) arguments.get(5),
					(UseCase) arguments.get(6),
					(UseCaseToInteraction) arguments.get(7),
					(Flow) arguments.get(8), (Message) arguments.get(9),
					(Interaction) arguments.get(10),
					(MessageOccurrenceSpecification) arguments.get(11),
					(MessageOccurrenceSpecification) arguments.get(12),
					(Actor) arguments.get(13),
					(ActorToLifeline) arguments.get(14),
					(PackageDeclaration) arguments.get(15));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_38__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_38((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_39__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_39((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_40__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_40((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_41__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_41((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_42__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_42((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_43__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_43((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_44__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_44((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_12__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_12((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_13__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_13((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_45__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_45((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_46__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_46((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_47__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_47((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_48__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_48((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_49__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_49((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_50__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_50((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_51__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_51((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_52__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_52((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4),
					(PackageDeclaration) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4),
					(PackageDeclaration) arguments.get(5));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_USECASE_FLOW_NORMALSTEP_ACTOR_PACKAGEDECLARATION:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(UseCase) arguments.get(1), (Flow) arguments.get(2),
					(NormalStep) arguments.get(3), (Actor) arguments.get(4),
					(PackageDeclaration) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_NORMALSTEP_INTERACTION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (NormalStep) arguments.get(4),
					(Interaction) arguments.get(5),
					(Lifeline) arguments.get(6), (Actor) arguments.get(7),
					(ActorToLifeline) arguments.get(8),
					(PackageDeclaration) arguments.get(9));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Message) arguments.get(1), (Interaction) arguments.get(2),
					(MessageOccurrenceSpecification) arguments.get(3),
					(MessageOccurrenceSpecification) arguments.get(4),
					(Lifeline) arguments.get(5));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_USECASE_USECASETOINTERACTION_FLOW_MESSAGE_INTERACTION_MESSAGEOCCURRENCESPECIFICATION_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_ACTOR_ACTORTOLIFELINE_PACKAGEDECLARATION:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(UseCase) arguments.get(1),
					(UseCaseToInteraction) arguments.get(2),
					(Flow) arguments.get(3), (Message) arguments.get(4),
					(Interaction) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8), (Actor) arguments.get(9),
					(ActorToLifeline) arguments.get(10),
					(PackageDeclaration) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_4__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_4((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_5__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_5((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_6__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_6((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_7__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_7((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_8__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_8((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_9__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_9((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_10__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_10((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_11__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_11((EMoflonEdge) arguments
					.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //AltUserStepNFToComboRuleImpl
