/**
 */
package UseCaseToModalSequenceDiagramIntegration.Rules.impl;

import ModalSequenceDiagram.CombinedFragment;
import ModalSequenceDiagram.Constraint;
import ModalSequenceDiagram.Interaction;
import ModalSequenceDiagram.InteractionConstraint;
import ModalSequenceDiagram.InteractionOperand;
import ModalSequenceDiagram.Lifeline;
import ModalSequenceDiagram.LiteralString;
import ModalSequenceDiagram.Message;
import ModalSequenceDiagram.MessageEnd;
import ModalSequenceDiagram.MessageOccurrenceSpecification;
import ModalSequenceDiagram.ModalSequenceDiagramFactory;
import ModalSequenceDiagram.Model;

import TGGRuntime.EMoflonEdge;
import TGGRuntime.EObjectContainer;
import TGGRuntime.IsApplicableMatch;
import TGGRuntime.IsApplicableRuleResult;
import TGGRuntime.Match;
import TGGRuntime.PerformRuleResult;
import TGGRuntime.RuleResult;
import TGGRuntime.TGGRuntimeFactory;
import TGGRuntime.TripleMatch;

import TGGRuntime.impl.AbstractRuleImpl;

import UseCaseDSL.Actor;
import UseCaseDSL.AlternativeFlow;
import UseCaseDSL.AlternativeFlowAlternative;
import UseCaseDSL.BasicFlow;
import UseCaseDSL.Flow;
import UseCaseDSL.NamedFlow;
import UseCaseDSL.NormalStep;
import UseCaseDSL.PackageDeclaration;
import UseCaseDSL.ParallelFlow;
import UseCaseDSL.ParallelStep;
import UseCaseDSL.UseCase;
import UseCaseDSL.UseCaseDSLFactory;
import UseCaseDSL.UseCasesModel;

import UseCaseToModalSequenceDiagramIntegration.ActorToLifeline;
import UseCaseToModalSequenceDiagramIntegration.FlowToInteractionFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToCombinedFragment;
import UseCaseToModalSequenceDiagramIntegration.NormalStepToMessage;
import UseCaseToModalSequenceDiagramIntegration.PackageDeclarationToPackage;
import UseCaseToModalSequenceDiagramIntegration.ParallelStepToCombinedFragment;

import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltStepToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.AltUserStepNFToComboRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.NormalStepToMessageRule;
import UseCaseToModalSequenceDiagramIntegration.Rules.RulesPackage;

import UseCaseToModalSequenceDiagramIntegration.StepAlternativeToInteractionOperand;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToInteraction;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToMessage;
import UseCaseToModalSequenceDiagramIntegration.UseCaseToModalSequenceDiagramIntegrationFactory;
import UseCaseToModalSequenceDiagramIntegration.UseCasesModelToModel;

import de.upb.tools.sdm.*;

import java.lang.reflect.InvocationTargetException;

import java.util.*;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EOperation;

import org.moflon.csp.CSPFactoryHelper;
// <-- [user defined imports]
import org.moflon.csp.*;
import csp.constraints.*;
import TGGLanguage.csp.*;

// [user defined imports] -->

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alt User Step NF To Combo Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * </p>
 *
 * @generated
 */
public class AltUserStepNFToComboRuleImpl extends AbstractRuleImpl implements
		AltUserStepNFToComboRule {
	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AltUserStepNFToComboRuleImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return RulesPackage.eINSTANCE.getAltUserStepNFToComboRule();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_FWD(match,
					packageDeclaration, actor, sysActor, flow, useCase, step,
					alt, altFlow));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_FWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __step_actor_actor
				__step_actor_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __step_stepAlternative_alt
				__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __alt_ref_altFlow
				__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __flow_steps_step
				__flow_steps_step = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __flow_steps_step
				__flow_steps_step.setName("steps");
				// assign attribute __step_stepAlternative_alt
				__step_stepAlternative_alt.setName("stepAlternative");
				// assign attribute __step_actor_actor
				__step_actor_actor.setName("actor");
				// assign attribute __alt_ref_altFlow
				__alt_ref_altFlow.setName("ref");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_actor_actor, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__step_stepAlternative_alt, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__alt_ref_altFlow, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						step, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						altFlow, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match, alt,
						"toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__flow_steps_step, "toBeTranslatedEdges");

				// create link
				__step_actor_actor.setTrg(actor);

				// create link
				__flow_steps_step.setSrc(flow);

				// create link
				__flow_steps_step.setTrg(step);

				// create link
				__step_actor_actor.setSrc(step);

				// create link
				__step_stepAlternative_alt.setSrc(step);

				// create link
				__step_stepAlternative_alt.setTrg(alt);

				// create link
				__alt_ref_altFlow.setSrc(alt);

				// create link
				__alt_ref_altFlow.setTrg(altFlow);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object actor is really bound
				JavaSDM.ensure(actor != null);
				// check object alt is really bound
				JavaSDM.ensure(alt != null);
				// check object altFlow is really bound
				JavaSDM.ensure(altFlow != null);
				// check object flow is really bound
				JavaSDM.ensure(flow != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object packageDeclaration is really bound
				JavaSDM.ensure(packageDeclaration != null);
				// check object step is really bound
				JavaSDM.ensure(step != null);
				// check object sysActor is really bound
				JavaSDM.ensure(sysActor != null);
				// check object useCase is really bound
				JavaSDM.ensure(useCase != null);
				// check isomorphic binding between objects sysActor and actor 
				JavaSDM.ensure(!sysActor.equals(actor));

				// check isomorphic binding between objects flow and altFlow 
				JavaSDM.ensure(!flow.equals(altFlow));

				// create object __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __useCase_flows_flow
				__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __packageDeclaration_actors_actor
				__packageDeclaration_actors_actor.setName("actors");
				// assign attribute __packageDeclaration_actors_sysActor
				__packageDeclaration_actors_sysActor.setName("actors");
				// assign attribute __useCase_flows_flow
				__useCase_flows_flow.setName("flows");
				// assign attribute __packageDeclaration_useCases_useCase
				__packageDeclaration_useCases_useCase.setName("useCases");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_actor, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						useCase, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_useCases_useCase, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__useCase_flows_flow, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						packageDeclaration, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						actor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						flow, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysActor, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__packageDeclaration_actors_sysActor, "contextEdges");

				// create link
				__packageDeclaration_actors_actor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_useCases_useCase
						.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_sysActor.setSrc(packageDeclaration);

				// create link
				__packageDeclaration_actors_actor.setTrg(actor);

				// create link
				__packageDeclaration_actors_sysActor.setTrg(sysActor);

				// create link
				__useCase_flows_flow.setTrg(flow);

				// create link
				__packageDeclaration_useCases_useCase.setTrg(useCase);

				// create link
				__useCase_flows_flow.setSrc(useCase);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_FWD(match, packageDeclaration, actor,
					sysActor, flow, useCase, step, alt, altFlow);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_FWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Interaction interaction = null;
		Lifeline line = null;
		PackageDeclaration packageDeclaration = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		NormalStep step = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment combo = null;
		NormalStepToCombinedFragment stepToCombo = null;
		InteractionConstraint guard = null;
		FlowToInteractionFragment altFlowToOperand = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge sysLine__coveredBy__parentOperand = null;
		EMoflonEdge sysLine__coveredBy__messageSend = null;
		EMoflonEdge interaction__fragment__combo = null;
		EMoflonEdge messageSend__covered__sysLine = null;
		EMoflonEdge line__coveredBy__operand = null;
		EMoflonEdge line__coveredBy__parentOperand = null;
		EMoflonEdge combo__covered__sysLine = null;
		EMoflonEdge guard__specification__spec = null;
		EMoflonEdge combo__enclosingInteraction__interaction = null;
		EMoflonEdge sysLine__coveredBy__operand = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge parentOperand__covered__sysLine = null;
		EMoflonEdge line__coveredBy__parentCombo = null;
		EMoflonEdge operand__covered__line = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge messageReceive__enclosingOperand__parentOperand = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge operand__guard__guard = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge sysLine__coveredBy__combo = null;
		EMoflonEdge operand__covered__sysLine = null;
		EMoflonEdge parentCombo__covered__sysLine = null;
		EMoflonEdge parentCombo__covered__line = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __alt_ref_altFlow = null;
		EMoflonEdge parentOperand__covered__line = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge parentOperand__fragment__messageReceive = null;
		EMoflonEdge sysLine__coveredBy__parentCombo = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object messageSend
			messageSend = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object operand
			operand = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionOperand();

			// create object combo
			combo = ModalSequenceDiagramFactory.eINSTANCE
					.createCombinedFragment();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object guard
			guard = ModalSequenceDiagramFactory.eINSTANCE
					.createInteractionConstraint();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object messageReceive
			messageReceive = ModalSequenceDiagramFactory.eINSTANCE
					.createMessageOccurrenceSpecification();

			// create object spec
			spec = ModalSequenceDiagramFactory.eINSTANCE.createLiteralString();

			// assign attribute combo
			combo.setInteractionOperator((ModalSequenceDiagram.InteractionOperatorKind) csp
					.getValue("combo", "interactionOperator"));
			// assign attribute guard
			guard.setName((java.lang.String) csp.getValue("guard", "name"));
			// assign attribute spec
			spec.setValue((java.lang.String) csp.getValue("spec", "value"));

			// create link
			altFlowToOperand.setSource(altFlow);

			// create link
			messageSend.getCovered().add(sysLine);

			// create link
			operand.getCovered().add(sysLine);

			// create link
			parentOperand.getCovered().add(sysLine);

			// create link
			combo.getCovered().add(sysLine);

			// create link
			parentCombo.getCovered().add(sysLine);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			interaction.getFragment().add(combo);

			// create link
			operand.setGuard(guard); // add link to one

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			line.getCoveredBy().add(operand);

			// create link
			messageReceive.setEnclosingOperand(parentOperand);

			// create link
			line.getCoveredBy().add(parentOperand);

			// create link
			line.getCoveredBy().add(parentCombo);

			// create link
			stepToCombo.setSource(step);

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			guard.setSpecification(spec); // add link to one

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "createdElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object interaction__fragment__combo
			interaction__fragment__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object messageSend__covered__sysLine
			messageSend__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__operand
			line__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentOperand
			line__coveredBy__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__covered__sysLine
			combo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object guard__specification__spec
			guard__specification__spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object combo__enclosingInteraction__interaction
			combo__enclosingInteraction__interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__operand
			sysLine__coveredBy__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__covered__sysLine
			parentOperand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object line__coveredBy__parentCombo
			line__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__line
			operand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __flow_steps_step
			__flow_steps_step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__guard__guard
			operand__guard__guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__combo
			sysLine__coveredBy__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object operand__covered__sysLine
			operand__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__sysLine
			parentCombo__covered__sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentCombo__covered__line
			parentCombo__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_actor_actor
			__step_actor_actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __alt_ref_altFlow
			__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object parentOperand__covered__line
			parentOperand__covered__line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __step_stepAlternative_alt
			__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute sysLine__coveredBy__messageSend
			sysLine__coveredBy__messageSend.setName("coveredBy");
			// assign attribute messageSend__covered__sysLine
			messageSend__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__combo
			sysLine__coveredBy__combo.setName("coveredBy");
			// assign attribute combo__covered__sysLine
			combo__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__operand
			sysLine__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__sysLine
			operand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentOperand
			sysLine__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__sysLine
			parentOperand__covered__sysLine.setName("covered");
			// assign attribute sysLine__coveredBy__parentCombo
			sysLine__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__sysLine
			parentCombo__covered__sysLine.setName("covered");
			// assign attribute parentOperand__fragment__messageReceive
			parentOperand__fragment__messageReceive.setName("fragment");
			// assign attribute messageReceive__enclosingOperand__parentOperand
			messageReceive__enclosingOperand__parentOperand
					.setName("enclosingOperand");
			// assign attribute line__coveredBy__parentOperand
			line__coveredBy__parentOperand.setName("coveredBy");
			// assign attribute parentOperand__covered__line
			parentOperand__covered__line.setName("covered");
			// assign attribute line__coveredBy__parentCombo
			line__coveredBy__parentCombo.setName("coveredBy");
			// assign attribute parentCombo__covered__line
			parentCombo__covered__line.setName("covered");
			// assign attribute combo__enclosingInteraction__interaction
			combo__enclosingInteraction__interaction
					.setName("enclosingInteraction");
			// assign attribute interaction__fragment__combo
			interaction__fragment__combo.setName("fragment");
			// assign attribute __flow_steps_step
			__flow_steps_step.setName("steps");
			// assign attribute __step_stepAlternative_alt
			__step_stepAlternative_alt.setName("stepAlternative");
			// assign attribute __step_actor_actor
			__step_actor_actor.setName("actor");
			// assign attribute __alt_ref_altFlow
			__alt_ref_altFlow.setName("ref");
			// assign attribute line__coveredBy__operand
			line__coveredBy__operand.setName("coveredBy");
			// assign attribute operand__covered__line
			operand__covered__line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute operand__guard__guard
			operand__guard__guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute guard__specification__spec
			guard__specification__spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__messageSend, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					interaction__fragment__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentOperand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard__specification__spec, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo__enclosingInteraction__interaction, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					line__coveredBy__parentCombo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__flow_steps_step, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive__enclosingOperand__parentOperand,
					"createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__guard__guard, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__sysLine, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentCombo__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_actor_actor, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__alt_ref_altFlow, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__covered__line, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__step_stepAlternative_alt, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					parentOperand__fragment__messageReceive, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					sysLine__coveredBy__parentCombo, "createdEdges");

			// create link
			__step_actor_actor.setTrg(actor);

			// create link
			sysLine__coveredBy__parentOperand.setSrc(sysLine);

			// create link
			operand__covered__sysLine.setTrg(sysLine);

			// create link
			messageSend__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__operand.setSrc(sysLine);

			// create link
			parentOperand__covered__sysLine.setTrg(sysLine);

			// create link
			combo__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__parentCombo.setSrc(sysLine);

			// create link
			parentCombo__covered__sysLine.setTrg(sysLine);

			// create link
			sysLine__coveredBy__combo.setSrc(sysLine);

			// create link
			sysLine__coveredBy__messageSend.setSrc(sysLine);

			// create link
			sysLine__coveredBy__messageSend.setTrg(messageSend);

			// create link
			messageSend__covered__sysLine.setSrc(messageSend);

			// create link
			interaction__fragment__combo.setTrg(combo);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			combo__covered__sysLine.setSrc(combo);

			// create link
			sysLine__coveredBy__combo.setTrg(combo);

			// create link
			combo__enclosingInteraction__interaction.setSrc(combo);

			// create link
			operand__covered__sysLine.setSrc(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			sysLine__coveredBy__operand.setTrg(operand);

			// create link
			line__coveredBy__operand.setTrg(operand);

			// create link
			operand__guard__guard.setSrc(operand);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			operand__covered__line.setSrc(operand);

			// create link
			parentOperand__covered__sysLine.setSrc(parentOperand);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setTrg(parentOperand);

			// create link
			line__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			parentOperand__covered__line.setSrc(parentOperand);

			// create link
			sysLine__coveredBy__parentOperand.setTrg(parentOperand);

			// create link
			parentOperand__fragment__messageReceive.setSrc(parentOperand);

			// create link
			parentCombo__covered__line.setSrc(parentCombo);

			// create link
			parentCombo__covered__sysLine.setSrc(parentCombo);

			// create link
			line__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			sysLine__coveredBy__parentCombo.setTrg(parentCombo);

			// create link
			__flow_steps_step.setSrc(flow);

			// create link
			messageReceive__enclosingOperand__parentOperand
					.setSrc(messageReceive);

			// create link
			parentOperand__fragment__messageReceive.setTrg(messageReceive);

			// create link
			parentOperand__covered__line.setTrg(line);

			// create link
			line__coveredBy__operand.setSrc(line);

			// create link
			line__coveredBy__parentOperand.setSrc(line);

			// create link
			operand__covered__line.setTrg(line);

			// create link
			line__coveredBy__parentCombo.setSrc(line);

			// create link
			parentCombo__covered__line.setTrg(line);

			// create link
			combo__enclosingInteraction__interaction.setTrg(interaction);

			// create link
			interaction__fragment__combo.setSrc(interaction);

			// create link
			__step_stepAlternative_alt.setSrc(step);

			// create link
			__step_actor_actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			__flow_steps_step.setTrg(step);

			// create link
			__alt_ref_altFlow.setSrc(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			__step_stepAlternative_alt.setTrg(alt);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			operand__guard__guard.setTrg(guard);

			// create link
			guard__specification__spec.setSrc(guard);

			// create link
			guard__specification__spec.setTrg(spec);

			// create link
			__alt_ref_altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_FWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_FWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		Actor actor = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		NormalStep step = null;
		Actor sysActor = null;
		UseCase useCase = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __step_actor_actor = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __flow_steps_step = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __step_stepAlternative_alt = null;
		EMoflonEdge __alt_ref_altFlow = null;
		CSP csp = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterUseCaseToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterSysActorToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterFlowToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;
		Lifeline line = null;
		Iterator fujaba__IterActorToActorToLine = null;
		ActorToLifeline actorToLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("alt"));

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;
			_TmpObject = (match.getObject("altFlow"));

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;
			_TmpObject = (match.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (match.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (match.getObject("step"));

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;
			_TmpObject = (match.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (match.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// iterate to-many link source from actor to actorToLine
			fujaba__Success = false;

			fujaba__IterActorToActorToLine = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(actor,
							ActorToLifeline.class, "source")).iterator();

			while (fujaba__IterActorToActorToLine.hasNext()) {
				try {
					actorToLine = (ActorToLifeline) fujaba__IterActorToActorToLine
							.next();

					// check object actorToLine is really bound
					JavaSDM.ensure(actorToLine != null);
					// bind object
					line = actorToLine.getTarget();

					// check object line is really bound
					JavaSDM.ensure(line != null);

					// iterate to-many link source from flow to flowToParentOperand
					fujaba__Success = false;

					fujaba__IterFlowToFlowToParentOperand = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(flow,
											FlowToInteractionFragment.class,
											"source")).iterator();

					while (fujaba__IterFlowToFlowToParentOperand.hasNext()) {
						try {
							flowToParentOperand = (FlowToInteractionFragment) fujaba__IterFlowToFlowToParentOperand
									.next();

							// check object flowToParentOperand is really bound
							JavaSDM.ensure(flowToParentOperand != null);
							// bind object
							_TmpObject = flowToParentOperand.getTarget();

							// ensure correct type and really bound of object parentOperand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							parentOperand = (InteractionOperand) _TmpObject;

							// iterate to-many link source from sysActor to sysActorToSysLine
							fujaba__Success = false;

							fujaba__IterSysActorToSysActorToSysLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(sysActor,
													ActorToLifeline.class,
													"source")).iterator();

							while (fujaba__IterSysActorToSysActorToSysLine
									.hasNext()) {
								try {
									sysActorToSysLine = (ActorToLifeline) fujaba__IterSysActorToSysActorToSysLine
											.next();

									// check object sysActorToSysLine is really bound
									JavaSDM.ensure(sysActorToSysLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									sysLine = sysActorToSysLine.getTarget();

									// check object sysLine is really bound
									JavaSDM.ensure(sysLine != null);

									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// iterate to-many link source from useCase to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterUseCaseToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															useCase,
															UseCaseToInteraction.class,
															"source"))
											.iterator();

									while (fujaba__IterUseCaseToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterUseCaseToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											interaction = useCaseToInteraction
													.getTarget();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object alt is really bound
												JavaSDM.ensure(alt != null);
												// check object altFlow is really bound
												JavaSDM.ensure(altFlow != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object step is really bound
												JavaSDM.ensure(step != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects flow and altFlow 
												JavaSDM.ensure(!flow
														.equals(altFlow));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check link actor from step to actor
												JavaSDM.ensure(actor
														.equals(step.getActor()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// check link ref from alt to altFlow
												JavaSDM.ensure(altFlow
														.equals(alt.getRef()));

												// check link actors from actor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(actor
																.eContainer()));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// bind object
												parentCombo = parentOperand
														.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
														.eContainer() : null;

												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);

												// check if contained via correct reference
												JavaSDM.ensure(parentCombo
														.getOperand().contains(
																parentOperand));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link stepAlternative from alt to step
												JavaSDM.ensure(step.equals(alt
														.eContainer()));

												// check link steps from step to flow
												JavaSDM.ensure(flow.equals(step
														.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// check link useCases from useCase to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(useCase
																.eContainer()));

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __step_actor_actor
												__step_actor_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flow_steps_step
												__flow_steps_step = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __step_stepAlternative_alt
												__step_stepAlternative_alt = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __alt_ref_altFlow
												__alt_ref_altFlow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand
														.setName("operand");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __flow_steps_step
												__flow_steps_step
														.setName("steps");
												// assign attribute __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase
														.setName("useCases");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");
												// assign attribute __step_stepAlternative_alt
												__step_stepAlternative_alt
														.setName("stepAlternative");
												// assign attribute __step_actor_actor
												__step_actor_actor
														.setName("actor");
												// assign attribute __alt_ref_altFlow
												__alt_ref_altFlow
														.setName("ref");

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_useCases_useCase
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												__step_actor_actor
														.setTrg(actor);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setTrg(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setSrc(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												__flow_steps_step.setSrc(flow);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												__packageDeclaration_useCases_useCase
														.setTrg(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												__step_actor_actor.setSrc(step);

												// create link
												__flow_steps_step.setTrg(step);

												// create link
												__step_stepAlternative_alt
														.setSrc(step);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(step);

												// create link
												__step_stepAlternative_alt
														.setTrg(alt);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(alt);

												// create link
												__alt_ref_altFlow.setSrc(alt);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(altFlow);

												// create link
												__alt_ref_altFlow
														.setTrg(altFlow);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_stepAlternative_alt,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__alt_ref_altFlow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__step_actor_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_useCases_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_operand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flow_steps_step,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_FWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	line,
																	interaction,
																	useCase,
																	useCaseToInteraction,
																	actorToLine,
																	step, alt,
																	altFlow));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_FWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		match.registerObject("packageDeclaration", packageDeclaration);
		match.registerObject("actor", actor);
		match.registerObject("sysActor", sysActor);
		match.registerObject("flow", flow);
		match.registerObject("useCase", useCase);
		match.registerObject("step", step);
		match.registerObject("alt", alt);
		match.registerObject("altFlow", altFlow);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_FWD(Match match,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			NamedFlow flow, UseCase useCase, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_FWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			InteractionOperand parentOperand, CombinedFragment parentCombo,
			NamedFlow flow, FlowToInteractionFragment flowToParentOperand,
			Lifeline line, Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, NormalStep step,
			AlternativeFlowAlternative alt, AlternativeFlow altFlow) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", true, csp);
		var_altFlow_name.setValue(altFlow.getName());
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", true, csp);
		var_alt_condition.setValue(alt.getCondition());
		var_alt_condition.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", csp);
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", csp);
		var_spec_value.setType("");
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", csp);
		var_combo_interactionOperator.setType("EObject");

		// Create constraints
		Eq eq = new Eq();
		Eq eq_0 = new Eq();
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);
		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("step", step);
		isApplicableMatch.registerObject("alt", alt);
		isApplicableMatch.registerObject("altFlow", altFlow);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_FWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_FWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_FWD(Match match) {
		return true
				&& match.getObject("step")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getNormalStep())
				&& match.getObject("alt")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlowAlternative())
				&& match.getObject("altFlow")
						.eClass()
						.equals(UseCaseDSL.UseCaseDSLPackage.eINSTANCE
								.getAlternativeFlow());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		CSP csp = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __interaction_fragment_combo = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __combo_enclosingInteraction_interaction = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __interaction_lifeline_line = null;

		// story node 'initial bindings'
		try {
			fujaba__Success = false;

			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'Solve CSP'
		try {
			fujaba__Success = false;

			_TmpObject = (this.isAppropriate_solveCsp_BWD(match, sysLine,
					messageSend, combo, operand, parentOperand, parentCombo,
					messageReceive, line, interaction, guard, spec));

			// ensure correct type and really bound of object csp
			JavaSDM.ensure(_TmpObject instanceof CSP);
			csp = (CSP) _TmpObject;
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'Check CSP'
		fujaba__Success = this.isAppropriate_checkCsp_BWD(csp);
		if (fujaba__Success) {
			// story node 'collect elements to be translated'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_line
				__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_fragment_combo
				__interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __guard_specification_spec
				__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_guard_guard
				__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageSend_covered_sysLine
				__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_operand
				__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_sysLine
				__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_covered_sysLine
				__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_covered_line
				__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __combo_enclosingInteraction_interaction
				__combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __operand_covered_line
				__operand_covered_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __sysLine_coveredBy_messageSend
				__sysLine_coveredBy_messageSend.setName("coveredBy");
				// assign attribute __messageSend_covered_sysLine
				__messageSend_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_combo
				__sysLine_coveredBy_combo.setName("coveredBy");
				// assign attribute __combo_covered_sysLine
				__combo_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_operand
				__sysLine_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_sysLine
				__operand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentOperand
				__sysLine_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_sysLine
				__parentOperand_covered_sysLine.setName("covered");
				// assign attribute __sysLine_coveredBy_parentCombo
				__sysLine_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_sysLine
				__parentCombo_covered_sysLine.setName("covered");
				// assign attribute __parentOperand_fragment_messageReceive
				__parentOperand_fragment_messageReceive.setName("fragment");
				// assign attribute __messageReceive_enclosingOperand_parentOperand
				__messageReceive_enclosingOperand_parentOperand
						.setName("enclosingOperand");
				// assign attribute __line_coveredBy_parentOperand
				__line_coveredBy_parentOperand.setName("coveredBy");
				// assign attribute __parentOperand_covered_line
				__parentOperand_covered_line.setName("covered");
				// assign attribute __line_coveredBy_parentCombo
				__line_coveredBy_parentCombo.setName("coveredBy");
				// assign attribute __parentCombo_covered_line
				__parentCombo_covered_line.setName("covered");
				// assign attribute __combo_enclosingInteraction_interaction
				__combo_enclosingInteraction_interaction
						.setName("enclosingInteraction");
				// assign attribute __interaction_fragment_combo
				__interaction_fragment_combo.setName("fragment");
				// assign attribute __line_coveredBy_operand
				__line_coveredBy_operand.setName("coveredBy");
				// assign attribute __operand_covered_line
				__operand_covered_line.setName("covered");
				// assign attribute __operand_guard_guard
				__operand_guard_guard.setName("guard");
				// assign attribute __guard_specification_spec
				__guard_specification_spec.setName("specification");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						spec, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						combo, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageReceive, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						messageSend, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentCombo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_fragment_combo, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__guard_specification_spec, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_messageSend, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_guard_guard, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageSend_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_operand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__sysLine_coveredBy_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						guard, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_coveredBy_parentOperand, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__messageReceive_enclosingOperand_parentOperand,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						operand, "toBeTranslatedNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_covered_line, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__combo_enclosingInteraction_interaction,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentOperand_fragment_messageReceive,
						"toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_covered_sysLine, "toBeTranslatedEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__operand_covered_line, "toBeTranslatedEdges");

				// create link
				__operand_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_parentOperand.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_combo.setSrc(sysLine);

				// create link
				__parentCombo_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_messageSend.setSrc(sysLine);

				// create link
				__sysLine_coveredBy_operand.setSrc(sysLine);

				// create link
				__combo_covered_sysLine.setTrg(sysLine);

				// create link
				__messageSend_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_parentCombo.setSrc(sysLine);

				// create link
				__parentOperand_covered_sysLine.setTrg(sysLine);

				// create link
				__sysLine_coveredBy_messageSend.setTrg(messageSend);

				// create link
				__messageSend_covered_sysLine.setSrc(messageSend);

				// create link
				__combo_enclosingInteraction_interaction.setSrc(combo);

				// create link
				__interaction_fragment_combo.setTrg(combo);

				// create link
				__sysLine_coveredBy_combo.setTrg(combo);

				// create link
				__combo_covered_sysLine.setSrc(combo);

				// create link
				__operand_covered_sysLine.setSrc(operand);

				// create link
				__operand_covered_line.setSrc(operand);

				// create link
				__line_coveredBy_operand.setTrg(operand);

				// create link
				__sysLine_coveredBy_operand.setTrg(operand);

				// create link
				__operand_guard_guard.setSrc(operand);

				// create link
				__line_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__parentOperand_fragment_messageReceive.setSrc(parentOperand);

				// create link
				__parentOperand_covered_sysLine.setSrc(parentOperand);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setTrg(parentOperand);

				// create link
				__parentOperand_covered_line.setSrc(parentOperand);

				// create link
				__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

				// create link
				__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__line_coveredBy_parentCombo.setTrg(parentCombo);

				// create link
				__parentCombo_covered_line.setSrc(parentCombo);

				// create link
				__parentCombo_covered_sysLine.setSrc(parentCombo);

				// create link
				__parentOperand_fragment_messageReceive.setTrg(messageReceive);

				// create link
				__messageReceive_enclosingOperand_parentOperand
						.setSrc(messageReceive);

				// create link
				__parentOperand_covered_line.setTrg(line);

				// create link
				__line_coveredBy_parentOperand.setSrc(line);

				// create link
				__line_coveredBy_parentCombo.setSrc(line);

				// create link
				__operand_covered_line.setTrg(line);

				// create link
				__parentCombo_covered_line.setTrg(line);

				// create link
				__line_coveredBy_operand.setSrc(line);

				// create link
				__interaction_fragment_combo.setSrc(interaction);

				// create link
				__combo_enclosingInteraction_interaction.setTrg(interaction);

				// create link
				__guard_specification_spec.setSrc(guard);

				// create link
				__operand_guard_guard.setTrg(guard);

				// create link
				__guard_specification_spec.setTrg(spec);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// story node 'collect context elements'
			try {
				fujaba__Success = false;

				// check object combo is really bound
				JavaSDM.ensure(combo != null);
				// check object guard is really bound
				JavaSDM.ensure(guard != null);
				// check object interaction is really bound
				JavaSDM.ensure(interaction != null);
				// check object line is really bound
				JavaSDM.ensure(line != null);
				// check object match is really bound
				JavaSDM.ensure(match != null);
				// check object messageReceive is really bound
				JavaSDM.ensure(messageReceive != null);
				// check object messageSend is really bound
				JavaSDM.ensure(messageSend != null);
				// check object operand is really bound
				JavaSDM.ensure(operand != null);
				// check object parentCombo is really bound
				JavaSDM.ensure(parentCombo != null);
				// check object parentOperand is really bound
				JavaSDM.ensure(parentOperand != null);
				// check object spec is really bound
				JavaSDM.ensure(spec != null);
				// check object sysLine is really bound
				JavaSDM.ensure(sysLine != null);
				// check isomorphic binding between objects parentCombo and combo 
				JavaSDM.ensure(!parentCombo.equals(combo));

				// check isomorphic binding between objects sysLine and line 
				JavaSDM.ensure(!sysLine.equals(line));

				// check isomorphic binding between objects messageSend and messageReceive 
				JavaSDM.ensure(!messageSend.equals(messageReceive));

				// check isomorphic binding between objects parentOperand and operand 
				JavaSDM.ensure(!parentOperand.equals(operand));

				// create object __line_interaction_interaction
				__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// create object __interaction_lifeline_line
				__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
						.createEMoflonEdge();

				// assign attribute __parentCombo_operand_parentOperand
				__parentCombo_operand_parentOperand.setName("operand");
				// assign attribute __line_interaction_interaction
				__line_interaction_interaction.setName("interaction");
				// assign attribute __interaction_lifeline_line
				__interaction_lifeline_line.setName("lifeline");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__line_interaction_interaction, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						line, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentOperand, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						sysLine, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						parentCombo, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						interaction, "contextNodes");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__parentCombo_operand_parentOperand, "contextEdges");

				// create link
				org.moflon.util.eMoflonEMFUtil.addOppositeReference(match,
						__interaction_lifeline_line, "contextEdges");

				// create link
				__parentCombo_operand_parentOperand.setTrg(parentOperand);

				// create link
				__parentCombo_operand_parentOperand.setSrc(parentCombo);

				// create link
				__interaction_lifeline_line.setTrg(line);

				// create link
				__line_interaction_interaction.setSrc(line);

				// create link
				__line_interaction_interaction.setTrg(interaction);

				// create link
				__interaction_lifeline_line.setSrc(interaction);

				fujaba__Success = true;
			} catch (JavaSDMException fujaba__InternalException) {
				fujaba__Success = false;
			}

			// statement node 'register objects to match'
			this.registerObjectsToMatch_BWD(match, sysLine, messageSend, combo,
					operand, parentOperand, parentCombo, messageReceive, line,
					interaction, guard, spec);
			return true;

		} else {
			return false;

		}
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PerformRuleResult perform_BWD(IsApplicableMatch isApplicableMatch) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		Actor actor = null;
		ActorToLifeline actorToLine = null;
		CombinedFragment combo = null;
		NamedFlow flow = null;
		FlowToInteractionFragment flowToParentOperand = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		PackageDeclaration packageDeclaration = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Actor sysActor = null;
		ActorToLifeline sysActorToSysLine = null;
		Lifeline sysLine = null;
		UseCase useCase = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Iterator fujaba__IterIsApplicableMatchToCsp = null;
		CSP csp = null;
		NormalStep step = null;
		NormalStepToCombinedFragment stepToCombo = null;
		StepAlternativeToInteractionOperand alternative1ToOperand = null;
		FlowToInteractionFragment altFlowToOperand = null;
		AlternativeFlowAlternative alt = null;
		AlternativeFlow altFlow = null;
		PerformRuleResult ruleresult = null;
		EMoflonEdge flow__steps__step = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge altFlowToOperand__target__operand = null;
		EMoflonEdge step__stepAlternative__alt = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __guard_specification_spec = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __combo_enclosingInteraction_interaction = null;
		EMoflonEdge alternative1ToOperand__target__operand = null;
		EMoflonEdge __interaction_fragment_combo = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge stepToCombo__source__step = null;
		EMoflonEdge alt__ref__altFlow = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge altFlowToOperand__source__altFlow = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge alternative1ToOperand__source__alt = null;
		EMoflonEdge stepToCombo__target__combo = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge step__actor__actor = null;

		// story node 'perform transformation'
		try {
			fujaba__Success = false;

			_TmpObject = (isApplicableMatch.getObject("actor"));

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("actorToLine"));

			// ensure correct type and really bound of object actorToLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			actorToLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flow"));

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("flowToParentOperand"));

			// ensure correct type and really bound of object flowToParentOperand
			JavaSDM.ensure(_TmpObject instanceof FlowToInteractionFragment);
			flowToParentOperand = (FlowToInteractionFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("packageDeclaration"));

			// ensure correct type and really bound of object packageDeclaration
			JavaSDM.ensure(_TmpObject instanceof PackageDeclaration);
			packageDeclaration = (PackageDeclaration) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActor"));

			// ensure correct type and really bound of object sysActor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			sysActor = (Actor) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysActorToSysLine"));

			// ensure correct type and really bound of object sysActorToSysLine
			JavaSDM.ensure(_TmpObject instanceof ActorToLifeline);
			sysActorToSysLine = (ActorToLifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCase"));

			// ensure correct type and really bound of object useCase
			JavaSDM.ensure(_TmpObject instanceof UseCase);
			useCase = (UseCase) _TmpObject;
			_TmpObject = (isApplicableMatch.getObject("useCaseToInteraction"));

			// ensure correct type and really bound of object useCaseToInteraction
			JavaSDM.ensure(_TmpObject instanceof UseCaseToInteraction);
			useCaseToInteraction = (UseCaseToInteraction) _TmpObject;
			// check object isApplicableMatch is really bound
			JavaSDM.ensure(isApplicableMatch != null);
			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link attributeInfo from isApplicableMatch to csp
			fujaba__Success = false;

			fujaba__IterIsApplicableMatchToCsp = isApplicableMatch
					.getAttributeInfo().iterator();

			while (!(fujaba__Success)
					&& fujaba__IterIsApplicableMatchToCsp.hasNext()) {
				try {
					_TmpObject = fujaba__IterIsApplicableMatchToCsp.next();

					// ensure correct type and really bound of object csp
					JavaSDM.ensure(_TmpObject instanceof CSP);
					csp = (CSP) _TmpObject;

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object step
			step = UseCaseDSLFactory.eINSTANCE.createNormalStep();

			// create object stepToCombo
			stepToCombo = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createNormalStepToCombinedFragment();

			// create object alternative1ToOperand
			alternative1ToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createStepAlternativeToInteractionOperand();

			// create object altFlowToOperand
			altFlowToOperand = UseCaseToModalSequenceDiagramIntegrationFactory.eINSTANCE
					.createFlowToInteractionFragment();

			// create object alt
			alt = UseCaseDSLFactory.eINSTANCE
					.createAlternativeFlowAlternative();

			// create object altFlow
			altFlow = UseCaseDSLFactory.eINSTANCE.createAlternativeFlow();

			// assign attribute alt
			alt.setCondition((java.lang.String) csp
					.getValue("alt", "condition"));
			// assign attribute altFlow
			altFlow.setName((java.lang.String) csp.getValue("altFlow", "name"));

			// create link
			step.setActor(actor);

			// create link
			stepToCombo.setTarget(combo);

			// create link
			alternative1ToOperand.setTarget(operand);

			// create link
			altFlowToOperand.setTarget(operand);

			// create link
			flow.getSteps().add(step); // add link

			// create link
			step.getStepAlternative().add(alt); // add link

			// create link
			stepToCombo.setSource(step);

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(alt, altFlow,
					"ref");

			// create link
			alternative1ToOperand.setSource(alt);

			// create link
			altFlowToOperand.setSource(altFlow);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'collect translated elements'
		try {
			fujaba__Success = false;

			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE.createPerformRuleResult();

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					guard, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlow, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageReceive, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step, "createdElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					spec, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					operand, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo, "createdLinkElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					messageSend, "translatedElements");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					combo, "translatedElements");
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'bookkeeping for edges'
		try {
			fujaba__Success = false;

			// check object actor is really bound
			JavaSDM.ensure(actor != null);
			// check object actorToLine is really bound
			JavaSDM.ensure(actorToLine != null);
			// check object alt is really bound
			JavaSDM.ensure(alt != null);
			// check object altFlow is really bound
			JavaSDM.ensure(altFlow != null);
			// check object altFlowToOperand is really bound
			JavaSDM.ensure(altFlowToOperand != null);
			// check object alternative1ToOperand is really bound
			JavaSDM.ensure(alternative1ToOperand != null);
			// check object combo is really bound
			JavaSDM.ensure(combo != null);
			// check object flow is really bound
			JavaSDM.ensure(flow != null);
			// check object flowToParentOperand is really bound
			JavaSDM.ensure(flowToParentOperand != null);
			// check object guard is really bound
			JavaSDM.ensure(guard != null);
			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);
			// check object line is really bound
			JavaSDM.ensure(line != null);
			// check object messageReceive is really bound
			JavaSDM.ensure(messageReceive != null);
			// check object messageSend is really bound
			JavaSDM.ensure(messageSend != null);
			// check object operand is really bound
			JavaSDM.ensure(operand != null);
			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);
			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);
			// check object parentOperand is really bound
			JavaSDM.ensure(parentOperand != null);
			// check object ruleresult is really bound
			JavaSDM.ensure(ruleresult != null);
			// check object spec is really bound
			JavaSDM.ensure(spec != null);
			// check object step is really bound
			JavaSDM.ensure(step != null);
			// check object stepToCombo is really bound
			JavaSDM.ensure(stepToCombo != null);
			// check object sysActor is really bound
			JavaSDM.ensure(sysActor != null);
			// check object sysActorToSysLine is really bound
			JavaSDM.ensure(sysActorToSysLine != null);
			// check object sysLine is really bound
			JavaSDM.ensure(sysLine != null);
			// check object useCase is really bound
			JavaSDM.ensure(useCase != null);
			// check object useCaseToInteraction is really bound
			JavaSDM.ensure(useCaseToInteraction != null);
			// check isomorphic binding between objects actorToLine and actor 
			JavaSDM.ensure(!actorToLine.equals(actor));

			// check isomorphic binding between objects alt and actor 
			JavaSDM.ensure(!alt.equals(actor));

			// check isomorphic binding between objects altFlow and actor 
			JavaSDM.ensure(!altFlow.equals(actor));

			// check isomorphic binding between objects altFlowToOperand and actor 
			JavaSDM.ensure(!altFlowToOperand.equals(actor));

			// check isomorphic binding between objects alternative1ToOperand and actor 
			JavaSDM.ensure(!alternative1ToOperand.equals(actor));

			// check isomorphic binding between objects combo and actor 
			JavaSDM.ensure(!combo.equals(actor));

			// check isomorphic binding between objects flow and actor 
			JavaSDM.ensure(!flow.equals(actor));

			// check isomorphic binding between objects flowToParentOperand and actor 
			JavaSDM.ensure(!flowToParentOperand.equals(actor));

			// check isomorphic binding between objects guard and actor 
			JavaSDM.ensure(!guard.equals(actor));

			// check isomorphic binding between objects interaction and actor 
			JavaSDM.ensure(!interaction.equals(actor));

			// check isomorphic binding between objects line and actor 
			JavaSDM.ensure(!line.equals(actor));

			// check isomorphic binding between objects messageReceive and actor 
			JavaSDM.ensure(!messageReceive.equals(actor));

			// check isomorphic binding between objects messageSend and actor 
			JavaSDM.ensure(!messageSend.equals(actor));

			// check isomorphic binding between objects operand and actor 
			JavaSDM.ensure(!operand.equals(actor));

			// check isomorphic binding between objects packageDeclaration and actor 
			JavaSDM.ensure(!packageDeclaration.equals(actor));

			// check isomorphic binding between objects parentCombo and actor 
			JavaSDM.ensure(!parentCombo.equals(actor));

			// check isomorphic binding between objects parentOperand and actor 
			JavaSDM.ensure(!parentOperand.equals(actor));

			// check isomorphic binding between objects spec and actor 
			JavaSDM.ensure(!spec.equals(actor));

			// check isomorphic binding between objects step and actor 
			JavaSDM.ensure(!step.equals(actor));

			// check isomorphic binding between objects stepToCombo and actor 
			JavaSDM.ensure(!stepToCombo.equals(actor));

			// check isomorphic binding between objects sysActor and actor 
			JavaSDM.ensure(!sysActor.equals(actor));

			// check isomorphic binding between objects sysActorToSysLine and actor 
			JavaSDM.ensure(!sysActorToSysLine.equals(actor));

			// check isomorphic binding between objects sysLine and actor 
			JavaSDM.ensure(!sysLine.equals(actor));

			// check isomorphic binding between objects useCase and actor 
			JavaSDM.ensure(!useCase.equals(actor));

			// check isomorphic binding between objects useCaseToInteraction and actor 
			JavaSDM.ensure(!useCaseToInteraction.equals(actor));

			// check isomorphic binding between objects alt and actorToLine 
			JavaSDM.ensure(!alt.equals(actorToLine));

			// check isomorphic binding between objects altFlow and actorToLine 
			JavaSDM.ensure(!altFlow.equals(actorToLine));

			// check isomorphic binding between objects altFlowToOperand and actorToLine 
			JavaSDM.ensure(!altFlowToOperand.equals(actorToLine));

			// check isomorphic binding between objects alternative1ToOperand and actorToLine 
			JavaSDM.ensure(!alternative1ToOperand.equals(actorToLine));

			// check isomorphic binding between objects combo and actorToLine 
			JavaSDM.ensure(!combo.equals(actorToLine));

			// check isomorphic binding between objects flow and actorToLine 
			JavaSDM.ensure(!flow.equals(actorToLine));

			// check isomorphic binding between objects flowToParentOperand and actorToLine 
			JavaSDM.ensure(!flowToParentOperand.equals(actorToLine));

			// check isomorphic binding between objects guard and actorToLine 
			JavaSDM.ensure(!guard.equals(actorToLine));

			// check isomorphic binding between objects interaction and actorToLine 
			JavaSDM.ensure(!interaction.equals(actorToLine));

			// check isomorphic binding between objects line and actorToLine 
			JavaSDM.ensure(!line.equals(actorToLine));

			// check isomorphic binding between objects messageReceive and actorToLine 
			JavaSDM.ensure(!messageReceive.equals(actorToLine));

			// check isomorphic binding between objects messageSend and actorToLine 
			JavaSDM.ensure(!messageSend.equals(actorToLine));

			// check isomorphic binding between objects operand and actorToLine 
			JavaSDM.ensure(!operand.equals(actorToLine));

			// check isomorphic binding between objects packageDeclaration and actorToLine 
			JavaSDM.ensure(!packageDeclaration.equals(actorToLine));

			// check isomorphic binding between objects parentCombo and actorToLine 
			JavaSDM.ensure(!parentCombo.equals(actorToLine));

			// check isomorphic binding between objects parentOperand and actorToLine 
			JavaSDM.ensure(!parentOperand.equals(actorToLine));

			// check isomorphic binding between objects spec and actorToLine 
			JavaSDM.ensure(!spec.equals(actorToLine));

			// check isomorphic binding between objects step and actorToLine 
			JavaSDM.ensure(!step.equals(actorToLine));

			// check isomorphic binding between objects stepToCombo and actorToLine 
			JavaSDM.ensure(!stepToCombo.equals(actorToLine));

			// check isomorphic binding between objects sysActor and actorToLine 
			JavaSDM.ensure(!sysActor.equals(actorToLine));

			// check isomorphic binding between objects sysActorToSysLine and actorToLine 
			JavaSDM.ensure(!sysActorToSysLine.equals(actorToLine));

			// check isomorphic binding between objects sysLine and actorToLine 
			JavaSDM.ensure(!sysLine.equals(actorToLine));

			// check isomorphic binding between objects useCase and actorToLine 
			JavaSDM.ensure(!useCase.equals(actorToLine));

			// check isomorphic binding between objects useCaseToInteraction and actorToLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(actorToLine));

			// check isomorphic binding between objects altFlow and alt 
			JavaSDM.ensure(!altFlow.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and alt 
			JavaSDM.ensure(!altFlowToOperand.equals(alt));

			// check isomorphic binding between objects alternative1ToOperand and alt 
			JavaSDM.ensure(!alternative1ToOperand.equals(alt));

			// check isomorphic binding between objects combo and alt 
			JavaSDM.ensure(!combo.equals(alt));

			// check isomorphic binding between objects flow and alt 
			JavaSDM.ensure(!flow.equals(alt));

			// check isomorphic binding between objects flowToParentOperand and alt 
			JavaSDM.ensure(!flowToParentOperand.equals(alt));

			// check isomorphic binding between objects guard and alt 
			JavaSDM.ensure(!guard.equals(alt));

			// check isomorphic binding between objects interaction and alt 
			JavaSDM.ensure(!interaction.equals(alt));

			// check isomorphic binding between objects line and alt 
			JavaSDM.ensure(!line.equals(alt));

			// check isomorphic binding between objects messageReceive and alt 
			JavaSDM.ensure(!messageReceive.equals(alt));

			// check isomorphic binding between objects messageSend and alt 
			JavaSDM.ensure(!messageSend.equals(alt));

			// check isomorphic binding between objects operand and alt 
			JavaSDM.ensure(!operand.equals(alt));

			// check isomorphic binding between objects packageDeclaration and alt 
			JavaSDM.ensure(!packageDeclaration.equals(alt));

			// check isomorphic binding between objects parentCombo and alt 
			JavaSDM.ensure(!parentCombo.equals(alt));

			// check isomorphic binding between objects parentOperand and alt 
			JavaSDM.ensure(!parentOperand.equals(alt));

			// check isomorphic binding between objects spec and alt 
			JavaSDM.ensure(!spec.equals(alt));

			// check isomorphic binding between objects step and alt 
			JavaSDM.ensure(!step.equals(alt));

			// check isomorphic binding between objects stepToCombo and alt 
			JavaSDM.ensure(!stepToCombo.equals(alt));

			// check isomorphic binding between objects sysActor and alt 
			JavaSDM.ensure(!sysActor.equals(alt));

			// check isomorphic binding between objects sysActorToSysLine and alt 
			JavaSDM.ensure(!sysActorToSysLine.equals(alt));

			// check isomorphic binding between objects sysLine and alt 
			JavaSDM.ensure(!sysLine.equals(alt));

			// check isomorphic binding between objects useCase and alt 
			JavaSDM.ensure(!useCase.equals(alt));

			// check isomorphic binding between objects useCaseToInteraction and alt 
			JavaSDM.ensure(!useCaseToInteraction.equals(alt));

			// check isomorphic binding between objects altFlowToOperand and altFlow 
			JavaSDM.ensure(!altFlowToOperand.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlow 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlow));

			// check isomorphic binding between objects combo and altFlow 
			JavaSDM.ensure(!combo.equals(altFlow));

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check isomorphic binding between objects flowToParentOperand and altFlow 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlow));

			// check isomorphic binding between objects guard and altFlow 
			JavaSDM.ensure(!guard.equals(altFlow));

			// check isomorphic binding between objects interaction and altFlow 
			JavaSDM.ensure(!interaction.equals(altFlow));

			// check isomorphic binding between objects line and altFlow 
			JavaSDM.ensure(!line.equals(altFlow));

			// check isomorphic binding between objects messageReceive and altFlow 
			JavaSDM.ensure(!messageReceive.equals(altFlow));

			// check isomorphic binding between objects messageSend and altFlow 
			JavaSDM.ensure(!messageSend.equals(altFlow));

			// check isomorphic binding between objects operand and altFlow 
			JavaSDM.ensure(!operand.equals(altFlow));

			// check isomorphic binding between objects packageDeclaration and altFlow 
			JavaSDM.ensure(!packageDeclaration.equals(altFlow));

			// check isomorphic binding between objects parentCombo and altFlow 
			JavaSDM.ensure(!parentCombo.equals(altFlow));

			// check isomorphic binding between objects parentOperand and altFlow 
			JavaSDM.ensure(!parentOperand.equals(altFlow));

			// check isomorphic binding between objects spec and altFlow 
			JavaSDM.ensure(!spec.equals(altFlow));

			// check isomorphic binding between objects step and altFlow 
			JavaSDM.ensure(!step.equals(altFlow));

			// check isomorphic binding between objects stepToCombo and altFlow 
			JavaSDM.ensure(!stepToCombo.equals(altFlow));

			// check isomorphic binding between objects sysActor and altFlow 
			JavaSDM.ensure(!sysActor.equals(altFlow));

			// check isomorphic binding between objects sysActorToSysLine and altFlow 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlow));

			// check isomorphic binding between objects sysLine and altFlow 
			JavaSDM.ensure(!sysLine.equals(altFlow));

			// check isomorphic binding between objects useCase and altFlow 
			JavaSDM.ensure(!useCase.equals(altFlow));

			// check isomorphic binding between objects useCaseToInteraction and altFlow 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlow));

			// check isomorphic binding between objects alternative1ToOperand and altFlowToOperand 
			JavaSDM.ensure(!alternative1ToOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and altFlowToOperand 
			JavaSDM.ensure(!combo.equals(altFlowToOperand));

			// check isomorphic binding between objects flow and altFlowToOperand 
			JavaSDM.ensure(!flow.equals(altFlowToOperand));

			// check isomorphic binding between objects flowToParentOperand and altFlowToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects guard and altFlowToOperand 
			JavaSDM.ensure(!guard.equals(altFlowToOperand));

			// check isomorphic binding between objects interaction and altFlowToOperand 
			JavaSDM.ensure(!interaction.equals(altFlowToOperand));

			// check isomorphic binding between objects line and altFlowToOperand 
			JavaSDM.ensure(!line.equals(altFlowToOperand));

			// check isomorphic binding between objects messageReceive and altFlowToOperand 
			JavaSDM.ensure(!messageReceive.equals(altFlowToOperand));

			// check isomorphic binding between objects messageSend and altFlowToOperand 
			JavaSDM.ensure(!messageSend.equals(altFlowToOperand));

			// check isomorphic binding between objects operand and altFlowToOperand 
			JavaSDM.ensure(!operand.equals(altFlowToOperand));

			// check isomorphic binding between objects packageDeclaration and altFlowToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(altFlowToOperand));

			// check isomorphic binding between objects parentCombo and altFlowToOperand 
			JavaSDM.ensure(!parentCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects parentOperand and altFlowToOperand 
			JavaSDM.ensure(!parentOperand.equals(altFlowToOperand));

			// check isomorphic binding between objects spec and altFlowToOperand 
			JavaSDM.ensure(!spec.equals(altFlowToOperand));

			// check isomorphic binding between objects step and altFlowToOperand 
			JavaSDM.ensure(!step.equals(altFlowToOperand));

			// check isomorphic binding between objects stepToCombo and altFlowToOperand 
			JavaSDM.ensure(!stepToCombo.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActor and altFlowToOperand 
			JavaSDM.ensure(!sysActor.equals(altFlowToOperand));

			// check isomorphic binding between objects sysActorToSysLine and altFlowToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects sysLine and altFlowToOperand 
			JavaSDM.ensure(!sysLine.equals(altFlowToOperand));

			// check isomorphic binding between objects useCase and altFlowToOperand 
			JavaSDM.ensure(!useCase.equals(altFlowToOperand));

			// check isomorphic binding between objects useCaseToInteraction and altFlowToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(altFlowToOperand));

			// check isomorphic binding between objects combo and alternative1ToOperand 
			JavaSDM.ensure(!combo.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and alternative1ToOperand 
			JavaSDM.ensure(!flow.equals(alternative1ToOperand));

			// check isomorphic binding between objects flowToParentOperand and alternative1ToOperand 
			JavaSDM.ensure(!flowToParentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects guard and alternative1ToOperand 
			JavaSDM.ensure(!guard.equals(alternative1ToOperand));

			// check isomorphic binding between objects interaction and alternative1ToOperand 
			JavaSDM.ensure(!interaction.equals(alternative1ToOperand));

			// check isomorphic binding between objects line and alternative1ToOperand 
			JavaSDM.ensure(!line.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageReceive and alternative1ToOperand 
			JavaSDM.ensure(!messageReceive.equals(alternative1ToOperand));

			// check isomorphic binding between objects messageSend and alternative1ToOperand 
			JavaSDM.ensure(!messageSend.equals(alternative1ToOperand));

			// check isomorphic binding between objects operand and alternative1ToOperand 
			JavaSDM.ensure(!operand.equals(alternative1ToOperand));

			// check isomorphic binding between objects packageDeclaration and alternative1ToOperand 
			JavaSDM.ensure(!packageDeclaration.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentCombo and alternative1ToOperand 
			JavaSDM.ensure(!parentCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects parentOperand and alternative1ToOperand 
			JavaSDM.ensure(!parentOperand.equals(alternative1ToOperand));

			// check isomorphic binding between objects spec and alternative1ToOperand 
			JavaSDM.ensure(!spec.equals(alternative1ToOperand));

			// check isomorphic binding between objects step and alternative1ToOperand 
			JavaSDM.ensure(!step.equals(alternative1ToOperand));

			// check isomorphic binding between objects stepToCombo and alternative1ToOperand 
			JavaSDM.ensure(!stepToCombo.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActor and alternative1ToOperand 
			JavaSDM.ensure(!sysActor.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysActorToSysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects sysLine and alternative1ToOperand 
			JavaSDM.ensure(!sysLine.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCase and alternative1ToOperand 
			JavaSDM.ensure(!useCase.equals(alternative1ToOperand));

			// check isomorphic binding between objects useCaseToInteraction and alternative1ToOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(alternative1ToOperand));

			// check isomorphic binding between objects flow and combo 
			JavaSDM.ensure(!flow.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and combo 
			JavaSDM.ensure(!flowToParentOperand.equals(combo));

			// check isomorphic binding between objects guard and combo 
			JavaSDM.ensure(!guard.equals(combo));

			// check isomorphic binding between objects interaction and combo 
			JavaSDM.ensure(!interaction.equals(combo));

			// check isomorphic binding between objects line and combo 
			JavaSDM.ensure(!line.equals(combo));

			// check isomorphic binding between objects messageReceive and combo 
			JavaSDM.ensure(!messageReceive.equals(combo));

			// check isomorphic binding between objects messageSend and combo 
			JavaSDM.ensure(!messageSend.equals(combo));

			// check isomorphic binding between objects operand and combo 
			JavaSDM.ensure(!operand.equals(combo));

			// check isomorphic binding between objects packageDeclaration and combo 
			JavaSDM.ensure(!packageDeclaration.equals(combo));

			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects parentOperand and combo 
			JavaSDM.ensure(!parentOperand.equals(combo));

			// check isomorphic binding between objects spec and combo 
			JavaSDM.ensure(!spec.equals(combo));

			// check isomorphic binding between objects step and combo 
			JavaSDM.ensure(!step.equals(combo));

			// check isomorphic binding between objects stepToCombo and combo 
			JavaSDM.ensure(!stepToCombo.equals(combo));

			// check isomorphic binding between objects sysActor and combo 
			JavaSDM.ensure(!sysActor.equals(combo));

			// check isomorphic binding between objects sysActorToSysLine and combo 
			JavaSDM.ensure(!sysActorToSysLine.equals(combo));

			// check isomorphic binding between objects sysLine and combo 
			JavaSDM.ensure(!sysLine.equals(combo));

			// check isomorphic binding between objects useCase and combo 
			JavaSDM.ensure(!useCase.equals(combo));

			// check isomorphic binding between objects useCaseToInteraction and combo 
			JavaSDM.ensure(!useCaseToInteraction.equals(combo));

			// check isomorphic binding between objects flowToParentOperand and flow 
			JavaSDM.ensure(!flowToParentOperand.equals(flow));

			// check isomorphic binding between objects guard and flow 
			JavaSDM.ensure(!guard.equals(flow));

			// check isomorphic binding between objects interaction and flow 
			JavaSDM.ensure(!interaction.equals(flow));

			// check isomorphic binding between objects line and flow 
			JavaSDM.ensure(!line.equals(flow));

			// check isomorphic binding between objects messageReceive and flow 
			JavaSDM.ensure(!messageReceive.equals(flow));

			// check isomorphic binding between objects messageSend and flow 
			JavaSDM.ensure(!messageSend.equals(flow));

			// check isomorphic binding between objects operand and flow 
			JavaSDM.ensure(!operand.equals(flow));

			// check isomorphic binding between objects packageDeclaration and flow 
			JavaSDM.ensure(!packageDeclaration.equals(flow));

			// check isomorphic binding between objects parentCombo and flow 
			JavaSDM.ensure(!parentCombo.equals(flow));

			// check isomorphic binding between objects parentOperand and flow 
			JavaSDM.ensure(!parentOperand.equals(flow));

			// check isomorphic binding between objects spec and flow 
			JavaSDM.ensure(!spec.equals(flow));

			// check isomorphic binding between objects step and flow 
			JavaSDM.ensure(!step.equals(flow));

			// check isomorphic binding between objects stepToCombo and flow 
			JavaSDM.ensure(!stepToCombo.equals(flow));

			// check isomorphic binding between objects sysActor and flow 
			JavaSDM.ensure(!sysActor.equals(flow));

			// check isomorphic binding between objects sysActorToSysLine and flow 
			JavaSDM.ensure(!sysActorToSysLine.equals(flow));

			// check isomorphic binding between objects sysLine and flow 
			JavaSDM.ensure(!sysLine.equals(flow));

			// check isomorphic binding between objects useCase and flow 
			JavaSDM.ensure(!useCase.equals(flow));

			// check isomorphic binding between objects useCaseToInteraction and flow 
			JavaSDM.ensure(!useCaseToInteraction.equals(flow));

			// check isomorphic binding between objects guard and flowToParentOperand 
			JavaSDM.ensure(!guard.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and flowToParentOperand 
			JavaSDM.ensure(!interaction.equals(flowToParentOperand));

			// check isomorphic binding between objects line and flowToParentOperand 
			JavaSDM.ensure(!line.equals(flowToParentOperand));

			// check isomorphic binding between objects messageReceive and flowToParentOperand 
			JavaSDM.ensure(!messageReceive.equals(flowToParentOperand));

			// check isomorphic binding between objects messageSend and flowToParentOperand 
			JavaSDM.ensure(!messageSend.equals(flowToParentOperand));

			// check isomorphic binding between objects operand and flowToParentOperand 
			JavaSDM.ensure(!operand.equals(flowToParentOperand));

			// check isomorphic binding between objects packageDeclaration and flowToParentOperand 
			JavaSDM.ensure(!packageDeclaration.equals(flowToParentOperand));

			// check isomorphic binding between objects parentCombo and flowToParentOperand 
			JavaSDM.ensure(!parentCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects parentOperand and flowToParentOperand 
			JavaSDM.ensure(!parentOperand.equals(flowToParentOperand));

			// check isomorphic binding between objects spec and flowToParentOperand 
			JavaSDM.ensure(!spec.equals(flowToParentOperand));

			// check isomorphic binding between objects step and flowToParentOperand 
			JavaSDM.ensure(!step.equals(flowToParentOperand));

			// check isomorphic binding between objects stepToCombo and flowToParentOperand 
			JavaSDM.ensure(!stepToCombo.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActor and flowToParentOperand 
			JavaSDM.ensure(!sysActor.equals(flowToParentOperand));

			// check isomorphic binding between objects sysActorToSysLine and flowToParentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects sysLine and flowToParentOperand 
			JavaSDM.ensure(!sysLine.equals(flowToParentOperand));

			// check isomorphic binding between objects useCase and flowToParentOperand 
			JavaSDM.ensure(!useCase.equals(flowToParentOperand));

			// check isomorphic binding between objects useCaseToInteraction and flowToParentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(flowToParentOperand));

			// check isomorphic binding between objects interaction and guard 
			JavaSDM.ensure(!interaction.equals(guard));

			// check isomorphic binding between objects line and guard 
			JavaSDM.ensure(!line.equals(guard));

			// check isomorphic binding between objects messageReceive and guard 
			JavaSDM.ensure(!messageReceive.equals(guard));

			// check isomorphic binding between objects messageSend and guard 
			JavaSDM.ensure(!messageSend.equals(guard));

			// check isomorphic binding between objects operand and guard 
			JavaSDM.ensure(!operand.equals(guard));

			// check isomorphic binding between objects packageDeclaration and guard 
			JavaSDM.ensure(!packageDeclaration.equals(guard));

			// check isomorphic binding between objects parentCombo and guard 
			JavaSDM.ensure(!parentCombo.equals(guard));

			// check isomorphic binding between objects parentOperand and guard 
			JavaSDM.ensure(!parentOperand.equals(guard));

			// check isomorphic binding between objects spec and guard 
			JavaSDM.ensure(!spec.equals(guard));

			// check isomorphic binding between objects step and guard 
			JavaSDM.ensure(!step.equals(guard));

			// check isomorphic binding between objects stepToCombo and guard 
			JavaSDM.ensure(!stepToCombo.equals(guard));

			// check isomorphic binding between objects sysActor and guard 
			JavaSDM.ensure(!sysActor.equals(guard));

			// check isomorphic binding between objects sysActorToSysLine and guard 
			JavaSDM.ensure(!sysActorToSysLine.equals(guard));

			// check isomorphic binding between objects sysLine and guard 
			JavaSDM.ensure(!sysLine.equals(guard));

			// check isomorphic binding between objects useCase and guard 
			JavaSDM.ensure(!useCase.equals(guard));

			// check isomorphic binding between objects useCaseToInteraction and guard 
			JavaSDM.ensure(!useCaseToInteraction.equals(guard));

			// check isomorphic binding between objects line and interaction 
			JavaSDM.ensure(!line.equals(interaction));

			// check isomorphic binding between objects messageReceive and interaction 
			JavaSDM.ensure(!messageReceive.equals(interaction));

			// check isomorphic binding between objects messageSend and interaction 
			JavaSDM.ensure(!messageSend.equals(interaction));

			// check isomorphic binding between objects operand and interaction 
			JavaSDM.ensure(!operand.equals(interaction));

			// check isomorphic binding between objects packageDeclaration and interaction 
			JavaSDM.ensure(!packageDeclaration.equals(interaction));

			// check isomorphic binding between objects parentCombo and interaction 
			JavaSDM.ensure(!parentCombo.equals(interaction));

			// check isomorphic binding between objects parentOperand and interaction 
			JavaSDM.ensure(!parentOperand.equals(interaction));

			// check isomorphic binding between objects spec and interaction 
			JavaSDM.ensure(!spec.equals(interaction));

			// check isomorphic binding between objects step and interaction 
			JavaSDM.ensure(!step.equals(interaction));

			// check isomorphic binding between objects stepToCombo and interaction 
			JavaSDM.ensure(!stepToCombo.equals(interaction));

			// check isomorphic binding between objects sysActor and interaction 
			JavaSDM.ensure(!sysActor.equals(interaction));

			// check isomorphic binding between objects sysActorToSysLine and interaction 
			JavaSDM.ensure(!sysActorToSysLine.equals(interaction));

			// check isomorphic binding between objects sysLine and interaction 
			JavaSDM.ensure(!sysLine.equals(interaction));

			// check isomorphic binding between objects useCase and interaction 
			JavaSDM.ensure(!useCase.equals(interaction));

			// check isomorphic binding between objects useCaseToInteraction and interaction 
			JavaSDM.ensure(!useCaseToInteraction.equals(interaction));

			// check isomorphic binding between objects messageReceive and line 
			JavaSDM.ensure(!messageReceive.equals(line));

			// check isomorphic binding between objects messageSend and line 
			JavaSDM.ensure(!messageSend.equals(line));

			// check isomorphic binding between objects operand and line 
			JavaSDM.ensure(!operand.equals(line));

			// check isomorphic binding between objects packageDeclaration and line 
			JavaSDM.ensure(!packageDeclaration.equals(line));

			// check isomorphic binding between objects parentCombo and line 
			JavaSDM.ensure(!parentCombo.equals(line));

			// check isomorphic binding between objects parentOperand and line 
			JavaSDM.ensure(!parentOperand.equals(line));

			// check isomorphic binding between objects spec and line 
			JavaSDM.ensure(!spec.equals(line));

			// check isomorphic binding between objects step and line 
			JavaSDM.ensure(!step.equals(line));

			// check isomorphic binding between objects stepToCombo and line 
			JavaSDM.ensure(!stepToCombo.equals(line));

			// check isomorphic binding between objects sysActor and line 
			JavaSDM.ensure(!sysActor.equals(line));

			// check isomorphic binding between objects sysActorToSysLine and line 
			JavaSDM.ensure(!sysActorToSysLine.equals(line));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects useCase and line 
			JavaSDM.ensure(!useCase.equals(line));

			// check isomorphic binding between objects useCaseToInteraction and line 
			JavaSDM.ensure(!useCaseToInteraction.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects operand and messageReceive 
			JavaSDM.ensure(!operand.equals(messageReceive));

			// check isomorphic binding between objects packageDeclaration and messageReceive 
			JavaSDM.ensure(!packageDeclaration.equals(messageReceive));

			// check isomorphic binding between objects parentCombo and messageReceive 
			JavaSDM.ensure(!parentCombo.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and messageReceive 
			JavaSDM.ensure(!parentOperand.equals(messageReceive));

			// check isomorphic binding between objects spec and messageReceive 
			JavaSDM.ensure(!spec.equals(messageReceive));

			// check isomorphic binding between objects step and messageReceive 
			JavaSDM.ensure(!step.equals(messageReceive));

			// check isomorphic binding between objects stepToCombo and messageReceive 
			JavaSDM.ensure(!stepToCombo.equals(messageReceive));

			// check isomorphic binding between objects sysActor and messageReceive 
			JavaSDM.ensure(!sysActor.equals(messageReceive));

			// check isomorphic binding between objects sysActorToSysLine and messageReceive 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageReceive));

			// check isomorphic binding between objects sysLine and messageReceive 
			JavaSDM.ensure(!sysLine.equals(messageReceive));

			// check isomorphic binding between objects useCase and messageReceive 
			JavaSDM.ensure(!useCase.equals(messageReceive));

			// check isomorphic binding between objects useCaseToInteraction and messageReceive 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageReceive));

			// check isomorphic binding between objects operand and messageSend 
			JavaSDM.ensure(!operand.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and messageSend 
			JavaSDM.ensure(!packageDeclaration.equals(messageSend));

			// check isomorphic binding between objects parentCombo and messageSend 
			JavaSDM.ensure(!parentCombo.equals(messageSend));

			// check isomorphic binding between objects parentOperand and messageSend 
			JavaSDM.ensure(!parentOperand.equals(messageSend));

			// check isomorphic binding between objects spec and messageSend 
			JavaSDM.ensure(!spec.equals(messageSend));

			// check isomorphic binding between objects step and messageSend 
			JavaSDM.ensure(!step.equals(messageSend));

			// check isomorphic binding between objects stepToCombo and messageSend 
			JavaSDM.ensure(!stepToCombo.equals(messageSend));

			// check isomorphic binding between objects sysActor and messageSend 
			JavaSDM.ensure(!sysActor.equals(messageSend));

			// check isomorphic binding between objects sysActorToSysLine and messageSend 
			JavaSDM.ensure(!sysActorToSysLine.equals(messageSend));

			// check isomorphic binding between objects sysLine and messageSend 
			JavaSDM.ensure(!sysLine.equals(messageSend));

			// check isomorphic binding between objects useCase and messageSend 
			JavaSDM.ensure(!useCase.equals(messageSend));

			// check isomorphic binding between objects useCaseToInteraction and messageSend 
			JavaSDM.ensure(!useCaseToInteraction.equals(messageSend));

			// check isomorphic binding between objects packageDeclaration and operand 
			JavaSDM.ensure(!packageDeclaration.equals(operand));

			// check isomorphic binding between objects parentCombo and operand 
			JavaSDM.ensure(!parentCombo.equals(operand));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// check isomorphic binding between objects spec and operand 
			JavaSDM.ensure(!spec.equals(operand));

			// check isomorphic binding between objects step and operand 
			JavaSDM.ensure(!step.equals(operand));

			// check isomorphic binding between objects stepToCombo and operand 
			JavaSDM.ensure(!stepToCombo.equals(operand));

			// check isomorphic binding between objects sysActor and operand 
			JavaSDM.ensure(!sysActor.equals(operand));

			// check isomorphic binding between objects sysActorToSysLine and operand 
			JavaSDM.ensure(!sysActorToSysLine.equals(operand));

			// check isomorphic binding between objects sysLine and operand 
			JavaSDM.ensure(!sysLine.equals(operand));

			// check isomorphic binding between objects useCase and operand 
			JavaSDM.ensure(!useCase.equals(operand));

			// check isomorphic binding between objects useCaseToInteraction and operand 
			JavaSDM.ensure(!useCaseToInteraction.equals(operand));

			// check isomorphic binding between objects parentCombo and packageDeclaration 
			JavaSDM.ensure(!parentCombo.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and packageDeclaration 
			JavaSDM.ensure(!parentOperand.equals(packageDeclaration));

			// check isomorphic binding between objects spec and packageDeclaration 
			JavaSDM.ensure(!spec.equals(packageDeclaration));

			// check isomorphic binding between objects step and packageDeclaration 
			JavaSDM.ensure(!step.equals(packageDeclaration));

			// check isomorphic binding between objects stepToCombo and packageDeclaration 
			JavaSDM.ensure(!stepToCombo.equals(packageDeclaration));

			// check isomorphic binding between objects sysActor and packageDeclaration 
			JavaSDM.ensure(!sysActor.equals(packageDeclaration));

			// check isomorphic binding between objects sysActorToSysLine and packageDeclaration 
			JavaSDM.ensure(!sysActorToSysLine.equals(packageDeclaration));

			// check isomorphic binding between objects sysLine and packageDeclaration 
			JavaSDM.ensure(!sysLine.equals(packageDeclaration));

			// check isomorphic binding between objects useCase and packageDeclaration 
			JavaSDM.ensure(!useCase.equals(packageDeclaration));

			// check isomorphic binding between objects useCaseToInteraction and packageDeclaration 
			JavaSDM.ensure(!useCaseToInteraction.equals(packageDeclaration));

			// check isomorphic binding between objects parentOperand and parentCombo 
			JavaSDM.ensure(!parentOperand.equals(parentCombo));

			// check isomorphic binding between objects spec and parentCombo 
			JavaSDM.ensure(!spec.equals(parentCombo));

			// check isomorphic binding between objects step and parentCombo 
			JavaSDM.ensure(!step.equals(parentCombo));

			// check isomorphic binding between objects stepToCombo and parentCombo 
			JavaSDM.ensure(!stepToCombo.equals(parentCombo));

			// check isomorphic binding between objects sysActor and parentCombo 
			JavaSDM.ensure(!sysActor.equals(parentCombo));

			// check isomorphic binding between objects sysActorToSysLine and parentCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentCombo));

			// check isomorphic binding between objects sysLine and parentCombo 
			JavaSDM.ensure(!sysLine.equals(parentCombo));

			// check isomorphic binding between objects useCase and parentCombo 
			JavaSDM.ensure(!useCase.equals(parentCombo));

			// check isomorphic binding between objects useCaseToInteraction and parentCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentCombo));

			// check isomorphic binding between objects spec and parentOperand 
			JavaSDM.ensure(!spec.equals(parentOperand));

			// check isomorphic binding between objects step and parentOperand 
			JavaSDM.ensure(!step.equals(parentOperand));

			// check isomorphic binding between objects stepToCombo and parentOperand 
			JavaSDM.ensure(!stepToCombo.equals(parentOperand));

			// check isomorphic binding between objects sysActor and parentOperand 
			JavaSDM.ensure(!sysActor.equals(parentOperand));

			// check isomorphic binding between objects sysActorToSysLine and parentOperand 
			JavaSDM.ensure(!sysActorToSysLine.equals(parentOperand));

			// check isomorphic binding between objects sysLine and parentOperand 
			JavaSDM.ensure(!sysLine.equals(parentOperand));

			// check isomorphic binding between objects useCase and parentOperand 
			JavaSDM.ensure(!useCase.equals(parentOperand));

			// check isomorphic binding between objects useCaseToInteraction and parentOperand 
			JavaSDM.ensure(!useCaseToInteraction.equals(parentOperand));

			// check isomorphic binding between objects step and spec 
			JavaSDM.ensure(!step.equals(spec));

			// check isomorphic binding between objects stepToCombo and spec 
			JavaSDM.ensure(!stepToCombo.equals(spec));

			// check isomorphic binding between objects sysActor and spec 
			JavaSDM.ensure(!sysActor.equals(spec));

			// check isomorphic binding between objects sysActorToSysLine and spec 
			JavaSDM.ensure(!sysActorToSysLine.equals(spec));

			// check isomorphic binding between objects sysLine and spec 
			JavaSDM.ensure(!sysLine.equals(spec));

			// check isomorphic binding between objects useCase and spec 
			JavaSDM.ensure(!useCase.equals(spec));

			// check isomorphic binding between objects useCaseToInteraction and spec 
			JavaSDM.ensure(!useCaseToInteraction.equals(spec));

			// check isomorphic binding between objects stepToCombo and step 
			JavaSDM.ensure(!stepToCombo.equals(step));

			// check isomorphic binding between objects sysActor and step 
			JavaSDM.ensure(!sysActor.equals(step));

			// check isomorphic binding between objects sysActorToSysLine and step 
			JavaSDM.ensure(!sysActorToSysLine.equals(step));

			// check isomorphic binding between objects sysLine and step 
			JavaSDM.ensure(!sysLine.equals(step));

			// check isomorphic binding between objects useCase and step 
			JavaSDM.ensure(!useCase.equals(step));

			// check isomorphic binding between objects useCaseToInteraction and step 
			JavaSDM.ensure(!useCaseToInteraction.equals(step));

			// check isomorphic binding between objects sysActor and stepToCombo 
			JavaSDM.ensure(!sysActor.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and stepToCombo 
			JavaSDM.ensure(!sysActorToSysLine.equals(stepToCombo));

			// check isomorphic binding between objects sysLine and stepToCombo 
			JavaSDM.ensure(!sysLine.equals(stepToCombo));

			// check isomorphic binding between objects useCase and stepToCombo 
			JavaSDM.ensure(!useCase.equals(stepToCombo));

			// check isomorphic binding between objects useCaseToInteraction and stepToCombo 
			JavaSDM.ensure(!useCaseToInteraction.equals(stepToCombo));

			// check isomorphic binding between objects sysActorToSysLine and sysActor 
			JavaSDM.ensure(!sysActorToSysLine.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActor 
			JavaSDM.ensure(!sysLine.equals(sysActor));

			// check isomorphic binding between objects useCase and sysActor 
			JavaSDM.ensure(!useCase.equals(sysActor));

			// check isomorphic binding between objects useCaseToInteraction and sysActor 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActor));

			// check isomorphic binding between objects sysLine and sysActorToSysLine 
			JavaSDM.ensure(!sysLine.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysActorToSysLine 
			JavaSDM.ensure(!useCase.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysActorToSysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysActorToSysLine));

			// check isomorphic binding between objects useCase and sysLine 
			JavaSDM.ensure(!useCase.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and sysLine 
			JavaSDM.ensure(!useCaseToInteraction.equals(sysLine));

			// check isomorphic binding between objects useCaseToInteraction and useCase 
			JavaSDM.ensure(!useCaseToInteraction.equals(useCase));

			// create object flow__steps__step
			flow__steps__step = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_line
			__operand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__target__operand
			altFlowToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__stepAlternative__alt
			step__stepAlternative__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __guard_specification_spec
			__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_covered_sysLine
			__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __combo_enclosingInteraction_interaction
			__combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __interaction_fragment_combo
			__interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_line
			__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__source__step
			stepToCombo__source__step = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alt__ref__altFlow
			alt__ref__altFlow = TGGRuntimeFactory.eINSTANCE.createEMoflonEdge();

			// create object __messageSend_covered_sysLine
			__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_line
			__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_covered_sysLine
			__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object stepToCombo__target__combo
			stepToCombo__target__combo = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __operand_guard_guard
			__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object __line_coveredBy_operand
			__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// create object step__actor__actor
			step__actor__actor = TGGRuntimeFactory.eINSTANCE
					.createEMoflonEdge();

			// assign attribute ruleresult
			ruleresult.setRuleName("AltUserStepNFToComboRule");
			// assign attribute __sysLine_coveredBy_messageSend
			__sysLine_coveredBy_messageSend.setName("coveredBy");
			// assign attribute __messageSend_covered_sysLine
			__messageSend_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_combo
			__sysLine_coveredBy_combo.setName("coveredBy");
			// assign attribute __combo_covered_sysLine
			__combo_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_operand
			__sysLine_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_sysLine
			__operand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentOperand
			__sysLine_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_sysLine
			__parentOperand_covered_sysLine.setName("covered");
			// assign attribute __sysLine_coveredBy_parentCombo
			__sysLine_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_sysLine
			__parentCombo_covered_sysLine.setName("covered");
			// assign attribute __parentOperand_fragment_messageReceive
			__parentOperand_fragment_messageReceive.setName("fragment");
			// assign attribute __messageReceive_enclosingOperand_parentOperand
			__messageReceive_enclosingOperand_parentOperand
					.setName("enclosingOperand");
			// assign attribute __line_coveredBy_parentOperand
			__line_coveredBy_parentOperand.setName("coveredBy");
			// assign attribute __parentOperand_covered_line
			__parentOperand_covered_line.setName("covered");
			// assign attribute __line_coveredBy_parentCombo
			__line_coveredBy_parentCombo.setName("coveredBy");
			// assign attribute __parentCombo_covered_line
			__parentCombo_covered_line.setName("covered");
			// assign attribute __combo_enclosingInteraction_interaction
			__combo_enclosingInteraction_interaction
					.setName("enclosingInteraction");
			// assign attribute __interaction_fragment_combo
			__interaction_fragment_combo.setName("fragment");
			// assign attribute flow__steps__step
			flow__steps__step.setName("steps");
			// assign attribute step__stepAlternative__alt
			step__stepAlternative__alt.setName("stepAlternative");
			// assign attribute step__actor__actor
			step__actor__actor.setName("actor");
			// assign attribute alt__ref__altFlow
			alt__ref__altFlow.setName("ref");
			// assign attribute __line_coveredBy_operand
			__line_coveredBy_operand.setName("coveredBy");
			// assign attribute __operand_covered_line
			__operand_covered_line.setName("covered");
			// assign attribute stepToCombo__source__step
			stepToCombo__source__step.setName("source");
			// assign attribute stepToCombo__target__combo
			stepToCombo__target__combo.setName("target");
			// assign attribute __operand_guard_guard
			__operand_guard_guard.setName("guard");
			// assign attribute alternative1ToOperand__source__alt
			alternative1ToOperand__source__alt.setName("source");
			// assign attribute alternative1ToOperand__target__operand
			alternative1ToOperand__target__operand.setName("target");
			// assign attribute __guard_specification_spec
			__guard_specification_spec.setName("specification");
			// assign attribute altFlowToOperand__source__altFlow
			altFlowToOperand__source__altFlow.setName("source");
			// assign attribute altFlowToOperand__target__operand
			altFlowToOperand__target__operand.setName("target");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					flow__steps__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_fragment_messageReceive, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__stepAlternative__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentCombo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__guard_specification_spec, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__combo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil
					.addOppositeReference(ruleresult,
							__combo_enclosingInteraction_interaction,
							"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__target__operand, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__interaction_fragment_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__source__step, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alt__ref__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageSend_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_combo, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_line, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					altFlowToOperand__source__altFlow, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__messageReceive_enclosingOperand_parentOperand,
					"translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentCombo_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					alternative1ToOperand__source__alt, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					stepToCombo__target__combo, "createdEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_parentOperand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__parentOperand_covered_sysLine, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__operand_guard_guard, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_messageSend, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__sysLine_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					__line_coveredBy_operand, "translatedEdges");

			// create link
			org.moflon.util.eMoflonEMFUtil.addOppositeReference(ruleresult,
					step__actor__actor, "createdEdges");

			// create link
			step__actor__actor.setTrg(actor);

			// create link
			__sysLine_coveredBy_operand.setSrc(sysLine);

			// create link
			__parentCombo_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_messageSend.setSrc(sysLine);

			// create link
			__sysLine_coveredBy_combo.setSrc(sysLine);

			// create link
			__operand_covered_sysLine.setTrg(sysLine);

			// create link
			__sysLine_coveredBy_parentOperand.setSrc(sysLine);

			// create link
			__sysLine_coveredBy_parentCombo.setSrc(sysLine);

			// create link
			__parentOperand_covered_sysLine.setTrg(sysLine);

			// create link
			__combo_covered_sysLine.setTrg(sysLine);

			// create link
			__messageSend_covered_sysLine.setTrg(sysLine);

			// create link
			__messageSend_covered_sysLine.setSrc(messageSend);

			// create link
			__sysLine_coveredBy_messageSend.setTrg(messageSend);

			// create link
			stepToCombo__target__combo.setTrg(combo);

			// create link
			__interaction_fragment_combo.setTrg(combo);

			// create link
			__combo_covered_sysLine.setSrc(combo);

			// create link
			__combo_enclosingInteraction_interaction.setSrc(combo);

			// create link
			__sysLine_coveredBy_combo.setTrg(combo);

			// create link
			alternative1ToOperand__target__operand.setTrg(operand);

			// create link
			__operand_covered_line.setSrc(operand);

			// create link
			__operand_covered_sysLine.setSrc(operand);

			// create link
			__operand_guard_guard.setSrc(operand);

			// create link
			__line_coveredBy_operand.setTrg(operand);

			// create link
			__sysLine_coveredBy_operand.setTrg(operand);

			// create link
			altFlowToOperand__target__operand.setTrg(operand);

			// create link
			__line_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__sysLine_coveredBy_parentOperand.setTrg(parentOperand);

			// create link
			__parentOperand_covered_sysLine.setSrc(parentOperand);

			// create link
			__parentOperand_fragment_messageReceive.setSrc(parentOperand);

			// create link
			__parentOperand_covered_line.setSrc(parentOperand);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setTrg(parentOperand);

			// create link
			__parentCombo_covered_line.setSrc(parentCombo);

			// create link
			__parentCombo_covered_sysLine.setSrc(parentCombo);

			// create link
			__sysLine_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			__line_coveredBy_parentCombo.setTrg(parentCombo);

			// create link
			flow__steps__step.setSrc(flow);

			// create link
			__messageReceive_enclosingOperand_parentOperand
					.setSrc(messageReceive);

			// create link
			__parentOperand_fragment_messageReceive.setTrg(messageReceive);

			// create link
			__operand_covered_line.setTrg(line);

			// create link
			__parentOperand_covered_line.setTrg(line);

			// create link
			__line_coveredBy_parentCombo.setSrc(line);

			// create link
			__line_coveredBy_operand.setSrc(line);

			// create link
			__parentCombo_covered_line.setTrg(line);

			// create link
			__line_coveredBy_parentOperand.setSrc(line);

			// create link
			__combo_enclosingInteraction_interaction.setTrg(interaction);

			// create link
			__interaction_fragment_combo.setSrc(interaction);

			// create link
			flow__steps__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setSrc(step);

			// create link
			step__actor__actor.setSrc(step);

			// create link
			stepToCombo__source__step.setTrg(step);

			// create link
			step__stepAlternative__alt.setTrg(alt);

			// create link
			alternative1ToOperand__source__alt.setTrg(alt);

			// create link
			alt__ref__altFlow.setSrc(alt);

			// create link
			stepToCombo__source__step.setSrc(stepToCombo);

			// create link
			stepToCombo__target__combo.setSrc(stepToCombo);

			// create link
			alternative1ToOperand__source__alt.setSrc(alternative1ToOperand);

			// create link
			alternative1ToOperand__target__operand
					.setSrc(alternative1ToOperand);

			// create link
			__guard_specification_spec.setSrc(guard);

			// create link
			__operand_guard_guard.setTrg(guard);

			// create link
			__guard_specification_spec.setTrg(spec);

			// create link
			alt__ref__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setTrg(altFlow);

			// create link
			altFlowToOperand__source__altFlow.setSrc(altFlowToOperand);

			// create link
			altFlowToOperand__target__operand.setSrc(altFlowToOperand);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// statement node 'perform postprocessing'
		// No post processing method found
		// statement node 'register objects'
		this.registerObjects_BWD(ruleresult, packageDeclaration, actor,
				sysActor, sysLine, sysActorToSysLine, messageSend, combo,
				operand, parentOperand, parentCombo, flow, flowToParentOperand,
				messageReceive, line, interaction, useCase,
				useCaseToInteraction, actorToLine, step, alt, stepToCombo,
				alternative1ToOperand, guard, spec, altFlow, altFlowToOperand);
		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IsApplicableRuleResult isApplicable_BWD(Match match) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass eClass = null;
		Iterator fujaba__IterEClassToPerformOperation = null;
		EOperation performOperation = null;
		IsApplicableRuleResult ruleresult = null;
		CombinedFragment combo = null;
		InteractionConstraint guard = null;
		Interaction interaction = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		MessageOccurrenceSpecification messageSend = null;
		InteractionOperand operand = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		Lifeline sysLine = null;
		EMoflonEdge __packageDeclaration_actors_sysActor = null;
		IsApplicableMatch isApplicableMatch = null;
		EMoflonEdge __packageDeclaration_actors_actor = null;
		EMoflonEdge __packageDeclaration_useCases_useCase = null;
		EMoflonEdge __actorToLine_source_actor = null;
		EMoflonEdge __sysActorToSysLine_source_sysActor = null;
		EMoflonEdge __parentCombo_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentOperand = null;
		EMoflonEdge __sysActorToSysLine_target_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_operand = null;
		EMoflonEdge __parentOperand_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_parentCombo = null;
		EMoflonEdge __messageSend_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_combo = null;
		EMoflonEdge __combo_covered_sysLine = null;
		EMoflonEdge __operand_covered_sysLine = null;
		EMoflonEdge __sysLine_coveredBy_messageSend = null;
		EMoflonEdge __combo_enclosingInteraction_interaction = null;
		EMoflonEdge __interaction_fragment_combo = null;
		EMoflonEdge __line_coveredBy_operand = null;
		EMoflonEdge __operand_guard_guard = null;
		EMoflonEdge __operand_covered_line = null;
		EMoflonEdge __line_coveredBy_parentOperand = null;
		EMoflonEdge __parentOperand_covered_line = null;
		EMoflonEdge __flowToParentOperand_target_parentOperand = null;
		EMoflonEdge __parentOperand_fragment_messageReceive = null;
		EMoflonEdge __messageReceive_enclosingOperand_parentOperand = null;
		EMoflonEdge __parentCombo_operand_parentOperand = null;
		EMoflonEdge __parentCombo_covered_line = null;
		EMoflonEdge __line_coveredBy_parentCombo = null;
		EMoflonEdge __useCase_flows_flow = null;
		EMoflonEdge __flowToParentOperand_source_flow = null;
		EMoflonEdge __actorToLine_target_line = null;
		EMoflonEdge __line_interaction_interaction = null;
		EMoflonEdge __interaction_lifeline_line = null;
		EMoflonEdge __useCaseToInteraction_target_interaction = null;
		EMoflonEdge __useCaseToInteraction_source_useCase = null;
		EMoflonEdge __guard_specification_spec = null;
		CSP csp = null;
		PackageDeclaration packageDeclaration = null;
		UseCase useCase = null;
		Iterator fujaba__IterInteractionToUseCaseToInteraction = null;
		UseCaseToInteraction useCaseToInteraction = null;
		Actor actor = null;
		Iterator fujaba__IterLineToActorToLine = null;
		ActorToLifeline actorToLine = null;
		Actor sysActor = null;
		Iterator fujaba__IterSysLineToSysActorToSysLine = null;
		ActorToLifeline sysActorToSysLine = null;
		NamedFlow flow = null;
		Iterator fujaba__IterParentOperandToFlowToParentOperand = null;
		FlowToInteractionFragment flowToParentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from eClass to performOperation
			fujaba__Success = false;

			fujaba__IterEClassToPerformOperation = eClass.getEOperations()
					.iterator();

			while (!(fujaba__Success)
					&& fujaba__IterEClassToPerformOperation.hasNext()) {
				try {
					performOperation = (EOperation) fujaba__IterEClassToPerformOperation
							.next();

					// check object performOperation is really bound
					JavaSDM.ensure(performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							performOperation.getName(), "perform_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object ruleresult
			ruleresult = TGGRuntimeFactory.eINSTANCE
					.createIsApplicableRuleResult();

			// assign attribute ruleresult
			ruleresult.setSuccess(false);
			// assign attribute ruleresult
			ruleresult.setRule("AltUserStepNFToComboRule");

			// create link
			ruleresult.setPerformOperation(performOperation);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'core match'
		try {
			fujaba__Success = false;

			_TmpObject = (match.getObject("combo"));

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("guard"));

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;
			_TmpObject = (match.getObject("interaction"));

			// ensure correct type and really bound of object interaction
			JavaSDM.ensure(_TmpObject instanceof Interaction);
			interaction = (Interaction) _TmpObject;
			_TmpObject = (match.getObject("line"));

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;
			_TmpObject = (match.getObject("messageReceive"));

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("messageSend"));

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;
			_TmpObject = (match.getObject("operand"));

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("parentCombo"));

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;
			_TmpObject = (match.getObject("parentOperand"));

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;
			_TmpObject = (match.getObject("spec"));

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;
			_TmpObject = (match.getObject("sysLine"));

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;
			// check object match is really bound
			JavaSDM.ensure(match != null);
			// check isomorphic binding between objects parentCombo and combo 
			JavaSDM.ensure(!parentCombo.equals(combo));

			// check isomorphic binding between objects sysLine and line 
			JavaSDM.ensure(!sysLine.equals(line));

			// check isomorphic binding between objects messageSend and messageReceive 
			JavaSDM.ensure(!messageSend.equals(messageReceive));

			// check isomorphic binding between objects parentOperand and operand 
			JavaSDM.ensure(!parentOperand.equals(operand));

			// iterate to-many link target from parentOperand to flowToParentOperand
			fujaba__Success = false;

			fujaba__IterParentOperandToFlowToParentOperand = new ArrayList(
					org.moflon.util.eMoflonEMFUtil.getOppositeReference(
							parentOperand, FlowToInteractionFragment.class,
							"target")).iterator();

			while (fujaba__IterParentOperandToFlowToParentOperand.hasNext()) {
				try {
					flowToParentOperand = (FlowToInteractionFragment) fujaba__IterParentOperandToFlowToParentOperand
							.next();

					// check object flowToParentOperand is really bound
					JavaSDM.ensure(flowToParentOperand != null);
					// bind object
					_TmpObject = flowToParentOperand.getSource();

					// ensure correct type and really bound of object flow
					JavaSDM.ensure(_TmpObject instanceof NamedFlow);
					flow = (NamedFlow) _TmpObject;

					// iterate to-many link target from sysLine to sysActorToSysLine
					fujaba__Success = false;

					fujaba__IterSysLineToSysActorToSysLine = new ArrayList(
							org.moflon.util.eMoflonEMFUtil
									.getOppositeReference(sysLine,
											ActorToLifeline.class, "target"))
							.iterator();

					while (fujaba__IterSysLineToSysActorToSysLine.hasNext()) {
						try {
							sysActorToSysLine = (ActorToLifeline) fujaba__IterSysLineToSysActorToSysLine
									.next();

							// check object sysActorToSysLine is really bound
							JavaSDM.ensure(sysActorToSysLine != null);
							// bind object
							sysActor = sysActorToSysLine.getSource();

							// check object sysActor is really bound
							JavaSDM.ensure(sysActor != null);

							// iterate to-many link target from line to actorToLine
							fujaba__Success = false;

							fujaba__IterLineToActorToLine = new ArrayList(
									org.moflon.util.eMoflonEMFUtil
											.getOppositeReference(line,
													ActorToLifeline.class,
													"target")).iterator();

							while (fujaba__IterLineToActorToLine.hasNext()) {
								try {
									actorToLine = (ActorToLifeline) fujaba__IterLineToActorToLine
											.next();

									// check object actorToLine is really bound
									JavaSDM.ensure(actorToLine != null);
									// check isomorphic binding between objects sysActorToSysLine and actorToLine 
									JavaSDM.ensure(!sysActorToSysLine
											.equals(actorToLine));

									// bind object
									actor = actorToLine.getSource();

									// check object actor is really bound
									JavaSDM.ensure(actor != null);

									// check isomorphic binding between objects sysActor and actor 
									JavaSDM.ensure(!sysActor.equals(actor));

									// iterate to-many link target from interaction to useCaseToInteraction
									fujaba__Success = false;

									fujaba__IterInteractionToUseCaseToInteraction = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															interaction,
															UseCaseToInteraction.class,
															"target"))
											.iterator();

									while (fujaba__IterInteractionToUseCaseToInteraction
											.hasNext()) {
										try {
											useCaseToInteraction = (UseCaseToInteraction) fujaba__IterInteractionToUseCaseToInteraction
													.next();

											// check object useCaseToInteraction is really bound
											JavaSDM.ensure(useCaseToInteraction != null);
											// bind object
											useCase = useCaseToInteraction
													.getSource();

											// check object useCase is really bound
											JavaSDM.ensure(useCase != null);

											// story node 'find context'
											try {
												fujaba__Success = false;

												// check object actor is really bound
												JavaSDM.ensure(actor != null);
												// check object actorToLine is really bound
												JavaSDM.ensure(actorToLine != null);
												// check object combo is really bound
												JavaSDM.ensure(combo != null);
												// check object flow is really bound
												JavaSDM.ensure(flow != null);
												// check object flowToParentOperand is really bound
												JavaSDM.ensure(flowToParentOperand != null);
												// check object guard is really bound
												JavaSDM.ensure(guard != null);
												// check object interaction is really bound
												JavaSDM.ensure(interaction != null);
												// check object line is really bound
												JavaSDM.ensure(line != null);
												// check object messageReceive is really bound
												JavaSDM.ensure(messageReceive != null);
												// check object messageSend is really bound
												JavaSDM.ensure(messageSend != null);
												// check object operand is really bound
												JavaSDM.ensure(operand != null);
												// check object parentCombo is really bound
												JavaSDM.ensure(parentCombo != null);
												// check object parentOperand is really bound
												JavaSDM.ensure(parentOperand != null);
												// check object spec is really bound
												JavaSDM.ensure(spec != null);
												// check object sysActor is really bound
												JavaSDM.ensure(sysActor != null);
												// check object sysActorToSysLine is really bound
												JavaSDM.ensure(sysActorToSysLine != null);
												// check object sysLine is really bound
												JavaSDM.ensure(sysLine != null);
												// check object useCase is really bound
												JavaSDM.ensure(useCase != null);
												// check object useCaseToInteraction is really bound
												JavaSDM.ensure(useCaseToInteraction != null);
												// check isomorphic binding between objects sysActor and actor 
												JavaSDM.ensure(!sysActor
														.equals(actor));

												// check isomorphic binding between objects sysActorToSysLine and actorToLine 
												JavaSDM.ensure(!sysActorToSysLine
														.equals(actorToLine));

												// check isomorphic binding between objects parentCombo and combo 
												JavaSDM.ensure(!parentCombo
														.equals(combo));

												// check isomorphic binding between objects sysLine and line 
												JavaSDM.ensure(!sysLine
														.equals(line));

												// check isomorphic binding between objects messageSend and messageReceive 
												JavaSDM.ensure(!messageSend
														.equals(messageReceive));

												// check isomorphic binding between objects parentOperand and operand 
												JavaSDM.ensure(!parentOperand
														.equals(operand));

												// check link fragment from combo to interaction
												JavaSDM.ensure(interaction.equals(combo
														.getEnclosingInteraction()));

												// check link fragment from messageReceive to parentOperand
												JavaSDM.ensure(parentOperand.equals(messageReceive
														.getEnclosingOperand()));

												// check link guard from operand to guard
												JavaSDM.ensure(guard
														.equals(operand
																.getGuard()));

												// check link lifeline from line to interaction
												JavaSDM.ensure(interaction.equals(line
														.getInteraction()));

												// bind object
												packageDeclaration = actor
														.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
														.eContainer() : null;

												// check object packageDeclaration is really bound
												JavaSDM.ensure(packageDeclaration != null);

												// check if contained via correct reference
												JavaSDM.ensure(packageDeclaration
														.getActors().contains(
																actor));

												// check link actors from sysActor to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(sysActor
																.eContainer()));

												// check link flows from flow to useCase
												JavaSDM.ensure(useCase
														.equals(flow
																.eContainer()));

												// check link operand from parentOperand to parentCombo
												JavaSDM.ensure(parentCombo
														.equals(parentOperand
																.eContainer()));

												// check link source from actorToLine to actor
												JavaSDM.ensure(actor
														.equals(actorToLine
																.getSource()));

												// check link source from flowToParentOperand to flow
												JavaSDM.ensure(flow
														.equals(flowToParentOperand
																.getSource()));

												// check link source from sysActorToSysLine to sysActor
												JavaSDM.ensure(sysActor
														.equals(sysActorToSysLine
																.getSource()));

												// check link source from useCaseToInteraction to useCase
												JavaSDM.ensure(useCase
														.equals(useCaseToInteraction
																.getSource()));

												// check link specification from spec to guard
												JavaSDM.ensure(guard
														.equals(spec
																.eContainer()));

												// check link target from actorToLine to line
												JavaSDM.ensure(line
														.equals(actorToLine
																.getTarget()));

												// check link target from flowToParentOperand to parentOperand
												JavaSDM.ensure(parentOperand
														.equals(flowToParentOperand
																.getTarget()));

												// check link target from sysActorToSysLine to sysLine
												JavaSDM.ensure(sysLine
														.equals(sysActorToSysLine
																.getTarget()));

												// check link target from useCaseToInteraction to interaction
												JavaSDM.ensure(interaction
														.equals(useCaseToInteraction
																.getTarget()));

												// check link useCases from useCase to packageDeclaration
												JavaSDM.ensure(packageDeclaration
														.equals(useCase
																.eContainer()));

												// check link coveredBy from line to operand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(operand));

												// check link coveredBy from line to parentCombo
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentCombo));

												// check link coveredBy from line to parentOperand
												JavaSDM.ensure(line
														.getCoveredBy()
														.contains(parentOperand));

												// check link coveredBy from combo to sysLine
												JavaSDM.ensure(combo
														.getCovered().contains(
																sysLine));

												// check link coveredBy from messageSend to sysLine
												JavaSDM.ensure(messageSend
														.getCovered().contains(
																sysLine));

												// check link coveredBy from operand to sysLine
												JavaSDM.ensure(operand
														.getCovered().contains(
																sysLine));

												// check link coveredBy from parentCombo to sysLine
												JavaSDM.ensure(parentCombo
														.getCovered().contains(
																sysLine));

												// check link coveredBy from parentOperand to sysLine
												JavaSDM.ensure(parentOperand
														.getCovered().contains(
																sysLine));

												// create object __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object isApplicableMatch
												isApplicableMatch = TGGRuntimeFactory.eINSTANCE
														.createIsApplicableMatch();

												// create object __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_source_actor
												__actorToLine_source_actor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageSend_covered_sysLine
												__messageSend_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __combo_covered_sysLine
												__combo_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_sysLine
												__operand_covered_sysLine = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __combo_enclosingInteraction_interaction
												__combo_enclosingInteraction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_fragment_combo
												__interaction_fragment_combo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_operand
												__line_coveredBy_operand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_guard_guard
												__operand_guard_guard = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __operand_covered_line
												__operand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_covered_line
												__parentOperand_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __parentCombo_covered_line
												__parentCombo_covered_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCase_flows_flow
												__useCase_flows_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __actorToLine_target_line
												__actorToLine_target_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __line_interaction_interaction
												__line_interaction_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __interaction_lifeline_line
												__interaction_lifeline_line = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// create object __guard_specification_spec
												__guard_specification_spec = TGGRuntimeFactory.eINSTANCE
														.createEMoflonEdge();

												// assign attribute __packageDeclaration_actors_actor
												__packageDeclaration_actors_actor
														.setName("actors");
												// assign attribute __packageDeclaration_actors_sysActor
												__packageDeclaration_actors_sysActor
														.setName("actors");
												// assign attribute __sysLine_coveredBy_messageSend
												__sysLine_coveredBy_messageSend
														.setName("coveredBy");
												// assign attribute __messageSend_covered_sysLine
												__messageSend_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_combo
												__sysLine_coveredBy_combo
														.setName("coveredBy");
												// assign attribute __combo_covered_sysLine
												__combo_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_operand
												__sysLine_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_sysLine
												__operand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentOperand
												__sysLine_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_sysLine
												__parentOperand_covered_sysLine
														.setName("covered");
												// assign attribute __sysLine_coveredBy_parentCombo
												__sysLine_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_sysLine
												__parentCombo_covered_sysLine
														.setName("covered");
												// assign attribute __sysActorToSysLine_source_sysActor
												__sysActorToSysLine_source_sysActor
														.setName("source");
												// assign attribute __sysActorToSysLine_target_sysLine
												__sysActorToSysLine_target_sysLine
														.setName("target");
												// assign attribute __parentCombo_operand_parentOperand
												__parentCombo_operand_parentOperand
														.setName("operand");
												// assign attribute __parentOperand_fragment_messageReceive
												__parentOperand_fragment_messageReceive
														.setName("fragment");
												// assign attribute __messageReceive_enclosingOperand_parentOperand
												__messageReceive_enclosingOperand_parentOperand
														.setName("enclosingOperand");
												// assign attribute __flowToParentOperand_source_flow
												__flowToParentOperand_source_flow
														.setName("source");
												// assign attribute __flowToParentOperand_target_parentOperand
												__flowToParentOperand_target_parentOperand
														.setName("target");
												// assign attribute __line_coveredBy_parentOperand
												__line_coveredBy_parentOperand
														.setName("coveredBy");
												// assign attribute __parentOperand_covered_line
												__parentOperand_covered_line
														.setName("covered");
												// assign attribute __line_coveredBy_parentCombo
												__line_coveredBy_parentCombo
														.setName("coveredBy");
												// assign attribute __parentCombo_covered_line
												__parentCombo_covered_line
														.setName("covered");
												// assign attribute __combo_enclosingInteraction_interaction
												__combo_enclosingInteraction_interaction
														.setName("enclosingInteraction");
												// assign attribute __interaction_fragment_combo
												__interaction_fragment_combo
														.setName("fragment");
												// assign attribute __line_interaction_interaction
												__line_interaction_interaction
														.setName("interaction");
												// assign attribute __interaction_lifeline_line
												__interaction_lifeline_line
														.setName("lifeline");
												// assign attribute __useCase_flows_flow
												__useCase_flows_flow
														.setName("flows");
												// assign attribute __useCaseToInteraction_source_useCase
												__useCaseToInteraction_source_useCase
														.setName("source");
												// assign attribute __useCaseToInteraction_target_interaction
												__useCaseToInteraction_target_interaction
														.setName("target");
												// assign attribute __packageDeclaration_useCases_useCase
												__packageDeclaration_useCases_useCase
														.setName("useCases");
												// assign attribute __actorToLine_source_actor
												__actorToLine_source_actor
														.setName("source");
												// assign attribute __actorToLine_target_line
												__actorToLine_target_line
														.setName("target");
												// assign attribute __line_coveredBy_operand
												__line_coveredBy_operand
														.setName("coveredBy");
												// assign attribute __operand_covered_line
												__operand_covered_line
														.setName("covered");
												// assign attribute __operand_guard_guard
												__operand_guard_guard
														.setName("guard");
												// assign attribute __guard_specification_spec
												__guard_specification_spec
														.setName("specification");

												// create link
												__packageDeclaration_actors_sysActor
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(packageDeclaration);

												// create link
												__packageDeclaration_actors_actor
														.setSrc(packageDeclaration);

												// create link
												__packageDeclaration_useCases_useCase
														.setSrc(packageDeclaration);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actor);

												// create link
												__actorToLine_source_actor
														.setTrg(actor);

												// create link
												__packageDeclaration_actors_actor
														.setTrg(actor);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActor);

												// create link
												__packageDeclaration_actors_sysActor
														.setTrg(sysActor);

												// create link
												__sysActorToSysLine_source_sysActor
														.setTrg(sysActor);

												// create link
												__parentCombo_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_parentOperand
														.setSrc(sysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_operand
														.setSrc(sysLine);

												// create link
												__parentOperand_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_parentCombo
														.setSrc(sysLine);

												// create link
												__messageSend_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_combo
														.setSrc(sysLine);

												// create link
												__combo_covered_sysLine
														.setTrg(sysLine);

												// create link
												__operand_covered_sysLine
														.setTrg(sysLine);

												// create link
												__sysLine_coveredBy_messageSend
														.setSrc(sysLine);

												// create link
												__sysActorToSysLine_source_sysActor
														.setSrc(sysActorToSysLine);

												// create link
												__sysActorToSysLine_target_sysLine
														.setSrc(sysActorToSysLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(sysActorToSysLine);

												// create link
												__messageSend_covered_sysLine
														.setSrc(messageSend);

												// create link
												__sysLine_coveredBy_messageSend
														.setTrg(messageSend);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageSend);

												// create link
												__combo_covered_sysLine
														.setSrc(combo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(combo);

												// create link
												__combo_enclosingInteraction_interaction
														.setSrc(combo);

												// create link
												__interaction_fragment_combo
														.setTrg(combo);

												// create link
												__sysLine_coveredBy_combo
														.setTrg(combo);

												// create link
												__line_coveredBy_operand
														.setTrg(operand);

												// create link
												__operand_covered_sysLine
														.setSrc(operand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(operand);

												// create link
												__sysLine_coveredBy_operand
														.setTrg(operand);

												// create link
												__operand_guard_guard
														.setSrc(operand);

												// create link
												__operand_covered_line
														.setSrc(operand);

												// create link
												__line_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentOperand);

												// create link
												__parentOperand_covered_line
														.setSrc(parentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentOperand_fragment_messageReceive
														.setSrc(parentOperand);

												// create link
												__sysLine_coveredBy_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentOperand_covered_sysLine
														.setSrc(parentOperand);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_operand_parentOperand
														.setTrg(parentOperand);

												// create link
												__parentCombo_covered_line
														.setSrc(parentCombo);

												// create link
												__parentCombo_operand_parentOperand
														.setSrc(parentCombo);

												// create link
												__line_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												__parentCombo_covered_sysLine
														.setSrc(parentCombo);

												// create link
												__sysLine_coveredBy_parentCombo
														.setTrg(parentCombo);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(parentCombo);

												// create link
												__useCase_flows_flow
														.setTrg(flow);

												// create link
												__flowToParentOperand_source_flow
														.setTrg(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flow);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(flowToParentOperand);

												// create link
												__flowToParentOperand_target_parentOperand
														.setSrc(flowToParentOperand);

												// create link
												__flowToParentOperand_source_flow
														.setSrc(flowToParentOperand);

												// create link
												__parentOperand_fragment_messageReceive
														.setTrg(messageReceive);

												// create link
												__messageReceive_enclosingOperand_parentOperand
														.setSrc(messageReceive);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(messageReceive);

												// create link
												__actorToLine_target_line
														.setTrg(line);

												// create link
												__line_interaction_interaction
														.setSrc(line);

												// create link
												__operand_covered_line
														.setTrg(line);

												// create link
												__line_coveredBy_parentCombo
														.setSrc(line);

												// create link
												__interaction_lifeline_line
														.setTrg(line);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(line);

												// create link
												__parentCombo_covered_line
														.setTrg(line);

												// create link
												__parentOperand_covered_line
														.setTrg(line);

												// create link
												__line_coveredBy_parentOperand
														.setSrc(line);

												// create link
												__line_coveredBy_operand
														.setSrc(line);

												// create link
												__line_interaction_interaction
														.setTrg(interaction);

												// create link
												__interaction_fragment_combo
														.setSrc(interaction);

												// create link
												__useCaseToInteraction_target_interaction
														.setTrg(interaction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(interaction);

												// create link
												__combo_enclosingInteraction_interaction
														.setTrg(interaction);

												// create link
												__interaction_lifeline_line
														.setSrc(interaction);

												// create link
												__useCase_flows_flow
														.setSrc(useCase);

												// create link
												__packageDeclaration_useCases_useCase
														.setTrg(useCase);

												// create link
												__useCaseToInteraction_source_useCase
														.setTrg(useCase);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCase);

												// create link
												__useCaseToInteraction_target_interaction
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(useCaseToInteraction);

												// create link
												__useCaseToInteraction_source_useCase
														.setSrc(useCaseToInteraction);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(actorToLine);

												// create link
												__actorToLine_target_line
														.setSrc(actorToLine);

												// create link
												__actorToLine_source_actor
														.setSrc(actorToLine);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(guard);

												// create link
												__operand_guard_guard
														.setTrg(guard);

												// create link
												__guard_specification_spec
														.setSrc(guard);

												// create link
												__guard_specification_spec
														.setTrg(spec);

												// create link
												isApplicableMatch
														.getAllContextElements()
														.add(spec);

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_fragment_messageReceive,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__guard_specification_spec,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_target_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_messageSend,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_interaction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageReceive_enclosingOperand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_combo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__messageSend_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_lifeline_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_guard_guard,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_source_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentCombo_operand_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_target_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__combo_enclosingInteraction_interaction,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_operand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__interaction_fragment_combo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__line_coveredBy_parentCombo,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__parentOperand_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__operand_covered_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysLine_coveredBy_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_useCases_useCase,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__sysActorToSysLine_source_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCase_flows_flow,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__packageDeclaration_actors_sysActor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_source_actor,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__flowToParentOperand_target_parentOperand,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__actorToLine_target_line,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__combo_covered_sysLine,
																"allContextElements");

												// create link
												org.moflon.util.eMoflonEMFUtil
														.addOppositeReference(
																isApplicableMatch,
																__useCaseToInteraction_source_useCase,
																"allContextElements");
												// story node 'solve CSP'
												try {
													fujaba__Success = false;

													_TmpObject = (this
															.isApplicable_solveCsp_BWD(
																	isApplicableMatch,
																	packageDeclaration,
																	actor,
																	sysActor,
																	sysLine,
																	sysActorToSysLine,
																	messageSend,
																	combo,
																	operand,
																	parentOperand,
																	parentCombo,
																	flow,
																	flowToParentOperand,
																	messageReceive,
																	line,
																	interaction,
																	useCase,
																	useCaseToInteraction,
																	actorToLine,
																	guard, spec));

													// ensure correct type and really bound of object csp
													JavaSDM.ensure(_TmpObject instanceof CSP);
													csp = (CSP) _TmpObject;
													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

												// statement node 'check CSP'
												fujaba__Success = this
														.isApplicable_checkCsp_BWD(csp);
												if (fujaba__Success) {
													// story node 'add match to rule result'
													try {
														fujaba__Success = false;

														// check object isApplicableMatch is really bound
														JavaSDM.ensure(isApplicableMatch != null);
														// check object ruleresult is really bound
														JavaSDM.ensure(ruleresult != null);
														// assign attribute isApplicableMatch
														isApplicableMatch
																.setRuleName("AltUserStepNFToComboRule");
														// assign attribute ruleresult
														ruleresult
																.setSuccess(true);

														// create link
														ruleresult
																.getIsApplicableMatch()
																.add(isApplicableMatch);

														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

												} else {

												}

												fujaba__Success = true;
											} catch (JavaSDMException fujaba__InternalException) {
												fujaba__Success = false;
											}

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return ruleresult;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjectsToMatch_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		match.registerObject("sysLine", sysLine);
		match.registerObject("messageSend", messageSend);
		match.registerObject("combo", combo);
		match.registerObject("operand", operand);
		match.registerObject("parentOperand", parentOperand);
		match.registerObject("parentCombo", parentCombo);
		match.registerObject("messageReceive", messageReceive);
		match.registerObject("line", line);
		match.registerObject("interaction", interaction);
		match.registerObject("guard", guard);
		match.registerObject("spec", spec);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isAppropriate_solveCsp_BWD(Match match, Lifeline sysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, InteractionConstraint guard,
			LiteralString spec) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("alt");
		literal0.setType("String");

		// Create attribute variables
		Variable var_combo_interactionOperator = CSPFactoryHelper.eINSTANCE
				.createVariable("combo.interactionOperator", true, csp);
		var_combo_interactionOperator.setValue(combo.getInteractionOperator());
		var_combo_interactionOperator.setType("EObject");

		// Create explicit parameters

		// Create unbound variables

		// Create constraints
		EqInterOperKind eqInterOperKind = new EqInterOperKind();

		csp.getConstraints().add(eqInterOperKind);

		// Solve CSP
		eqInterOperKind.setRuleName("");
		eqInterOperKind.solve(var_combo_interactionOperator, literal0);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isAppropriate_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CSP isApplicable_solveCsp_BWD(IsApplicableMatch isApplicableMatch,
			PackageDeclaration packageDeclaration, Actor actor, Actor sysActor,
			Lifeline sysLine, ActorToLifeline sysActorToSysLine,
			MessageOccurrenceSpecification messageSend, CombinedFragment combo,
			InteractionOperand operand, InteractionOperand parentOperand,
			CombinedFragment parentCombo, NamedFlow flow,
			FlowToInteractionFragment flowToParentOperand,
			MessageOccurrenceSpecification messageReceive, Lifeline line,
			Interaction interaction, UseCase useCase,
			UseCaseToInteraction useCaseToInteraction,
			ActorToLifeline actorToLine, InteractionConstraint guard,
			LiteralString spec) {
		// Create CSP
		CSP csp = CspFactory.eINSTANCE.createCSP();
		isApplicableMatch.getAttributeInfo().add(csp);

		// Create literals
		Variable literal0 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal0", true, csp);
		literal0.setValue("person");
		literal0.setType("String");
		Variable literal1 = CSPFactoryHelper.eINSTANCE.createVariable(
				"literal1", true, csp);
		literal1.setValue("system");
		literal1.setType("String");

		// Create attribute variables
		Variable var_actor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"actor.type", true, csp);
		var_actor_type.setValue(actor.getType());
		var_actor_type.setType("EObject");
		Variable var_sysActor_type = CSPFactoryHelper.eINSTANCE.createVariable(
				"sysActor.type", true, csp);
		var_sysActor_type.setValue(sysActor.getType());
		var_sysActor_type.setType("EObject");
		Variable var_guard_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"guard.name", true, csp);
		var_guard_name.setValue(guard.getName());
		var_guard_name.setType("");
		Variable var_spec_value = CSPFactoryHelper.eINSTANCE.createVariable(
				"spec.value", true, csp);
		var_spec_value.setValue(spec.getValue());
		var_spec_value.setType("");

		// Create explicit parameters

		// Create unbound variables
		Variable var_altFlow_name = CSPFactoryHelper.eINSTANCE.createVariable(
				"altFlow.name", csp);
		var_altFlow_name.setType("");
		Variable var_alt_condition = CSPFactoryHelper.eINSTANCE.createVariable(
				"alt.condition", csp);
		var_alt_condition.setType("");

		// Create constraints
		EqActorType eqActorType = new EqActorType();
		EqActorType eqActorType_0 = new EqActorType();
		Eq eq = new Eq();
		Eq eq_0 = new Eq();

		csp.getConstraints().add(eqActorType);
		csp.getConstraints().add(eqActorType_0);
		csp.getConstraints().add(eq);
		csp.getConstraints().add(eq_0);

		// Solve CSP
		eqActorType.setRuleName("");
		eqActorType.solve(var_actor_type, literal0);
		eqActorType_0.setRuleName("");
		eqActorType_0.solve(var_sysActor_type, literal1);
		eq.setRuleName("");
		eq.solve(var_altFlow_name, var_guard_name);
		eq_0.setRuleName("");
		eq_0.solve(var_alt_condition, var_spec_value);

		// Snapshot pattern match on which CSP is solved
		isApplicableMatch.registerObject("packageDeclaration",
				packageDeclaration);
		isApplicableMatch.registerObject("actor", actor);
		isApplicableMatch.registerObject("sysActor", sysActor);
		isApplicableMatch.registerObject("sysLine", sysLine);
		isApplicableMatch
				.registerObject("sysActorToSysLine", sysActorToSysLine);
		isApplicableMatch.registerObject("messageSend", messageSend);
		isApplicableMatch.registerObject("combo", combo);
		isApplicableMatch.registerObject("operand", operand);
		isApplicableMatch.registerObject("parentOperand", parentOperand);
		isApplicableMatch.registerObject("parentCombo", parentCombo);
		isApplicableMatch.registerObject("flow", flow);
		isApplicableMatch.registerObject("flowToParentOperand",
				flowToParentOperand);
		isApplicableMatch.registerObject("messageReceive", messageReceive);
		isApplicableMatch.registerObject("line", line);
		isApplicableMatch.registerObject("interaction", interaction);
		isApplicableMatch.registerObject("useCase", useCase);
		isApplicableMatch.registerObject("useCaseToInteraction",
				useCaseToInteraction);
		isApplicableMatch.registerObject("actorToLine", actorToLine);
		isApplicableMatch.registerObject("guard", guard);
		isApplicableMatch.registerObject("spec", spec);
		return csp;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isApplicable_checkCsp_BWD(CSP csp) {
		return csp.check();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void registerObjects_BWD(PerformRuleResult ruleresult,
			EObject packageDeclaration, EObject actor, EObject sysActor,
			EObject sysLine, EObject sysActorToSysLine, EObject messageSend,
			EObject combo, EObject operand, EObject parentOperand,
			EObject parentCombo, EObject flow, EObject flowToParentOperand,
			EObject messageReceive, EObject line, EObject interaction,
			EObject useCase, EObject useCaseToInteraction, EObject actorToLine,
			EObject step, EObject alt, EObject stepToCombo,
			EObject alternative1ToOperand, EObject guard, EObject spec,
			EObject altFlow, EObject altFlowToOperand) {
		ruleresult.registerObject("packageDeclaration", packageDeclaration);
		ruleresult.registerObject("actor", actor);
		ruleresult.registerObject("sysActor", sysActor);
		ruleresult.registerObject("sysLine", sysLine);
		ruleresult.registerObject("sysActorToSysLine", sysActorToSysLine);
		ruleresult.registerObject("messageSend", messageSend);
		ruleresult.registerObject("combo", combo);
		ruleresult.registerObject("operand", operand);
		ruleresult.registerObject("parentOperand", parentOperand);
		ruleresult.registerObject("parentCombo", parentCombo);
		ruleresult.registerObject("flow", flow);
		ruleresult.registerObject("flowToParentOperand", flowToParentOperand);
		ruleresult.registerObject("messageReceive", messageReceive);
		ruleresult.registerObject("line", line);
		ruleresult.registerObject("interaction", interaction);
		ruleresult.registerObject("useCase", useCase);
		ruleresult.registerObject("useCaseToInteraction", useCaseToInteraction);
		ruleresult.registerObject("actorToLine", actorToLine);
		ruleresult.registerObject("step", step);
		ruleresult.registerObject("alt", alt);
		ruleresult.registerObject("stepToCombo", stepToCombo);
		ruleresult.registerObject("alternative1ToOperand",
				alternative1ToOperand);
		ruleresult.registerObject("guard", guard);
		ruleresult.registerObject("spec", spec);
		ruleresult.registerObject("altFlow", altFlow);
		ruleresult.registerObject("altFlowToOperand", altFlowToOperand);

	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean checkTypes_BWD(Match match) {
		return true
				&& match.getObject("messageSend")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("combo")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getCombinedFragment())
				&& match.getObject("operand")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionOperand())
				&& match.getObject("messageReceive")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getMessageOccurrenceSpecification())
				&& match.getObject("guard")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getInteractionConstraint())
				&& match.getObject("spec")
						.eClass()
						.equals(ModalSequenceDiagram.ModalSequenceDiagramPackage.eINSTANCE
								.getLiteralString());
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_461(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_690943 = null;
		Interaction __DEC_messageSend_enclosingInteraction_11072 = null;
		Interaction __DEC_operand_enclosingInteraction_768588 = null;
		InteractionOperand __DEC_combo_fragment_736002 = null;
		InteractionOperand __DEC_messageReceive_fragment_625578 = null;
		InteractionOperand __DEC_messageSend_fragment_136431 = null;
		InteractionOperand __DEC_operand_fragment_152494 = null;
		Constraint __DEC_spec_specification_602542 = null;
		InteractionOperand __DEC_guard_guard_475893 = null;
		CombinedFragment __DEC_operand_operand_932854 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link coveredBy from sysLine to operand
			fujaba__Success = false;

			fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// iterate to-many link coveredBy from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link coveredBy from parentCombo to line
									fujaba__Success = false;

									fujaba__IterParentComboToLine = new ArrayList(
											parentCombo.getCovered())
											.iterator();

									while (fujaba__IterParentComboToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentComboToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// bind object
											_TmpObject = _edge_coveredBy
													.getTrg();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;

											// check link coveredBy from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link coveredBy from messageSend to sysLine
											JavaSDM.ensure(messageSend
													.getCovered().contains(
															sysLine));

											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_690943 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_690943 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_690943 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_690943 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_690943
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_11072 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_11072 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_11072 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_11072 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_11072
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_768588 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_768588 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_768588 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_768588 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_768588
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_736002 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_736002 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_736002 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_736002 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_736002
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_736002 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_736002
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_625578 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_625578 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_625578 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_625578 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_625578
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_625578 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_625578
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_136431 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_136431 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_136431 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_136431 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_136431
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_136431 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_136431
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_152494 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_152494 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_152494 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_152494 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_152494
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_152494 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_152494
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_602542 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_602542 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_602542 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_602542
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_602542 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_602542
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_475893 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_475893 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_475893 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_475893
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_475893 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_475893
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_475893 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_475893
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_932854 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_932854 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_932854 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_932854
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_932854 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_932854
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_932854 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_932854
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_coveredBy to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_462(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_896385 = null;
		Interaction __DEC_messageSend_enclosingInteraction_436671 = null;
		Interaction __DEC_operand_enclosingInteraction_986137 = null;
		InteractionOperand __DEC_combo_fragment_948196 = null;
		InteractionOperand __DEC_messageReceive_fragment_767112 = null;
		InteractionOperand __DEC_messageSend_fragment_966387 = null;
		InteractionOperand __DEC_operand_fragment_187677 = null;
		Constraint __DEC_spec_specification_200089 = null;
		InteractionOperand __DEC_guard_guard_742525 = null;
		CombinedFragment __DEC_operand_operand_853918 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		MessageOccurrenceSpecification messageSend = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object messageSend
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageSend = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link coveredBy from messageSend to sysLine
			JavaSDM.ensure(messageSend.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					interaction = combo.getEnclosingInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link coveredBy from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link coveredBy from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// check link coveredBy from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// check link coveredBy from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to messageSend
															JavaSDM.ensure(messageSend
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_896385 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_896385 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_896385 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_896385 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_896385
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_436671 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_436671 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_436671 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_436671 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_436671
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_986137 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_986137 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_986137 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_986137 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_986137
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_948196 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_948196 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_948196 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_948196 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_948196
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_948196 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_948196
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_767112 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_767112 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_767112 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_767112 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_767112
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_767112 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_767112
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_966387 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_966387 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_966387 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_966387 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_966387
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_966387 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_966387
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_187677 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_187677 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_187677 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_187677 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_187677
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_187677 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_187677
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_200089 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_200089 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_200089 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_200089
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_200089 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_200089
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_742525 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_742525 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_742525 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_742525
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_742525 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_742525
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_742525 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_742525
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_853918 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_853918 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_853918 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_853918
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_853918 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_853918
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_853918 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_853918
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to messageSend
																JavaSDM.ensure(messageSend
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_463(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_312782 = null;
		Interaction __DEC_messageSend_enclosingInteraction_743467 = null;
		Interaction __DEC_operand_enclosingInteraction_648688 = null;
		InteractionOperand __DEC_combo_fragment_123705 = null;
		InteractionOperand __DEC_messageReceive_fragment_307884 = null;
		InteractionOperand __DEC_messageSend_fragment_772863 = null;
		InteractionOperand __DEC_operand_fragment_50586 = null;
		Constraint __DEC_spec_specification_934469 = null;
		InteractionOperand __DEC_guard_guard_504531 = null;
		CombinedFragment __DEC_operand_operand_955782 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			interaction = combo.getEnclosingInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link coveredBy from combo to sysLine
			JavaSDM.ensure(combo.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to messageSend
			fujaba__Success = false;

			fujaba__IterSysLineToMessageSend = new ArrayList(
					sysLine.getCoveredBy()).iterator();

			while (fujaba__IterSysLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link coveredBy from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link coveredBy from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// check link coveredBy from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// check link coveredBy from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// negative check for link message from messageReceive
														JavaSDM.ensure(messageReceive
																.getMessage() == null);
														// negative check for link message from messageSend
														JavaSDM.ensure(messageSend
																.getMessage() == null);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_312782 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_312782 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_312782 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_312782 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_312782
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_743467 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_743467 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_743467 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_743467 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_743467
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_648688 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_648688 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_648688 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_648688 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_648688
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_123705 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_123705 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_123705 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_123705 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_123705
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_123705 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_123705
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_307884 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_307884 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_307884 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_307884 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_307884
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_307884 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_307884
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_772863 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_772863 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_772863 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_772863 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_772863
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_772863 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_772863
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_50586 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_50586 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_50586 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_50586 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_50586
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_50586 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_50586
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_934469 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_934469 is really bound
															JavaSDM.ensure(__DEC_spec_specification_934469 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_934469
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_934469 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_934469
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_504531 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_504531 is really bound
															JavaSDM.ensure(__DEC_guard_guard_504531 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_504531
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_504531 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_504531
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_504531 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_504531
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_955782 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_955782 is really bound
															JavaSDM.ensure(__DEC_operand_operand_955782 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_955782
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_955782 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_955782
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_955782 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_955782
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link receiveEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link receiveEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link sendEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// negative check for link sendEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to interaction
														JavaSDM.ensure(interaction.equals(combo
																.getEnclosingInteraction()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to combo
														JavaSDM.ensure(combo
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link coveredBy from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link coveredBy from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link coveredBy from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link coveredBy from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		interaction,
																		guard,
																		spec);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_464(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_34450 = null;
		Interaction __DEC_messageSend_enclosingInteraction_875558 = null;
		Interaction __DEC_operand_enclosingInteraction_72809 = null;
		InteractionOperand __DEC_combo_fragment_486692 = null;
		InteractionOperand __DEC_messageReceive_fragment_920601 = null;
		InteractionOperand __DEC_messageSend_fragment_896093 = null;
		InteractionOperand __DEC_operand_fragment_661255 = null;
		Constraint __DEC_spec_specification_871353 = null;
		InteractionOperand __DEC_guard_guard_126591 = null;
		CombinedFragment __DEC_operand_operand_844249 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			interaction = combo.getEnclosingInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link coveredBy from combo to sysLine
			JavaSDM.ensure(combo.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to operand
			fujaba__Success = false;

			fujaba__IterSysLineToOperand = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToOperand.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToOperand.next();

					// ensure correct type and really bound of object operand
					JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
					operand = (InteractionOperand) _TmpObject;
					// bind object
					guard = operand.getGuard();

					// check object guard is really bound
					JavaSDM.ensure(guard != null);

					// bind object
					_TmpObject = guard.getSpecification();

					// ensure correct type and really bound of object spec
					JavaSDM.ensure(_TmpObject instanceof LiteralString);
					spec = (LiteralString) _TmpObject;

					// iterate to-many link coveredBy from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link coveredBy from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link coveredBy from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// iterate to-many link coveredBy from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// check link coveredBy from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to combo
															JavaSDM.ensure(combo
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_34450 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_34450 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_34450 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_34450 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_34450
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_875558 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_875558 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_875558 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_875558 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_875558
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_72809 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_72809 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_72809 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_72809 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_72809
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_486692 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_486692 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_486692 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_486692 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_486692
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_486692 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_486692
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_920601 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_920601 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_920601 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_920601 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_920601
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_920601 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_920601
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_896093 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_896093 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_896093 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_896093 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_896093
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_896093 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_896093
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_661255 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_661255 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_661255 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_661255 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_661255
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_661255 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_661255
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_871353 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_871353 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_871353 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_871353
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_871353 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_871353
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_126591 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_126591 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_126591 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_126591
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_126591 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_126591
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_126591 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_126591
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_844249 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_844249 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_844249 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_844249
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_844249 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_844249
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_844249 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_844249
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to combo
																JavaSDM.ensure(combo
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to combo
																JavaSDM.ensure(combo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_465(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_445613 = null;
		Interaction __DEC_messageSend_enclosingInteraction_638198 = null;
		Interaction __DEC_operand_enclosingInteraction_240651 = null;
		InteractionOperand __DEC_combo_fragment_54522 = null;
		InteractionOperand __DEC_messageReceive_fragment_567916 = null;
		InteractionOperand __DEC_messageSend_fragment_298341 = null;
		InteractionOperand __DEC_operand_fragment_739136 = null;
		Constraint __DEC_spec_specification_10873 = null;
		InteractionOperand __DEC_guard_guard_683653 = null;
		CombinedFragment __DEC_operand_operand_905838 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link coveredBy from operand to sysLine
			JavaSDM.ensure(operand.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					interaction = combo.getEnclosingInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link coveredBy from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link coveredBy from sysLine to parentOperand
							fujaba__Success = false;

							fujaba__IterSysLineToParentOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentOperand
											.next();

									// ensure correct type and really bound of object parentOperand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									parentOperand = (InteractionOperand) _TmpObject;
									// check isomorphic binding between objects parentOperand and operand 
									JavaSDM.ensure(!parentOperand
											.equals(operand));

									// bind object
									parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
											.eContainer() : null;

									// check object parentCombo is really bound
									JavaSDM.ensure(parentCombo != null);

									// check if contained via correct reference
									JavaSDM.ensure(parentCombo.getOperand()
											.contains(parentOperand));

									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// check link coveredBy from parentCombo to sysLine
									JavaSDM.ensure(parentCombo.getCovered()
											.contains(sysLine));

									// iterate to-many link coveredBy from parentOperand to line
									fujaba__Success = false;

									fujaba__IterParentOperandToLine = new ArrayList(
											parentOperand.getCovered())
											.iterator();

									while (fujaba__IterParentOperandToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// check link coveredBy from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// negative check for link message from messageReceive
														JavaSDM.ensure(messageReceive
																.getMessage() == null);
														// negative check for link message from messageSend
														JavaSDM.ensure(messageSend
																.getMessage() == null);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_445613 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_445613 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_445613 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_445613 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_445613
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_638198 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_638198 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_638198 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_638198 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_638198
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_240651 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_240651 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_240651 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_240651 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_240651
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_54522 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_54522 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_54522 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_54522 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_54522
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_54522 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_54522
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_567916 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_567916 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_567916 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567916 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567916
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_567916 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_567916
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_298341 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_298341 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_298341 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_298341 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_298341
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_298341 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_298341
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_739136 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_739136 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_739136 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_739136 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_739136
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_739136 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_739136
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_10873 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_10873 is really bound
															JavaSDM.ensure(__DEC_spec_specification_10873 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_10873
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_10873 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_10873
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_683653 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_683653 is really bound
															JavaSDM.ensure(__DEC_guard_guard_683653 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_683653
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_683653 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_683653
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_683653 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_683653
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_905838 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_905838 is really bound
															JavaSDM.ensure(__DEC_operand_operand_905838 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_905838
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_905838 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_905838
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_905838 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_905838
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link receiveEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link receiveEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link sendEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// negative check for link sendEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to interaction
														JavaSDM.ensure(interaction.equals(combo
																.getEnclosingInteraction()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to sysLine
														JavaSDM.ensure(sysLine
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link coveredBy from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link coveredBy from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link coveredBy from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link coveredBy from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		interaction,
																		guard,
																		spec);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_466(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_13603 = null;
		Interaction __DEC_messageSend_enclosingInteraction_91783 = null;
		Interaction __DEC_operand_enclosingInteraction_260262 = null;
		InteractionOperand __DEC_combo_fragment_604508 = null;
		InteractionOperand __DEC_messageReceive_fragment_38377 = null;
		InteractionOperand __DEC_messageSend_fragment_354986 = null;
		InteractionOperand __DEC_operand_fragment_755081 = null;
		Constraint __DEC_spec_specification_221419 = null;
		InteractionOperand __DEC_guard_guard_695451 = null;
		CombinedFragment __DEC_operand_operand_868770 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link coveredBy from operand to sysLine
			JavaSDM.ensure(operand.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					interaction = combo.getEnclosingInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link coveredBy from sysLine to parentCombo
					fujaba__Success = false;

					fujaba__IterSysLineToParentCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToParentCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToParentCombo
									.next();

							// ensure correct type and really bound of object parentCombo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							parentCombo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// iterate to-many link coveredBy from parentCombo to line
							fujaba__Success = false;

							fujaba__IterParentComboToLine = new ArrayList(
									parentCombo.getCovered()).iterator();

							while (fujaba__IterParentComboToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterParentComboToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// check link coveredBy from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// iterate to-many link src from sysLine to _edge_coveredBy
															fujaba__Success = false;

															fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					sysLine,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterSysLineTo_edge_coveredBy
																	.hasNext()) {
																try {
																	_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																			.next();

																	// check object _edge_coveredBy is really bound
																	JavaSDM.ensure(_edge_coveredBy != null);
																	// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																	JavaSDM.ensure(!_edge_coveredBy
																			.equals(_edge_covered));

																	// check link trg from _edge_coveredBy to operand
																	JavaSDM.ensure(operand
																			.equals(_edge_coveredBy
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// negative check for link message from messageReceive
																		JavaSDM.ensure(messageReceive
																				.getMessage() == null);
																		// negative check for link message from messageSend
																		JavaSDM.ensure(messageSend
																				.getMessage() == null);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_13603 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_13603 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_13603 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_13603 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_13603
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_91783 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_91783 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_91783 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_91783 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_91783
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_260262 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_260262 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_260262 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_260262 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_260262
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_604508 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_604508 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_604508 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_604508 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_604508
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_604508 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_604508
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_38377 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_38377 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_38377 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_38377 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_38377
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_38377 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_38377
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_354986 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_354986 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_354986 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_354986 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_354986
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_354986 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_354986
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_755081 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_755081 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_755081 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_755081 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_755081
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_755081 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_755081
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_221419 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_221419 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_221419 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_221419
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_221419 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_221419
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_695451 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_695451 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_695451 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_695451
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_695451 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_695451
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_695451 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_695451
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_868770 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_868770 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_868770 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_868770
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_868770 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_868770
																					.equals(combo));

																			// check isomorphic binding between objects __DEC_operand_operand_868770 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_operand_868770
																					.equals(parentCombo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link receiveEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link receiveEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_covered is really bound
																		JavaSDM.ensure(_edge_covered != null);
																		// check object _edge_coveredBy is really bound
																		JavaSDM.ensure(_edge_coveredBy != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																		JavaSDM.ensure(!_edge_coveredBy
																				.equals(_edge_covered));

																		// check isomorphic binding between objects parentCombo and combo 
																		JavaSDM.ensure(!parentCombo
																				.equals(combo));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(interaction
																				.equals(combo
																						.getEnclosingInteraction()));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link operand from parentOperand to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(parentOperand
																						.eContainer()));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link operand from operand to parentCombo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(parentCombo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_covered to operand
																		JavaSDM.ensure(operand
																				.equals(_edge_covered
																						.getSrc()));

																		// check link src from _edge_coveredBy to sysLine
																		JavaSDM.ensure(sysLine
																				.equals(_edge_coveredBy
																						.getSrc()));

																		// check link trg from _edge_covered to sysLine
																		JavaSDM.ensure(sysLine
																				.equals(_edge_covered
																						.getTrg()));

																		// check link trg from _edge_coveredBy to operand
																		JavaSDM.ensure(operand
																				.equals(_edge_coveredBy
																						.getTrg()));

																		// check link coveredBy from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link coveredBy from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link coveredBy from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link coveredBy from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						interaction,
																						guard,
																						spec);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_467(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_834755 = null;
		Interaction __DEC_messageSend_enclosingInteraction_415136 = null;
		Interaction __DEC_operand_enclosingInteraction_188352 = null;
		InteractionOperand __DEC_combo_fragment_145259 = null;
		InteractionOperand __DEC_messageReceive_fragment_314434 = null;
		InteractionOperand __DEC_messageSend_fragment_881131 = null;
		InteractionOperand __DEC_operand_fragment_493834 = null;
		Constraint __DEC_spec_specification_275235 = null;
		InteractionOperand __DEC_guard_guard_950885 = null;
		CombinedFragment __DEC_operand_operand_633185 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterParentComboToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentCombo = null;
		CombinedFragment parentCombo = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// iterate to-many link coveredBy from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// bind object
					interaction = combo.getEnclosingInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link coveredBy from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link coveredBy from sysLine to parentCombo
							fujaba__Success = false;

							fujaba__IterSysLineToParentCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToParentCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToParentCombo
											.next();

									// ensure correct type and really bound of object parentCombo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									parentCombo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// iterate to-many link coveredBy from parentCombo to line
									fujaba__Success = false;

									fujaba__IterParentComboToLine = new ArrayList(
											parentCombo.getCovered())
											.iterator();

									while (fujaba__IterParentComboToLine
											.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterParentComboToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// check link coveredBy from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link coveredBy from sysLine to messageSend
											fujaba__Success = false;

											fujaba__IterSysLineToMessageSend = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToMessageSend
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToMessageSend
															.next();

													// ensure correct type and really bound of object messageSend
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageSend = (MessageOccurrenceSpecification) _TmpObject;
													// bind object
													_TmpObject = _edge_coveredBy
															.getTrg();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;

													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// check link coveredBy from parentOperand to sysLine
													JavaSDM.ensure(parentOperand
															.getCovered()
															.contains(sysLine));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_834755 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_834755 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_834755 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_834755 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_834755
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_415136 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_415136 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_415136 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_415136 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_415136
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_188352 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_188352 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_188352 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_188352 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_188352
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_145259 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_145259 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_145259 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_145259 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_145259
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_145259 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_145259
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_314434 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_314434 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_314434 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_314434 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_314434
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_314434 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_314434
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_881131 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_881131 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_881131 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_881131 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_881131
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_881131 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_881131
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_493834 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_493834 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_493834 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_493834 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_493834
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_493834 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_493834
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_275235 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_275235 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_275235 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_275235
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_275235 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_275235
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_950885 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_950885 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_950885 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_950885
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_950885 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_950885
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_950885 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_950885
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_633185 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_633185 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_633185 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_633185
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_633185 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_633185
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_633185 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_633185
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_coveredBy to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_468(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_252502 = null;
		Interaction __DEC_messageSend_enclosingInteraction_124579 = null;
		Interaction __DEC_operand_enclosingInteraction_790560 = null;
		InteractionOperand __DEC_combo_fragment_688533 = null;
		InteractionOperand __DEC_messageReceive_fragment_319686 = null;
		InteractionOperand __DEC_messageSend_fragment_218228 = null;
		InteractionOperand __DEC_operand_fragment_13631 = null;
		Constraint __DEC_spec_specification_890387 = null;
		InteractionOperand __DEC_guard_guard_41166 = null;
		CombinedFragment __DEC_operand_operand_390597 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// bind object
					_TmpObject = _edge_covered.getTrg();

					// ensure correct type and really bound of object sysLine
					JavaSDM.ensure(_TmpObject instanceof Lifeline);
					sysLine = (Lifeline) _TmpObject;

					// check link coveredBy from parentCombo to sysLine
					JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

					// check link coveredBy from parentOperand to sysLine
					JavaSDM.ensure(parentOperand.getCovered().contains(sysLine));

					// iterate to-many link coveredBy from parentOperand to line
					fujaba__Success = false;

					fujaba__IterParentOperandToLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToLine.hasNext()) {
						try {
							line = (Lifeline) fujaba__IterParentOperandToLine
									.next();

							// check object line is really bound
							JavaSDM.ensure(line != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link coveredBy from line to parentCombo
							JavaSDM.ensure(line.getCoveredBy().contains(
									parentCombo));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// iterate to-many link coveredBy from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link src from sysLine to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			sysLine,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterSysLineTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link trg from _edge_coveredBy to parentOperand
															JavaSDM.ensure(parentOperand
																	.equals(_edge_coveredBy
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_252502 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_252502 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_252502 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_252502 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_252502
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_124579 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_124579 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_124579 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_124579 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_124579
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_790560 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_790560 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_790560 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_790560 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_790560
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_688533 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_688533 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_688533 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_688533 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_688533
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_688533 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_688533
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_319686 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_319686 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_319686 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_319686 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_319686
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_319686 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_319686
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_218228 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_218228 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_218228 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_218228 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_218228
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_218228 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_218228
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_13631 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_13631 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_13631 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_13631 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_13631
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_13631 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_13631
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_890387 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_890387 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_890387 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_890387
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_890387 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_890387
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_41166 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_41166 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_41166 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_41166
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_41166 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_41166
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_41166 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_41166
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_390597 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_390597 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_390597 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_390597
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_390597 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_390597
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_390597 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_390597
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_469(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_316456 = null;
		Interaction __DEC_messageSend_enclosingInteraction_260214 = null;
		Interaction __DEC_operand_enclosingInteraction_837630 = null;
		InteractionOperand __DEC_combo_fragment_853340 = null;
		InteractionOperand __DEC_messageReceive_fragment_174257 = null;
		InteractionOperand __DEC_messageSend_fragment_294431 = null;
		InteractionOperand __DEC_operand_fragment_52674 = null;
		Constraint __DEC_spec_specification_350529 = null;
		InteractionOperand __DEC_guard_guard_693426 = null;
		CombinedFragment __DEC_operand_operand_279697 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		CombinedFragment parentCombo = null;
		Lifeline sysLine = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link coveredBy from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to messageSend
			fujaba__Success = false;

			fujaba__IterSysLineToMessageSend = new ArrayList(
					sysLine.getCoveredBy()).iterator();

			while (fujaba__IterSysLineToMessageSend.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToMessageSend.next();

					// ensure correct type and really bound of object messageSend
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageSend = (MessageOccurrenceSpecification) _TmpObject;
					// iterate to-many link coveredBy from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link coveredBy from operand to line
							fujaba__Success = false;

							fujaba__IterOperandToLine = new ArrayList(
									operand.getCovered()).iterator();

							while (fujaba__IterOperandToLine.hasNext()) {
								try {
									line = (Lifeline) fujaba__IterOperandToLine
											.next();

									// check object line is really bound
									JavaSDM.ensure(line != null);
									// check isomorphic binding between objects sysLine and line 
									JavaSDM.ensure(!sysLine.equals(line));

									// check link coveredBy from line to parentCombo
									JavaSDM.ensure(line.getCoveredBy()
											.contains(parentCombo));

									// iterate to-many link coveredBy from sysLine to combo
									fujaba__Success = false;

									fujaba__IterSysLineToCombo = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToCombo.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToCombo
													.next();

											// ensure correct type and really bound of object combo
											JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
											combo = (CombinedFragment) _TmpObject;
											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// bind object
											interaction = combo
													.getEnclosingInteraction();

											// check object interaction is really bound
											JavaSDM.ensure(interaction != null);

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_316456 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_316456 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_316456 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_316456 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_316456
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_260214 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_260214 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_260214 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_260214 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_260214
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_837630 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_837630 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_837630 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_837630 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_837630
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_853340 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_853340 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_853340 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_853340 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_853340
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_853340 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_853340
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_174257 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_174257 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_174257 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_174257 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_174257
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_174257 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_174257
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_294431 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_294431 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_294431 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_294431 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_294431
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_294431 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_294431
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_52674 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_52674 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_52674 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_52674 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_52674
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_52674 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_52674
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_350529 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_350529 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_350529 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_350529
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_350529 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_350529
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_693426 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_693426 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_693426 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_693426
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_693426 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_693426
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_693426 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_693426
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_279697 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_279697 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_279697 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_279697
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_279697 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_279697
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_279697 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_279697
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_coveredBy to sysLine
																JavaSDM.ensure(sysLine
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_470(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_11453 = null;
		Interaction __DEC_messageSend_enclosingInteraction_861768 = null;
		Interaction __DEC_operand_enclosingInteraction_96417 = null;
		InteractionOperand __DEC_combo_fragment_213986 = null;
		InteractionOperand __DEC_messageReceive_fragment_317056 = null;
		InteractionOperand __DEC_messageSend_fragment_385293 = null;
		InteractionOperand __DEC_operand_fragment_311677 = null;
		Constraint __DEC_spec_specification_934507 = null;
		InteractionOperand __DEC_guard_guard_416632 = null;
		CombinedFragment __DEC_operand_operand_611851 = null;
		Match match = null;
		Iterator fujaba__IterSysLineTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object sysLine
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			sysLine = (Lifeline) _TmpObject;

			// check link coveredBy from parentCombo to sysLine
			JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

			// iterate to-many link coveredBy from sysLine to combo
			fujaba__Success = false;

			fujaba__IterSysLineToCombo = new ArrayList(sysLine.getCoveredBy())
					.iterator();

			while (fujaba__IterSysLineToCombo.hasNext()) {
				try {
					_TmpObject = fujaba__IterSysLineToCombo.next();

					// ensure correct type and really bound of object combo
					JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
					combo = (CombinedFragment) _TmpObject;
					// check isomorphic binding between objects parentCombo and combo 
					JavaSDM.ensure(!parentCombo.equals(combo));

					// bind object
					interaction = combo.getEnclosingInteraction();

					// check object interaction is really bound
					JavaSDM.ensure(interaction != null);

					// iterate to-many link coveredBy from sysLine to operand
					fujaba__Success = false;

					fujaba__IterSysLineToOperand = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToOperand.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToOperand.next();

							// ensure correct type and really bound of object operand
							JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
							operand = (InteractionOperand) _TmpObject;
							// bind object
							guard = operand.getGuard();

							// check object guard is really bound
							JavaSDM.ensure(guard != null);

							// bind object
							_TmpObject = guard.getSpecification();

							// ensure correct type and really bound of object spec
							JavaSDM.ensure(_TmpObject instanceof LiteralString);
							spec = (LiteralString) _TmpObject;

							// iterate to-many link coveredBy from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// check link operand from parentOperand to parentCombo
											JavaSDM.ensure(parentCombo
													.equals(parentOperand
															.eContainer()));

											// iterate to-many link coveredBy from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// check link lifeline from line to interaction
													JavaSDM.ensure(interaction.equals(line
															.getInteraction()));

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link coveredBy from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// iterate to-many link src from sysLine to _edge_coveredBy
															fujaba__Success = false;

															fujaba__IterSysLineTo_edge_coveredBy = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					sysLine,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterSysLineTo_edge_coveredBy
																	.hasNext()) {
																try {
																	_edge_coveredBy = (EMoflonEdge) fujaba__IterSysLineTo_edge_coveredBy
																			.next();

																	// check object _edge_coveredBy is really bound
																	JavaSDM.ensure(_edge_coveredBy != null);
																	// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																	JavaSDM.ensure(!_edge_coveredBy
																			.equals(_edge_covered));

																	// check link trg from _edge_coveredBy to parentCombo
																	JavaSDM.ensure(parentCombo
																			.equals(_edge_coveredBy
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// negative check for link message from messageReceive
																		JavaSDM.ensure(messageReceive
																				.getMessage() == null);
																		// negative check for link message from messageSend
																		JavaSDM.ensure(messageSend
																				.getMessage() == null);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_11453 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_11453 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_11453 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_11453 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_11453
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_861768 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_861768 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_861768 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_861768 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_861768
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_96417 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_96417 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_96417 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_96417 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_96417
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_213986 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_213986 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_213986 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_213986 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_213986
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_213986 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_213986
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_317056 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_317056 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_317056 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_317056 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_317056
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_317056 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_317056
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_385293 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_385293 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_385293 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_385293 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_385293
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_385293 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_385293
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_311677 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_311677 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_311677 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_311677 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_311677
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_311677 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_311677
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_934507 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_934507 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_934507 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_934507
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_934507 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_934507
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_416632 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_416632 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_416632 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_416632
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_416632 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_416632
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_416632 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_416632
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_611851 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_611851 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_611851 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_611851
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_611851 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_611851
																					.equals(combo));

																			// check isomorphic binding between objects __DEC_operand_operand_611851 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_operand_611851
																					.equals(parentCombo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link receiveEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link receiveEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_covered is really bound
																		JavaSDM.ensure(_edge_covered != null);
																		// check object _edge_coveredBy is really bound
																		JavaSDM.ensure(_edge_coveredBy != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																		JavaSDM.ensure(!_edge_coveredBy
																				.equals(_edge_covered));

																		// check isomorphic binding between objects parentCombo and combo 
																		JavaSDM.ensure(!parentCombo
																				.equals(combo));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(interaction
																				.equals(combo
																						.getEnclosingInteraction()));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link operand from parentOperand to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(parentOperand
																						.eContainer()));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link operand from operand to parentCombo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(parentCombo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_covered to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(_edge_covered
																						.getSrc()));

																		// check link src from _edge_coveredBy to sysLine
																		JavaSDM.ensure(sysLine
																				.equals(_edge_coveredBy
																						.getSrc()));

																		// check link trg from _edge_covered to sysLine
																		JavaSDM.ensure(sysLine
																				.equals(_edge_covered
																						.getTrg()));

																		// check link trg from _edge_coveredBy to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(_edge_coveredBy
																						.getTrg()));

																		// check link coveredBy from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link coveredBy from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link coveredBy from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link coveredBy from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						interaction,
																						guard,
																						spec);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_471(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_362519 = null;
		Interaction __DEC_messageSend_enclosingInteraction_769696 = null;
		Interaction __DEC_operand_enclosingInteraction_46756 = null;
		InteractionOperand __DEC_combo_fragment_625643 = null;
		InteractionOperand __DEC_messageReceive_fragment_591794 = null;
		InteractionOperand __DEC_messageSend_fragment_721789 = null;
		InteractionOperand __DEC_operand_fragment_452400 = null;
		Constraint __DEC_spec_specification_183726 = null;
		InteractionOperand __DEC_guard_guard_176044 = null;
		CombinedFragment __DEC_operand_operand_858575 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// iterate to-many link coveredBy from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link coveredBy from line to parentCombo
					JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

					// iterate to-many link coveredBy from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link coveredBy from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// iterate to-many link coveredBy from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// negative check for link message from messageReceive
														JavaSDM.ensure(messageReceive
																.getMessage() == null);
														// negative check for link message from messageSend
														JavaSDM.ensure(messageSend
																.getMessage() == null);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_362519 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_362519 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_362519 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_362519 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_362519
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_769696 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_769696 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_769696 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_769696 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_769696
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_46756 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_46756 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_46756 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_46756 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_46756
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_625643 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_625643 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_625643 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_625643 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_625643
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_625643 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_625643
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_591794 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_591794 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_591794 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_591794 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_591794
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_591794 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_591794
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_721789 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_721789 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_721789 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_721789 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_721789
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_721789 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_721789
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_452400 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_452400 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_452400 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_452400 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_452400
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_452400 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_452400
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_183726 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_183726 is really bound
															JavaSDM.ensure(__DEC_spec_specification_183726 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_183726
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_183726 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_183726
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_176044 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_176044 is really bound
															JavaSDM.ensure(__DEC_guard_guard_176044 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_176044
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_176044 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_176044
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_176044 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_176044
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_858575 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_858575 is really bound
															JavaSDM.ensure(__DEC_operand_operand_858575 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_858575
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_858575 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_858575
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_858575 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_858575
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link receiveEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link receiveEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link sendEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// negative check for link sendEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_fragment is really bound
														JavaSDM.ensure(_edge_fragment != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to interaction
														JavaSDM.ensure(interaction.equals(combo
																.getEnclosingInteraction()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_fragment to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_fragment
																		.getSrc()));

														// check link trg from _edge_fragment to messageReceive
														JavaSDM.ensure(messageReceive
																.equals(_edge_fragment
																		.getTrg()));

														// check link coveredBy from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link coveredBy from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link coveredBy from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link coveredBy from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		interaction,
																		guard,
																		spec);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_472(
			EMoflonEdge _edge_enclosingOperand) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_786529 = null;
		Interaction __DEC_messageSend_enclosingInteraction_660374 = null;
		Interaction __DEC_operand_enclosingInteraction_578941 = null;
		InteractionOperand __DEC_combo_fragment_963401 = null;
		InteractionOperand __DEC_messageReceive_fragment_141169 = null;
		InteractionOperand __DEC_messageSend_fragment_19939 = null;
		InteractionOperand __DEC_operand_fragment_524837 = null;
		Constraint __DEC_spec_specification_248647 = null;
		InteractionOperand __DEC_guard_guard_903582 = null;
		CombinedFragment __DEC_operand_operand_828808 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_fragment = null;
		EMoflonEdge _edge_fragment = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		MessageOccurrenceSpecification messageReceive = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingOperand is really bound
			JavaSDM.ensure(_edge_enclosingOperand != null);
			// bind object
			_TmpObject = _edge_enclosingOperand.getSrc();

			// ensure correct type and really bound of object messageReceive
			JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
			messageReceive = (MessageOccurrenceSpecification) _TmpObject;

			// bind object
			_TmpObject = _edge_enclosingOperand.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link fragment from messageReceive to parentOperand
			JavaSDM.ensure(parentOperand.equals(messageReceive
					.getEnclosingOperand()));

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// iterate to-many link coveredBy from parentOperand to line
			fujaba__Success = false;

			fujaba__IterParentOperandToLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterParentOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// check link coveredBy from line to parentCombo
					JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

					// iterate to-many link coveredBy from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link coveredBy from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// iterate to-many link coveredBy from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// iterate to-many link src from parentOperand to _edge_fragment
													fujaba__Success = false;

													fujaba__IterParentOperandTo_edge_fragment = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentOperand,
																			EMoflonEdge.class,
																			"src"))
															.iterator();

													while (fujaba__IterParentOperandTo_edge_fragment
															.hasNext()) {
														try {
															_edge_fragment = (EMoflonEdge) fujaba__IterParentOperandTo_edge_fragment
																	.next();

															// check object _edge_fragment is really bound
															JavaSDM.ensure(_edge_fragment != null);
															// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
															JavaSDM.ensure(!_edge_fragment
																	.equals(_edge_enclosingOperand));

															// check link trg from _edge_fragment to messageReceive
															JavaSDM.ensure(messageReceive
																	.equals(_edge_fragment
																			.getTrg()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_786529 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_786529 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_786529 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_786529 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_786529
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_660374 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_660374 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_660374 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_660374 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_660374
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_578941 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_578941 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_578941 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_578941 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_578941
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_963401 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_963401 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_963401 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_963401 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_963401
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_963401 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_963401
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_141169 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_141169 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_141169 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_141169 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_141169
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_141169 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_141169
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_19939 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_19939 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_19939 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19939 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19939
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_19939 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_19939
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_524837 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_524837 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_524837 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_524837 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_524837
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_524837 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_524837
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_248647 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_248647 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_248647 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_248647
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_248647 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_248647
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_903582 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_903582 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_903582 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_903582
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_903582 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_903582
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_903582 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_903582
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_828808 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_828808 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_828808 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_828808
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_828808 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_828808
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_828808 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_828808
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_enclosingOperand is really bound
																JavaSDM.ensure(_edge_enclosingOperand != null);
																// check object _edge_fragment is really bound
																JavaSDM.ensure(_edge_fragment != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_fragment and _edge_enclosingOperand 
																JavaSDM.ensure(!_edge_fragment
																		.equals(_edge_enclosingOperand));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_enclosingOperand to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_enclosingOperand
																				.getSrc()));

																// check link src from _edge_fragment to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_fragment
																				.getSrc()));

																// check link trg from _edge_enclosingOperand to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_enclosingOperand
																				.getTrg()));

																// check link trg from _edge_fragment to messageReceive
																JavaSDM.ensure(messageReceive
																		.equals(_edge_fragment
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_473(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_501097 = null;
		Interaction __DEC_messageSend_enclosingInteraction_804890 = null;
		Interaction __DEC_operand_enclosingInteraction_57607 = null;
		InteractionOperand __DEC_combo_fragment_622573 = null;
		InteractionOperand __DEC_messageReceive_fragment_102033 = null;
		InteractionOperand __DEC_messageSend_fragment_605528 = null;
		InteractionOperand __DEC_operand_fragment_66669 = null;
		Constraint __DEC_spec_specification_859640 = null;
		InteractionOperand __DEC_guard_guard_247610 = null;
		CombinedFragment __DEC_operand_operand_620888 = null;
		Match match = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		InteractionOperand parentOperand = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// check link coveredBy from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link fragment from parentOperand to messageReceive
			fujaba__Success = false;

			fujaba__IterParentOperandToMessageReceive = new ArrayList(
					parentOperand.getFragment()).iterator();

			while (fujaba__IterParentOperandToMessageReceive.hasNext()) {
				try {
					_TmpObject = fujaba__IterParentOperandToMessageReceive
							.next();

					// ensure correct type and really bound of object messageReceive
					JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
					messageReceive = (MessageOccurrenceSpecification) _TmpObject;
					// bind object
					parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
							.eContainer() : null;

					// check object parentCombo is really bound
					JavaSDM.ensure(parentCombo != null);

					// check if contained via correct reference
					JavaSDM.ensure(parentCombo.getOperand().contains(
							parentOperand));

					// check link coveredBy from line to parentCombo
					JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

					// iterate to-many link coveredBy from parentOperand to sysLine
					fujaba__Success = false;

					fujaba__IterParentOperandToSysLine = new ArrayList(
							parentOperand.getCovered()).iterator();

					while (fujaba__IterParentOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// check link coveredBy from parentCombo to sysLine
							JavaSDM.ensure(parentCombo.getCovered().contains(
									sysLine));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// check isomorphic binding between objects parentCombo and combo 
									JavaSDM.ensure(!parentCombo.equals(combo));

									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// check isomorphic binding between objects messageSend and messageReceive 
											JavaSDM.ensure(!messageSend
													.equals(messageReceive));

											// iterate to-many link coveredBy from sysLine to operand
											fujaba__Success = false;

											fujaba__IterSysLineToOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToOperand
															.next();

													// ensure correct type and really bound of object operand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													operand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													guard = operand.getGuard();

													// check object guard is really bound
													JavaSDM.ensure(guard != null);

													// bind object
													_TmpObject = guard
															.getSpecification();

													// ensure correct type and really bound of object spec
													JavaSDM.ensure(_TmpObject instanceof LiteralString);
													spec = (LiteralString) _TmpObject;

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// negative check for link message from messageReceive
														JavaSDM.ensure(messageReceive
																.getMessage() == null);
														// negative check for link message from messageSend
														JavaSDM.ensure(messageSend
																.getMessage() == null);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_501097 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_501097 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_501097 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_501097 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_501097
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_804890 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_804890 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_804890 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_804890 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_804890
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_57607 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_57607 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_57607 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_57607 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_57607
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_622573 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_622573 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_622573 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_622573 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_622573
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_622573 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_622573
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_102033 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_102033 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_102033 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_102033 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_102033
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_102033 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_102033
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_605528 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_605528 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_605528 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_605528 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_605528
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_605528 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_605528
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_66669 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_66669 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_66669 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_66669 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_66669
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_66669 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_66669
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_859640 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_859640 is really bound
															JavaSDM.ensure(__DEC_spec_specification_859640 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_859640
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_859640 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_859640
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_247610 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_247610 is really bound
															JavaSDM.ensure(__DEC_guard_guard_247610 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_247610
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_247610 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_247610
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_247610 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_247610
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_620888 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_620888 is really bound
															JavaSDM.ensure(__DEC_operand_operand_620888 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_620888
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_620888 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_620888
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_620888 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_620888
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link receiveEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link receiveEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link sendEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// negative check for link sendEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to interaction
														JavaSDM.ensure(interaction.equals(combo
																.getEnclosingInteraction()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link coveredBy from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link coveredBy from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link coveredBy from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link coveredBy from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		interaction,
																		guard,
																		spec);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_474(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_768348 = null;
		Interaction __DEC_messageSend_enclosingInteraction_517706 = null;
		Interaction __DEC_operand_enclosingInteraction_497356 = null;
		InteractionOperand __DEC_combo_fragment_719200 = null;
		InteractionOperand __DEC_messageReceive_fragment_176002 = null;
		InteractionOperand __DEC_messageSend_fragment_759215 = null;
		InteractionOperand __DEC_operand_fragment_519771 = null;
		Constraint __DEC_spec_specification_175089 = null;
		InteractionOperand __DEC_guard_guard_450447 = null;
		CombinedFragment __DEC_operand_operand_247968 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentOperandToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		InteractionOperand parentOperand = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentOperand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			parentOperand = (InteractionOperand) _TmpObject;

			// bind object
			parentCombo = parentOperand.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
					.eContainer() : null;

			// check object parentCombo is really bound
			JavaSDM.ensure(parentCombo != null);

			// check if contained via correct reference
			JavaSDM.ensure(parentCombo.getOperand().contains(parentOperand));

			// check link coveredBy from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// check link coveredBy from line to parentOperand
			JavaSDM.ensure(line.getCoveredBy().contains(parentOperand));

			// iterate to-many link coveredBy from parentOperand to sysLine
			fujaba__Success = false;

			fujaba__IterParentOperandToSysLine = new ArrayList(
					parentOperand.getCovered()).iterator();

			while (fujaba__IterParentOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentOperandToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// check link coveredBy from parentCombo to sysLine
					JavaSDM.ensure(parentCombo.getCovered().contains(sysLine));

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// iterate to-many link coveredBy from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link coveredBy from sysLine to operand
									fujaba__Success = false;

									fujaba__IterSysLineToOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToOperand
													.next();

											// ensure correct type and really bound of object operand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											operand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											guard = operand.getGuard();

											// check object guard is really bound
											JavaSDM.ensure(guard != null);

											// bind object
											_TmpObject = guard
													.getSpecification();

											// ensure correct type and really bound of object spec
											JavaSDM.ensure(_TmpObject instanceof LiteralString);
											spec = (LiteralString) _TmpObject;

											// check link coveredBy from line to operand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(operand));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// iterate to-many link trg from parentOperand to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterParentOperandTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			parentOperand,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterParentOperandTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterParentOperandTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_768348 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_768348 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_768348 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_768348 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_768348
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_517706 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_517706 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_517706 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_517706 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_517706
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_497356 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_497356 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_497356 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_497356 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_497356
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_719200 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_719200 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_719200 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_719200 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_719200
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_719200 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_719200
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_176002 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_176002 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_176002 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_176002 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_176002
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_176002 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_176002
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_759215 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_759215 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_759215 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_759215 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_759215
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_759215 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_759215
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_519771 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_519771 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_519771 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_519771 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_519771
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_519771 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_519771
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_175089 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_175089 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_175089 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_175089
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_175089 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_175089
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_450447 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_450447 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_450447 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_450447
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_450447 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_450447
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_450447 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_450447
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_247968 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_247968 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_247968 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_247968
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_247968 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_247968
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_247968 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_247968
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_475(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_113938 = null;
		Interaction __DEC_messageSend_enclosingInteraction_713364 = null;
		Interaction __DEC_operand_enclosingInteraction_520597 = null;
		InteractionOperand __DEC_combo_fragment_560414 = null;
		InteractionOperand __DEC_messageReceive_fragment_87568 = null;
		InteractionOperand __DEC_messageSend_fragment_658057 = null;
		InteractionOperand __DEC_operand_fragment_357435 = null;
		Constraint __DEC_spec_specification_75362 = null;
		InteractionOperand __DEC_guard_guard_14923 = null;
		CombinedFragment __DEC_operand_operand_182242 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		CombinedFragment parentCombo = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// check link coveredBy from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link coveredBy from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// iterate to-many link coveredBy from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link coveredBy from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_113938 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_113938 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_113938 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_113938 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_113938
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_713364 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_713364 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_713364 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_713364 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_713364
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_520597 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_520597 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_520597 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_520597 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_520597
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_560414 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_560414 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_560414 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_560414 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_560414
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_560414 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_560414
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_87568 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_87568 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_87568 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_87568 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_87568
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_87568 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_87568
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_658057 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_658057 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_658057 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_658057 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_658057
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_658057 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_658057
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_357435 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_357435 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_357435 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_357435 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_357435
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_357435 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_357435
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_75362 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_75362 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_75362 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_75362
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_75362 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_75362
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_14923 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_14923 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_14923 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_14923
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_14923 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_14923
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_14923 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_14923
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_182242 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_182242 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_182242 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_182242
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_182242 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_182242
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_182242 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_182242
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_coveredBy to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_476(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_53767 = null;
		Interaction __DEC_messageSend_enclosingInteraction_636188 = null;
		Interaction __DEC_operand_enclosingInteraction_861142 = null;
		InteractionOperand __DEC_combo_fragment_625678 = null;
		InteractionOperand __DEC_messageReceive_fragment_298896 = null;
		InteractionOperand __DEC_messageSend_fragment_300956 = null;
		InteractionOperand __DEC_operand_fragment_405710 = null;
		Constraint __DEC_spec_specification_739601 = null;
		InteractionOperand __DEC_guard_guard_547452 = null;
		CombinedFragment __DEC_operand_operand_209337 = null;
		Match match = null;
		Iterator fujaba__IterParentComboTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterParentComboToSysLine = null;
		Lifeline sysLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object parentCombo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			parentCombo = (CombinedFragment) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// check link coveredBy from line to parentCombo
			JavaSDM.ensure(line.getCoveredBy().contains(parentCombo));

			// iterate to-many link coveredBy from parentCombo to sysLine
			fujaba__Success = false;

			fujaba__IterParentComboToSysLine = new ArrayList(
					parentCombo.getCovered()).iterator();

			while (fujaba__IterParentComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterParentComboToSysLine
							.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// check isomorphic binding between objects parentCombo and combo 
							JavaSDM.ensure(!parentCombo.equals(combo));

							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// iterate to-many link coveredBy from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// check link coveredBy from line to operand
									JavaSDM.ensure(line.getCoveredBy()
											.contains(operand));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// check link operand from parentOperand to parentCombo
													JavaSDM.ensure(parentCombo
															.equals(parentOperand
																	.eContainer()));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// iterate to-many link trg from parentCombo to _edge_coveredBy
															fujaba__Success = false;

															fujaba__IterParentComboTo_edge_coveredBy = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					parentCombo,
																					EMoflonEdge.class,
																					"trg"))
																	.iterator();

															while (fujaba__IterParentComboTo_edge_coveredBy
																	.hasNext()) {
																try {
																	_edge_coveredBy = (EMoflonEdge) fujaba__IterParentComboTo_edge_coveredBy
																			.next();

																	// check object _edge_coveredBy is really bound
																	JavaSDM.ensure(_edge_coveredBy != null);
																	// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																	JavaSDM.ensure(!_edge_coveredBy
																			.equals(_edge_covered));

																	// check link src from _edge_coveredBy to line
																	JavaSDM.ensure(line
																			.equals(_edge_coveredBy
																					.getSrc()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// negative check for link message from messageReceive
																		JavaSDM.ensure(messageReceive
																				.getMessage() == null);
																		// negative check for link message from messageSend
																		JavaSDM.ensure(messageSend
																				.getMessage() == null);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_53767 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_53767 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_53767 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_53767 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_53767
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_636188 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_636188 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_636188 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_636188 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_636188
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_861142 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_861142 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_861142 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_861142 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_861142
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_625678 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_625678 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_625678 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_625678 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_625678
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_625678 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_625678
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_298896 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_298896 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_298896 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_298896 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_298896
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_298896 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_298896
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_300956 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_300956 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_300956 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_300956 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_300956
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_300956 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_300956
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_405710 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_405710 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_405710 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_405710 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_405710
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_405710 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_405710
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_739601 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_739601 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_739601 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_739601
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_739601 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_739601
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_547452 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_547452 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_547452 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_547452
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_547452 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_547452
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_547452 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_547452
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_209337 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_209337 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_209337 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_209337
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_209337 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_209337
																					.equals(combo));

																			// check isomorphic binding between objects __DEC_operand_operand_209337 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_operand_209337
																					.equals(parentCombo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link receiveEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link receiveEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_covered is really bound
																		JavaSDM.ensure(_edge_covered != null);
																		// check object _edge_coveredBy is really bound
																		JavaSDM.ensure(_edge_coveredBy != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																		JavaSDM.ensure(!_edge_coveredBy
																				.equals(_edge_covered));

																		// check isomorphic binding between objects parentCombo and combo 
																		JavaSDM.ensure(!parentCombo
																				.equals(combo));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(interaction
																				.equals(combo
																						.getEnclosingInteraction()));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link operand from parentOperand to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(parentOperand
																						.eContainer()));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link operand from operand to parentCombo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(parentCombo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_covered to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(_edge_covered
																						.getSrc()));

																		// check link src from _edge_coveredBy to line
																		JavaSDM.ensure(line
																				.equals(_edge_coveredBy
																						.getSrc()));

																		// check link trg from _edge_covered to line
																		JavaSDM.ensure(line
																				.equals(_edge_covered
																						.getTrg()));

																		// check link trg from _edge_coveredBy to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(_edge_coveredBy
																						.getTrg()));

																		// check link coveredBy from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link coveredBy from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link coveredBy from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link coveredBy from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						interaction,
																						guard,
																						spec);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_477(
			EMoflonEdge _edge_enclosingInteraction) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_931623 = null;
		Interaction __DEC_messageSend_enclosingInteraction_280003 = null;
		Interaction __DEC_operand_enclosingInteraction_556449 = null;
		InteractionOperand __DEC_combo_fragment_903393 = null;
		InteractionOperand __DEC_messageReceive_fragment_581228 = null;
		InteractionOperand __DEC_messageSend_fragment_805404 = null;
		InteractionOperand __DEC_operand_fragment_31718 = null;
		Constraint __DEC_spec_specification_298739 = null;
		InteractionOperand __DEC_guard_guard_25124 = null;
		CombinedFragment __DEC_operand_operand_836839 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterComboToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_enclosingInteraction is really bound
			JavaSDM.ensure(_edge_enclosingInteraction != null);
			// bind object
			_TmpObject = _edge_enclosingInteraction.getSrc();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			interaction = combo.getEnclosingInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link trg from _edge_enclosingInteraction to interaction
			JavaSDM.ensure(interaction.equals(_edge_enclosingInteraction
					.getTrg()));

			// iterate to-many link coveredBy from combo to sysLine
			fujaba__Success = false;

			fujaba__IterComboToSysLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterComboToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link coveredBy from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link coveredBy from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link coveredBy from operand to line
									fujaba__Success = false;

									fujaba__IterOperandToLine = new ArrayList(
											operand.getCovered()).iterator();

									while (fujaba__IterOperandToLine.hasNext()) {
										try {
											line = (Lifeline) fujaba__IterOperandToLine
													.next();

											// check object line is really bound
											JavaSDM.ensure(line != null);
											// check isomorphic binding between objects sysLine and line 
											JavaSDM.ensure(!sysLine
													.equals(line));

											// check link lifeline from line to interaction
											JavaSDM.ensure(interaction
													.equals(line
															.getInteraction()));

											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link coveredBy from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// check link coveredBy from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_931623 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_931623 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_931623 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_931623 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_931623
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_280003 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_280003 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_280003 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_280003 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_280003
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_556449 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_556449 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_556449 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_556449 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_556449
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_903393 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_903393 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_903393 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_903393 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_903393
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_903393 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_903393
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_581228 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_581228 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_581228 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_581228 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_581228
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_581228 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_581228
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_805404 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_805404 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_805404 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_805404 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_805404
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_805404 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_805404
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_31718 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_31718 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_31718 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_31718 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_31718
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_31718 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_31718
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_298739 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_298739 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_298739 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_298739
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_298739 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_298739
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_25124 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_25124 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_25124 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_25124
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_25124 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_25124
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_25124 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_25124
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_836839 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_836839 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_836839 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_836839
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_836839 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_836839
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_836839 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_836839
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_enclosingInteraction is really bound
																JavaSDM.ensure(_edge_enclosingInteraction != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_enclosingInteraction to combo
																JavaSDM.ensure(combo
																		.equals(_edge_enclosingInteraction
																				.getSrc()));

																// check link trg from _edge_enclosingInteraction to interaction
																JavaSDM.ensure(interaction
																		.equals(_edge_enclosingInteraction
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_478(
			EMoflonEdge _edge_fragment) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_135688 = null;
		Interaction __DEC_messageSend_enclosingInteraction_523087 = null;
		Interaction __DEC_operand_enclosingInteraction_520644 = null;
		InteractionOperand __DEC_combo_fragment_995353 = null;
		InteractionOperand __DEC_messageReceive_fragment_741817 = null;
		InteractionOperand __DEC_messageSend_fragment_694261 = null;
		InteractionOperand __DEC_operand_fragment_935282 = null;
		Constraint __DEC_spec_specification_378580 = null;
		InteractionOperand __DEC_guard_guard_674470 = null;
		CombinedFragment __DEC_operand_operand_357991 = null;
		Match match = null;
		Iterator fujaba__IterComboTo_edge_enclosingInteraction = null;
		EMoflonEdge _edge_enclosingInteraction = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		Iterator fujaba__IterParentOperandToLine = null;
		Lifeline line = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		Iterator fujaba__IterSysLineToOperand = null;
		InteractionOperand operand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Iterator fujaba__IterComboToSysLine = null;
		Lifeline sysLine = null;
		Interaction interaction = null;
		CombinedFragment combo = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_fragment is really bound
			JavaSDM.ensure(_edge_fragment != null);
			// bind object
			_TmpObject = _edge_fragment.getTrg();

			// ensure correct type and really bound of object combo
			JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
			combo = (CombinedFragment) _TmpObject;

			// bind object
			interaction = combo.getEnclosingInteraction();

			// check object interaction is really bound
			JavaSDM.ensure(interaction != null);

			// check link src from _edge_fragment to interaction
			JavaSDM.ensure(interaction.equals(_edge_fragment.getSrc()));

			// iterate to-many link coveredBy from combo to sysLine
			fujaba__Success = false;

			fujaba__IterComboToSysLine = new ArrayList(combo.getCovered())
					.iterator();

			while (fujaba__IterComboToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterComboToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// iterate to-many link coveredBy from sysLine to messageSend
					fujaba__Success = false;

					fujaba__IterSysLineToMessageSend = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToMessageSend.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToMessageSend
									.next();

							// ensure correct type and really bound of object messageSend
							JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
							messageSend = (MessageOccurrenceSpecification) _TmpObject;
							// iterate to-many link coveredBy from sysLine to operand
							fujaba__Success = false;

							fujaba__IterSysLineToOperand = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToOperand.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToOperand
											.next();

									// ensure correct type and really bound of object operand
									JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
									operand = (InteractionOperand) _TmpObject;
									// bind object
									guard = operand.getGuard();

									// check object guard is really bound
									JavaSDM.ensure(guard != null);

									// bind object
									_TmpObject = guard.getSpecification();

									// ensure correct type and really bound of object spec
									JavaSDM.ensure(_TmpObject instanceof LiteralString);
									spec = (LiteralString) _TmpObject;

									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link coveredBy from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link coveredBy from parentOperand to line
											fujaba__Success = false;

											fujaba__IterParentOperandToLine = new ArrayList(
													parentOperand.getCovered())
													.iterator();

											while (fujaba__IterParentOperandToLine
													.hasNext()) {
												try {
													line = (Lifeline) fujaba__IterParentOperandToLine
															.next();

													// check object line is really bound
													JavaSDM.ensure(line != null);
													// check isomorphic binding between objects sysLine and line 
													JavaSDM.ensure(!sysLine
															.equals(line));

													// check link lifeline from line to interaction
													JavaSDM.ensure(interaction.equals(line
															.getInteraction()));

													// check link coveredBy from line to operand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(operand));

													// check link coveredBy from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// iterate to-many link src from combo to _edge_enclosingInteraction
															fujaba__Success = false;

															fujaba__IterComboTo_edge_enclosingInteraction = new ArrayList(
																	org.moflon.util.eMoflonEMFUtil
																			.getOppositeReference(
																					combo,
																					EMoflonEdge.class,
																					"src"))
																	.iterator();

															while (fujaba__IterComboTo_edge_enclosingInteraction
																	.hasNext()) {
																try {
																	_edge_enclosingInteraction = (EMoflonEdge) fujaba__IterComboTo_edge_enclosingInteraction
																			.next();

																	// check object _edge_enclosingInteraction is really bound
																	JavaSDM.ensure(_edge_enclosingInteraction != null);
																	// check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction 
																	JavaSDM.ensure(!_edge_fragment
																			.equals(_edge_enclosingInteraction));

																	// check link trg from _edge_enclosingInteraction to interaction
																	JavaSDM.ensure(interaction
																			.equals(_edge_enclosingInteraction
																					.getTrg()));

																	// story node 'test core match and DECs'
																	try {
																		fujaba__Success = false;

																		// negative check for link message from messageReceive
																		JavaSDM.ensure(messageReceive
																				.getMessage() == null);
																		// negative check for link message from messageSend
																		JavaSDM.ensure(messageSend
																				.getMessage() == null);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_enclosingInteraction_135688 = messageReceive
																					.getEnclosingInteraction();

																			// check object __DEC_messageReceive_enclosingInteraction_135688 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_135688 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_135688 and interaction 
																			JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_135688
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_enclosingInteraction_523087 = messageSend
																					.getEnclosingInteraction();

																			// check object __DEC_messageSend_enclosingInteraction_523087 is really bound
																			JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_523087 != null);

																			// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_523087 and interaction 
																			JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_523087
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_enclosingInteraction_520644 = operand
																					.getEnclosingInteraction();

																			// check object __DEC_operand_enclosingInteraction_520644 is really bound
																			JavaSDM.ensure(__DEC_operand_enclosingInteraction_520644 != null);

																			// check isomorphic binding between objects __DEC_operand_enclosingInteraction_520644 and interaction 
																			JavaSDM.ensure(!__DEC_operand_enclosingInteraction_520644
																					.equals(interaction));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_combo_fragment_995353 = combo
																					.getEnclosingOperand();

																			// check object __DEC_combo_fragment_995353 is really bound
																			JavaSDM.ensure(__DEC_combo_fragment_995353 != null);

																			// check isomorphic binding between objects __DEC_combo_fragment_995353 and operand 
																			JavaSDM.ensure(!__DEC_combo_fragment_995353
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_combo_fragment_995353 and parentOperand 
																			JavaSDM.ensure(!__DEC_combo_fragment_995353
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageReceive_fragment_741817 = messageReceive
																					.getEnclosingOperand();

																			// check object __DEC_messageReceive_fragment_741817 is really bound
																			JavaSDM.ensure(__DEC_messageReceive_fragment_741817 != null);

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_741817 and operand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_741817
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageReceive_fragment_741817 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageReceive_fragment_741817
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_messageSend_fragment_694261 = messageSend
																					.getEnclosingOperand();

																			// check object __DEC_messageSend_fragment_694261 is really bound
																			JavaSDM.ensure(__DEC_messageSend_fragment_694261 != null);

																			// check isomorphic binding between objects __DEC_messageSend_fragment_694261 and operand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_694261
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_messageSend_fragment_694261 and parentOperand 
																			JavaSDM.ensure(!__DEC_messageSend_fragment_694261
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_fragment_935282 = operand
																					.getEnclosingOperand();

																			// check object __DEC_operand_fragment_935282 is really bound
																			JavaSDM.ensure(__DEC_operand_fragment_935282 != null);

																			// check isomorphic binding between objects __DEC_operand_fragment_935282 and operand 
																			JavaSDM.ensure(!__DEC_operand_fragment_935282
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_operand_fragment_935282 and parentOperand 
																			JavaSDM.ensure(!__DEC_operand_fragment_935282
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link packagedElement from guard
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						guard,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// negative check for link packagedElement from spec
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						spec,
																						ModalSequenceDiagram.Package.class,
																						"packagedElement")
																				.size() == 0);
																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_spec_specification_378580 = spec
																					.eContainer() instanceof Constraint ? (Constraint) spec
																					.eContainer()
																					: null;

																			// check object __DEC_spec_specification_378580 is really bound
																			JavaSDM.ensure(__DEC_spec_specification_378580 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(spec
																					.equals(__DEC_spec_specification_378580
																							.getSpecification()));

																			// check isomorphic binding between objects __DEC_spec_specification_378580 and guard 
																			JavaSDM.ensure(!__DEC_spec_specification_378580
																					.equals(guard));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_guard_guard_674470 = guard
																					.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																					.eContainer()
																					: null;

																			// check object __DEC_guard_guard_674470 is really bound
																			JavaSDM.ensure(__DEC_guard_guard_674470 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(guard
																					.equals(__DEC_guard_guard_674470
																							.getGuard()));

																			// check isomorphic binding between objects __DEC_guard_guard_674470 and operand 
																			JavaSDM.ensure(!__DEC_guard_guard_674470
																					.equals(operand));

																			// check isomorphic binding between objects __DEC_guard_guard_674470 and parentOperand 
																			JavaSDM.ensure(!__DEC_guard_guard_674470
																					.equals(parentOperand));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// check negative bindings
																		try {
																			fujaba__Success = false;

																			// bind object
																			__DEC_operand_operand_357991 = operand
																					.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																					.eContainer()
																					: null;

																			// check object __DEC_operand_operand_357991 is really bound
																			JavaSDM.ensure(__DEC_operand_operand_357991 != null);

																			// check if contained via correct reference
																			JavaSDM.ensure(__DEC_operand_operand_357991
																					.getOperand()
																					.contains(
																							operand));

																			// check isomorphic binding between objects __DEC_operand_operand_357991 and combo 
																			JavaSDM.ensure(!__DEC_operand_operand_357991
																					.equals(combo));

																			// check isomorphic binding between objects __DEC_operand_operand_357991 and parentCombo 
																			JavaSDM.ensure(!__DEC_operand_operand_357991
																					.equals(parentCombo));

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																		fujaba__Success = !(fujaba__Success);

																		JavaSDM.ensure(fujaba__Success);

																		// negative check for link receiveEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link receiveEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"receiveEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageReceive
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageReceive,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// negative check for link sendEvent from messageSend
																		JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						messageSend,
																						Message.class,
																						"sendEvent")
																				.size() == 0);
																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check link fragment from operand to operand
																		JavaSDM.ensure(!(operand
																				.equals(operand
																						.getEnclosingOperand())));

																		// check object _edge_enclosingInteraction is really bound
																		JavaSDM.ensure(_edge_enclosingInteraction != null);
																		// check object _edge_fragment is really bound
																		JavaSDM.ensure(_edge_fragment != null);
																		// check object combo is really bound
																		JavaSDM.ensure(combo != null);
																		// check object guard is really bound
																		JavaSDM.ensure(guard != null);
																		// check object interaction is really bound
																		JavaSDM.ensure(interaction != null);
																		// check object line is really bound
																		JavaSDM.ensure(line != null);
																		// check object messageReceive is really bound
																		JavaSDM.ensure(messageReceive != null);
																		// check object messageSend is really bound
																		JavaSDM.ensure(messageSend != null);
																		// check object operand is really bound
																		JavaSDM.ensure(operand != null);
																		// check object parentCombo is really bound
																		JavaSDM.ensure(parentCombo != null);
																		// check object parentOperand is really bound
																		JavaSDM.ensure(parentOperand != null);
																		// check object spec is really bound
																		JavaSDM.ensure(spec != null);
																		// check object sysLine is really bound
																		JavaSDM.ensure(sysLine != null);
																		// check isomorphic binding between objects _edge_fragment and _edge_enclosingInteraction 
																		JavaSDM.ensure(!_edge_fragment
																				.equals(_edge_enclosingInteraction));

																		// check isomorphic binding between objects parentCombo and combo 
																		JavaSDM.ensure(!parentCombo
																				.equals(combo));

																		// check isomorphic binding between objects sysLine and line 
																		JavaSDM.ensure(!sysLine
																				.equals(line));

																		// check isomorphic binding between objects messageSend and messageReceive 
																		JavaSDM.ensure(!messageSend
																				.equals(messageReceive));

																		// check isomorphic binding between objects parentOperand and operand 
																		JavaSDM.ensure(!parentOperand
																				.equals(operand));

																		// check link fragment from combo to interaction
																		JavaSDM.ensure(interaction
																				.equals(combo
																						.getEnclosingInteraction()));

																		// check link fragment from messageReceive to parentOperand
																		JavaSDM.ensure(parentOperand
																				.equals(messageReceive
																						.getEnclosingOperand()));

																		// check link fragment from messageReceive to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageReceive
																						.getEnclosingInteraction())));

																		// check link fragment from messageSend to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(messageSend
																						.getEnclosingInteraction())));

																		// check link fragment from operand to interaction
																		JavaSDM.ensure(!(interaction
																				.equals(operand
																						.getEnclosingInteraction())));

																		// check link fragment from combo to operand
																		JavaSDM.ensure(!(operand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageReceive to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageReceive
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to operand
																		JavaSDM.ensure(!(operand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link fragment from combo to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(combo
																						.getEnclosingOperand())));

																		// check link fragment from messageSend to parentOperand
																		JavaSDM.ensure(!(parentOperand
																				.equals(messageSend
																						.getEnclosingOperand())));

																		// check link guard from operand to guard
																		JavaSDM.ensure(guard
																				.equals(operand
																						.getGuard()));

																		// check link guard from parentOperand to guard
																		JavaSDM.ensure(!(guard
																				.equals(parentOperand
																						.getGuard())));

																		// check link lifeline from line to interaction
																		JavaSDM.ensure(interaction
																				.equals(line
																						.getInteraction()));

																		// check link operand from parentOperand to parentCombo
																		JavaSDM.ensure(parentCombo
																				.equals(parentOperand
																						.eContainer()));

																		// check link operand from operand to combo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(combo)));

																		// check link operand from operand to parentCombo
																		JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																				.getOppositeReference(
																						operand,
																						CombinedFragment.class,
																						"$eContainer")
																				.contains(parentCombo)));

																		// check link specification from spec to guard
																		JavaSDM.ensure(guard
																				.equals(spec
																						.eContainer()));

																		// check link src from _edge_enclosingInteraction to combo
																		JavaSDM.ensure(combo
																				.equals(_edge_enclosingInteraction
																						.getSrc()));

																		// check link src from _edge_fragment to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_fragment
																						.getSrc()));

																		// check link trg from _edge_enclosingInteraction to interaction
																		JavaSDM.ensure(interaction
																				.equals(_edge_enclosingInteraction
																						.getTrg()));

																		// check link trg from _edge_fragment to combo
																		JavaSDM.ensure(combo
																				.equals(_edge_fragment
																						.getTrg()));

																		// check link coveredBy from line to operand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						operand));

																		// check link coveredBy from line to parentCombo
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentCombo));

																		// check link coveredBy from line to parentOperand
																		JavaSDM.ensure(line
																				.getCoveredBy()
																				.contains(
																						parentOperand));

																		// check link coveredBy from combo to sysLine
																		JavaSDM.ensure(combo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from messageSend to sysLine
																		JavaSDM.ensure(messageSend
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from operand to sysLine
																		JavaSDM.ensure(operand
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentCombo to sysLine
																		JavaSDM.ensure(parentCombo
																				.getCovered()
																				.contains(
																						sysLine));

																		// check link coveredBy from parentOperand to sysLine
																		JavaSDM.ensure(parentOperand
																				.getCovered()
																				.contains(
																						sysLine));

																		// create object match
																		match = TGGRuntimeFactory.eINSTANCE
																				.createMatch();

																		// assign attribute match
																		match.setRuleName(__eClass
																				.getName());
																		// statement node 'bookkeeping with generic isAppropriate method'
																		fujaba__Success = this
																				.isAppropriate_BWD(
																						match,
																						sysLine,
																						messageSend,
																						combo,
																						operand,
																						parentOperand,
																						parentCombo,
																						messageReceive,
																						line,
																						interaction,
																						guard,
																						spec);
																		if (fujaba__Success) {
																			// statement node 'Ensure that the correct types of elements are matched'
																			fujaba__Success = this
																					.checkTypes_BWD(match);
																			if (fujaba__Success) {
																				// story node 'Add match to rule result'
																				try {
																					fujaba__Success = false;

																					// check object __performOperation is really bound
																					JavaSDM.ensure(__performOperation != null);
																					// check object __result is really bound
																					JavaSDM.ensure(__result != null);
																					// check object match is really bound
																					JavaSDM.ensure(match != null);

																					// create link
																					org.moflon.util.eMoflonEMFUtil
																							.addOppositeReference(
																									match,
																									__performOperation,
																									"isApplicableOperation");

																					// create link
																					__result.getContents()
																							.add(match);

																					fujaba__Success = true;
																				} catch (JavaSDMException fujaba__InternalException) {
																					fujaba__Success = false;
																				}

																			} else {

																			}

																		} else {

																		}
																		fujaba__Success = true;
																	} catch (JavaSDMException fujaba__InternalException) {
																		fujaba__Success = false;
																	}

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}
															}
															JavaSDM.ensure(fujaba__Success);

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_107(
			EMoflonEdge _edge_steps) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_419438 = null;
		NormalStep __DEC_alt_stepAlternative_709673 = null;
		Flow __DEC_step_steps_803573 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_91266 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_91266 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		NamedFlow flow = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_steps is really bound
			JavaSDM.ensure(_edge_steps != null);
			// bind object
			_TmpObject = _edge_steps.getSrc();

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// bind object
			_TmpObject = _edge_steps.getTrg();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// check link steps from step to flow
			JavaSDM.ensure(flow.equals(step.eContainer()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// iterate to-many link useCases from packageDeclaration to useCase
							fujaba__Success = false;

							fujaba__IterPackageDeclarationToUseCase = new ArrayList(
									packageDeclaration.getUseCases())
									.iterator();

							while (fujaba__IterPackageDeclarationToUseCase
									.hasNext()) {
								try {
									useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
											.next();

									// check object useCase is really bound
									JavaSDM.ensure(useCase != null);
									// check link flows from flow to useCase
									JavaSDM.ensure(useCase.equals(flow
											.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_altFlow_flows_419438 = altFlow
													.eContainer() instanceof UseCase ? (UseCase) altFlow
													.eContainer() : null;

											// check object __DEC_altFlow_flows_419438 is really bound
											JavaSDM.ensure(__DEC_altFlow_flows_419438 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_altFlow_flows_419438
													.getFlows().contains(
															altFlow));

											// check isomorphic binding between objects __DEC_altFlow_flows_419438 and useCase 
											JavaSDM.ensure(!__DEC_altFlow_flows_419438
													.equals(useCase));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_alt_stepAlternative_709673 = alt
													.eContainer() instanceof NormalStep ? (NormalStep) alt
													.eContainer() : null;

											// check object __DEC_alt_stepAlternative_709673 is really bound
											JavaSDM.ensure(__DEC_alt_stepAlternative_709673 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_alt_stepAlternative_709673
													.getStepAlternative()
													.contains(alt));

											// check isomorphic binding between objects __DEC_alt_stepAlternative_709673 and step 
											JavaSDM.ensure(!__DEC_alt_stepAlternative_709673
													.equals(step));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_step_steps_803573 = step
													.eContainer() instanceof Flow ? (Flow) step
													.eContainer() : null;

											// check object __DEC_step_steps_803573 is really bound
											JavaSDM.ensure(__DEC_step_steps_803573 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_step_steps_803573
													.getSteps().contains(step));

											// check isomorphic binding between objects __DEC_step_steps_803573 and altFlow 
											JavaSDM.ensure(!__DEC_step_steps_803573
													.equals(altFlow));

											// check isomorphic binding between objects __DEC_step_steps_803573 and flow 
											JavaSDM.ensure(!__DEC_step_steps_803573
													.equals(flow));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link ref from altFlow to __DEC_altFlow_ref_91266
											fujaba__Success = false;

											fujaba__IterAltFlowTo__DEC_altFlow_ref_91266 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	altFlow,
																	AlternativeFlowAlternative.class,
																	"ref"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterAltFlowTo__DEC_altFlow_ref_91266
															.hasNext()) {
												try {
													__DEC_altFlow_ref_91266 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_91266
															.next();

													// check object __DEC_altFlow_ref_91266 is really bound
													JavaSDM.ensure(__DEC_altFlow_ref_91266 != null);
													// check isomorphic binding between objects __DEC_altFlow_ref_91266 and alt 
													JavaSDM.ensure(!__DEC_altFlow_ref_91266
															.equals(alt));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check object _edge_steps is really bound
										JavaSDM.ensure(_edge_steps != null);
										// check object actor is really bound
										JavaSDM.ensure(actor != null);
										// check object alt is really bound
										JavaSDM.ensure(alt != null);
										// check object altFlow is really bound
										JavaSDM.ensure(altFlow != null);
										// check object flow is really bound
										JavaSDM.ensure(flow != null);
										// check object packageDeclaration is really bound
										JavaSDM.ensure(packageDeclaration != null);
										// check object step is really bound
										JavaSDM.ensure(step != null);
										// check object sysActor is really bound
										JavaSDM.ensure(sysActor != null);
										// check object useCase is really bound
										JavaSDM.ensure(useCase != null);
										// check isomorphic binding between objects sysActor and actor 
										JavaSDM.ensure(!sysActor.equals(actor));

										// check isomorphic binding between objects flow and altFlow 
										JavaSDM.ensure(!flow.equals(altFlow));

										// check link actor from step to actor
										JavaSDM.ensure(actor.equals(step
												.getActor()));

										// check link ref from alt to altFlow
										JavaSDM.ensure(altFlow.equals(alt
												.getRef()));

										// check link actors from actor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(actor.eContainer()));

										// check link actors from sysActor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(sysActor.eContainer()));

										// check link flows from flow to useCase
										JavaSDM.ensure(useCase.equals(flow
												.eContainer()));

										// check link flows from altFlow to useCase
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(altFlow,
														UseCase.class,
														"$eContainer")
												.contains(useCase)));

										// check link src from _edge_steps to flow
										JavaSDM.ensure(flow.equals(_edge_steps
												.getSrc()));

										// check link stepAlternative from alt to step
										JavaSDM.ensure(step.equals(alt
												.eContainer()));

										// check link steps from step to flow
										JavaSDM.ensure(flow.equals(step
												.eContainer()));

										// check link steps from step to altFlow
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(step,
														AlternativeFlow.class,
														"$eContainer")
												.contains(altFlow)));

										// check link trg from _edge_steps to step
										JavaSDM.ensure(step.equals(_edge_steps
												.getTrg()));

										// check link useCases from useCase to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(useCase.eContainer()));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_FWD(match,
														packageDeclaration,
														actor, sysActor, flow,
														useCase, step, alt,
														altFlow);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_FWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_108(
			EMoflonEdge _edge_stepAlternative) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_809190 = null;
		NormalStep __DEC_alt_stepAlternative_356692 = null;
		Flow __DEC_step_steps_262937 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_471559 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_471559 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		AlternativeFlow altFlow = null;
		AlternativeFlowAlternative alt = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_stepAlternative is really bound
			JavaSDM.ensure(_edge_stepAlternative != null);
			// bind object
			_TmpObject = _edge_stepAlternative.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = _edge_stepAlternative.getTrg();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			_TmpObject = alt.getRef();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link stepAlternative from alt to step
			JavaSDM.ensure(step.equals(alt.eContainer()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link useCases from packageDeclaration to useCase
					fujaba__Success = false;

					fujaba__IterPackageDeclarationToUseCase = new ArrayList(
							packageDeclaration.getUseCases()).iterator();

					while (fujaba__IterPackageDeclarationToUseCase.hasNext()) {
						try {
							useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
									.next();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);
							// check link flows from flow to useCase
							JavaSDM.ensure(useCase.equals(flow.eContainer()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_809190 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_809190 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_809190 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_809190
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_809190 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_809190
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_356692 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_356692 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_356692 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_356692
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_356692 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_356692
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_262937 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_262937 is really bound
									JavaSDM.ensure(__DEC_step_steps_262937 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_262937
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_262937 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_262937
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_262937 and flow 
									JavaSDM.ensure(!__DEC_step_steps_262937
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_471559
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_471559 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_471559
													.hasNext()) {
										try {
											__DEC_altFlow_ref_471559 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_471559
													.next();

											// check object __DEC_altFlow_ref_471559 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_471559 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_471559 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_471559
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_stepAlternative is really bound
								JavaSDM.ensure(_edge_stepAlternative != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_stepAlternative to step
								JavaSDM.ensure(step
										.equals(_edge_stepAlternative.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_stepAlternative to alt
								JavaSDM.ensure(alt.equals(_edge_stepAlternative
										.getTrg()));

								// check link useCases from useCase to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(useCase.eContainer()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, useCase, step, alt, altFlow);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_109(
			EMoflonEdge _edge_actor) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_650930 = null;
		NormalStep __DEC_alt_stepAlternative_30272 = null;
		Flow __DEC_step_steps_257852 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_722515 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_722515 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		AlternativeFlow altFlow = null;
		Iterator fujaba__IterStepToAlt = null;
		AlternativeFlowAlternative alt = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NamedFlow flow = null;
		NormalStep step = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_actor is really bound
			JavaSDM.ensure(_edge_actor != null);
			// bind object
			_TmpObject = _edge_actor.getSrc();

			// ensure correct type and really bound of object step
			JavaSDM.ensure(_TmpObject instanceof NormalStep);
			step = (NormalStep) _TmpObject;

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			_TmpObject = _edge_actor.getTrg();

			// ensure correct type and really bound of object actor
			JavaSDM.ensure(_TmpObject instanceof Actor);
			actor = (Actor) _TmpObject;

			// check link actor from step to actor
			JavaSDM.ensure(actor.equals(step.getActor()));

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link stepAlternative from step to alt
					fujaba__Success = false;

					fujaba__IterStepToAlt = new ArrayList(
							step.getStepAlternative()).iterator();

					while (fujaba__IterStepToAlt.hasNext()) {
						try {
							_TmpObject = fujaba__IterStepToAlt.next();

							// ensure correct type and really bound of object alt
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
							alt = (AlternativeFlowAlternative) _TmpObject;
							// bind object
							_TmpObject = alt.getRef();

							// ensure correct type and really bound of object altFlow
							JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
							altFlow = (AlternativeFlow) _TmpObject;

							// check isomorphic binding between objects flow and altFlow 
							JavaSDM.ensure(!flow.equals(altFlow));

							// iterate to-many link useCases from packageDeclaration to useCase
							fujaba__Success = false;

							fujaba__IterPackageDeclarationToUseCase = new ArrayList(
									packageDeclaration.getUseCases())
									.iterator();

							while (fujaba__IterPackageDeclarationToUseCase
									.hasNext()) {
								try {
									useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
											.next();

									// check object useCase is really bound
									JavaSDM.ensure(useCase != null);
									// check link flows from flow to useCase
									JavaSDM.ensure(useCase.equals(flow
											.eContainer()));

									// story node 'test core match and DECs'
									try {
										fujaba__Success = false;

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_altFlow_flows_650930 = altFlow
													.eContainer() instanceof UseCase ? (UseCase) altFlow
													.eContainer() : null;

											// check object __DEC_altFlow_flows_650930 is really bound
											JavaSDM.ensure(__DEC_altFlow_flows_650930 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_altFlow_flows_650930
													.getFlows().contains(
															altFlow));

											// check isomorphic binding between objects __DEC_altFlow_flows_650930 and useCase 
											JavaSDM.ensure(!__DEC_altFlow_flows_650930
													.equals(useCase));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_alt_stepAlternative_30272 = alt
													.eContainer() instanceof NormalStep ? (NormalStep) alt
													.eContainer() : null;

											// check object __DEC_alt_stepAlternative_30272 is really bound
											JavaSDM.ensure(__DEC_alt_stepAlternative_30272 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_alt_stepAlternative_30272
													.getStepAlternative()
													.contains(alt));

											// check isomorphic binding between objects __DEC_alt_stepAlternative_30272 and step 
											JavaSDM.ensure(!__DEC_alt_stepAlternative_30272
													.equals(step));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// bind object
											__DEC_step_steps_257852 = step
													.eContainer() instanceof Flow ? (Flow) step
													.eContainer() : null;

											// check object __DEC_step_steps_257852 is really bound
											JavaSDM.ensure(__DEC_step_steps_257852 != null);

											// check if contained via correct reference
											JavaSDM.ensure(__DEC_step_steps_257852
													.getSteps().contains(step));

											// check isomorphic binding between objects __DEC_step_steps_257852 and altFlow 
											JavaSDM.ensure(!__DEC_step_steps_257852
													.equals(altFlow));

											// check isomorphic binding between objects __DEC_step_steps_257852 and flow 
											JavaSDM.ensure(!__DEC_step_steps_257852
													.equals(flow));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check negative bindings
										try {
											fujaba__Success = false;

											// iterate to-many link ref from altFlow to __DEC_altFlow_ref_722515
											fujaba__Success = false;

											fujaba__IterAltFlowTo__DEC_altFlow_ref_722515 = new ArrayList(
													org.moflon.util.eMoflonEMFUtil
															.getOppositeReference(
																	altFlow,
																	AlternativeFlowAlternative.class,
																	"ref"))
													.iterator();

											while (!(fujaba__Success)
													&& fujaba__IterAltFlowTo__DEC_altFlow_ref_722515
															.hasNext()) {
												try {
													__DEC_altFlow_ref_722515 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_722515
															.next();

													// check object __DEC_altFlow_ref_722515 is really bound
													JavaSDM.ensure(__DEC_altFlow_ref_722515 != null);
													// check isomorphic binding between objects __DEC_altFlow_ref_722515 and alt 
													JavaSDM.ensure(!__DEC_altFlow_ref_722515
															.equals(alt));

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

										fujaba__Success = !(fujaba__Success);

										JavaSDM.ensure(fujaba__Success);

										// check object _edge_actor is really bound
										JavaSDM.ensure(_edge_actor != null);
										// check object actor is really bound
										JavaSDM.ensure(actor != null);
										// check object alt is really bound
										JavaSDM.ensure(alt != null);
										// check object altFlow is really bound
										JavaSDM.ensure(altFlow != null);
										// check object flow is really bound
										JavaSDM.ensure(flow != null);
										// check object packageDeclaration is really bound
										JavaSDM.ensure(packageDeclaration != null);
										// check object step is really bound
										JavaSDM.ensure(step != null);
										// check object sysActor is really bound
										JavaSDM.ensure(sysActor != null);
										// check object useCase is really bound
										JavaSDM.ensure(useCase != null);
										// check isomorphic binding between objects sysActor and actor 
										JavaSDM.ensure(!sysActor.equals(actor));

										// check isomorphic binding between objects flow and altFlow 
										JavaSDM.ensure(!flow.equals(altFlow));

										// check link actor from step to actor
										JavaSDM.ensure(actor.equals(step
												.getActor()));

										// check link ref from alt to altFlow
										JavaSDM.ensure(altFlow.equals(alt
												.getRef()));

										// check link actors from actor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(actor.eContainer()));

										// check link actors from sysActor to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(sysActor.eContainer()));

										// check link flows from flow to useCase
										JavaSDM.ensure(useCase.equals(flow
												.eContainer()));

										// check link flows from altFlow to useCase
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(altFlow,
														UseCase.class,
														"$eContainer")
												.contains(useCase)));

										// check link src from _edge_actor to step
										JavaSDM.ensure(step.equals(_edge_actor
												.getSrc()));

										// check link stepAlternative from alt to step
										JavaSDM.ensure(step.equals(alt
												.eContainer()));

										// check link steps from step to flow
										JavaSDM.ensure(flow.equals(step
												.eContainer()));

										// check link steps from step to altFlow
										JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
												.getOppositeReference(step,
														AlternativeFlow.class,
														"$eContainer")
												.contains(altFlow)));

										// check link trg from _edge_actor to actor
										JavaSDM.ensure(actor.equals(_edge_actor
												.getTrg()));

										// check link useCases from useCase to packageDeclaration
										JavaSDM.ensure(packageDeclaration
												.equals(useCase.eContainer()));

										// create object match
										match = TGGRuntimeFactory.eINSTANCE
												.createMatch();

										// assign attribute match
										match.setRuleName(__eClass.getName());
										// statement node 'bookkeeping with generic isAppropriate method'
										fujaba__Success = this
												.isAppropriate_FWD(match,
														packageDeclaration,
														actor, sysActor, flow,
														useCase, step, alt,
														altFlow);
										if (fujaba__Success) {
											// statement node 'Ensure that the correct types of elements are matched'
											fujaba__Success = this
													.checkTypes_FWD(match);
											if (fujaba__Success) {
												// story node 'Add match to rule result'
												try {
													fujaba__Success = false;

													// check object __performOperation is really bound
													JavaSDM.ensure(__performOperation != null);
													// check object __result is really bound
													JavaSDM.ensure(__result != null);
													// check object match is really bound
													JavaSDM.ensure(match != null);

													// create link
													org.moflon.util.eMoflonEMFUtil
															.addOppositeReference(
																	match,
																	__performOperation,
																	"isApplicableOperation");

													// create link
													__result.getContents().add(
															match);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}

											} else {

											}

										} else {

										}
										fujaba__Success = true;
									} catch (JavaSDMException fujaba__InternalException) {
										fujaba__Success = false;
									}

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_FWD_EMoflonEdge_110(
			EMoflonEdge _edge_ref) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		UseCase __DEC_altFlow_flows_631769 = null;
		NormalStep __DEC_alt_stepAlternative_958074 = null;
		Flow __DEC_step_steps_528988 = null;
		Iterator fujaba__IterAltFlowTo__DEC_altFlow_ref_697904 = null;
		AlternativeFlowAlternative __DEC_altFlow_ref_697904 = null;
		Match match = null;
		Iterator fujaba__IterPackageDeclarationToUseCase = null;
		UseCase useCase = null;
		Iterator fujaba__IterPackageDeclarationToSysActor = null;
		Actor sysActor = null;
		AlternativeFlow altFlow = null;
		NamedFlow flow = null;
		PackageDeclaration packageDeclaration = null;
		Actor actor = null;
		NormalStep step = null;
		AlternativeFlowAlternative alt = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_FWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_ref is really bound
			JavaSDM.ensure(_edge_ref != null);
			// bind object
			_TmpObject = _edge_ref.getSrc();

			// ensure correct type and really bound of object alt
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlowAlternative);
			alt = (AlternativeFlowAlternative) _TmpObject;

			// bind object
			step = alt.eContainer() instanceof NormalStep ? (NormalStep) alt
					.eContainer() : null;

			// check object step is really bound
			JavaSDM.ensure(step != null);

			// check if contained via correct reference
			JavaSDM.ensure(step.getStepAlternative().contains(alt));

			// bind object
			actor = step.getActor();

			// check object actor is really bound
			JavaSDM.ensure(actor != null);

			// bind object
			packageDeclaration = actor.eContainer() instanceof PackageDeclaration ? (PackageDeclaration) actor
					.eContainer() : null;

			// check object packageDeclaration is really bound
			JavaSDM.ensure(packageDeclaration != null);

			// check if contained via correct reference
			JavaSDM.ensure(packageDeclaration.getActors().contains(actor));

			// bind object
			_TmpObject = step.eContainer() instanceof NamedFlow ? (NamedFlow) step
					.eContainer() : null;

			// ensure correct type and really bound of object flow
			JavaSDM.ensure(_TmpObject instanceof NamedFlow);
			flow = (NamedFlow) _TmpObject;

			// check if contained via correct reference
			JavaSDM.ensure(flow.getSteps().contains(step));

			// bind object
			_TmpObject = _edge_ref.getTrg();

			// ensure correct type and really bound of object altFlow
			JavaSDM.ensure(_TmpObject instanceof AlternativeFlow);
			altFlow = (AlternativeFlow) _TmpObject;

			// check isomorphic binding between objects flow and altFlow 
			JavaSDM.ensure(!flow.equals(altFlow));

			// check link ref from alt to altFlow
			JavaSDM.ensure(altFlow.equals(alt.getRef()));

			// iterate to-many link actors from packageDeclaration to sysActor
			fujaba__Success = false;

			fujaba__IterPackageDeclarationToSysActor = new ArrayList(
					packageDeclaration.getActors()).iterator();

			while (fujaba__IterPackageDeclarationToSysActor.hasNext()) {
				try {
					sysActor = (Actor) fujaba__IterPackageDeclarationToSysActor
							.next();

					// check object sysActor is really bound
					JavaSDM.ensure(sysActor != null);
					// check isomorphic binding between objects sysActor and actor 
					JavaSDM.ensure(!sysActor.equals(actor));

					// iterate to-many link useCases from packageDeclaration to useCase
					fujaba__Success = false;

					fujaba__IterPackageDeclarationToUseCase = new ArrayList(
							packageDeclaration.getUseCases()).iterator();

					while (fujaba__IterPackageDeclarationToUseCase.hasNext()) {
						try {
							useCase = (UseCase) fujaba__IterPackageDeclarationToUseCase
									.next();

							// check object useCase is really bound
							JavaSDM.ensure(useCase != null);
							// check link flows from flow to useCase
							JavaSDM.ensure(useCase.equals(flow.eContainer()));

							// story node 'test core match and DECs'
							try {
								fujaba__Success = false;

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_altFlow_flows_631769 = altFlow
											.eContainer() instanceof UseCase ? (UseCase) altFlow
											.eContainer() : null;

									// check object __DEC_altFlow_flows_631769 is really bound
									JavaSDM.ensure(__DEC_altFlow_flows_631769 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_altFlow_flows_631769
											.getFlows().contains(altFlow));

									// check isomorphic binding between objects __DEC_altFlow_flows_631769 and useCase 
									JavaSDM.ensure(!__DEC_altFlow_flows_631769
											.equals(useCase));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_alt_stepAlternative_958074 = alt
											.eContainer() instanceof NormalStep ? (NormalStep) alt
											.eContainer() : null;

									// check object __DEC_alt_stepAlternative_958074 is really bound
									JavaSDM.ensure(__DEC_alt_stepAlternative_958074 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_alt_stepAlternative_958074
											.getStepAlternative().contains(alt));

									// check isomorphic binding between objects __DEC_alt_stepAlternative_958074 and step 
									JavaSDM.ensure(!__DEC_alt_stepAlternative_958074
											.equals(step));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// bind object
									__DEC_step_steps_528988 = step.eContainer() instanceof Flow ? (Flow) step
											.eContainer() : null;

									// check object __DEC_step_steps_528988 is really bound
									JavaSDM.ensure(__DEC_step_steps_528988 != null);

									// check if contained via correct reference
									JavaSDM.ensure(__DEC_step_steps_528988
											.getSteps().contains(step));

									// check isomorphic binding between objects __DEC_step_steps_528988 and altFlow 
									JavaSDM.ensure(!__DEC_step_steps_528988
											.equals(altFlow));

									// check isomorphic binding between objects __DEC_step_steps_528988 and flow 
									JavaSDM.ensure(!__DEC_step_steps_528988
											.equals(flow));

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check negative bindings
								try {
									fujaba__Success = false;

									// iterate to-many link ref from altFlow to __DEC_altFlow_ref_697904
									fujaba__Success = false;

									fujaba__IterAltFlowTo__DEC_altFlow_ref_697904 = new ArrayList(
											org.moflon.util.eMoflonEMFUtil
													.getOppositeReference(
															altFlow,
															AlternativeFlowAlternative.class,
															"ref")).iterator();

									while (!(fujaba__Success)
											&& fujaba__IterAltFlowTo__DEC_altFlow_ref_697904
													.hasNext()) {
										try {
											__DEC_altFlow_ref_697904 = (AlternativeFlowAlternative) fujaba__IterAltFlowTo__DEC_altFlow_ref_697904
													.next();

											// check object __DEC_altFlow_ref_697904 is really bound
											JavaSDM.ensure(__DEC_altFlow_ref_697904 != null);
											// check isomorphic binding between objects __DEC_altFlow_ref_697904 and alt 
											JavaSDM.ensure(!__DEC_altFlow_ref_697904
													.equals(alt));

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}

								fujaba__Success = !(fujaba__Success);

								JavaSDM.ensure(fujaba__Success);

								// check object _edge_ref is really bound
								JavaSDM.ensure(_edge_ref != null);
								// check object actor is really bound
								JavaSDM.ensure(actor != null);
								// check object alt is really bound
								JavaSDM.ensure(alt != null);
								// check object altFlow is really bound
								JavaSDM.ensure(altFlow != null);
								// check object flow is really bound
								JavaSDM.ensure(flow != null);
								// check object packageDeclaration is really bound
								JavaSDM.ensure(packageDeclaration != null);
								// check object step is really bound
								JavaSDM.ensure(step != null);
								// check object sysActor is really bound
								JavaSDM.ensure(sysActor != null);
								// check object useCase is really bound
								JavaSDM.ensure(useCase != null);
								// check isomorphic binding between objects sysActor and actor 
								JavaSDM.ensure(!sysActor.equals(actor));

								// check isomorphic binding between objects flow and altFlow 
								JavaSDM.ensure(!flow.equals(altFlow));

								// check link actor from step to actor
								JavaSDM.ensure(actor.equals(step.getActor()));

								// check link ref from alt to altFlow
								JavaSDM.ensure(altFlow.equals(alt.getRef()));

								// check link actors from actor to packageDeclaration
								JavaSDM.ensure(packageDeclaration.equals(actor
										.eContainer()));

								// check link actors from sysActor to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(sysActor.eContainer()));

								// check link flows from flow to useCase
								JavaSDM.ensure(useCase.equals(flow.eContainer()));

								// check link flows from altFlow to useCase
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(altFlow,
												UseCase.class, "$eContainer")
										.contains(useCase)));

								// check link src from _edge_ref to alt
								JavaSDM.ensure(alt.equals(_edge_ref.getSrc()));

								// check link stepAlternative from alt to step
								JavaSDM.ensure(step.equals(alt.eContainer()));

								// check link steps from step to flow
								JavaSDM.ensure(flow.equals(step.eContainer()));

								// check link steps from step to altFlow
								JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
										.getOppositeReference(step,
												AlternativeFlow.class,
												"$eContainer")
										.contains(altFlow)));

								// check link trg from _edge_ref to altFlow
								JavaSDM.ensure(altFlow.equals(_edge_ref
										.getTrg()));

								// check link useCases from useCase to packageDeclaration
								JavaSDM.ensure(packageDeclaration
										.equals(useCase.eContainer()));

								// create object match
								match = TGGRuntimeFactory.eINSTANCE
										.createMatch();

								// assign attribute match
								match.setRuleName(__eClass.getName());
								// statement node 'bookkeeping with generic isAppropriate method'
								fujaba__Success = this.isAppropriate_FWD(match,
										packageDeclaration, actor, sysActor,
										flow, useCase, step, alt, altFlow);
								if (fujaba__Success) {
									// statement node 'Ensure that the correct types of elements are matched'
									fujaba__Success = this
											.checkTypes_FWD(match);
									if (fujaba__Success) {
										// story node 'Add match to rule result'
										try {
											fujaba__Success = false;

											// check object __performOperation is really bound
											JavaSDM.ensure(__performOperation != null);
											// check object __result is really bound
											JavaSDM.ensure(__result != null);
											// check object match is really bound
											JavaSDM.ensure(match != null);

											// create link
											org.moflon.util.eMoflonEMFUtil
													.addOppositeReference(
															match,
															__performOperation,
															"isApplicableOperation");

											// create link
											__result.getContents().add(match);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}

									} else {

									}

								} else {

								}
								fujaba__Success = true;
							} catch (JavaSDMException fujaba__InternalException) {
								fujaba__Success = false;
							}

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_479(
			EMoflonEdge _edge_coveredBy) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_170154 = null;
		Interaction __DEC_messageSend_enclosingInteraction_697861 = null;
		Interaction __DEC_operand_enclosingInteraction_853732 = null;
		InteractionOperand __DEC_combo_fragment_341171 = null;
		InteractionOperand __DEC_messageReceive_fragment_646058 = null;
		InteractionOperand __DEC_messageSend_fragment_199499 = null;
		InteractionOperand __DEC_operand_fragment_739155 = null;
		Constraint __DEC_spec_specification_681914 = null;
		InteractionOperand __DEC_guard_guard_994181 = null;
		CombinedFragment __DEC_operand_operand_444938 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_coveredBy is really bound
			JavaSDM.ensure(_edge_coveredBy != null);
			// bind object
			_TmpObject = _edge_coveredBy.getSrc();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_coveredBy.getTrg();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link coveredBy from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link coveredBy from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// iterate to-many link coveredBy from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// check link coveredBy from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// check link coveredBy from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// story node 'test core match and DECs'
													try {
														fujaba__Success = false;

														// negative check for link message from messageReceive
														JavaSDM.ensure(messageReceive
																.getMessage() == null);
														// negative check for link message from messageSend
														JavaSDM.ensure(messageSend
																.getMessage() == null);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_enclosingInteraction_170154 = messageReceive
																	.getEnclosingInteraction();

															// check object __DEC_messageReceive_enclosingInteraction_170154 is really bound
															JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_170154 != null);

															// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_170154 and interaction 
															JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_170154
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_enclosingInteraction_697861 = messageSend
																	.getEnclosingInteraction();

															// check object __DEC_messageSend_enclosingInteraction_697861 is really bound
															JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_697861 != null);

															// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_697861 and interaction 
															JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_697861
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_enclosingInteraction_853732 = operand
																	.getEnclosingInteraction();

															// check object __DEC_operand_enclosingInteraction_853732 is really bound
															JavaSDM.ensure(__DEC_operand_enclosingInteraction_853732 != null);

															// check isomorphic binding between objects __DEC_operand_enclosingInteraction_853732 and interaction 
															JavaSDM.ensure(!__DEC_operand_enclosingInteraction_853732
																	.equals(interaction));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_combo_fragment_341171 = combo
																	.getEnclosingOperand();

															// check object __DEC_combo_fragment_341171 is really bound
															JavaSDM.ensure(__DEC_combo_fragment_341171 != null);

															// check isomorphic binding between objects __DEC_combo_fragment_341171 and operand 
															JavaSDM.ensure(!__DEC_combo_fragment_341171
																	.equals(operand));

															// check isomorphic binding between objects __DEC_combo_fragment_341171 and parentOperand 
															JavaSDM.ensure(!__DEC_combo_fragment_341171
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageReceive_fragment_646058 = messageReceive
																	.getEnclosingOperand();

															// check object __DEC_messageReceive_fragment_646058 is really bound
															JavaSDM.ensure(__DEC_messageReceive_fragment_646058 != null);

															// check isomorphic binding between objects __DEC_messageReceive_fragment_646058 and operand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_646058
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageReceive_fragment_646058 and parentOperand 
															JavaSDM.ensure(!__DEC_messageReceive_fragment_646058
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_messageSend_fragment_199499 = messageSend
																	.getEnclosingOperand();

															// check object __DEC_messageSend_fragment_199499 is really bound
															JavaSDM.ensure(__DEC_messageSend_fragment_199499 != null);

															// check isomorphic binding between objects __DEC_messageSend_fragment_199499 and operand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_199499
																	.equals(operand));

															// check isomorphic binding between objects __DEC_messageSend_fragment_199499 and parentOperand 
															JavaSDM.ensure(!__DEC_messageSend_fragment_199499
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_fragment_739155 = operand
																	.getEnclosingOperand();

															// check object __DEC_operand_fragment_739155 is really bound
															JavaSDM.ensure(__DEC_operand_fragment_739155 != null);

															// check isomorphic binding between objects __DEC_operand_fragment_739155 and operand 
															JavaSDM.ensure(!__DEC_operand_fragment_739155
																	.equals(operand));

															// check isomorphic binding between objects __DEC_operand_fragment_739155 and parentOperand 
															JavaSDM.ensure(!__DEC_operand_fragment_739155
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link packagedElement from guard
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		guard,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// negative check for link packagedElement from spec
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		spec,
																		ModalSequenceDiagram.Package.class,
																		"packagedElement")
																.size() == 0);
														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_spec_specification_681914 = spec
																	.eContainer() instanceof Constraint ? (Constraint) spec
																	.eContainer()
																	: null;

															// check object __DEC_spec_specification_681914 is really bound
															JavaSDM.ensure(__DEC_spec_specification_681914 != null);

															// check if contained via correct reference
															JavaSDM.ensure(spec
																	.equals(__DEC_spec_specification_681914
																			.getSpecification()));

															// check isomorphic binding between objects __DEC_spec_specification_681914 and guard 
															JavaSDM.ensure(!__DEC_spec_specification_681914
																	.equals(guard));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_guard_guard_994181 = guard
																	.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																	.eContainer()
																	: null;

															// check object __DEC_guard_guard_994181 is really bound
															JavaSDM.ensure(__DEC_guard_guard_994181 != null);

															// check if contained via correct reference
															JavaSDM.ensure(guard
																	.equals(__DEC_guard_guard_994181
																			.getGuard()));

															// check isomorphic binding between objects __DEC_guard_guard_994181 and operand 
															JavaSDM.ensure(!__DEC_guard_guard_994181
																	.equals(operand));

															// check isomorphic binding between objects __DEC_guard_guard_994181 and parentOperand 
															JavaSDM.ensure(!__DEC_guard_guard_994181
																	.equals(parentOperand));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// check negative bindings
														try {
															fujaba__Success = false;

															// bind object
															__DEC_operand_operand_444938 = operand
																	.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																	.eContainer()
																	: null;

															// check object __DEC_operand_operand_444938 is really bound
															JavaSDM.ensure(__DEC_operand_operand_444938 != null);

															// check if contained via correct reference
															JavaSDM.ensure(__DEC_operand_operand_444938
																	.getOperand()
																	.contains(
																			operand));

															// check isomorphic binding between objects __DEC_operand_operand_444938 and combo 
															JavaSDM.ensure(!__DEC_operand_operand_444938
																	.equals(combo));

															// check isomorphic binding between objects __DEC_operand_operand_444938 and parentCombo 
															JavaSDM.ensure(!__DEC_operand_operand_444938
																	.equals(parentCombo));

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}

														fujaba__Success = !(fujaba__Success);

														JavaSDM.ensure(fujaba__Success);

														// negative check for link receiveEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link receiveEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"receiveEvent")
																.size() == 0);
														// negative check for link sendEvent from messageReceive
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageReceive,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// negative check for link sendEvent from messageSend
														JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		messageSend,
																		Message.class,
																		"sendEvent")
																.size() == 0);
														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check link fragment from operand to operand
														JavaSDM.ensure(!(operand.equals(operand
																.getEnclosingOperand())));

														// check object _edge_coveredBy is really bound
														JavaSDM.ensure(_edge_coveredBy != null);
														// check object combo is really bound
														JavaSDM.ensure(combo != null);
														// check object guard is really bound
														JavaSDM.ensure(guard != null);
														// check object interaction is really bound
														JavaSDM.ensure(interaction != null);
														// check object line is really bound
														JavaSDM.ensure(line != null);
														// check object messageReceive is really bound
														JavaSDM.ensure(messageReceive != null);
														// check object messageSend is really bound
														JavaSDM.ensure(messageSend != null);
														// check object operand is really bound
														JavaSDM.ensure(operand != null);
														// check object parentCombo is really bound
														JavaSDM.ensure(parentCombo != null);
														// check object parentOperand is really bound
														JavaSDM.ensure(parentOperand != null);
														// check object spec is really bound
														JavaSDM.ensure(spec != null);
														// check object sysLine is really bound
														JavaSDM.ensure(sysLine != null);
														// check isomorphic binding between objects parentCombo and combo 
														JavaSDM.ensure(!parentCombo
																.equals(combo));

														// check isomorphic binding between objects sysLine and line 
														JavaSDM.ensure(!sysLine
																.equals(line));

														// check isomorphic binding between objects messageSend and messageReceive 
														JavaSDM.ensure(!messageSend
																.equals(messageReceive));

														// check isomorphic binding between objects parentOperand and operand 
														JavaSDM.ensure(!parentOperand
																.equals(operand));

														// check link fragment from combo to interaction
														JavaSDM.ensure(interaction.equals(combo
																.getEnclosingInteraction()));

														// check link fragment from messageReceive to parentOperand
														JavaSDM.ensure(parentOperand
																.equals(messageReceive
																		.getEnclosingOperand()));

														// check link fragment from messageReceive to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageReceive
																		.getEnclosingInteraction())));

														// check link fragment from messageSend to interaction
														JavaSDM.ensure(!(interaction
																.equals(messageSend
																		.getEnclosingInteraction())));

														// check link fragment from operand to interaction
														JavaSDM.ensure(!(interaction.equals(operand
																.getEnclosingInteraction())));

														// check link fragment from combo to operand
														JavaSDM.ensure(!(operand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageReceive to operand
														JavaSDM.ensure(!(operand
																.equals(messageReceive
																		.getEnclosingOperand())));

														// check link fragment from messageSend to operand
														JavaSDM.ensure(!(operand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link fragment from combo to parentOperand
														JavaSDM.ensure(!(parentOperand.equals(combo
																.getEnclosingOperand())));

														// check link fragment from messageSend to parentOperand
														JavaSDM.ensure(!(parentOperand
																.equals(messageSend
																		.getEnclosingOperand())));

														// check link guard from operand to guard
														JavaSDM.ensure(guard.equals(operand
																.getGuard()));

														// check link guard from parentOperand to guard
														JavaSDM.ensure(!(guard
																.equals(parentOperand
																		.getGuard())));

														// check link lifeline from line to interaction
														JavaSDM.ensure(interaction.equals(line
																.getInteraction()));

														// check link operand from parentOperand to parentCombo
														JavaSDM.ensure(parentCombo
																.equals(parentOperand
																		.eContainer()));

														// check link operand from operand to combo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(combo)));

														// check link operand from operand to parentCombo
														JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																.getOppositeReference(
																		operand,
																		CombinedFragment.class,
																		"$eContainer")
																.contains(parentCombo)));

														// check link specification from spec to guard
														JavaSDM.ensure(guard.equals(spec
																.eContainer()));

														// check link src from _edge_coveredBy to line
														JavaSDM.ensure(line
																.equals(_edge_coveredBy
																		.getSrc()));

														// check link trg from _edge_coveredBy to operand
														JavaSDM.ensure(operand
																.equals(_edge_coveredBy
																		.getTrg()));

														// check link coveredBy from line to operand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		operand));

														// check link coveredBy from line to parentCombo
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentCombo));

														// check link coveredBy from line to parentOperand
														JavaSDM.ensure(line
																.getCoveredBy()
																.contains(
																		parentOperand));

														// check link coveredBy from combo to sysLine
														JavaSDM.ensure(combo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from messageSend to sysLine
														JavaSDM.ensure(messageSend
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from operand to sysLine
														JavaSDM.ensure(operand
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentCombo to sysLine
														JavaSDM.ensure(parentCombo
																.getCovered()
																.contains(
																		sysLine));

														// check link coveredBy from parentOperand to sysLine
														JavaSDM.ensure(parentOperand
																.getCovered()
																.contains(
																		sysLine));

														// create object match
														match = TGGRuntimeFactory.eINSTANCE
																.createMatch();

														// assign attribute match
														match.setRuleName(__eClass
																.getName());
														// statement node 'bookkeeping with generic isAppropriate method'
														fujaba__Success = this
																.isAppropriate_BWD(
																		match,
																		sysLine,
																		messageSend,
																		combo,
																		operand,
																		parentOperand,
																		parentCombo,
																		messageReceive,
																		line,
																		interaction,
																		guard,
																		spec);
														if (fujaba__Success) {
															// statement node 'Ensure that the correct types of elements are matched'
															fujaba__Success = this
																	.checkTypes_BWD(match);
															if (fujaba__Success) {
																// story node 'Add match to rule result'
																try {
																	fujaba__Success = false;

																	// check object __performOperation is really bound
																	JavaSDM.ensure(__performOperation != null);
																	// check object __result is really bound
																	JavaSDM.ensure(__result != null);
																	// check object match is really bound
																	JavaSDM.ensure(match != null);

																	// create link
																	org.moflon.util.eMoflonEMFUtil
																			.addOppositeReference(
																					match,
																					__performOperation,
																					"isApplicableOperation");

																	// create link
																	__result.getContents()
																			.add(match);

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

															} else {

															}

														} else {

														}
														fujaba__Success = true;
													} catch (JavaSDMException fujaba__InternalException) {
														fujaba__Success = false;
													}

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_480(
			EMoflonEdge _edge_covered) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_338443 = null;
		Interaction __DEC_messageSend_enclosingInteraction_975172 = null;
		Interaction __DEC_operand_enclosingInteraction_155182 = null;
		InteractionOperand __DEC_combo_fragment_230784 = null;
		InteractionOperand __DEC_messageReceive_fragment_934804 = null;
		InteractionOperand __DEC_messageSend_fragment_754630 = null;
		InteractionOperand __DEC_operand_fragment_797278 = null;
		Constraint __DEC_spec_specification_511875 = null;
		InteractionOperand __DEC_guard_guard_148798 = null;
		CombinedFragment __DEC_operand_operand_362569 = null;
		Match match = null;
		Iterator fujaba__IterOperandTo_edge_coveredBy = null;
		EMoflonEdge _edge_coveredBy = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;
		Lifeline line = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_covered is really bound
			JavaSDM.ensure(_edge_covered != null);
			// bind object
			_TmpObject = _edge_covered.getTrg();

			// ensure correct type and really bound of object line
			JavaSDM.ensure(_TmpObject instanceof Lifeline);
			line = (Lifeline) _TmpObject;

			// bind object
			_TmpObject = _edge_covered.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link coveredBy from line to operand
			JavaSDM.ensure(line.getCoveredBy().contains(operand));

			// iterate to-many link coveredBy from operand to sysLine
			fujaba__Success = false;

			fujaba__IterOperandToSysLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToSysLine.hasNext()) {
				try {
					sysLine = (Lifeline) fujaba__IterOperandToSysLine.next();

					// check object sysLine is really bound
					JavaSDM.ensure(sysLine != null);
					// check isomorphic binding between objects sysLine and line 
					JavaSDM.ensure(!sysLine.equals(line));

					// iterate to-many link coveredBy from sysLine to combo
					fujaba__Success = false;

					fujaba__IterSysLineToCombo = new ArrayList(
							sysLine.getCoveredBy()).iterator();

					while (fujaba__IterSysLineToCombo.hasNext()) {
						try {
							_TmpObject = fujaba__IterSysLineToCombo.next();

							// ensure correct type and really bound of object combo
							JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
							combo = (CombinedFragment) _TmpObject;
							// bind object
							interaction = combo.getEnclosingInteraction();

							// check object interaction is really bound
							JavaSDM.ensure(interaction != null);

							// check link lifeline from line to interaction
							JavaSDM.ensure(interaction.equals(line
									.getInteraction()));

							// iterate to-many link coveredBy from sysLine to messageSend
							fujaba__Success = false;

							fujaba__IterSysLineToMessageSend = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToMessageSend.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToMessageSend
											.next();

									// ensure correct type and really bound of object messageSend
									JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
									messageSend = (MessageOccurrenceSpecification) _TmpObject;
									// iterate to-many link coveredBy from sysLine to parentOperand
									fujaba__Success = false;

									fujaba__IterSysLineToParentOperand = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToParentOperand
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToParentOperand
													.next();

											// ensure correct type and really bound of object parentOperand
											JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
											parentOperand = (InteractionOperand) _TmpObject;
											// check isomorphic binding between objects parentOperand and operand 
											JavaSDM.ensure(!parentOperand
													.equals(operand));

											// bind object
											parentCombo = parentOperand
													.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
													.eContainer() : null;

											// check object parentCombo is really bound
											JavaSDM.ensure(parentCombo != null);

											// check if contained via correct reference
											JavaSDM.ensure(parentCombo
													.getOperand().contains(
															parentOperand));

											// check isomorphic binding between objects parentCombo and combo 
											JavaSDM.ensure(!parentCombo
													.equals(combo));

											// check link coveredBy from line to parentCombo
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentCombo));

											// check link coveredBy from line to parentOperand
											JavaSDM.ensure(line.getCoveredBy()
													.contains(parentOperand));

											// check link coveredBy from parentCombo to sysLine
											JavaSDM.ensure(parentCombo
													.getCovered().contains(
															sysLine));

											// iterate to-many link fragment from parentOperand to messageReceive
											fujaba__Success = false;

											fujaba__IterParentOperandToMessageReceive = new ArrayList(
													parentOperand.getFragment())
													.iterator();

											while (fujaba__IterParentOperandToMessageReceive
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterParentOperandToMessageReceive
															.next();

													// ensure correct type and really bound of object messageReceive
													JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
													messageReceive = (MessageOccurrenceSpecification) _TmpObject;
													// check isomorphic binding between objects messageSend and messageReceive 
													JavaSDM.ensure(!messageSend
															.equals(messageReceive));

													// iterate to-many link trg from operand to _edge_coveredBy
													fujaba__Success = false;

													fujaba__IterOperandTo_edge_coveredBy = new ArrayList(
															org.moflon.util.eMoflonEMFUtil
																	.getOppositeReference(
																			operand,
																			EMoflonEdge.class,
																			"trg"))
															.iterator();

													while (fujaba__IterOperandTo_edge_coveredBy
															.hasNext()) {
														try {
															_edge_coveredBy = (EMoflonEdge) fujaba__IterOperandTo_edge_coveredBy
																	.next();

															// check object _edge_coveredBy is really bound
															JavaSDM.ensure(_edge_coveredBy != null);
															// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
															JavaSDM.ensure(!_edge_coveredBy
																	.equals(_edge_covered));

															// check link src from _edge_coveredBy to line
															JavaSDM.ensure(line
																	.equals(_edge_coveredBy
																			.getSrc()));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_338443 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_338443 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_338443 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_338443 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_338443
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_975172 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_975172 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_975172 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_975172 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_975172
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_155182 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_155182 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_155182 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_155182 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_155182
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_230784 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_230784 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_230784 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_230784 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_230784
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_230784 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_230784
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_934804 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_934804 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_934804 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_934804 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_934804
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_934804 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_934804
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_754630 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_754630 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_754630 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_754630 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_754630
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_754630 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_754630
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_797278 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_797278 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_797278 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_797278 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_797278
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_797278 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_797278
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_511875 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_511875 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_511875 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_511875
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_511875 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_511875
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_148798 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_148798 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_148798 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_148798
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_148798 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_148798
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_148798 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_148798
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_362569 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_362569 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_362569 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_362569
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_362569 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_362569
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_362569 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_362569
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_covered is really bound
																JavaSDM.ensure(_edge_covered != null);
																// check object _edge_coveredBy is really bound
																JavaSDM.ensure(_edge_coveredBy != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects _edge_coveredBy and _edge_covered 
																JavaSDM.ensure(!_edge_coveredBy
																		.equals(_edge_covered));

																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_covered to operand
																JavaSDM.ensure(operand
																		.equals(_edge_covered
																				.getSrc()));

																// check link src from _edge_coveredBy to line
																JavaSDM.ensure(line
																		.equals(_edge_coveredBy
																				.getSrc()));

																// check link trg from _edge_covered to line
																JavaSDM.ensure(line
																		.equals(_edge_covered
																				.getTrg()));

																// check link trg from _edge_coveredBy to operand
																JavaSDM.ensure(operand
																		.equals(_edge_coveredBy
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_481(
			EMoflonEdge _edge_guard) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_35776 = null;
		Interaction __DEC_messageSend_enclosingInteraction_23201 = null;
		Interaction __DEC_operand_enclosingInteraction_295796 = null;
		InteractionOperand __DEC_combo_fragment_763994 = null;
		InteractionOperand __DEC_messageReceive_fragment_183778 = null;
		InteractionOperand __DEC_messageSend_fragment_974548 = null;
		InteractionOperand __DEC_operand_fragment_397624 = null;
		Constraint __DEC_spec_specification_984930 = null;
		InteractionOperand __DEC_guard_guard_450462 = null;
		CombinedFragment __DEC_operand_operand_887848 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionConstraint guard = null;
		InteractionOperand operand = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_guard is really bound
			JavaSDM.ensure(_edge_guard != null);
			// bind object
			_TmpObject = _edge_guard.getSrc();

			// ensure correct type and really bound of object operand
			JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
			operand = (InteractionOperand) _TmpObject;

			// bind object
			guard = operand.getGuard();

			// check object guard is really bound
			JavaSDM.ensure(guard != null);

			// bind object
			_TmpObject = guard.getSpecification();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link trg from _edge_guard to guard
			JavaSDM.ensure(guard.equals(_edge_guard.getTrg()));

			// iterate to-many link coveredBy from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link coveredBy from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link coveredBy from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// check link coveredBy from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_35776 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_35776 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_35776 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_35776 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_35776
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_23201 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_23201 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_23201 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_23201 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_23201
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_295796 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_295796 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_295796 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_295796 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_295796
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_763994 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_763994 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_763994 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_763994 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_763994
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_763994 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_763994
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_183778 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_183778 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_183778 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_183778 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_183778
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_183778 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_183778
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_974548 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_974548 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_974548 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_974548 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_974548
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_974548 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_974548
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_397624 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_397624 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_397624 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_397624 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_397624
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_397624 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_397624
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_984930 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_984930 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_984930 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_984930
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_984930 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_984930
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_450462 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_450462 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_450462 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_450462
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_450462 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_450462
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_450462 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_450462
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_887848 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_887848 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_887848 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_887848
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_887848 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_887848
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_887848 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_887848
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_guard is really bound
																JavaSDM.ensure(_edge_guard != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_guard to operand
																JavaSDM.ensure(operand
																		.equals(_edge_guard
																				.getSrc()));

																// check link trg from _edge_guard to guard
																JavaSDM.ensure(guard
																		.equals(_edge_guard
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EObjectContainer isAppropriate_BWD_EMoflonEdge_482(
			EMoflonEdge _edge_specification) {
		boolean fujaba__Success = false;
		Object _TmpObject = null;
		EClass __eClass = null;
		Iterator fujaba__Iter__eClassTo__performOperation = null;
		EOperation __performOperation = null;
		EObjectContainer __result = null;
		Interaction __DEC_messageReceive_enclosingInteraction_761715 = null;
		Interaction __DEC_messageSend_enclosingInteraction_507628 = null;
		Interaction __DEC_operand_enclosingInteraction_84786 = null;
		InteractionOperand __DEC_combo_fragment_865537 = null;
		InteractionOperand __DEC_messageReceive_fragment_180474 = null;
		InteractionOperand __DEC_messageSend_fragment_651771 = null;
		InteractionOperand __DEC_operand_fragment_503566 = null;
		Constraint __DEC_spec_specification_667793 = null;
		InteractionOperand __DEC_guard_guard_499656 = null;
		CombinedFragment __DEC_operand_operand_83997 = null;
		Match match = null;
		Iterator fujaba__IterParentOperandToMessageReceive = null;
		MessageOccurrenceSpecification messageReceive = null;
		CombinedFragment parentCombo = null;
		Iterator fujaba__IterSysLineToParentOperand = null;
		InteractionOperand parentOperand = null;
		Iterator fujaba__IterSysLineToMessageSend = null;
		MessageOccurrenceSpecification messageSend = null;
		Interaction interaction = null;
		Iterator fujaba__IterSysLineToCombo = null;
		CombinedFragment combo = null;
		Iterator fujaba__IterOperandToSysLine = null;
		Lifeline sysLine = null;
		Iterator fujaba__IterOperandToLine = null;
		Lifeline line = null;
		LiteralString spec = null;
		InteractionOperand operand = null;
		InteractionConstraint guard = null;

		// story node 'prepare return value'
		try {
			fujaba__Success = false;

			_TmpObject = (this.eClass());

			// ensure correct type and really bound of object __eClass
			JavaSDM.ensure(_TmpObject instanceof EClass);
			__eClass = (EClass) _TmpObject;
			// iterate to-many link eOperations from __eClass to __performOperation
			fujaba__Success = false;

			fujaba__Iter__eClassTo__performOperation = __eClass
					.getEOperations().iterator();

			while (!(fujaba__Success)
					&& fujaba__Iter__eClassTo__performOperation.hasNext()) {
				try {
					__performOperation = (EOperation) fujaba__Iter__eClassTo__performOperation
							.next();

					// check object __performOperation is really bound
					JavaSDM.ensure(__performOperation != null);
					// attribute condition
					JavaSDM.ensure(JavaSDM.stringCompare(
							__performOperation.getName(), "isApplicable_BWD") == 0);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);
			// create object __result
			__result = TGGRuntimeFactory.eINSTANCE.createEObjectContainer();

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		// story node 'test core match kernel'
		try {
			fujaba__Success = false;

			// check object _edge_specification is really bound
			JavaSDM.ensure(_edge_specification != null);
			// bind object
			_TmpObject = _edge_specification.getSrc();

			// ensure correct type and really bound of object guard
			JavaSDM.ensure(_TmpObject instanceof InteractionConstraint);
			guard = (InteractionConstraint) _TmpObject;

			// bind object
			operand = guard.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
					.eContainer() : null;

			// check object operand is really bound
			JavaSDM.ensure(operand != null);

			// check if contained via correct reference
			JavaSDM.ensure(guard.equals(operand.getGuard()));

			// bind object
			_TmpObject = _edge_specification.getTrg();

			// ensure correct type and really bound of object spec
			JavaSDM.ensure(_TmpObject instanceof LiteralString);
			spec = (LiteralString) _TmpObject;

			// check link specification from spec to guard
			JavaSDM.ensure(guard.equals(spec.eContainer()));

			// iterate to-many link coveredBy from operand to line
			fujaba__Success = false;

			fujaba__IterOperandToLine = new ArrayList(operand.getCovered())
					.iterator();

			while (fujaba__IterOperandToLine.hasNext()) {
				try {
					line = (Lifeline) fujaba__IterOperandToLine.next();

					// check object line is really bound
					JavaSDM.ensure(line != null);
					// iterate to-many link coveredBy from operand to sysLine
					fujaba__Success = false;

					fujaba__IterOperandToSysLine = new ArrayList(
							operand.getCovered()).iterator();

					while (fujaba__IterOperandToSysLine.hasNext()) {
						try {
							sysLine = (Lifeline) fujaba__IterOperandToSysLine
									.next();

							// check object sysLine is really bound
							JavaSDM.ensure(sysLine != null);
							// check isomorphic binding between objects sysLine and line 
							JavaSDM.ensure(!sysLine.equals(line));

							// iterate to-many link coveredBy from sysLine to combo
							fujaba__Success = false;

							fujaba__IterSysLineToCombo = new ArrayList(
									sysLine.getCoveredBy()).iterator();

							while (fujaba__IterSysLineToCombo.hasNext()) {
								try {
									_TmpObject = fujaba__IterSysLineToCombo
											.next();

									// ensure correct type and really bound of object combo
									JavaSDM.ensure(_TmpObject instanceof CombinedFragment);
									combo = (CombinedFragment) _TmpObject;
									// bind object
									interaction = combo
											.getEnclosingInteraction();

									// check object interaction is really bound
									JavaSDM.ensure(interaction != null);

									// check link lifeline from line to interaction
									JavaSDM.ensure(interaction.equals(line
											.getInteraction()));

									// iterate to-many link coveredBy from sysLine to messageSend
									fujaba__Success = false;

									fujaba__IterSysLineToMessageSend = new ArrayList(
											sysLine.getCoveredBy()).iterator();

									while (fujaba__IterSysLineToMessageSend
											.hasNext()) {
										try {
											_TmpObject = fujaba__IterSysLineToMessageSend
													.next();

											// ensure correct type and really bound of object messageSend
											JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
											messageSend = (MessageOccurrenceSpecification) _TmpObject;
											// iterate to-many link coveredBy from sysLine to parentOperand
											fujaba__Success = false;

											fujaba__IterSysLineToParentOperand = new ArrayList(
													sysLine.getCoveredBy())
													.iterator();

											while (fujaba__IterSysLineToParentOperand
													.hasNext()) {
												try {
													_TmpObject = fujaba__IterSysLineToParentOperand
															.next();

													// ensure correct type and really bound of object parentOperand
													JavaSDM.ensure(_TmpObject instanceof InteractionOperand);
													parentOperand = (InteractionOperand) _TmpObject;
													// check isomorphic binding between objects parentOperand and operand 
													JavaSDM.ensure(!parentOperand
															.equals(operand));

													// bind object
													parentCombo = parentOperand
															.eContainer() instanceof CombinedFragment ? (CombinedFragment) parentOperand
															.eContainer()
															: null;

													// check object parentCombo is really bound
													JavaSDM.ensure(parentCombo != null);

													// check if contained via correct reference
													JavaSDM.ensure(parentCombo
															.getOperand()
															.contains(
																	parentOperand));

													// check isomorphic binding between objects parentCombo and combo 
													JavaSDM.ensure(!parentCombo
															.equals(combo));

													// check link coveredBy from line to parentCombo
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentCombo));

													// check link coveredBy from line to parentOperand
													JavaSDM.ensure(line
															.getCoveredBy()
															.contains(
																	parentOperand));

													// check link coveredBy from parentCombo to sysLine
													JavaSDM.ensure(parentCombo
															.getCovered()
															.contains(sysLine));

													// iterate to-many link fragment from parentOperand to messageReceive
													fujaba__Success = false;

													fujaba__IterParentOperandToMessageReceive = new ArrayList(
															parentOperand
																	.getFragment())
															.iterator();

													while (fujaba__IterParentOperandToMessageReceive
															.hasNext()) {
														try {
															_TmpObject = fujaba__IterParentOperandToMessageReceive
																	.next();

															// ensure correct type and really bound of object messageReceive
															JavaSDM.ensure(_TmpObject instanceof MessageOccurrenceSpecification);
															messageReceive = (MessageOccurrenceSpecification) _TmpObject;
															// check isomorphic binding between objects messageSend and messageReceive 
															JavaSDM.ensure(!messageSend
																	.equals(messageReceive));

															// story node 'test core match and DECs'
															try {
																fujaba__Success = false;

																// negative check for link message from messageReceive
																JavaSDM.ensure(messageReceive
																		.getMessage() == null);
																// negative check for link message from messageSend
																JavaSDM.ensure(messageSend
																		.getMessage() == null);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_enclosingInteraction_761715 = messageReceive
																			.getEnclosingInteraction();

																	// check object __DEC_messageReceive_enclosingInteraction_761715 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_enclosingInteraction_761715 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_enclosingInteraction_761715 and interaction 
																	JavaSDM.ensure(!__DEC_messageReceive_enclosingInteraction_761715
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_enclosingInteraction_507628 = messageSend
																			.getEnclosingInteraction();

																	// check object __DEC_messageSend_enclosingInteraction_507628 is really bound
																	JavaSDM.ensure(__DEC_messageSend_enclosingInteraction_507628 != null);

																	// check isomorphic binding between objects __DEC_messageSend_enclosingInteraction_507628 and interaction 
																	JavaSDM.ensure(!__DEC_messageSend_enclosingInteraction_507628
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_enclosingInteraction_84786 = operand
																			.getEnclosingInteraction();

																	// check object __DEC_operand_enclosingInteraction_84786 is really bound
																	JavaSDM.ensure(__DEC_operand_enclosingInteraction_84786 != null);

																	// check isomorphic binding between objects __DEC_operand_enclosingInteraction_84786 and interaction 
																	JavaSDM.ensure(!__DEC_operand_enclosingInteraction_84786
																			.equals(interaction));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_combo_fragment_865537 = combo
																			.getEnclosingOperand();

																	// check object __DEC_combo_fragment_865537 is really bound
																	JavaSDM.ensure(__DEC_combo_fragment_865537 != null);

																	// check isomorphic binding between objects __DEC_combo_fragment_865537 and operand 
																	JavaSDM.ensure(!__DEC_combo_fragment_865537
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_combo_fragment_865537 and parentOperand 
																	JavaSDM.ensure(!__DEC_combo_fragment_865537
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageReceive_fragment_180474 = messageReceive
																			.getEnclosingOperand();

																	// check object __DEC_messageReceive_fragment_180474 is really bound
																	JavaSDM.ensure(__DEC_messageReceive_fragment_180474 != null);

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_180474 and operand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_180474
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageReceive_fragment_180474 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageReceive_fragment_180474
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_messageSend_fragment_651771 = messageSend
																			.getEnclosingOperand();

																	// check object __DEC_messageSend_fragment_651771 is really bound
																	JavaSDM.ensure(__DEC_messageSend_fragment_651771 != null);

																	// check isomorphic binding between objects __DEC_messageSend_fragment_651771 and operand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_651771
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_messageSend_fragment_651771 and parentOperand 
																	JavaSDM.ensure(!__DEC_messageSend_fragment_651771
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_fragment_503566 = operand
																			.getEnclosingOperand();

																	// check object __DEC_operand_fragment_503566 is really bound
																	JavaSDM.ensure(__DEC_operand_fragment_503566 != null);

																	// check isomorphic binding between objects __DEC_operand_fragment_503566 and operand 
																	JavaSDM.ensure(!__DEC_operand_fragment_503566
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_operand_fragment_503566 and parentOperand 
																	JavaSDM.ensure(!__DEC_operand_fragment_503566
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link packagedElement from guard
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				guard,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// negative check for link packagedElement from spec
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				spec,
																				ModalSequenceDiagram.Package.class,
																				"packagedElement")
																		.size() == 0);
																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_spec_specification_667793 = spec
																			.eContainer() instanceof Constraint ? (Constraint) spec
																			.eContainer()
																			: null;

																	// check object __DEC_spec_specification_667793 is really bound
																	JavaSDM.ensure(__DEC_spec_specification_667793 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(spec
																			.equals(__DEC_spec_specification_667793
																					.getSpecification()));

																	// check isomorphic binding between objects __DEC_spec_specification_667793 and guard 
																	JavaSDM.ensure(!__DEC_spec_specification_667793
																			.equals(guard));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_guard_guard_499656 = guard
																			.eContainer() instanceof InteractionOperand ? (InteractionOperand) guard
																			.eContainer()
																			: null;

																	// check object __DEC_guard_guard_499656 is really bound
																	JavaSDM.ensure(__DEC_guard_guard_499656 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(guard
																			.equals(__DEC_guard_guard_499656
																					.getGuard()));

																	// check isomorphic binding between objects __DEC_guard_guard_499656 and operand 
																	JavaSDM.ensure(!__DEC_guard_guard_499656
																			.equals(operand));

																	// check isomorphic binding between objects __DEC_guard_guard_499656 and parentOperand 
																	JavaSDM.ensure(!__DEC_guard_guard_499656
																			.equals(parentOperand));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// check negative bindings
																try {
																	fujaba__Success = false;

																	// bind object
																	__DEC_operand_operand_83997 = operand
																			.eContainer() instanceof CombinedFragment ? (CombinedFragment) operand
																			.eContainer()
																			: null;

																	// check object __DEC_operand_operand_83997 is really bound
																	JavaSDM.ensure(__DEC_operand_operand_83997 != null);

																	// check if contained via correct reference
																	JavaSDM.ensure(__DEC_operand_operand_83997
																			.getOperand()
																			.contains(
																					operand));

																	// check isomorphic binding between objects __DEC_operand_operand_83997 and combo 
																	JavaSDM.ensure(!__DEC_operand_operand_83997
																			.equals(combo));

																	// check isomorphic binding between objects __DEC_operand_operand_83997 and parentCombo 
																	JavaSDM.ensure(!__DEC_operand_operand_83997
																			.equals(parentCombo));

																	fujaba__Success = true;
																} catch (JavaSDMException fujaba__InternalException) {
																	fujaba__Success = false;
																}

																fujaba__Success = !(fujaba__Success);

																JavaSDM.ensure(fujaba__Success);

																// negative check for link receiveEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link receiveEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"receiveEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageReceive
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageReceive,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// negative check for link sendEvent from messageSend
																JavaSDM.ensure(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				messageSend,
																				Message.class,
																				"sendEvent")
																		.size() == 0);
																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check link fragment from operand to operand
																JavaSDM.ensure(!(operand
																		.equals(operand
																				.getEnclosingOperand())));

																// check object _edge_specification is really bound
																JavaSDM.ensure(_edge_specification != null);
																// check object combo is really bound
																JavaSDM.ensure(combo != null);
																// check object guard is really bound
																JavaSDM.ensure(guard != null);
																// check object interaction is really bound
																JavaSDM.ensure(interaction != null);
																// check object line is really bound
																JavaSDM.ensure(line != null);
																// check object messageReceive is really bound
																JavaSDM.ensure(messageReceive != null);
																// check object messageSend is really bound
																JavaSDM.ensure(messageSend != null);
																// check object operand is really bound
																JavaSDM.ensure(operand != null);
																// check object parentCombo is really bound
																JavaSDM.ensure(parentCombo != null);
																// check object parentOperand is really bound
																JavaSDM.ensure(parentOperand != null);
																// check object spec is really bound
																JavaSDM.ensure(spec != null);
																// check object sysLine is really bound
																JavaSDM.ensure(sysLine != null);
																// check isomorphic binding between objects parentCombo and combo 
																JavaSDM.ensure(!parentCombo
																		.equals(combo));

																// check isomorphic binding between objects sysLine and line 
																JavaSDM.ensure(!sysLine
																		.equals(line));

																// check isomorphic binding between objects messageSend and messageReceive 
																JavaSDM.ensure(!messageSend
																		.equals(messageReceive));

																// check isomorphic binding between objects parentOperand and operand 
																JavaSDM.ensure(!parentOperand
																		.equals(operand));

																// check link fragment from combo to interaction
																JavaSDM.ensure(interaction
																		.equals(combo
																				.getEnclosingInteraction()));

																// check link fragment from messageReceive to parentOperand
																JavaSDM.ensure(parentOperand
																		.equals(messageReceive
																				.getEnclosingOperand()));

																// check link fragment from messageReceive to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageReceive
																				.getEnclosingInteraction())));

																// check link fragment from messageSend to interaction
																JavaSDM.ensure(!(interaction
																		.equals(messageSend
																				.getEnclosingInteraction())));

																// check link fragment from operand to interaction
																JavaSDM.ensure(!(interaction
																		.equals(operand
																				.getEnclosingInteraction())));

																// check link fragment from combo to operand
																JavaSDM.ensure(!(operand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageReceive to operand
																JavaSDM.ensure(!(operand
																		.equals(messageReceive
																				.getEnclosingOperand())));

																// check link fragment from messageSend to operand
																JavaSDM.ensure(!(operand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link fragment from combo to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(combo
																				.getEnclosingOperand())));

																// check link fragment from messageSend to parentOperand
																JavaSDM.ensure(!(parentOperand
																		.equals(messageSend
																				.getEnclosingOperand())));

																// check link guard from operand to guard
																JavaSDM.ensure(guard
																		.equals(operand
																				.getGuard()));

																// check link guard from parentOperand to guard
																JavaSDM.ensure(!(guard
																		.equals(parentOperand
																				.getGuard())));

																// check link lifeline from line to interaction
																JavaSDM.ensure(interaction
																		.equals(line
																				.getInteraction()));

																// check link operand from parentOperand to parentCombo
																JavaSDM.ensure(parentCombo
																		.equals(parentOperand
																				.eContainer()));

																// check link operand from operand to combo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(combo)));

																// check link operand from operand to parentCombo
																JavaSDM.ensure(!(org.moflon.util.eMoflonEMFUtil
																		.getOppositeReference(
																				operand,
																				CombinedFragment.class,
																				"$eContainer")
																		.contains(parentCombo)));

																// check link specification from spec to guard
																JavaSDM.ensure(guard
																		.equals(spec
																				.eContainer()));

																// check link src from _edge_specification to guard
																JavaSDM.ensure(guard
																		.equals(_edge_specification
																				.getSrc()));

																// check link trg from _edge_specification to spec
																JavaSDM.ensure(spec
																		.equals(_edge_specification
																				.getTrg()));

																// check link coveredBy from line to operand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				operand));

																// check link coveredBy from line to parentCombo
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentCombo));

																// check link coveredBy from line to parentOperand
																JavaSDM.ensure(line
																		.getCoveredBy()
																		.contains(
																				parentOperand));

																// check link coveredBy from combo to sysLine
																JavaSDM.ensure(combo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from messageSend to sysLine
																JavaSDM.ensure(messageSend
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from operand to sysLine
																JavaSDM.ensure(operand
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentCombo to sysLine
																JavaSDM.ensure(parentCombo
																		.getCovered()
																		.contains(
																				sysLine));

																// check link coveredBy from parentOperand to sysLine
																JavaSDM.ensure(parentOperand
																		.getCovered()
																		.contains(
																				sysLine));

																// create object match
																match = TGGRuntimeFactory.eINSTANCE
																		.createMatch();

																// assign attribute match
																match.setRuleName(__eClass
																		.getName());
																// statement node 'bookkeeping with generic isAppropriate method'
																fujaba__Success = this
																		.isAppropriate_BWD(
																				match,
																				sysLine,
																				messageSend,
																				combo,
																				operand,
																				parentOperand,
																				parentCombo,
																				messageReceive,
																				line,
																				interaction,
																				guard,
																				spec);
																if (fujaba__Success) {
																	// statement node 'Ensure that the correct types of elements are matched'
																	fujaba__Success = this
																			.checkTypes_BWD(match);
																	if (fujaba__Success) {
																		// story node 'Add match to rule result'
																		try {
																			fujaba__Success = false;

																			// check object __performOperation is really bound
																			JavaSDM.ensure(__performOperation != null);
																			// check object __result is really bound
																			JavaSDM.ensure(__result != null);
																			// check object match is really bound
																			JavaSDM.ensure(match != null);

																			// create link
																			org.moflon.util.eMoflonEMFUtil
																					.addOppositeReference(
																							match,
																							__performOperation,
																							"isApplicableOperation");

																			// create link
																			__result.getContents()
																					.add(match);

																			fujaba__Success = true;
																		} catch (JavaSDMException fujaba__InternalException) {
																			fujaba__Success = false;
																		}

																	} else {

																	}

																} else {

																}
																fujaba__Success = true;
															} catch (JavaSDMException fujaba__InternalException) {
																fujaba__Success = false;
															}

															fujaba__Success = true;
														} catch (JavaSDMException fujaba__InternalException) {
															fujaba__Success = false;
														}
													}
													JavaSDM.ensure(fujaba__Success);

													fujaba__Success = true;
												} catch (JavaSDMException fujaba__InternalException) {
													fujaba__Success = false;
												}
											}
											JavaSDM.ensure(fujaba__Success);

											fujaba__Success = true;
										} catch (JavaSDMException fujaba__InternalException) {
											fujaba__Success = false;
										}
									}
									JavaSDM.ensure(fujaba__Success);

									fujaba__Success = true;
								} catch (JavaSDMException fujaba__InternalException) {
									fujaba__Success = false;
								}
							}
							JavaSDM.ensure(fujaba__Success);

							fujaba__Success = true;
						} catch (JavaSDMException fujaba__InternalException) {
							fujaba__Success = false;
						}
					}
					JavaSDM.ensure(fujaba__Success);

					fujaba__Success = true;
				} catch (JavaSDMException fujaba__InternalException) {
					fujaba__Success = false;
				}
			}
			JavaSDM.ensure(fujaba__Success);

			fujaba__Success = true;
		} catch (JavaSDMException fujaba__InternalException) {
			fujaba__Success = false;
		}

		return __result;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_FWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public RuleResult checkAttributes_BWD(TripleMatch tripleMatch) {

		// [user code injected with eMoflon]

		// TODO: implement this method here but do not remove the injection marker 
		throw new UnsupportedOperationException();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eInvoke(int operationID, EList<?> arguments)
			throws InvocationTargetException {
		switch (operationID) {
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isAppropriate_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_FWD__ISAPPLICABLEMATCH:
			return perform_FWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_FWD__MATCH:
			return isApplicable_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			registerObjectsToMatch_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_FWD__MATCH_PACKAGEDECLARATION_ACTOR_ACTOR_NAMEDFLOW_USECASE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isAppropriate_solveCsp_FWD((Match) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(NamedFlow) arguments.get(4), (UseCase) arguments.get(5),
					(NormalStep) arguments.get(6),
					(AlternativeFlowAlternative) arguments.get(7),
					(AlternativeFlow) arguments.get(8));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_FWD__CSP:
			return isAppropriate_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_FWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_LIFELINE_INTERACTION_USECASE_USECASETOINTERACTION_ACTORTOLIFELINE_NORMALSTEP_ALTERNATIVEFLOWALTERNATIVE_ALTERNATIVEFLOW:
			return isApplicable_solveCsp_FWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(InteractionOperand) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(NamedFlow) arguments.get(8),
					(FlowToInteractionFragment) arguments.get(9),
					(Lifeline) arguments.get(10),
					(Interaction) arguments.get(11),
					(UseCase) arguments.get(12),
					(UseCaseToInteraction) arguments.get(13),
					(ActorToLifeline) arguments.get(14),
					(NormalStep) arguments.get(15),
					(AlternativeFlowAlternative) arguments.get(16),
					(AlternativeFlow) arguments.get(17));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_FWD__CSP:
			return isApplicable_checkCsp_FWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_FWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_FWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_FWD__MATCH:
			return checkTypes_FWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isAppropriate_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___PERFORM_BWD__ISAPPLICABLEMATCH:
			return perform_BWD((IsApplicableMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_BWD__MATCH:
			return isApplicable_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_TO_MATCH_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			registerObjectsToMatch_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_SOLVE_CSP_BWD__MATCH_LIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isAppropriate_solveCsp_BWD((Match) arguments.get(0),
					(Lifeline) arguments.get(1),
					(MessageOccurrenceSpecification) arguments.get(2),
					(CombinedFragment) arguments.get(3),
					(InteractionOperand) arguments.get(4),
					(InteractionOperand) arguments.get(5),
					(CombinedFragment) arguments.get(6),
					(MessageOccurrenceSpecification) arguments.get(7),
					(Lifeline) arguments.get(8),
					(Interaction) arguments.get(9),
					(InteractionConstraint) arguments.get(10),
					(LiteralString) arguments.get(11));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_CHECK_CSP_BWD__CSP:
			return isAppropriate_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_SOLVE_CSP_BWD__ISAPPLICABLEMATCH_PACKAGEDECLARATION_ACTOR_ACTOR_LIFELINE_ACTORTOLIFELINE_MESSAGEOCCURRENCESPECIFICATION_COMBINEDFRAGMENT_INTERACTIONOPERAND_INTERACTIONOPERAND_COMBINEDFRAGMENT_NAMEDFLOW_FLOWTOINTERACTIONFRAGMENT_MESSAGEOCCURRENCESPECIFICATION_LIFELINE_INTERACTION_USECASE_USECASETOINTERACTION_ACTORTOLIFELINE_INTERACTIONCONSTRAINT_LITERALSTRING:
			return isApplicable_solveCsp_BWD(
					(IsApplicableMatch) arguments.get(0),
					(PackageDeclaration) arguments.get(1),
					(Actor) arguments.get(2), (Actor) arguments.get(3),
					(Lifeline) arguments.get(4),
					(ActorToLifeline) arguments.get(5),
					(MessageOccurrenceSpecification) arguments.get(6),
					(CombinedFragment) arguments.get(7),
					(InteractionOperand) arguments.get(8),
					(InteractionOperand) arguments.get(9),
					(CombinedFragment) arguments.get(10),
					(NamedFlow) arguments.get(11),
					(FlowToInteractionFragment) arguments.get(12),
					(MessageOccurrenceSpecification) arguments.get(13),
					(Lifeline) arguments.get(14),
					(Interaction) arguments.get(15),
					(UseCase) arguments.get(16),
					(UseCaseToInteraction) arguments.get(17),
					(ActorToLifeline) arguments.get(18),
					(InteractionConstraint) arguments.get(19),
					(LiteralString) arguments.get(20));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPLICABLE_CHECK_CSP_BWD__CSP:
			return isApplicable_checkCsp_BWD((CSP) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___REGISTER_OBJECTS_BWD__PERFORMRULERESULT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT_EOBJECT:
			registerObjects_BWD((PerformRuleResult) arguments.get(0),
					(EObject) arguments.get(1), (EObject) arguments.get(2),
					(EObject) arguments.get(3), (EObject) arguments.get(4),
					(EObject) arguments.get(5), (EObject) arguments.get(6),
					(EObject) arguments.get(7), (EObject) arguments.get(8),
					(EObject) arguments.get(9), (EObject) arguments.get(10),
					(EObject) arguments.get(11), (EObject) arguments.get(12),
					(EObject) arguments.get(13), (EObject) arguments.get(14),
					(EObject) arguments.get(15), (EObject) arguments.get(16),
					(EObject) arguments.get(17), (EObject) arguments.get(18),
					(EObject) arguments.get(19), (EObject) arguments.get(20),
					(EObject) arguments.get(21), (EObject) arguments.get(22),
					(EObject) arguments.get(23), (EObject) arguments.get(24),
					(EObject) arguments.get(25), (EObject) arguments.get(26));
			return null;
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_TYPES_BWD__MATCH:
			return checkTypes_BWD((Match) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_461__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_461((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_462__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_462((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_463__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_463((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_464__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_464((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_465__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_465((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_466__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_466((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_467__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_467((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_468__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_468((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_469__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_469((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_470__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_470((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_471__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_471((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_472__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_472((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_473__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_473((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_474__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_474((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_475__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_475((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_476__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_476((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_477__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_477((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_478__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_478((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_107__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_107((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_108__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_108((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_109__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_109((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_FWD_EMOFLON_EDGE_110__EMOFLONEDGE:
			return isAppropriate_FWD_EMoflonEdge_110((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_479__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_479((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_480__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_480((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_481__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_481((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___IS_APPROPRIATE_BWD_EMOFLON_EDGE_482__EMOFLONEDGE:
			return isAppropriate_BWD_EMoflonEdge_482((EMoflonEdge) arguments
					.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_FWD__TRIPLEMATCH:
			return checkAttributes_FWD((TripleMatch) arguments.get(0));
		case RulesPackage.ALT_USER_STEP_NF_TO_COMBO_RULE___CHECK_ATTRIBUTES_BWD__TRIPLEMATCH:
			return checkAttributes_BWD((TripleMatch) arguments.get(0));
		}
		return super.eInvoke(operationID, arguments);
	}
	// <-- [user code injected with eMoflon]

	// [user code injected with eMoflon] -->
} //AltUserStepNFToComboRuleImpl
